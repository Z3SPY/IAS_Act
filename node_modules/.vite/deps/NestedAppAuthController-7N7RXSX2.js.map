{
  "version": 3,
  "sources": ["../../@azure/msal-browser/src/naa/BridgeError.ts", "../../@azure/msal-browser/src/naa/mapping/NestedAppAuthAdapter.ts", "../../@azure/msal-browser/src/error/NestedAppAuthError.ts", "../../@azure/msal-browser/src/controllers/NestedAppAuthController.ts"],
  "sourcesContent": ["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BridgeStatusCode } from \"./BridgeStatusCode\";\n\nexport type BridgeError = {\n    status: BridgeStatusCode;\n    code?: string; // auth_flow_last_error such as invalid_grant\n    subError?: string; // server_suberror_code such as consent_required\n    description?: string;\n    properties?: object; // additional telemetry info\n};\n\nexport function isBridgeError(error: unknown): error is BridgeError {\n    return (error as BridgeError).status !== undefined;\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TokenRequest } from \"../TokenRequest\";\nimport { AccountInfo as NaaAccountInfo } from \"../AccountInfo\";\nimport { RedirectRequest } from \"../../request/RedirectRequest\";\nimport { PopupRequest } from \"../../request/PopupRequest\";\nimport {\n    AccountInfo as MsalAccountInfo,\n    AuthError,\n    ClientAuthError,\n    ClientConfigurationError,\n    InteractionRequiredAuthError,\n    ServerError,\n    ICrypto,\n    Logger,\n    AuthToken,\n    TokenClaims,\n    ClientAuthErrorCodes,\n    AuthenticationScheme,\n    RequestParameterBuilder,\n    StringUtils,\n    createClientAuthError,\n    OIDC_DEFAULT_SCOPES,\n} from \"@azure/msal-common\";\nimport { isBridgeError } from \"../BridgeError\";\nimport { BridgeStatusCode } from \"../BridgeStatusCode\";\nimport { AuthenticationResult } from \"../../response/AuthenticationResult\";\nimport {} from \"../../error/BrowserAuthErrorCodes\";\nimport { AuthResult } from \"../AuthResult\";\nimport { SsoSilentRequest } from \"../../request/SsoSilentRequest\";\nimport { SilentRequest } from \"../../request/SilentRequest\";\n\nexport class NestedAppAuthAdapter {\n    protected crypto: ICrypto;\n    protected logger: Logger;\n    protected clientId: string;\n    protected clientCapabilities: string[];\n\n    constructor(\n        clientId: string,\n        clientCapabilities: string[],\n        crypto: ICrypto,\n        logger: Logger\n    ) {\n        this.clientId = clientId;\n        this.clientCapabilities = clientCapabilities;\n        this.crypto = crypto;\n        this.logger = logger;\n    }\n\n    public toNaaTokenRequest(\n        request:\n            | PopupRequest\n            | RedirectRequest\n            | SilentRequest\n            | SsoSilentRequest\n    ): TokenRequest {\n        let extraParams: Map<string, string>;\n        if (request.extraQueryParameters === undefined) {\n            extraParams = new Map<string, string>();\n        } else {\n            extraParams = new Map<string, string>(\n                Object.entries(request.extraQueryParameters)\n            );\n        }\n\n        const requestBuilder = new RequestParameterBuilder();\n        const claims = requestBuilder.addClientCapabilitiesToClaims(\n            request.claims,\n            this.clientCapabilities\n        );\n        const scopes = request.scopes || OIDC_DEFAULT_SCOPES;\n        const tokenRequest: TokenRequest = {\n            platformBrokerId: request.account?.homeAccountId,\n            clientId: this.clientId,\n            authority: request.authority,\n            scope: scopes.join(\" \"),\n            correlationId:\n                request.correlationId !== undefined\n                    ? request.correlationId\n                    : this.crypto.createNewGuid(),\n            claims: !StringUtils.isEmptyObj(claims) ? claims : undefined,\n            state: request.state,\n            authenticationScheme:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            extraParameters: extraParams,\n        };\n\n        return tokenRequest;\n    }\n\n    public fromNaaTokenResponse(\n        request: TokenRequest,\n        response: AuthResult,\n        reqTimestamp: number\n    ): AuthenticationResult {\n        if (!response.token.id_token || !response.token.access_token) {\n            throw createClientAuthError(ClientAuthErrorCodes.nullOrEmptyToken);\n        }\n\n        const expiresOn = new Date(\n            (reqTimestamp + (response.token.expires_in || 0)) * 1000\n        );\n        const idTokenClaims = AuthToken.extractTokenClaims(\n            response.token.id_token,\n            this.crypto.base64Decode\n        );\n        const account = this.fromNaaAccountInfo(\n            response.account,\n            idTokenClaims\n        );\n        const scopes = response.token.scope || request.scope;\n\n        const authenticationResult: AuthenticationResult = {\n            authority: response.token.authority || account.environment,\n            uniqueId: account.localAccountId,\n            tenantId: account.tenantId,\n            scopes: scopes.split(\" \"),\n            account,\n            idToken: response.token.id_token,\n            idTokenClaims,\n            accessToken: response.token.access_token,\n            fromCache: true,\n            expiresOn: expiresOn,\n            tokenType:\n                request.authenticationScheme || AuthenticationScheme.BEARER,\n            correlationId: request.correlationId,\n            extExpiresOn: expiresOn,\n            state: request.state,\n        };\n\n        return authenticationResult;\n    }\n\n    /*\n     *  export type AccountInfo = {\n     *     homeAccountId: string;\n     *     environment: string;\n     *     tenantId: string;\n     *     username: string;\n     *     localAccountId: string;\n     *     name?: string;\n     *     idToken?: string;\n     *     idTokenClaims?: TokenClaims & {\n     *         [key: string]:\n     *             | string\n     *             | number\n     *             | string[]\n     *             | object\n     *             | undefined\n     *             | unknown;\n     *     };\n     *     nativeAccountId?: string;\n     *     authorityType?: string;\n     * };\n     */\n    public fromNaaAccountInfo(\n        fromAccount: NaaAccountInfo,\n        idTokenClaims?: TokenClaims\n    ): MsalAccountInfo {\n        const effectiveIdTokenClaims =\n            idTokenClaims || (fromAccount.idTokenClaims as TokenClaims);\n\n        const localAccountId =\n            fromAccount.localAccountId ||\n            effectiveIdTokenClaims?.oid ||\n            effectiveIdTokenClaims?.sub ||\n            \"\";\n\n        const tenantId =\n            fromAccount.tenantId || effectiveIdTokenClaims?.tid || \"\";\n\n        const homeAccountId =\n            fromAccount.homeAccountId || `${localAccountId}.${tenantId}`;\n\n        const username =\n            fromAccount.username ||\n            effectiveIdTokenClaims?.preferred_username ||\n            \"\";\n\n        const name = fromAccount.name || effectiveIdTokenClaims?.name;\n\n        const account: MsalAccountInfo = {\n            homeAccountId,\n            environment: fromAccount.environment,\n            tenantId,\n            username,\n            localAccountId,\n            name,\n            idToken: fromAccount.idToken,\n            idTokenClaims: effectiveIdTokenClaims,\n        };\n\n        return account;\n    }\n\n    /**\n     *\n     * @param error BridgeError\n     * @returns AuthError, ClientAuthError, ClientConfigurationError, ServerError, InteractionRequiredError\n     */\n    public fromBridgeError(\n        error: unknown\n    ):\n        | AuthError\n        | ClientAuthError\n        | ClientConfigurationError\n        | ServerError\n        | InteractionRequiredAuthError {\n        if (isBridgeError(error)) {\n            switch (error.status) {\n                case BridgeStatusCode.UserCancel:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.userCanceled\n                    );\n                case BridgeStatusCode.NoNetwork:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noNetworkConnectivity\n                    );\n                case BridgeStatusCode.AccountUnavailable:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.noAccountFound\n                    );\n                case BridgeStatusCode.Disabled:\n                    return new ClientAuthError(\n                        ClientAuthErrorCodes.nestedAppAuthBridgeDisabled\n                    );\n                case BridgeStatusCode.NestedAppAuthUnavailable:\n                    return new ClientAuthError(\n                        error.code ||\n                            ClientAuthErrorCodes.nestedAppAuthBridgeDisabled,\n                        error.description\n                    );\n                case BridgeStatusCode.TransientError:\n                case BridgeStatusCode.PersistentError:\n                    return new ServerError(error.code, error.description);\n                case BridgeStatusCode.UserInteractionRequired:\n                    return new InteractionRequiredAuthError(\n                        error.code,\n                        error.description\n                    );\n                default:\n                    return new AuthError(error.code, error.description);\n            }\n        } else {\n            return new AuthError(\"unknown_error\", \"An unknown error occurred\");\n        }\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AuthError } from \"@azure/msal-common\";\n\n/**\n * NestedAppAuthErrorMessage class containing string constants used by error codes and messages.\n */\nexport const NestedAppAuthErrorMessage = {\n    unsupportedMethod: {\n        code: \"unsupported_method\",\n        desc: \"The PKCE code challenge and verifier could not be generated.\",\n    },\n};\n\nexport class NestedAppAuthError extends AuthError {\n    constructor(errorCode: string, errorMessage?: string) {\n        super(errorCode, errorMessage);\n\n        Object.setPrototypeOf(this, NestedAppAuthError.prototype);\n        this.name = \"NestedAppAuthError\";\n    }\n\n    public static createUnsupportedError(): NestedAppAuthError {\n        return new NestedAppAuthError(\n            NestedAppAuthErrorMessage.unsupportedMethod.code,\n            NestedAppAuthErrorMessage.unsupportedMethod.desc\n        );\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport {\n    CommonAuthorizationUrlRequest,\n    CommonSilentFlowRequest,\n    PerformanceCallbackFunction,\n    AccountInfo,\n    Logger,\n    ICrypto,\n    IPerformanceClient,\n    DEFAULT_CRYPTO_IMPLEMENTATION,\n    PerformanceEvents,\n    AccountFilter,\n    TimeUtils,\n} from \"@azure/msal-common\";\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { BrowserConfiguration } from \"../config/Configuration\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport {\n    ApiId,\n    WrapperSKU,\n    InteractionType,\n    DEFAULT_REQUEST,\n} from \"../utils/BrowserConstants\";\nimport { IController } from \"./IController\";\nimport { TeamsAppOperatingContext } from \"../operatingcontext/TeamsAppOperatingContext\";\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\nimport { CryptoOps } from \"../crypto/CryptoOps\";\nimport { NestedAppAuthAdapter } from \"../naa/mapping/NestedAppAuthAdapter\";\nimport { NestedAppAuthError } from \"../error/NestedAppAuthError\";\nimport { EventHandler } from \"../event/EventHandler\";\nimport { EventType } from \"../event/EventType\";\nimport { EventCallbackFunction, EventError } from \"../event/EventMessage\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { BrowserCacheManager } from \"../cache/BrowserCacheManager\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\n\nexport class NestedAppAuthController implements IController {\n    // OperatingContext\n    protected readonly operatingContext: TeamsAppOperatingContext;\n\n    // BridgeProxy\n    protected readonly bridgeProxy: IBridgeProxy;\n\n    // Crypto interface implementation\n    protected readonly browserCrypto: ICrypto;\n\n    // Input configuration by developer/user\n    protected readonly config: BrowserConfiguration;\n\n    // Logger\n    protected logger: Logger;\n\n    // Performance telemetry client\n    protected readonly performanceClient: IPerformanceClient;\n\n    // EventHandler\n    protected readonly eventHandler: EventHandler;\n\n    // NestedAppAuthAdapter\n    protected readonly nestedAppAuthAdapter: NestedAppAuthAdapter;\n\n    constructor(operatingContext: TeamsAppOperatingContext) {\n        this.operatingContext = operatingContext;\n        const proxy = this.operatingContext.getBridgeProxy();\n        if (proxy !== undefined) {\n            this.bridgeProxy = proxy;\n        } else {\n            throw new Error(\"unexpected: bridgeProxy is undefined\");\n        }\n\n        // Set the configuration.\n        this.config = operatingContext.getConfig();\n\n        // Initialize logger\n        this.logger = this.operatingContext.getLogger();\n        // Initialize performance client\n        this.performanceClient = this.config.telemetry.client;\n\n        // Initialize the crypto class.\n        this.browserCrypto = operatingContext.isBrowserEnvironment()\n            ? new CryptoOps(this.logger, this.performanceClient)\n            : DEFAULT_CRYPTO_IMPLEMENTATION;\n\n        this.eventHandler = new EventHandler(this.logger, this.browserCrypto);\n\n        this.nestedAppAuthAdapter = new NestedAppAuthAdapter(\n            this.config.auth.clientId,\n            this.config.auth.clientCapabilities,\n            this.browserCrypto,\n            this.logger\n        );\n    }\n    getBrowserStorage(): BrowserCacheManager {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    getEventHandler(): EventHandler {\n        return this.eventHandler;\n    }\n\n    static async createController(\n        operatingContext: TeamsAppOperatingContext\n    ): Promise<IController> {\n        const controller = new NestedAppAuthController(operatingContext);\n        return Promise.resolve(controller);\n    }\n\n    initialize(): Promise<void> {\n        // do nothing not required by this controller\n        return Promise.resolve();\n    }\n\n    private ensureValidRequest<\n        T extends\n            | SsoSilentRequest\n            | SilentRequest\n            | PopupRequest\n            | RedirectRequest\n    >(request: T): T {\n        if (request?.correlationId) {\n            return request;\n        }\n        return {\n            ...request,\n            correlationId: this.browserCrypto.createNewGuid(),\n        };\n    }\n\n    private async acquireTokenInteractive(\n        request: PopupRequest | RedirectRequest\n    ): Promise<AuthenticationResult> {\n        const validRequest = this.ensureValidRequest(request);\n\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Popup,\n            validRequest\n        );\n\n        const atPopupMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.AcquireTokenPopup,\n            validRequest.correlationId\n        );\n\n        atPopupMeasurement?.add({ nestedAppAuthRequest: true });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenInteractive(\n                naaRequest\n            );\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response,\n                    reqTimestamp\n                );\n\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Popup,\n                result\n            );\n\n            atPopupMeasurement.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n\n            atPopupMeasurement.end({\n                success: true,\n                requestId: result.requestId,\n            });\n\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Popup,\n                null,\n                e as EventError\n            );\n\n            atPopupMeasurement.end(\n                {\n                    success: false,\n                },\n                e\n            );\n\n            throw error;\n        }\n    }\n\n    private async acquireTokenSilentInternal(\n        request: SilentRequest\n    ): Promise<AuthenticationResult> {\n        const validRequest = this.ensureValidRequest(request);\n        this.eventHandler.emitEvent(\n            EventType.ACQUIRE_TOKEN_START,\n            InteractionType.Silent,\n            validRequest\n        );\n\n        const ssoSilentMeasurement = this.performanceClient.startMeasurement(\n            PerformanceEvents.SsoSilent,\n            validRequest.correlationId\n        );\n\n        ssoSilentMeasurement?.increment({\n            visibilityChangeCount: 0,\n        });\n\n        ssoSilentMeasurement?.add({\n            nestedAppAuthRequest: true,\n        });\n\n        try {\n            const naaRequest =\n                this.nestedAppAuthAdapter.toNaaTokenRequest(validRequest);\n            const reqTimestamp = TimeUtils.nowSeconds();\n            const response = await this.bridgeProxy.getTokenSilent(naaRequest);\n\n            const result: AuthenticationResult =\n                this.nestedAppAuthAdapter.fromNaaTokenResponse(\n                    naaRequest,\n                    response,\n                    reqTimestamp\n                );\n\n            this.operatingContext.setActiveAccount(result.account);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_SUCCESS,\n                InteractionType.Silent,\n                result\n            );\n            ssoSilentMeasurement?.add({\n                accessTokenSize: result.accessToken.length,\n                idTokenSize: result.idToken.length,\n            });\n            ssoSilentMeasurement?.end({\n                success: true,\n                requestId: result.requestId,\n            });\n            return result;\n        } catch (e) {\n            const error = this.nestedAppAuthAdapter.fromBridgeError(e);\n            this.eventHandler.emitEvent(\n                EventType.ACQUIRE_TOKEN_FAILURE,\n                InteractionType.Silent,\n                null,\n                e as EventError\n            );\n            ssoSilentMeasurement?.end(\n                {\n                    success: false,\n                },\n                e\n            );\n            throw error;\n        }\n    }\n\n    async acquireTokenPopup(\n        request: PopupRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenInteractive(request);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    async acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(silentRequest);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenNative(\n        request: // eslint-disable-line @typescript-eslint/no-unused-vars\n        | SilentRequest\n            | Partial<\n                  Omit<\n                      CommonAuthorizationUrlRequest,\n                      | \"requestedClaimsHash\"\n                      | \"responseMode\"\n                      | \"codeChallenge\"\n                      | \"codeChallengeMethod\"\n                      | \"nativeBroker\"\n                  >\n              >\n            | PopupRequest,\n        apiId: ApiId, // eslint-disable-line @typescript-eslint/no-unused-vars\n        accountId?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    acquireTokenByRefreshToken(\n        commonRequest: CommonSilentFlowRequest, // eslint-disable-line @typescript-eslint/no-unused-vars\n        silentRequest: SilentRequest // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.eventHandler.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        this.eventHandler.removeEventCallback(callbackId);\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    removePerformanceCallback(callbackId: string): boolean {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    enableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    disableAccountStorageEvents(): void {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        throw NestedAppAuthError.createUnsupportedError();\n        // TODO: Look at standard implementation\n    }\n\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.homeAccountId === homeAccountId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    getAccountByLocalId(localId: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.localAccountId === localId) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n\n    getAccountByUsername(userName: string): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            if (currentAccount.username === userName) {\n                return this.nestedAppAuthAdapter.fromNaaAccountInfo(\n                    currentAccount\n                );\n            } else {\n                return null;\n            }\n        } else {\n            return null;\n        }\n    }\n    getAllAccounts(): AccountInfo[] {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return [\n                this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount),\n            ];\n        } else {\n            return [];\n        }\n    }\n    handleRedirectPromise(\n        hash?: string | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult | null> {\n        return Promise.resolve(null);\n    }\n    loginPopup(\n        request?: PopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenInteractive(request || DEFAULT_REQUEST);\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    logout(logoutRequest?: EndSessionRequest | undefined): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutRedirect(\n        logoutRequest?: EndSessionRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    logoutPopup(\n        logoutRequest?: EndSessionPopupRequest | undefined // eslint-disable-line @typescript-eslint/no-unused-vars\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n    ssoSilent(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request: Partial<\n            Omit<\n                CommonAuthorizationUrlRequest,\n                | \"requestedClaimsHash\"\n                | \"responseMode\"\n                | \"codeChallenge\"\n                | \"codeChallengeMethod\"\n                | \"nativeBroker\"\n            >\n        >\n    ): Promise<AuthenticationResult> {\n        return this.acquireTokenSilentInternal(request as SilentRequest);\n    }\n    getTokenCache(): ITokenCache {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    public getLogger(): Logger {\n        return this.logger;\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.logger = logger;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setActiveAccount(account: AccountInfo | null): void {\n        /*\n         * StandardController uses this to allow the developer to set the active account\n         * in the nested app auth scenario the active account is controlled by the app hosting the nested app\n         */\n        this.logger.warning(\"nestedAppAuth does not support setActiveAccount\");\n        return;\n    }\n    getActiveAccount(): AccountInfo | null {\n        const currentAccount = this.operatingContext.getActiveAccount();\n        if (currentAccount !== undefined) {\n            return this.nestedAppAuthAdapter.fromNaaAccountInfo(currentAccount);\n        } else {\n            return null;\n        }\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        /*\n         * Standard controller uses this to set the sku and version of the wrapper library in the storage\n         * we do nothing here\n         */\n        return;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.logger.warning(\n            \"setNavigationClient is not supported in nested app auth\"\n        );\n    }\n    getConfiguration(): BrowserConfiguration {\n        return this.config;\n    }\n    isBrowserEnv(): boolean {\n        return this.operatingContext.isBrowserEnvironment();\n    }\n    getBrowserCrypto(): ICrypto {\n        return this.browserCrypto;\n    }\n    getPerformanceClient(): IPerformanceClient {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    getRedirectResponse(): Map<string, Promise<AuthenticationResult | null>> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    async hydrateCache(\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        result: AuthenticationResult,\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        throw NestedAppAuthError.createUnsupportedError();\n    }\n}\n"],
  "mappings": "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",
  "names": []
}
