{
  "version": 3,
  "sources": ["../../events/events.js", "../../tedious/src/tracking-buffer/writable-tracking-buffer.ts", "../../emitter-component/index.js", "../../stream/index.js", "../../tedious/src/token/token.ts", "../../tedious/src/bulk-load.ts", "browser-external:crypto", "browser-external:os", "browser-external:tls", "browser-external:net", "browser-external:dns", "browser-external:constants", "../../@azure/identity/src/plugins/consumer.browser.ts", "../../@azure/logger/src/log-browser.mts", "../../@azure/logger/src/debug.ts", "../../@azure/logger/src/index.ts", "../../@azure/identity/src/util/logging.ts", "../../@azure/identity/src/errors.ts", "../../@azure/identity/src/constants.ts", "../../@azure/core-tracing/src/tracingContext.ts", "../../@azure/core-tracing/src/state-browser.mts", "../../@azure/core-tracing/src/instrumenter.ts", "../../@azure/core-tracing/src/tracingClient.ts", "../../@azure/core-tracing/src/index.ts", "../../@azure/identity/src/util/tracing.ts", "../../@azure/identity/src/credentials/chainedTokenCredential.ts", "../../@azure/identity/src/credentials/defaultAzureCredential.browser.ts", "../../@azure/msal-browser/src/operatingcontext/BaseOperatingContext.ts", "../../@azure/msal-browser/src/naa/BridgeProxy.ts", "../../@azure/msal-browser/src/operatingcontext/TeamsAppOperatingContext.ts", "../../@azure/msal-browser/src/operatingcontext/StandardOperatingContext.ts", "../../@azure/msal-browser/src/controllers/ControllerFactory.ts", "../../@azure/msal-browser/src/app/PublicClientApplication.ts", "../../@azure/msal-browser/src/operatingcontext/UnknownOperatingContext.ts", "../../@azure/msal-browser/dist/index.mjs", "../../@azure/abort-controller/src/AbortSignal.ts", "../../@azure/abort-controller/src/AbortController.ts", "../../@azure/abort-controller/src/index.ts", "../../@azure/core-util/node_modules/@azure/abort-controller/src/AbortError.ts", "../../@azure/core-util/node_modules/@azure/abort-controller/src/index.ts", "../../@azure/core-util/src/createAbortablePromise.ts", "../../@azure/core-util/src/delay.ts", "../../@azure/core-util/src/aborterUtils.ts", "../../@azure/core-util/src/random.ts", "../../@azure/core-util/src/object.ts", "../../@azure/core-util/src/error.ts", "../../@azure/core-util/src/bytesEncoding-browser.mts", "../../@azure/core-util/src/sha256-browser.mts", "../../@azure/core-util/src/typeGuards.ts", "../../@azure/core-util/src/uuidUtils.common.ts", "../../@azure/core-util/src/uuidUtils-browser.mts", "../../@azure/core-util/src/checkEnvironment.ts", "../../@azure/core-util/src/index.ts", "../../@azure/identity/src/msal/utils.browser.ts", "../../@azure/core-rest-pipeline/src/pipeline.ts", "../../@azure/core-rest-pipeline/src/log.ts", "../../@azure/core-rest-pipeline/src/util/sanitizer.ts", "../../@azure/core-rest-pipeline/src/policies/logPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/redirectPolicy.ts", "../../@azure/core-rest-pipeline/src/util/userAgentPlatform-browser.mts", "../../@azure/core-rest-pipeline/src/constants.ts", "../../@azure/core-rest-pipeline/src/util/userAgent.ts", "../../@azure/core-rest-pipeline/src/policies/userAgentPolicy.ts", "../../@azure/core-rest-pipeline/src/util/typeGuards.ts", "../../@azure/core-rest-pipeline/src/util/file.ts", "../../@azure/core-rest-pipeline/src/util/concat-browser.mts", "../../@azure/core-rest-pipeline/src/policies/multipartPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/decompressResponsePolicy-browser.mts", "../../@azure/core-rest-pipeline/node_modules/@azure/abort-controller/src/AbortError.ts", "../../@azure/core-rest-pipeline/node_modules/@azure/abort-controller/src/index.ts", "../../@azure/core-rest-pipeline/src/util/helpers.ts", "../../@azure/core-rest-pipeline/src/retryStrategies/throttlingRetryStrategy.ts", "../../@azure/core-rest-pipeline/src/retryStrategies/exponentialRetryStrategy.ts", "../../@azure/core-rest-pipeline/src/policies/retryPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/defaultRetryPolicy.ts", "../../@azure/core-rest-pipeline/src/httpHeaders.ts", "../../@azure/core-rest-pipeline/src/policies/formDataPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/proxyPolicy-browser.mts", "../../@azure/core-rest-pipeline/src/policies/setClientRequestIdPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/tlsPolicy.ts", "../../@azure/core-rest-pipeline/src/util/inspect-browser.mts", "../../@azure/core-rest-pipeline/src/restError.ts", "../../@azure/core-rest-pipeline/src/policies/tracingPolicy.ts", "../../@azure/core-rest-pipeline/src/createPipelineFromOptions.ts", "../../@azure/core-rest-pipeline/src/fetchHttpClient.ts", "../../@azure/core-rest-pipeline/src/defaultHttpClient-browser.mts", "../../@azure/core-rest-pipeline/src/pipelineRequest.ts", "../../@azure/core-rest-pipeline/src/policies/exponentialRetryPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/systemErrorRetryPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/throttlingRetryPolicy.ts", "../../@azure/core-rest-pipeline/src/util/tokenCycler.ts", "../../@azure/core-rest-pipeline/src/policies/bearerTokenAuthenticationPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/ndJsonPolicy.ts", "../../@azure/core-rest-pipeline/src/policies/auxiliaryAuthenticationHeaderPolicy.ts", "../../@azure/core-rest-pipeline/src/index.ts", "../../@azure/identity/src/util/processMultiTenantRequest.browser.ts", "../../@azure/identity/src/util/tenantIdUtils.ts", "../../@azure/core-client/src/base64-browser.mts", "../../@azure/core-client/src/interfaces.ts", "../../@azure/core-client/src/utils.ts", "../../@azure/core-client/src/serializer.ts", "../../@azure/core-client/src/state-browser.mts", "../../@azure/core-client/src/operationHelpers.ts", "../../@azure/core-client/src/deserializationPolicy.ts", "../../@azure/core-client/src/interfaceHelpers.ts", "../../@azure/core-client/src/serializationPolicy.ts", "../../@azure/core-client/src/pipeline.ts", "../../@azure/core-client/src/httpClientCache.ts", "../../@azure/core-client/src/urlHelpers.ts", "../../@azure/core-client/src/log.ts", "../../@azure/core-client/src/serviceClient.ts", "../../@azure/core-client/src/authorizeRequestOnClaimChallenge.ts", "../../@azure/core-client/src/authorizeRequestOnTenantChallenge.ts", "../../@azure/core-client/src/index.ts", "../../@azure/identity/src/util/identityTokenEndpoint.ts", "../../@azure/identity/src/credentials/managedIdentityCredential/constants.ts", "../../@azure/identity/src/credentials/managedIdentityCredential/utils.ts", "../../@azure/identity/src/client/identityClient.ts", "../../@azure/identity/src/credentials/clientSecretCredential.browser.ts", "../../@azure/identity/src/credentials/environmentCredential.browser.ts", "../../@azure/identity/src/credentials/clientCertificateCredential.browser.ts", "../../@azure/identity/src/credentials/clientAssertionCredential.browser.ts", "../../@azure/identity/src/credentials/azureCliCredential.browser.ts", "../../@azure/identity/src/credentials/azureDeveloperCliCredential.browser.ts", "../../@azure/identity/src/msal/browserFlows/msalBrowserCommon.ts", "../../@azure/identity/src/msal/browserFlows/msalAuthCode.ts", "../../@azure/identity/src/util/scopeUtils.ts", "../../@azure/identity/src/credentials/interactiveBrowserCredential.browser.ts", "../../@azure/identity/src/credentials/managedIdentityCredential/index.browser.ts", "../../@azure/identity/src/credentials/deviceCodeCredential.browser.ts", "../../@azure/identity/src/credentials/authorizationCodeCredential.browser.ts", "../../@azure/identity/src/credentials/azurePowerShellCredential.browser.ts", "../../@azure/identity/src/credentials/usernamePasswordCredential.browser.ts", "../../@azure/identity/src/credentials/visualStudioCodeCredential.browser.ts", "../../@azure/identity/src/credentials/onBehalfOfCredential.browser.ts", "../../@azure/identity/src/credentials/workloadIdentityCredential.browser.ts", "../../@azure/identity/src/index.ts", "browser-external:util", "../../tedious/src/debug.ts", "../../tedious/src/errors/abort-error.ts", "browser-external:dgram", "browser-external:node:url", "../../tedious/src/sender.ts", "../../tedious/src/errors/timeout-error.ts", "../../tedious/src/utils/with-timeout.ts", "../../tedious/src/instance-lookup.ts", "../../tedious/src/transient-error-lookup.ts", "../../sprintf-js/src/sprintf.js", "../../tedious/src/packet.ts", "../../tedious/src/prelogin-payload.ts", "../../tedious/src/tds-versions.ts", "../../tedious/src/login7-payload.ts", "../../js-md4/src/md4.js", "../../tedious/src/ntlm-payload.ts", "../../tedious/src/errors.ts", "../../tedious/src/always-encrypted/types.ts", "../../tedious/src/request.ts", "../../tedious/src/all-headers.ts", "../../tedious/src/rpcrequest-payload.ts", "../../tedious/src/sqlbatch-payload.ts", "../../native-duplexpair/index.js", "../../tedious/src/message.ts", "../../readable-stream/lib/ours/primordials.js", "../../abort-controller/browser.js", "../../readable-stream/lib/ours/util.js", "../../readable-stream/lib/ours/errors.js", "../../readable-stream/lib/internal/validators.js", "../../readable-stream/lib/internal/streams/utils.js", "../../readable-stream/lib/internal/streams/end-of-stream.js", "../../readable-stream/lib/internal/streams/destroy.js", "../../readable-stream/lib/internal/streams/legacy.js", "../../readable-stream/lib/internal/streams/add-abort-signal.js", "../../readable-stream/lib/internal/streams/buffer_list.js", "../../readable-stream/lib/internal/streams/state.js", "../../safe-buffer/index.js", "../../string_decoder/lib/string_decoder.js", "../../readable-stream/lib/internal/streams/from.js", "../../readable-stream/lib/internal/streams/readable.js", "../../readable-stream/lib/internal/streams/writable.js", "../../readable-stream/lib/internal/streams/duplexify.js", "../../readable-stream/lib/internal/streams/duplex.js", "../../readable-stream/lib/internal/streams/transform.js", "../../readable-stream/lib/internal/streams/passthrough.js", "../../readable-stream/lib/internal/streams/pipeline.js", "../../readable-stream/lib/internal/streams/compose.js", "../../readable-stream/lib/internal/streams/operators.js", "../../readable-stream/lib/stream/promises.js", "../../readable-stream/lib/stream.js", "../../readable-stream/lib/ours/browser.js", "../../inherits/inherits_browser.js", "../../bl/BufferList.js", "../../bl/bl.js", "../../tedious/src/incoming-message-stream.ts", "../../tedious/src/outgoing-message-stream.ts", "../../tedious/src/message-io.ts", "../../tedious/src/collation.ts", "../../tedious/src/data-types/null.ts", "../../tedious/src/data-types/intn.ts", "../../tedious/src/data-types/tinyint.ts", "../../tedious/src/data-types/bitn.ts", "../../tedious/src/data-types/bit.ts", "../../tedious/src/data-types/smallint.ts", "../../tedious/src/data-types/int.ts", "../../tedious/src/data-types/datetimen.ts", "../../tedious/src/data-types/smalldatetime.ts", "../../tedious/src/data-types/floatn.ts", "../../tedious/src/data-types/real.ts", "../../tedious/src/data-types/moneyn.ts", "../../tedious/src/data-types/money.ts", "../../@js-joda/core/src/errors.js", "../../@js-joda/core/src/assert.js", "../../@js-joda/core/src/MathUtil.js", "../../@js-joda/core/src/Enum.js", "../../@js-joda/core/src/temporal/TemporalAmount.js", "../../@js-joda/core/src/temporal/TemporalUnit.js", "../../@js-joda/core/src/Duration.js", "../../@js-joda/core/src/YearConstants.js", "../../@js-joda/core/src/temporal/ChronoUnit.js", "../../@js-joda/core/src/temporal/TemporalField.js", "../../@js-joda/core/src/temporal/ValueRange.js", "../../@js-joda/core/src/temporal/ChronoField.js", "../../@js-joda/core/src/temporal/TemporalQueries.js", "../../@js-joda/core/src/temporal/TemporalAccessor.js", "../../@js-joda/core/src/temporal/TemporalQuery.js", "../../@js-joda/core/src/DayOfWeek.js", "../../@js-joda/core/src/Month.js", "../../@js-joda/core/src/Period.js", "../../@js-joda/core/src/format/ParsePosition.js", "../../@js-joda/core/src/format/EnumMap.js", "../../@js-joda/core/src/format/ResolverStyle.js", "../../@js-joda/core/src/temporal/Temporal.js", "../../@js-joda/core/src/chrono/ChronoLocalDate.js", "../../@js-joda/core/src/StringUtil.js", "../../@js-joda/core/src/ZoneId.js", "../../@js-joda/core/src/zone/ZoneRules.js", "../../@js-joda/core/src/ZoneOffset.js", "../../@js-joda/core/src/format/DateTimeBuilder.js", "../../@js-joda/core/src/format/DateTimeParseContext.js", "../../@js-joda/core/src/format/DateTimePrintContext.js", "../../@js-joda/core/src/temporal/IsoFields.js", "../../@js-joda/core/src/format/DecimalStyle.js", "../../@js-joda/core/src/format/SignStyle.js", "../../@js-joda/core/src/format/TextStyle.js", "../../@js-joda/core/src/format/parser/CharLiteralPrinterParser.js", "../../@js-joda/core/src/format/parser/CompositePrinterParser.js", "../../@js-joda/core/src/format/parser/FractionPrinterParser.js", "../../@js-joda/core/src/format/parser/NumberPrinterParser.js", "../../@js-joda/core/src/format/parser/OffsetIdPrinterParser.js", "../../@js-joda/core/src/format/parser/PadPrinterParserDecorator.js", "../../@js-joda/core/src/format/parser/SettingsParser.js", "../../@js-joda/core/src/format/parser/StringLiteralPrinterParser.js", "../../@js-joda/core/src/zone/ZoneRulesProvider.js", "../../@js-joda/core/src/ZoneRegion.js", "../../@js-joda/core/src/format/parser/ZoneIdPrinterParser.js", "../../@js-joda/core/src/format/DateTimeFormatterBuilder.js", "../../@js-joda/core/src/format/StringBuilder.js", "../../@js-joda/core/src/format/DateTimeFormatter.js", "../../@js-joda/core/src/MonthDay.js", "../../@js-joda/core/src/YearMonth.js", "../../@js-joda/core/src/Year.js", "../../@js-joda/core/src/temporal/TemporalAdjuster.js", "../../@js-joda/core/src/temporal/TemporalAdjusters.js", "../../@js-joda/core/src/chrono/IsoChronology.js", "../../@js-joda/core/src/OffsetTime.js", "../../@js-joda/core/src/chrono/ChronoZonedDateTime.js", "../../@js-joda/core/src/ZonedDateTime.js", "../../@js-joda/core/src/OffsetDateTime.js", "../../@js-joda/core/src/LocalDate.js", "../../@js-joda/core/src/chrono/ChronoLocalDateTime.js", "../../@js-joda/core/src/LocalDateTime.js", "../../@js-joda/core/src/LocalTime.js", "../../@js-joda/core/src/Instant.js", "../../@js-joda/core/src/Clock.js", "../../@js-joda/core/src/zone/ZoneOffsetTransition.js", "../../@js-joda/core/src/temporal/TemporalQueriesFactory.js", "../../@js-joda/core/src/zone/SystemDefaultZoneRules.js", "../../@js-joda/core/src/zone/SystemDefaultZoneId.js", "../../@js-joda/core/src/ZoneIdFactory.js", "../../@js-joda/core/src/_init.js", "../../@js-joda/core/src/convert.js", "../../@js-joda/core/src/nativeJs.js", "../../@js-joda/core/src/use.js", "../../@js-joda/core/src/js-joda.js", "../../tedious/src/data-types/datetime.ts", "../../tedious/src/data-types/float.ts", "../../tedious/src/data-types/decimaln.ts", "../../tedious/src/data-types/decimal.ts", "../../tedious/src/data-types/numericn.ts", "../../tedious/src/data-types/numeric.ts", "../../tedious/src/data-types/smallmoney.ts", "../../tedious/src/data-types/bigint.ts", "../../tedious/src/data-types/image.ts", "../../safer-buffer/safer.js", "../../tedious/node_modules/iconv-lite/lib/bom-handling.js", "../../tedious/node_modules/iconv-lite/encodings/internal.js", "../../tedious/node_modules/iconv-lite/encodings/utf32.js", "../../tedious/node_modules/iconv-lite/encodings/utf16.js", "../../tedious/node_modules/iconv-lite/encodings/utf7.js", "../../tedious/node_modules/iconv-lite/encodings/sbcs-codec.js", "../../tedious/node_modules/iconv-lite/encodings/sbcs-data.js", "../../tedious/node_modules/iconv-lite/encodings/sbcs-data-generated.js", "../../tedious/node_modules/iconv-lite/encodings/dbcs-codec.js", "../../tedious/node_modules/iconv-lite/encodings/tables/shiftjis.json", "../../tedious/node_modules/iconv-lite/encodings/tables/eucjp.json", "../../tedious/node_modules/iconv-lite/encodings/tables/cp936.json", "../../tedious/node_modules/iconv-lite/encodings/tables/gbk-added.json", "../../tedious/node_modules/iconv-lite/encodings/tables/gb18030-ranges.json", "../../tedious/node_modules/iconv-lite/encodings/tables/cp949.json", "../../tedious/node_modules/iconv-lite/encodings/tables/cp950.json", "../../tedious/node_modules/iconv-lite/encodings/tables/big5-added.json", "../../tedious/node_modules/iconv-lite/encodings/dbcs-data.js", "../../tedious/node_modules/iconv-lite/encodings/index.js", "../../tedious/node_modules/iconv-lite/lib/streams.js", "browser-external:stream", "../../tedious/node_modules/iconv-lite/lib/index.js", "../../tedious/src/data-types/text.ts", "../../tedious/src/guid-parser.ts", "../../tedious/src/data-types/uniqueidentifier.ts", "../../tedious/src/data-types/ntext.ts", "../../tedious/src/data-types/varbinary.ts", "../../tedious/src/data-types/varchar.ts", "../../tedious/src/data-types/binary.ts", "../../tedious/src/data-types/char.ts", "../../tedious/src/data-types/nvarchar.ts", "../../tedious/src/data-types/nchar.ts", "../../tedious/src/data-types/xml.ts", "../../tedious/src/data-types/time.ts", "../../tedious/src/data-types/date.ts", "../../tedious/src/data-types/datetime2.ts", "../../tedious/src/data-types/datetimeoffset.ts", "../../tedious/src/data-types/udt.ts", "../../tedious/src/data-types/tvp.ts", "../../tedious/src/data-types/sql-variant.ts", "../../tedious/src/data-type.ts", "../../tedious/src/token/helpers.ts", "../../tedious/src/metadata-parser.ts", "../../tedious/src/token/colmetadata-token-parser.ts", "../../tedious/src/token/done-token-parser.ts", "../../tedious/src/token/env-change-token-parser.ts", "../../tedious/src/token/infoerror-token-parser.ts", "../../tedious/src/token/fedauth-info-parser.ts", "../../tedious/src/token/feature-ext-ack-parser.ts", "../../tedious/src/token/loginack-token-parser.ts", "../../tedious/src/token/order-token-parser.ts", "../../tedious/src/token/returnstatus-token-parser.ts", "../../tedious/src/value-parser.ts", "../../tedious/src/token/returnvalue-token-parser.ts", "../../tedious/src/token/row-token-parser.ts", "../../tedious/src/token/nbcrow-token-parser.ts", "../../tedious/src/token/sspi-token-parser.ts", "../../tedious/src/token/stream-parser.ts", "../../tedious/src/token/token-stream-parser.ts", "../../tedious/src/transaction.ts", "../../tedious/src/connector.ts", "../../tedious/src/library.ts", "../../tedious/src/ntlm.ts", "../../tedious/src/bulk-load-payload.ts", "../../tedious/src/special-stored-procedure.ts", "../../tedious/package.json", "browser-external:url", "../../tedious/src/token/handler.ts", "../../tedious/src/connection.ts", "../../tedious/src/tedious.ts"],
  "sourcesContent": ["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n", "const SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\nconst SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst ZERO_LENGTH_BUFFER = Buffer.alloc(0);\n\nexport type Encoding = 'utf8' | 'ucs2' | 'ascii';\n\n/**\n  A Buffer-like class that tracks position.\n\n  As values are written, the position advances by the size of the written data.\n  When writing, automatically allocates new buffers if there's not enough space.\n */\nclass WritableTrackingBuffer {\n  declare initialSize: number;\n  declare encoding: Encoding;\n  declare doubleSizeGrowth: boolean;\n\n  declare buffer: Buffer;\n  declare compositeBuffer: Buffer;\n\n  declare position: number;\n\n  constructor(initialSize: number, encoding?: Encoding | null, doubleSizeGrowth?: boolean) {\n    this.initialSize = initialSize;\n    this.encoding = encoding || 'ucs2';\n    this.doubleSizeGrowth = doubleSizeGrowth || false;\n    this.buffer = Buffer.alloc(this.initialSize, 0);\n    this.compositeBuffer = ZERO_LENGTH_BUFFER;\n    this.position = 0;\n  }\n\n  get data() {\n    this.newBuffer(0);\n    return this.compositeBuffer;\n  }\n\n  copyFrom(buffer: Buffer) {\n    const length = buffer.length;\n    this.makeRoomFor(length);\n    buffer.copy(this.buffer, this.position);\n    this.position += length;\n  }\n\n  makeRoomFor(requiredLength: number) {\n    if (this.buffer.length - this.position < requiredLength) {\n      if (this.doubleSizeGrowth) {\n        let size = Math.max(128, this.buffer.length * 2);\n        while (size < requiredLength) {\n          size *= 2;\n        }\n        this.newBuffer(size);\n      } else {\n        this.newBuffer(requiredLength);\n      }\n    }\n  }\n\n  newBuffer(size: number) {\n    const buffer = this.buffer.slice(0, this.position);\n    this.compositeBuffer = Buffer.concat([this.compositeBuffer, buffer]);\n    this.buffer = (size === 0) ? ZERO_LENGTH_BUFFER : Buffer.alloc(size, 0);\n    this.position = 0;\n  }\n\n  writeUInt8(value: number) {\n    const length = 1;\n    this.makeRoomFor(length);\n    this.buffer.writeUInt8(value, this.position);\n    this.position += length;\n  }\n\n  writeUInt16LE(value: number) {\n    const length = 2;\n    this.makeRoomFor(length);\n    this.buffer.writeUInt16LE(value, this.position);\n    this.position += length;\n  }\n\n  writeUShort(value: number) {\n    this.writeUInt16LE(value);\n  }\n\n  writeUInt16BE(value: number) {\n    const length = 2;\n    this.makeRoomFor(length);\n    this.buffer.writeUInt16BE(value, this.position);\n    this.position += length;\n  }\n\n  writeUInt24LE(value: number) {\n    const length = 3;\n    this.makeRoomFor(length);\n    this.buffer[this.position + 2] = (value >>> 16) & 0xff;\n    this.buffer[this.position + 1] = (value >>> 8) & 0xff;\n    this.buffer[this.position] = value & 0xff;\n    this.position += length;\n  }\n\n  writeUInt32LE(value: number) {\n    const length = 4;\n    this.makeRoomFor(length);\n    this.buffer.writeUInt32LE(value, this.position);\n    this.position += length;\n  }\n\n  writeBigInt64LE(value: bigint) {\n    const length = 8;\n    this.makeRoomFor(length);\n    this.buffer.writeBigInt64LE(value, this.position);\n    this.position += length;\n  }\n\n  writeInt64LE(value: number) {\n    this.writeBigInt64LE(BigInt(value));\n  }\n\n  writeUInt64LE(value: number) {\n    this.writeBigUInt64LE(BigInt(value));\n  }\n\n  writeBigUInt64LE(value: bigint) {\n    const length = 8;\n    this.makeRoomFor(length);\n    this.buffer.writeBigUInt64LE(value, this.position);\n    this.position += length;\n  }\n\n  writeUInt32BE(value: number) {\n    const length = 4;\n    this.makeRoomFor(length);\n    this.buffer.writeUInt32BE(value, this.position);\n    this.position += length;\n  }\n\n  writeUInt40LE(value: number) {\n    // inspired by https://github.com/dpw/node-buffer-more-ints\n    this.writeInt32LE(value & -1);\n    this.writeUInt8(Math.floor(value * SHIFT_RIGHT_32));\n  }\n\n  writeInt8(value: number) {\n    const length = 1;\n    this.makeRoomFor(length);\n    this.buffer.writeInt8(value, this.position);\n    this.position += length;\n  }\n\n  writeInt16LE(value: number) {\n    const length = 2;\n    this.makeRoomFor(length);\n    this.buffer.writeInt16LE(value, this.position);\n    this.position += length;\n  }\n\n  writeInt16BE(value: number) {\n    const length = 2;\n    this.makeRoomFor(length);\n    this.buffer.writeInt16BE(value, this.position);\n    this.position += length;\n  }\n\n  writeInt32LE(value: number) {\n    const length = 4;\n    this.makeRoomFor(length);\n    this.buffer.writeInt32LE(value, this.position);\n    this.position += length;\n  }\n\n  writeInt32BE(value: number) {\n    const length = 4;\n    this.makeRoomFor(length);\n    this.buffer.writeInt32BE(value, this.position);\n    this.position += length;\n  }\n\n  writeFloatLE(value: number) {\n    const length = 4;\n    this.makeRoomFor(length);\n    this.buffer.writeFloatLE(value, this.position);\n    this.position += length;\n  }\n\n  writeDoubleLE(value: number) {\n    const length = 8;\n    this.makeRoomFor(length);\n    this.buffer.writeDoubleLE(value, this.position);\n    this.position += length;\n  }\n\n  writeString(value: string, encoding?: Encoding | null) {\n    if (encoding == null) {\n      encoding = this.encoding;\n    }\n\n    const length = Buffer.byteLength(value, encoding);\n    this.makeRoomFor(length);\n\n    // $FlowFixMe https://github.com/facebook/flow/pull/5398\n    this.buffer.write(value, this.position, encoding);\n    this.position += length;\n  }\n\n  writeBVarchar(value: string, encoding?: Encoding | null) {\n    this.writeUInt8(value.length);\n    this.writeString(value, encoding);\n  }\n\n  writeUsVarchar(value: string, encoding?: Encoding | null) {\n    this.writeUInt16LE(value.length);\n    this.writeString(value, encoding);\n  }\n\n  // TODO: Figure out what types are passed in other than `Buffer`\n  writeUsVarbyte(value: any, encoding?: Encoding | null) {\n    if (encoding == null) {\n      encoding = this.encoding;\n    }\n\n    let length;\n    if (value instanceof Buffer) {\n      length = value.length;\n    } else {\n      value = value.toString();\n      length = Buffer.byteLength(value, encoding);\n    }\n    this.writeUInt16LE(length);\n\n    if (value instanceof Buffer) {\n      this.writeBuffer(value);\n    } else {\n      this.makeRoomFor(length);\n      // $FlowFixMe https://github.com/facebook/flow/pull/5398\n      this.buffer.write(value, this.position, encoding);\n      this.position += length;\n    }\n  }\n\n  writePLPBody(value: any, encoding?: Encoding | null) {\n    if (encoding == null) {\n      encoding = this.encoding;\n    }\n\n    let length;\n    if (value instanceof Buffer) {\n      length = value.length;\n    } else {\n      value = value.toString();\n      length = Buffer.byteLength(value, encoding);\n    }\n\n    // Length of all chunks.\n    // this.writeUInt64LE(length);\n    // unknown seems to work better here - might revisit later.\n    this.writeBuffer(UNKNOWN_PLP_LEN);\n\n    // In the UNKNOWN_PLP_LEN case, the data is represented as a series of zero or more chunks.\n    if (length > 0) {\n      // One chunk.\n      this.writeUInt32LE(length);\n      if (value instanceof Buffer) {\n        this.writeBuffer(value);\n      } else {\n        this.makeRoomFor(length);\n        this.buffer.write(value, this.position, encoding);\n        this.position += length;\n      }\n    }\n\n    // PLP_TERMINATOR (no more chunks).\n    this.writeUInt32LE(0);\n  }\n\n  writeBuffer(value: Buffer) {\n    const length = value.length;\n    this.makeRoomFor(length);\n    value.copy(this.buffer, this.position);\n    this.position += length;\n  }\n\n  writeMoney(value: number) {\n    this.writeInt32LE(Math.floor(value * SHIFT_RIGHT_32));\n    this.writeInt32LE(value & -1);\n  }\n}\n\nexport default WritableTrackingBuffer;\nmodule.exports = WritableTrackingBuffer;\n", "\n/**\n * Expose `Emitter`.\n */\n\nmodule.exports = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n};\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks[event] = this._callbacks[event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  var self = this;\n  this._callbacks = this._callbacks || {};\n\n  function on() {\n    self.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks[event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks[event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n  var args = [].slice.call(arguments, 1)\n    , callbacks = this._callbacks[event];\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks[event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nvar Emitter = require('emitter');\n\nfunction Stream() {\n  Emitter.call(this);\n}\nStream.prototype = new Emitter();\nmodule.exports = Stream;\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (!this.hasListeners('error')) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.off('data', ondata);\n    dest.off('drain', ondrain);\n\n    source.off('end', onend);\n    source.off('close', onclose);\n\n    source.off('error', onerror);\n    dest.off('error', onerror);\n\n    source.off('end', cleanup);\n    source.off('close', cleanup);\n\n    dest.off('end', cleanup);\n    dest.off('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('end', cleanup);\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n}\n", "import { Collation } from '../collation';\nimport { type Metadata } from '../metadata-parser';\nimport { type ColumnMetadata } from './colmetadata-token-parser';\nimport { TokenHandler } from './handler';\n\nexport const TYPE = {\n  ALTMETADATA: 0x88,\n  ALTROW: 0xD3,\n  COLMETADATA: 0x81,\n  COLINFO: 0xA5,\n  DONE: 0xFD,\n  DONEPROC: 0xFE,\n  DONEINPROC: 0xFF,\n  ENVCHANGE: 0xE3,\n  ERROR: 0xAA,\n  FEATUREEXTACK: 0xAE,\n  FEDAUTHINFO: 0xEE,\n  INFO: 0xAB,\n  LOGINACK: 0xAD,\n  NBCROW: 0xD2,\n  OFFSET: 0x78,\n  ORDER: 0xA9,\n  RETURNSTATUS: 0x79,\n  RETURNVALUE: 0xAC,\n  ROW: 0xD1,\n  SSPI: 0xED,\n  TABNAME: 0xA4\n};\n\ntype HandlerName = keyof TokenHandler;\n\nexport abstract class Token {\n  declare name: string;\n  declare handlerName: keyof TokenHandler;\n\n  constructor(name: string, handlerName: HandlerName) {\n    this.name = name;\n    this.handlerName = handlerName;\n  }\n}\n\nexport class ColMetadataToken extends Token {\n  declare name: 'COLMETADATA';\n  declare handlerName: 'onColMetadata';\n\n  declare columns: ColumnMetadata[];\n\n  constructor(columns: ColumnMetadata[]) {\n    super('COLMETADATA', 'onColMetadata');\n\n    this.columns = columns;\n  }\n}\n\nexport class DoneToken extends Token {\n  declare name: 'DONE';\n  declare handlerName: 'onDone';\n\n  declare more: boolean;\n  declare sqlError: boolean;\n  declare attention: boolean;\n  declare serverError: boolean;\n  declare rowCount: number | undefined;\n  declare curCmd: number;\n\n  constructor({ more, sqlError, attention, serverError, rowCount, curCmd }: { more: boolean, sqlError: boolean, attention: boolean, serverError: boolean, rowCount: number | undefined, curCmd: number }) {\n    super('DONE', 'onDone');\n\n    this.more = more;\n    this.sqlError = sqlError;\n    this.attention = attention;\n    this.serverError = serverError;\n    this.rowCount = rowCount;\n    this.curCmd = curCmd;\n  }\n}\n\nexport class DoneInProcToken extends Token {\n  declare name: 'DONEINPROC';\n  declare handlerName: 'onDoneInProc';\n\n  declare more: boolean;\n  declare sqlError: boolean;\n  declare attention: boolean;\n  declare serverError: boolean;\n  declare rowCount: number | undefined;\n  declare curCmd: number;\n\n  constructor({ more, sqlError, attention, serverError, rowCount, curCmd }: { more: boolean, sqlError: boolean, attention: boolean, serverError: boolean, rowCount: number | undefined, curCmd: number }) {\n    super('DONEINPROC', 'onDoneInProc');\n\n    this.more = more;\n    this.sqlError = sqlError;\n    this.attention = attention;\n    this.serverError = serverError;\n    this.rowCount = rowCount;\n    this.curCmd = curCmd;\n  }\n}\n\nexport class DoneProcToken extends Token {\n  declare name: 'DONEPROC';\n  declare handlerName: 'onDoneProc';\n\n  declare more: boolean;\n  declare sqlError: boolean;\n  declare attention: boolean;\n  declare serverError: boolean;\n  declare rowCount: number | undefined;\n  declare curCmd: number;\n\n  constructor({ more, sqlError, attention, serverError, rowCount, curCmd }: { more: boolean, sqlError: boolean, attention: boolean, serverError: boolean, rowCount: number | undefined, curCmd: number }) {\n    super('DONEPROC', 'onDoneProc');\n\n    this.more = more;\n    this.sqlError = sqlError;\n    this.attention = attention;\n    this.serverError = serverError;\n    this.rowCount = rowCount;\n    this.curCmd = curCmd;\n  }\n}\n\nexport class DatabaseEnvChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onDatabaseChange';\n\n  declare type: 'DATABASE';\n  declare newValue: string;\n  declare oldValue: string;\n\n  constructor(newValue: string, oldValue: string) {\n    super('ENVCHANGE', 'onDatabaseChange');\n\n    this.type = 'DATABASE';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport class LanguageEnvChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onLanguageChange';\n\n  declare type: 'LANGUAGE';\n  declare newValue: string;\n  declare oldValue: string;\n\n  constructor(newValue: string, oldValue: string) {\n    super('ENVCHANGE', 'onLanguageChange');\n\n    this.type = 'LANGUAGE';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport class CharsetEnvChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onCharsetChange';\n\n  declare type: 'CHARSET';\n  declare newValue: string;\n  declare oldValue: string;\n\n  constructor(newValue: string, oldValue: string) {\n    super('ENVCHANGE', 'onCharsetChange');\n\n    this.type = 'CHARSET';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport class PacketSizeEnvChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onPacketSizeChange';\n\n  declare type: 'PACKET_SIZE';\n  declare newValue: number;\n  declare oldValue: number;\n\n  constructor(newValue: number, oldValue: number) {\n    super('ENVCHANGE', 'onPacketSizeChange');\n\n    this.type = 'PACKET_SIZE';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport class BeginTransactionEnvChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onBeginTransaction';\n\n  declare type: 'BEGIN_TXN';\n  declare newValue: Buffer;\n  declare oldValue: Buffer;\n\n  constructor(newValue: Buffer, oldValue: Buffer) {\n    super('ENVCHANGE', 'onBeginTransaction');\n\n    this.type = 'BEGIN_TXN';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport class CommitTransactionEnvChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onCommitTransaction';\n\n  declare type: 'COMMIT_TXN';\n  declare newValue: Buffer;\n  declare oldValue: Buffer;\n\n  constructor(newValue: Buffer, oldValue: Buffer) {\n    super('ENVCHANGE', 'onCommitTransaction');\n\n    this.type = 'COMMIT_TXN';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport class RollbackTransactionEnvChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onRollbackTransaction';\n\n  declare type: 'ROLLBACK_TXN';\n  declare oldValue: Buffer;\n  declare newValue: Buffer;\n\n  constructor(newValue: Buffer, oldValue: Buffer) {\n    super('ENVCHANGE', 'onRollbackTransaction');\n\n    this.type = 'ROLLBACK_TXN';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport class DatabaseMirroringPartnerEnvChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onDatabaseMirroringPartner';\n\n  declare type: 'DATABASE_MIRRORING_PARTNER';\n  declare oldValue: string;\n  declare newValue: string;\n\n  constructor(newValue: string, oldValue: string) {\n    super('ENVCHANGE', 'onDatabaseMirroringPartner');\n\n    this.type = 'DATABASE_MIRRORING_PARTNER';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport class ResetConnectionEnvChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onResetConnection';\n\n  declare type: 'RESET_CONNECTION';\n  declare oldValue: Buffer;\n  declare newValue: Buffer;\n\n  constructor(newValue: Buffer, oldValue: Buffer) {\n    super('ENVCHANGE', 'onResetConnection');\n\n    this.type = 'RESET_CONNECTION';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport type EnvChangeToken =\n  DatabaseEnvChangeToken |\n  LanguageEnvChangeToken |\n  CharsetEnvChangeToken |\n  PacketSizeEnvChangeToken |\n  BeginTransactionEnvChangeToken |\n  CommitTransactionEnvChangeToken |\n  RollbackTransactionEnvChangeToken |\n  DatabaseMirroringPartnerEnvChangeToken |\n  ResetConnectionEnvChangeToken |\n  RoutingEnvChangeToken |\n  CollationChangeToken;\n\nexport class CollationChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onSqlCollationChange';\n\n  declare type: 'SQL_COLLATION';\n  declare oldValue: Collation | undefined;\n  declare newValue: Collation | undefined;\n\n  constructor(newValue: Collation | undefined, oldValue: Collation | undefined) {\n    super('ENVCHANGE', 'onSqlCollationChange');\n\n    this.type = 'SQL_COLLATION';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport class RoutingEnvChangeToken extends Token {\n  declare name: 'ENVCHANGE';\n  declare handlerName: 'onRoutingChange';\n\n  declare type: 'ROUTING_CHANGE';\n  declare newValue: { protocol: number, port: number, server: string };\n  declare oldValue: Buffer;\n\n  constructor(newValue: { protocol: number, port: number, server: string }, oldValue: Buffer) {\n    super('ENVCHANGE', 'onRoutingChange');\n\n    this.type = 'ROUTING_CHANGE';\n    this.newValue = newValue;\n    this.oldValue = oldValue;\n  }\n}\n\nexport class FeatureExtAckToken extends Token {\n  declare name: 'FEATUREEXTACK';\n  declare handlerName: 'onFeatureExtAck';\n\n  declare fedAuth: Buffer | undefined;\n\n  /** Value of UTF8_SUPPORT acknowledgement.\n   *\n   * undefined when UTF8_SUPPORT not included in token. */\n  declare utf8Support: boolean | undefined;\n\n  constructor(fedAuth: Buffer | undefined, utf8Support: boolean | undefined) {\n    super('FEATUREEXTACK', 'onFeatureExtAck');\n\n    this.fedAuth = fedAuth;\n    this.utf8Support = utf8Support;\n  }\n}\n\nexport class FedAuthInfoToken extends Token {\n  declare name: 'FEDAUTHINFO';\n  declare handlerName: 'onFedAuthInfo';\n\n  declare spn: string | undefined;\n  declare stsurl: string | undefined;\n\n  constructor(spn: string | undefined, stsurl: string | undefined) {\n    super('FEDAUTHINFO', 'onFedAuthInfo');\n\n    this.spn = spn;\n    this.stsurl = stsurl;\n  }\n}\n\nexport class InfoMessageToken extends Token {\n  declare name: 'INFO';\n  declare handlerName: 'onInfoMessage';\n\n  declare number: number;\n  declare state: number;\n  declare class: number;\n  declare message: string;\n  declare serverName: string;\n  declare procName: string;\n  declare lineNumber: number;\n\n  constructor({ number, state, class: clazz, message, serverName, procName, lineNumber }: { number: number, state: number, class: number, message: string, serverName: string, procName: string, lineNumber: number }) {\n    super('INFO', 'onInfoMessage');\n\n    this.number = number;\n    this.state = state;\n    this.class = clazz;\n    this.message = message;\n    this.serverName = serverName;\n    this.procName = procName;\n    this.lineNumber = lineNumber;\n  }\n}\n\nexport class ErrorMessageToken extends Token {\n  declare name: 'ERROR';\n  declare handlerName: 'onErrorMessage';\n\n  declare number: number;\n  declare state: number;\n  declare class: number;\n  declare message: string;\n  declare serverName: string;\n  declare procName: string;\n  declare lineNumber: number;\n\n  constructor({ number, state, class: clazz, message, serverName, procName, lineNumber }: { number: number, state: number, class: number, message: string, serverName: string, procName: string, lineNumber: number }) {\n    super('ERROR', 'onErrorMessage');\n\n    this.number = number;\n    this.state = state;\n    this.class = clazz;\n    this.message = message;\n    this.serverName = serverName;\n    this.procName = procName;\n    this.lineNumber = lineNumber;\n  }\n}\n\nexport class LoginAckToken extends Token {\n  declare name: 'LOGINACK';\n  declare handlerName: 'onLoginAck';\n\n  declare interface: string;\n  declare tdsVersion: string;\n  declare progName: string;\n  declare progVersion: { major: number, minor: number, buildNumHi: number, buildNumLow: number };\n\n  constructor({ interface: interfaze, tdsVersion, progName, progVersion }: { interface: LoginAckToken['interface'], tdsVersion: LoginAckToken['tdsVersion'], progName: LoginAckToken['progName'], progVersion: LoginAckToken['progVersion'] }) {\n    super('LOGINACK', 'onLoginAck');\n\n    this.interface = interfaze;\n    this.tdsVersion = tdsVersion;\n    this.progName = progName;\n    this.progVersion = progVersion;\n  }\n}\n\nexport class NBCRowToken extends Token {\n  declare name: 'NBCROW';\n  declare handlerName: 'onRow';\n\n  declare columns: any;\n\n  constructor(columns: any) {\n    super('NBCROW', 'onRow');\n\n    this.columns = columns;\n  }\n}\n\nexport class OrderToken extends Token {\n  declare name: 'ORDER';\n  declare handlerName: 'onOrder';\n\n  declare orderColumns: number[];\n\n  constructor(orderColumns: number[]) {\n    super('ORDER', 'onOrder');\n\n    this.orderColumns = orderColumns;\n  }\n}\n\nexport class ReturnStatusToken extends Token {\n  declare name: 'RETURNSTATUS';\n  declare handlerName: 'onReturnStatus';\n\n  declare value: number;\n\n  constructor(value: number) {\n    super('RETURNSTATUS', 'onReturnStatus');\n\n    this.value = value;\n  }\n}\n\nexport class ReturnValueToken extends Token {\n  declare name: 'RETURNVALUE';\n  declare handlerName: 'onReturnValue';\n\n  declare paramOrdinal: number;\n  declare paramName: string;\n  declare metadata: Metadata;\n  declare value: unknown;\n\n  constructor({ paramOrdinal, paramName, metadata, value }: { paramOrdinal: number, paramName: string, metadata: Metadata, value: unknown }) {\n    super('RETURNVALUE', 'onReturnValue');\n\n    this.paramOrdinal = paramOrdinal;\n    this.paramName = paramName;\n    this.metadata = metadata;\n    this.value = value;\n  }\n}\n\nexport class RowToken extends Token {\n  declare name: 'ROW';\n  declare handlerName: 'onRow';\n\n  declare columns: any;\n\n  constructor(columns: any) {\n    super('ROW', 'onRow');\n\n    this.columns = columns;\n  }\n}\n\nexport class SSPIToken extends Token {\n  declare name: 'SSPICHALLENGE';\n  declare handlerName: 'onSSPI';\n\n  declare ntlmpacket: any;\n  declare ntlmpacketBuffer: Buffer;\n\n  constructor(ntlmpacket: any, ntlmpacketBuffer: Buffer) {\n    super('SSPICHALLENGE', 'onSSPI');\n\n    this.ntlmpacket = ntlmpacket;\n    this.ntlmpacketBuffer = ntlmpacketBuffer;\n  }\n}\n", "import { EventEmitter } from 'events';\nimport WritableTrackingBuffer from './tracking-buffer/writable-tracking-buffer';\nimport Connection, { type InternalConnectionOptions } from './connection';\n\nimport { Transform } from 'stream';\nimport { TYPE as TOKEN_TYPE } from './token/token';\n\nimport { type DataType, type Parameter } from './data-type';\nimport { Collation } from './collation';\n\n/**\n * @private\n */\nconst FLAGS = {\n  nullable: 1 << 0,\n  caseSen: 1 << 1,\n  updateableReadWrite: 1 << 2,\n  updateableUnknown: 1 << 3,\n  identity: 1 << 4,\n  computed: 1 << 5, // introduced in TDS 7.2\n  fixedLenCLRType: 1 << 8, // introduced in TDS 7.2\n  sparseColumnSet: 1 << 10, // introduced in TDS 7.3.B\n  hidden: 1 << 13, // introduced in TDS 7.2\n  key: 1 << 14, // introduced in TDS 7.2\n  nullableUnknown: 1 << 15 // introduced in TDS 7.2\n};\n\n/**\n * @private\n */\nconst DONE_STATUS = {\n  FINAL: 0x00,\n  MORE: 0x1,\n  ERROR: 0x2,\n  INXACT: 0x4,\n  COUNT: 0x10,\n  ATTN: 0x20,\n  SRVERROR: 0x100\n};\n\n/**\n * @private\n */\ninterface InternalOptions {\n  checkConstraints: boolean;\n  fireTriggers: boolean;\n  keepNulls: boolean;\n  lockTable: boolean;\n  order: { [columnName: string]: 'ASC' | 'DESC' };\n}\n\nexport interface Options {\n  /**\n   * Honors constraints during bulk load, using T-SQL\n   * [CHECK_CONSTRAINTS](https://technet.microsoft.com/en-us/library/ms186247(v=sql.105).aspx).\n   * (default: `false`)\n   */\n  checkConstraints?: InternalOptions['checkConstraints'] | undefined;\n\n  /**\n   * Honors insert triggers during bulk load, using the T-SQL [FIRE_TRIGGERS](https://technet.microsoft.com/en-us/library/ms187640(v=sql.105).aspx). (default: `false`)\n   */\n  fireTriggers?: InternalOptions['fireTriggers'] | undefined;\n\n  /**\n   * Honors null value passed, ignores the default values set on table, using T-SQL [KEEP_NULLS](https://msdn.microsoft.com/en-us/library/ms187887(v=sql.120).aspx). (default: `false`)\n   */\n  keepNulls?: InternalOptions['keepNulls'] | undefined;\n\n  /**\n   * Places a bulk update(BU) lock on table while performing bulk load, using T-SQL [TABLOCK](https://technet.microsoft.com/en-us/library/ms180876(v=sql.105).aspx). (default: `false`)\n   */\n  lockTable?: InternalOptions['lockTable'] | undefined;\n\n  /**\n   * Specifies the ordering of the data to possibly increase bulk insert performance, using T-SQL [ORDER](https://docs.microsoft.com/en-us/previous-versions/sql/sql-server-2008-r2/ms177468(v=sql.105)). (default: `{}`)\n   */\n  order?: InternalOptions['order'] | undefined;\n}\n\n\nexport type Callback =\n  /**\n   * A function which will be called after the [[BulkLoad]] finishes executing.\n   *\n   * @param rowCount the number of rows inserted\n   */\n  (err: Error | undefined | null, rowCount?: number) => void;\n\ninterface Column extends Parameter {\n  objName: string;\n  collation: Collation | undefined;\n}\n\ninterface ColumnOptions {\n  output?: boolean;\n\n  /**\n   * For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   */\n  length?: number;\n\n  /**\n   * For Numeric, Decimal.\n   */\n  precision?: number;\n\n  /**\n   * For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n   */\n  scale?: number;\n\n  /**\n   * If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]], then you can use this option to specify the property name.\n   */\n  objName?: string;\n\n  /**\n   * Indicates whether the column accepts NULL values.\n   */\n  nullable?: boolean;\n}\n\nconst rowTokenBuffer = Buffer.from([ TOKEN_TYPE.ROW ]);\nconst textPointerAndTimestampBuffer = Buffer.from([\n  // TextPointer length\n  0x10,\n\n  // TextPointer\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n\n  // Timestamp\n  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00\n]);\nconst textPointerNullBuffer = Buffer.from([0x00]);\n\n// A transform that converts rows to packets.\nclass RowTransform extends Transform {\n  /**\n   * @private\n   */\n  declare columnMetadataWritten: boolean;\n  /**\n   * @private\n   */\n  declare bulkLoad: BulkLoad;\n  /**\n   * @private\n   */\n  declare mainOptions: BulkLoad['options'];\n  /**\n   * @private\n   */\n  declare columns: BulkLoad['columns'];\n\n  /**\n   * @private\n   */\n  constructor(bulkLoad: BulkLoad) {\n    super({ writableObjectMode: true });\n\n    this.bulkLoad = bulkLoad;\n    this.mainOptions = bulkLoad.options;\n    this.columns = bulkLoad.columns;\n\n    this.columnMetadataWritten = false;\n  }\n\n  /**\n   * @private\n   */\n  _transform(row: Array<unknown> | { [colName: string]: unknown }, _encoding: string, callback: (error?: Error) => void) {\n    if (!this.columnMetadataWritten) {\n      this.push(this.bulkLoad.getColMetaData());\n      this.columnMetadataWritten = true;\n    }\n\n    this.push(rowTokenBuffer);\n\n    for (let i = 0; i < this.columns.length; i++) {\n      const c = this.columns[i];\n      let value = Array.isArray(row) ? row[i] : row[c.objName];\n\n      if (!this.bulkLoad.firstRowWritten) {\n        try {\n          value = c.type.validate(value, c.collation);\n        } catch (error: any) {\n          return callback(error);\n        }\n      }\n\n      const parameter = {\n        length: c.length,\n        scale: c.scale,\n        precision: c.precision,\n        value: value\n      };\n\n      if (c.type.name === 'Text' || c.type.name === 'Image' || c.type.name === 'NText') {\n        if (value == null) {\n          this.push(textPointerNullBuffer);\n          continue;\n        }\n\n        this.push(textPointerAndTimestampBuffer);\n      }\n\n      this.push(c.type.generateParameterLength(parameter, this.mainOptions));\n      for (const chunk of c.type.generateParameterData(parameter, this.mainOptions)) {\n        this.push(chunk);\n      }\n    }\n\n    process.nextTick(callback);\n  }\n\n  /**\n   * @private\n   */\n  _flush(callback: () => void) {\n    this.push(this.bulkLoad.createDoneToken());\n\n    process.nextTick(callback);\n  }\n}\n\n/**\n * A BulkLoad instance is used to perform a bulk insert.\n *\n * Use [[Connection.newBulkLoad]] to create a new instance, and [[Connection.execBulkLoad]] to execute it.\n *\n * Example of BulkLoad Usages:\n *\n * ```js\n * // optional BulkLoad options\n * const options = { keepNulls: true };\n *\n * // instantiate - provide the table where you'll be inserting to, options and a callback\n * const bulkLoad = connection.newBulkLoad('MyTable', options, (error, rowCount) => {\n *   console.log('inserted %d rows', rowCount);\n * });\n *\n * // setup your columns - always indicate whether the column is nullable\n * bulkLoad.addColumn('myInt', TYPES.Int, { nullable: false });\n * bulkLoad.addColumn('myString', TYPES.NVarChar, { length: 50, nullable: true });\n *\n * // execute\n * connection.execBulkLoad(bulkLoad, [\n *   { myInt: 7, myString: 'hello' },\n *   { myInt: 23, myString: 'world' }\n * ]);\n * ```\n */\nclass BulkLoad extends EventEmitter {\n  /**\n   * @private\n   */\n  declare error: Error | undefined;\n  /**\n   * @private\n   */\n  declare canceled: boolean;\n  /**\n   * @private\n   */\n  declare executionStarted: boolean;\n  /**\n   * @private\n   */\n  declare streamingMode: boolean;\n  /**\n   * @private\n   */\n  declare table: string;\n  /**\n   * @private\n   */\n  declare timeout: number | undefined;\n\n  /**\n   * @private\n   */\n  declare options: InternalConnectionOptions;\n  /**\n   * @private\n   */\n  declare callback: Callback;\n\n  /**\n   * @private\n   */\n  declare columns: Array<Column>;\n  /**\n   * @private\n   */\n  declare columnsByName: { [name: string]: Column };\n\n  /**\n   * @private\n   */\n  declare firstRowWritten: boolean;\n  /**\n   * @private\n   */\n  declare rowToPacketTransform: RowTransform;\n\n  /**\n   * @private\n   */\n  declare bulkOptions: InternalOptions;\n\n  /**\n   * @private\n   */\n  declare connection: Connection | undefined;\n  /**\n   * @private\n   */\n  declare rows: Array<any> | undefined;\n  /**\n   * @private\n   */\n  declare rst: Array<any> | undefined;\n  /**\n   * @private\n   */\n  declare rowCount: number | undefined;\n\n  declare collation: Collation | undefined;\n\n  /**\n   * @private\n   */\n  constructor(table: string, collation: Collation | undefined, connectionOptions: InternalConnectionOptions, {\n    checkConstraints = false,\n    fireTriggers = false,\n    keepNulls = false,\n    lockTable = false,\n    order = {},\n  }: Options, callback: Callback) {\n    if (typeof checkConstraints !== 'boolean') {\n      throw new TypeError('The \"options.checkConstraints\" property must be of type boolean.');\n    }\n\n    if (typeof fireTriggers !== 'boolean') {\n      throw new TypeError('The \"options.fireTriggers\" property must be of type boolean.');\n    }\n\n    if (typeof keepNulls !== 'boolean') {\n      throw new TypeError('The \"options.keepNulls\" property must be of type boolean.');\n    }\n\n    if (typeof lockTable !== 'boolean') {\n      throw new TypeError('The \"options.lockTable\" property must be of type boolean.');\n    }\n\n    if (typeof order !== 'object' || order === null) {\n      throw new TypeError('The \"options.order\" property must be of type object.');\n    }\n\n    for (const [column, direction] of Object.entries(order)) {\n      if (direction !== 'ASC' && direction !== 'DESC') {\n        throw new TypeError('The value of the \"' + column + '\" key in the \"options.order\" object must be either \"ASC\" or \"DESC\".');\n      }\n    }\n\n    super();\n\n    this.error = undefined;\n    this.canceled = false;\n    this.executionStarted = false;\n\n    this.collation = collation;\n\n    this.table = table;\n    this.options = connectionOptions;\n    this.callback = callback;\n    this.columns = [];\n    this.columnsByName = {};\n    this.firstRowWritten = false;\n    this.streamingMode = false;\n\n    this.rowToPacketTransform = new RowTransform(this); // eslint-disable-line no-use-before-define\n\n    this.bulkOptions = { checkConstraints, fireTriggers, keepNulls, lockTable, order };\n  }\n\n  /**\n   * Adds a column to the bulk load.\n   *\n   * The column definitions should match the table you are trying to insert into.\n   * Attempting to call addColumn after the first row has been added will throw an exception.\n   *\n   * ```js\n   * bulkLoad.addColumn('MyIntColumn', TYPES.Int, { nullable: false });\n   * ```\n   *\n   * @param name The name of the column.\n   * @param type One of the supported `data types`.\n   * @param __namedParameters Additional column type information. At a minimum, `nullable` must be set to true or false.\n   * @param length For VarChar, NVarChar, VarBinary. Use length as `Infinity` for VarChar(max), NVarChar(max) and VarBinary(max).\n   * @param nullable Indicates whether the column accepts NULL values.\n   * @param objName If the name of the column is different from the name of the property found on `rowObj` arguments passed to [[addRow]] or [[Connection.execBulkLoad]], then you can use this option to specify the property name.\n   * @param precision For Numeric, Decimal.\n   * @param scale For Numeric, Decimal, Time, DateTime2, DateTimeOffset.\n  */\n  addColumn(name: string, type: DataType, { output = false, length, precision, scale, objName = name, nullable = true }: ColumnOptions) {\n    if (this.firstRowWritten) {\n      throw new Error('Columns cannot be added to bulk insert after the first row has been written.');\n    }\n    if (this.executionStarted) {\n      throw new Error('Columns cannot be added to bulk insert after execution has started.');\n    }\n\n    const column: Column = {\n      type: type,\n      name: name,\n      value: null,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale,\n      objName: objName,\n      nullable: nullable,\n      collation: this.collation\n    };\n\n    if ((type.id & 0x30) === 0x20) {\n      if (column.length == null && type.resolveLength) {\n        column.length = type.resolveLength(column);\n      }\n    }\n\n    if (type.resolvePrecision && column.precision == null) {\n      column.precision = type.resolvePrecision(column);\n    }\n\n    if (type.resolveScale && column.scale == null) {\n      column.scale = type.resolveScale(column);\n    }\n\n    this.columns.push(column);\n\n    this.columnsByName[name] = column;\n  }\n\n  /**\n   * @private\n   */\n  getOptionsSql() {\n    const addOptions = [];\n\n    if (this.bulkOptions.checkConstraints) {\n      addOptions.push('CHECK_CONSTRAINTS');\n    }\n\n    if (this.bulkOptions.fireTriggers) {\n      addOptions.push('FIRE_TRIGGERS');\n    }\n\n    if (this.bulkOptions.keepNulls) {\n      addOptions.push('KEEP_NULLS');\n    }\n\n    if (this.bulkOptions.lockTable) {\n      addOptions.push('TABLOCK');\n    }\n\n    if (this.bulkOptions.order) {\n      const orderColumns = [];\n\n      for (const [column, direction] of Object.entries(this.bulkOptions.order)) {\n        orderColumns.push(`${column} ${direction}`);\n      }\n\n      if (orderColumns.length) {\n        addOptions.push(`ORDER (${orderColumns.join(', ')})`);\n      }\n    }\n\n    if (addOptions.length > 0) {\n      return ` WITH (${addOptions.join(',')})`;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * @private\n   */\n  getBulkInsertSql() {\n    let sql = 'insert bulk ' + this.table + '(';\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n      if (i !== 0) {\n        sql += ', ';\n      }\n      sql += '[' + c.name + '] ' + (c.type.declaration(c));\n    }\n    sql += ')';\n\n    sql += this.getOptionsSql();\n    return sql;\n  }\n\n  /**\n   * This is simply a helper utility function which returns a `CREATE TABLE SQL` statement based on the columns added to the bulkLoad object.\n   * This may be particularly handy when you want to insert into a temporary table (a table which starts with `#`).\n   *\n   * ```js\n   * var sql = bulkLoad.getTableCreationSql();\n   * ```\n   *\n   * A side note on bulk inserting into temporary tables: if you want to access a local temporary table after executing the bulk load,\n   * you'll need to use the same connection and execute your requests using [[Connection.execSqlBatch]] instead of [[Connection.execSql]]\n   */\n  getTableCreationSql() {\n    let sql = 'CREATE TABLE ' + this.table + '(\\n';\n    for (let i = 0, len = this.columns.length; i < len; i++) {\n      const c = this.columns[i];\n      if (i !== 0) {\n        sql += ',\\n';\n      }\n      sql += '[' + c.name + '] ' + (c.type.declaration(c));\n      if (c.nullable !== undefined) {\n        sql += ' ' + (c.nullable ? 'NULL' : 'NOT NULL');\n      }\n    }\n    sql += '\\n)';\n    return sql;\n  }\n\n  /**\n   * @private\n   */\n  getColMetaData() {\n    const tBuf = new WritableTrackingBuffer(100, null, true);\n    // TokenType\n    tBuf.writeUInt8(TOKEN_TYPE.COLMETADATA);\n    // Count\n    tBuf.writeUInt16LE(this.columns.length);\n\n    for (let j = 0, len = this.columns.length; j < len; j++) {\n      const c = this.columns[j];\n      // UserType\n      if (this.options.tdsVersion < '7_2') {\n        tBuf.writeUInt16LE(0);\n      } else {\n        tBuf.writeUInt32LE(0);\n      }\n\n      // Flags\n      let flags = FLAGS.updateableReadWrite;\n      if (c.nullable) {\n        flags |= FLAGS.nullable;\n      } else if (c.nullable === undefined && this.options.tdsVersion >= '7_2') {\n        flags |= FLAGS.nullableUnknown;\n      }\n      tBuf.writeUInt16LE(flags);\n\n      // TYPE_INFO\n      tBuf.writeBuffer(c.type.generateTypeInfo(c, this.options));\n\n      // TableName\n      if (c.type.hasTableName) {\n        tBuf.writeUsVarchar(this.table, 'ucs2');\n      }\n\n      // ColName\n      tBuf.writeBVarchar(c.name, 'ucs2');\n    }\n    return tBuf.data;\n  }\n\n  /**\n   * Sets a timeout for this bulk load.\n   *\n   * ```js\n   * bulkLoad.setTimeout(timeout);\n   * ```\n   *\n   * @param timeout The number of milliseconds before the bulk load is considered failed, or 0 for no timeout.\n   *   When no timeout is set for the bulk load, the [[ConnectionOptions.requestTimeout]] of the Connection is used.\n   */\n  setTimeout(timeout?: number) {\n    this.timeout = timeout;\n  }\n\n  /**\n   * @private\n   */\n  createDoneToken() {\n    // It might be nice to make DoneToken a class if anything needs to create them, but for now, just do it here\n    const tBuf = new WritableTrackingBuffer(this.options.tdsVersion < '7_2' ? 9 : 13);\n    tBuf.writeUInt8(TOKEN_TYPE.DONE);\n    const status = DONE_STATUS.FINAL;\n    tBuf.writeUInt16LE(status);\n    tBuf.writeUInt16LE(0); // CurCmd (TDS ignores this)\n    tBuf.writeUInt32LE(0); // row count - doesn't really matter\n    if (this.options.tdsVersion >= '7_2') {\n      tBuf.writeUInt32LE(0); // row count is 64 bits in >= TDS 7.2\n    }\n    return tBuf.data;\n  }\n\n  /**\n   * @private\n   */\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n}\n\nexport default BulkLoad;\nmodule.exports = BulkLoad;\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"crypto\" has been externalized for browser compatibility. Cannot access \"crypto.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"os\" has been externalized for browser compatibility. Cannot access \"os.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"tls\" has been externalized for browser compatibility. Cannot access \"tls.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"net\" has been externalized for browser compatibility. Cannot access \"net.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"dns\" has been externalized for browser compatibility. Cannot access \"dns.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"constants\" has been externalized for browser compatibility. Cannot access \"constants.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// This module is a shim for the plugin consumer in the browser\n\nexport function useIdentityPlugin(_plugin: unknown): void {\n  throw new Error(\"Identity plugins are not supported in browser environments.\");\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function log(...args: any[]): void {\n  if (args.length > 0) {\n    const firstArg = String(args[0]);\n    if (firstArg.includes(\":error\")) {\n      console.error(...args);\n    } else if (firstArg.includes(\":warning\")) {\n      console.warn(...args);\n    } else if (firstArg.includes(\":info\")) {\n      console.info(...args);\n    } else if (firstArg.includes(\":verbose\")) {\n      console.debug(...args);\n    } else {\n      console.debug(...args);\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { log } from \"./log.js\";\n\n/**\n * A simple mechanism for enabling logging.\n * Intended to mimic the publicly available `debug` package.\n */\nexport interface Debug {\n  /**\n   * Creates a new logger with the given namespace.\n   */\n  (namespace: string): Debugger;\n  /**\n   * The default log method (defaults to console)\n   */\n  log: (...args: any[]) => void;\n  /**\n   * Enables a particular set of namespaces.\n   * To enable multiple separate them with commas, e.g. \"info,debug\".\n   * Supports wildcards, e.g. \"azure:*\"\n   * Supports skip syntax, e.g. \"azure:*,-azure:storage:*\" will enable\n   * everything under azure except for things under azure:storage.\n   */\n  enable: (namespaces: string) => void;\n  /**\n   * Checks if a particular namespace is enabled.\n   */\n  enabled: (namespace: string) => boolean;\n  /**\n   * Disables all logging, returns what was previously enabled.\n   */\n  disable: () => string;\n}\n\n/**\n * A log function that can be dynamically enabled and redirected.\n */\nexport interface Debugger {\n  /**\n   * Logs the given arguments to the `log` method.\n   */\n  (...args: any[]): void;\n  /**\n   * True if this logger is active and logging.\n   */\n  enabled: boolean;\n  /**\n   * Used to cleanup/remove this logger.\n   */\n  destroy: () => boolean;\n  /**\n   * The current log method. Can be overridden to redirect output.\n   */\n  log: (...args: any[]) => void;\n  /**\n   * The namespace of this logger.\n   */\n  namespace: string;\n  /**\n   * Extends this logger with a child namespace.\n   * Namespaces are separated with a ':' character.\n   */\n  extend: (namespace: string) => Debugger;\n}\n\nconst debugEnvVariable =\n  (typeof process !== \"undefined\" && process.env && process.env.DEBUG) || undefined;\n\nlet enabledString: string | undefined;\nlet enabledNamespaces: RegExp[] = [];\nlet skippedNamespaces: RegExp[] = [];\nconst debuggers: Debugger[] = [];\n\nif (debugEnvVariable) {\n  enable(debugEnvVariable);\n}\n\nconst debugObj: Debug = Object.assign(\n  (namespace: string): Debugger => {\n    return createDebugger(namespace);\n  },\n  {\n    enable,\n    enabled,\n    disable,\n    log,\n  },\n);\n\nfunction enable(namespaces: string): void {\n  enabledString = namespaces;\n  enabledNamespaces = [];\n  skippedNamespaces = [];\n  const wildcard = /\\*/g;\n  const namespaceList = namespaces.split(\",\").map((ns) => ns.trim().replace(wildcard, \".*?\"));\n  for (const ns of namespaceList) {\n    if (ns.startsWith(\"-\")) {\n      skippedNamespaces.push(new RegExp(`^${ns.substr(1)}$`));\n    } else {\n      enabledNamespaces.push(new RegExp(`^${ns}$`));\n    }\n  }\n  for (const instance of debuggers) {\n    instance.enabled = enabled(instance.namespace);\n  }\n}\n\nfunction enabled(namespace: string): boolean {\n  if (namespace.endsWith(\"*\")) {\n    return true;\n  }\n\n  for (const skipped of skippedNamespaces) {\n    if (skipped.test(namespace)) {\n      return false;\n    }\n  }\n  for (const enabledNamespace of enabledNamespaces) {\n    if (enabledNamespace.test(namespace)) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction disable(): string {\n  const result = enabledString || \"\";\n  enable(\"\");\n  return result;\n}\n\nfunction createDebugger(namespace: string): Debugger {\n  const newDebugger: Debugger = Object.assign(debug, {\n    enabled: enabled(namespace),\n    destroy,\n    log: debugObj.log,\n    namespace,\n    extend,\n  });\n\n  function debug(...args: any[]): void {\n    if (!newDebugger.enabled) {\n      return;\n    }\n    if (args.length > 0) {\n      args[0] = `${namespace} ${args[0]}`;\n    }\n    newDebugger.log(...args);\n  }\n\n  debuggers.push(newDebugger);\n\n  return newDebugger;\n}\n\nfunction destroy(this: Debugger): boolean {\n  const index = debuggers.indexOf(this);\n  if (index >= 0) {\n    debuggers.splice(index, 1);\n    return true;\n  }\n  return false;\n}\n\nfunction extend(this: Debugger, namespace: string): Debugger {\n  const newDebugger = createDebugger(`${this.namespace}:${namespace}`);\n  newDebugger.log = this.log;\n  return newDebugger;\n}\n\nexport default debugObj;\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport debug, { type Debugger } from \"./debug.js\";\nexport type { Debugger } from \"./debug.js\";\n\nconst registeredLoggers = new Set<AzureDebugger>();\nconst logLevelFromEnv =\n  (typeof process !== \"undefined\" && process.env && process.env.AZURE_LOG_LEVEL) || undefined;\n\nlet azureLogLevel: AzureLogLevel | undefined;\n\n/**\n * The AzureLogger provides a mechanism for overriding where logs are output to.\n * By default, logs are sent to stderr.\n * Override the `log` method to redirect logs to another location.\n */\nexport const AzureLogger: AzureClientLogger = debug(\"azure\");\nAzureLogger.log = (...args) => {\n  debug.log(...args);\n};\n\n/**\n * The log levels supported by the logger.\n * The log levels in order of most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport type AzureLogLevel = \"verbose\" | \"info\" | \"warning\" | \"error\";\nconst AZURE_LOG_LEVELS = [\"verbose\", \"info\", \"warning\", \"error\"];\n\ntype AzureDebugger = Debugger & { level: AzureLogLevel };\n\n/**\n * An AzureClientLogger is a function that can log to an appropriate severity level.\n */\nexport type AzureClientLogger = Debugger;\n\nif (logLevelFromEnv) {\n  // avoid calling setLogLevel because we don't want a mis-set environment variable to crash\n  if (isAzureLogLevel(logLevelFromEnv)) {\n    setLogLevel(logLevelFromEnv);\n  } else {\n    console.error(\n      `AZURE_LOG_LEVEL set to unknown log level '${logLevelFromEnv}'; logging is not enabled. Acceptable values: ${AZURE_LOG_LEVELS.join(\n        \", \",\n      )}.`,\n    );\n  }\n}\n\n/**\n * Immediately enables logging at the specified log level. If no level is specified, logging is disabled.\n * @param level - The log level to enable for logging.\n * Options from most verbose to least verbose are:\n * - verbose\n * - info\n * - warning\n * - error\n */\nexport function setLogLevel(level?: AzureLogLevel): void {\n  if (level && !isAzureLogLevel(level)) {\n    throw new Error(\n      `Unknown log level '${level}'. Acceptable values: ${AZURE_LOG_LEVELS.join(\",\")}`,\n    );\n  }\n  azureLogLevel = level;\n\n  const enabledNamespaces = [];\n  for (const logger of registeredLoggers) {\n    if (shouldEnable(logger)) {\n      enabledNamespaces.push(logger.namespace);\n    }\n  }\n\n  debug.enable(enabledNamespaces.join(\",\"));\n}\n\n/**\n * Retrieves the currently specified log level.\n */\nexport function getLogLevel(): AzureLogLevel | undefined {\n  return azureLogLevel;\n}\n\nconst levelMap = {\n  verbose: 400,\n  info: 300,\n  warning: 200,\n  error: 100,\n};\n\n/**\n * Defines the methods available on the SDK-facing logger.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexport interface AzureLogger {\n  /**\n   * Used for failures the program is unlikely to recover from,\n   * such as Out of Memory.\n   */\n  error: Debugger;\n  /**\n   * Used when a function fails to perform its intended task.\n   * Usually this means the function will throw an exception.\n   * Not used for self-healing events (e.g. automatic retry)\n   */\n  warning: Debugger;\n  /**\n   * Used when a function operates normally.\n   */\n  info: Debugger;\n  /**\n   * Used for detailed troubleshooting scenarios. This is\n   * intended for use by developers / system administrators\n   * for diagnosing specific failures.\n   */\n  verbose: Debugger;\n}\n\n/**\n * Creates a logger for use by the Azure SDKs that inherits from `AzureLogger`.\n * @param namespace - The name of the SDK package.\n * @hidden\n */\nexport function createClientLogger(namespace: string): AzureLogger {\n  const clientRootLogger: AzureClientLogger = AzureLogger.extend(namespace);\n  patchLogMethod(AzureLogger, clientRootLogger);\n  return {\n    error: createLogger(clientRootLogger, \"error\"),\n    warning: createLogger(clientRootLogger, \"warning\"),\n    info: createLogger(clientRootLogger, \"info\"),\n    verbose: createLogger(clientRootLogger, \"verbose\"),\n  };\n}\n\nfunction patchLogMethod(parent: AzureClientLogger, child: AzureClientLogger | AzureDebugger): void {\n  child.log = (...args) => {\n    parent.log(...args);\n  };\n}\n\nfunction createLogger(parent: AzureClientLogger, level: AzureLogLevel): AzureDebugger {\n  const logger: AzureDebugger = Object.assign(parent.extend(level), {\n    level,\n  });\n\n  patchLogMethod(parent, logger);\n\n  if (shouldEnable(logger)) {\n    const enabledNamespaces = debug.disable();\n    debug.enable(enabledNamespaces + \",\" + logger.namespace);\n  }\n\n  registeredLoggers.add(logger);\n\n  return logger;\n}\n\nfunction shouldEnable(logger: AzureDebugger): boolean {\n  return Boolean(azureLogLevel && levelMap[logger.level] <= levelMap[azureLogLevel]);\n}\n\nfunction isAzureLogLevel(logLevel: string): logLevel is AzureLogLevel {\n  return AZURE_LOG_LEVELS.includes(logLevel as any);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AzureLogger, createClientLogger } from \"@azure/logger\";\n\n/**\n * The AzureLogger used for all clients within the identity package\n */\nexport const logger = createClientLogger(\"identity\");\n\ninterface EnvironmentAccumulator {\n  missing: string[];\n  assigned: string[];\n}\n\n/**\n * Separates a list of environment variable names into a plain object with two arrays: an array of missing environment variables and another array with assigned environment variables.\n * @param supportedEnvVars - List of environment variable names\n */\nexport function processEnvVars(supportedEnvVars: string[]): EnvironmentAccumulator {\n  return supportedEnvVars.reduce(\n    (acc: EnvironmentAccumulator, envVariable: string) => {\n      if (process.env[envVariable]) {\n        acc.assigned.push(envVariable);\n      } else {\n        acc.missing.push(envVariable);\n      }\n      return acc;\n    },\n    { missing: [], assigned: [] }\n  );\n}\n\n/**\n * Based on a given list of environment variable names,\n * logs the environment variables currently assigned during the usage of a credential that goes by the given name.\n * @param credentialName - Name of the credential in use\n * @param supportedEnvVars - List of environment variables supported by that credential\n */\nexport function logEnvVars(credentialName: string, supportedEnvVars: string[]): void {\n  const { assigned } = processEnvVars(supportedEnvVars);\n  logger.info(\n    `${credentialName} => Found the following environment variables: ${assigned.join(\", \")}`\n  );\n}\n\n/**\n * Formatting the success event on the credentials\n */\nexport function formatSuccess(scope: string | string[]): string {\n  return `SUCCESS. Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n}\n\n/**\n * Formatting the success event on the credentials\n */\nexport function formatError(scope: string | string[] | undefined, error: Error | string): string {\n  let message = \"ERROR.\";\n  if (scope?.length) {\n    message += ` Scopes: ${Array.isArray(scope) ? scope.join(\", \") : scope}.`;\n  }\n  return `${message} Error message: ${typeof error === \"string\" ? error : error.message}.`;\n}\n\n/**\n * A CredentialLoggerInstance is a logger properly formatted to work in a credential's constructor, and its methods.\n */\nexport interface CredentialLoggerInstance {\n  title: string;\n  fullTitle: string;\n  info(message: string): void;\n  warning(message: string): void;\n  verbose(message: string): void;\n  /**\n   * The logging functions for warning and error are intentionally left out, since we want the identity logging to be at the info level.\n   * Otherwise, they would look like:\n   *\n   *   warning(message: string): void;\n   *   error(err: Error): void;\n   */\n}\n\n/**\n * Generates a CredentialLoggerInstance.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *\n */\nexport function credentialLoggerInstance(\n  title: string,\n  parent?: CredentialLoggerInstance,\n  log: AzureLogger = logger\n): CredentialLoggerInstance {\n  const fullTitle = parent ? `${parent.fullTitle} ${title}` : title;\n\n  function info(message: string): void {\n    log.info(`${fullTitle} =>`, message);\n  }\n\n  function warning(message: string): void {\n    log.warning(`${fullTitle} =>`, message);\n  }\n\n  function verbose(message: string): void {\n    log.verbose(`${fullTitle} =>`, message);\n  }\n  return {\n    title,\n    fullTitle,\n    info,\n    warning,\n    verbose,\n  };\n}\n\n/**\n * A CredentialLogger is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n */\nexport interface CredentialLogger extends CredentialLoggerInstance {\n  parent: AzureLogger;\n  getToken: CredentialLoggerInstance;\n}\n\n/**\n * Generates a CredentialLogger, which is a logger declared at the credential's constructor, and used at any point in the credential.\n * It has all the properties of a CredentialLoggerInstance, plus other logger instances, one per method.\n *\n * It logs with the format:\n *\n *   `[title] => [message]`\n *   `[title] => getToken() => [message]`\n *\n */\nexport function credentialLogger(title: string, log: AzureLogger = logger): CredentialLogger {\n  const credLogger = credentialLoggerInstance(title, undefined, log);\n  return {\n    ...credLogger,\n    parent: log,\n    getToken: credentialLoggerInstance(\"=> getToken()\", credLogger, log),\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { GetTokenOptions } from \"@azure/core-auth\";\n\n/**\n * See the official documentation for more details:\n *\n * https://learn.microsoft.com/en-us/azure/active-directory/develop/v1-protocols-oauth-code#error-response-1\n *\n * NOTE: This documentation is for v1 OAuth support but the same error\n * response details still apply to v2.\n */\nexport interface ErrorResponse {\n  /**\n   * The string identifier for the error.\n   */\n  error: string;\n\n  /**\n   * The error's description.\n   */\n  errorDescription: string;\n\n  /**\n   * An array of codes pertaining to the error(s) that occurred.\n   */\n  errorCodes?: number[];\n\n  /**\n   * The timestamp at which the error occurred.\n   */\n  timestamp?: string;\n\n  /**\n   * The trace identifier for this error occurrence.\n   */\n  traceId?: string;\n\n  /**\n   * The correlation ID to be used for tracking the source of the error.\n   */\n  correlationId?: string;\n}\n\n/**\n * Used for internal deserialization of OAuth responses. Public model is ErrorResponse\n * @internal\n */\nexport interface OAuthErrorResponse {\n  error: string;\n  error_description: string;\n  error_codes?: number[];\n  timestamp?: string;\n  trace_id?: string;\n  correlation_id?: string;\n}\n\nfunction isErrorResponse(errorResponse: any): errorResponse is OAuthErrorResponse {\n  return (\n    errorResponse &&\n    typeof errorResponse.error === \"string\" &&\n    typeof errorResponse.error_description === \"string\"\n  );\n}\n\n/**\n * The Error.name value of an CredentialUnavailable\n */\nexport const CredentialUnavailableErrorName = \"CredentialUnavailableError\";\n\n/**\n * This signifies that the credential that was tried in a chained credential\n * was not available to be used as the credential. Rather than treating this as\n * an error that should halt the chain, it's caught and the chain continues\n */\nexport class CredentialUnavailableError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = CredentialUnavailableErrorName;\n  }\n}\n\n/**\n * The Error.name value of an AuthenticationError\n */\nexport const AuthenticationErrorName = \"AuthenticationError\";\n\n/**\n * Provides details about a failure to authenticate with Azure Active\n * Directory.  The `errorResponse` field contains more details about\n * the specific failure.\n */\nexport class AuthenticationError extends Error {\n  /**\n   * The HTTP status code returned from the authentication request.\n   */\n  public readonly statusCode: number;\n\n  /**\n   * The error response details.\n   */\n  public readonly errorResponse: ErrorResponse;\n\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  constructor(statusCode: number, errorBody: object | string | undefined | null) {\n    let errorResponse: ErrorResponse = {\n      error: \"unknown\",\n      errorDescription: \"An unknown error occurred and no additional details are available.\",\n    };\n\n    if (isErrorResponse(errorBody)) {\n      errorResponse = convertOAuthErrorResponseToErrorResponse(errorBody);\n    } else if (typeof errorBody === \"string\") {\n      try {\n        // Most error responses will contain JSON-formatted error details\n        // in the response body\n        const oauthErrorResponse: OAuthErrorResponse = JSON.parse(errorBody);\n        errorResponse = convertOAuthErrorResponseToErrorResponse(oauthErrorResponse);\n      } catch (e: any) {\n        if (statusCode === 400) {\n          errorResponse = {\n            error: \"authority_not_found\",\n            errorDescription: \"The specified authority URL was not found.\",\n          };\n        } else {\n          errorResponse = {\n            error: \"unknown_error\",\n            errorDescription: `An unknown error has occurred. Response body:\\n\\n${errorBody}`,\n          };\n        }\n      }\n    } else {\n      errorResponse = {\n        error: \"unknown_error\",\n        errorDescription: \"An unknown error occurred and no additional details are available.\",\n      };\n    }\n\n    super(\n      `${errorResponse.error} Status code: ${statusCode}\\nMore details:\\n${errorResponse.errorDescription}`\n    );\n    this.statusCode = statusCode;\n    this.errorResponse = errorResponse;\n\n    // Ensure that this type reports the correct name\n    this.name = AuthenticationErrorName;\n  }\n}\n\n/**\n * The Error.name value of an AggregateAuthenticationError\n */\nexport const AggregateAuthenticationErrorName = \"AggregateAuthenticationError\";\n\n/**\n * Provides an `errors` array containing {@link AuthenticationError} instance\n * for authentication failures from credentials in a {@link ChainedTokenCredential}.\n */\nexport class AggregateAuthenticationError extends Error {\n  /**\n   * The array of error objects that were thrown while trying to authenticate\n   * with the credentials in a {@link ChainedTokenCredential}.\n   */\n  public errors: any[];\n\n  constructor(errors: any[], errorMessage?: string) {\n    const errorDetail = errors.join(\"\\n\");\n    super(`${errorMessage}\\n${errorDetail}`);\n    this.errors = errors;\n\n    // Ensure that this type reports the correct name\n    this.name = AggregateAuthenticationErrorName;\n  }\n}\n\nfunction convertOAuthErrorResponseToErrorResponse(errorBody: OAuthErrorResponse): ErrorResponse {\n  return {\n    error: errorBody.error,\n    errorDescription: errorBody.error_description,\n    correlationId: errorBody.correlation_id,\n    errorCodes: errorBody.error_codes,\n    timestamp: errorBody.timestamp,\n    traceId: errorBody.trace_id,\n  };\n}\n\n/**\n * Optional parameters to the {@link AuthenticationRequiredError}\n */\nexport interface AuthenticationRequiredErrorOptions {\n  /**\n   * The list of scopes for which the token will have access.\n   */\n  scopes: string[];\n  /**\n   * The options passed to the getToken request.\n   */\n  getTokenOptions?: GetTokenOptions;\n  /**\n   * The message of the error.\n   */\n  message?: string;\n}\n\n/**\n * Error used to enforce authentication after trying to retrieve a token silently.\n */\nexport class AuthenticationRequiredError extends Error {\n  /**\n   * The list of scopes for which the token will have access.\n   */\n  public scopes: string[];\n  /**\n   * The options passed to the getToken request.\n   */\n  public getTokenOptions?: GetTokenOptions;\n\n  constructor(\n    /**\n     * Optional parameters. A message can be specified. The {@link GetTokenOptions} of the request can also be specified to more easily associate the error with the received parameters.\n     */\n    options: AuthenticationRequiredErrorOptions\n  ) {\n    super(options.message);\n    this.scopes = options.scopes;\n    this.getTokenOptions = options.getTokenOptions;\n    this.name = \"AuthenticationRequiredError\";\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Current version of the `@azure/identity` package.\n */\n\nexport const SDK_VERSION = `3.4.2`;\n\n/**\n * The default client ID for authentication\n * @internal\n */\n// TODO: temporary - this is the Azure CLI clientID - we'll replace it when\n// Developer Sign On application is available\n// https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/identity/Azure.Identity/src/Constants.cs#L9\nexport const DeveloperSignOnClientId = \"04b07795-8ddb-461a-bbee-02f9e1bf7b46\";\n\n/**\n * The default tenant for authentication\n * @internal\n */\nexport const DefaultTenantId = \"common\";\n\n/**\n * A list of known Azure authority hosts\n */\nexport enum AzureAuthorityHosts {\n  /**\n   * China-based Azure Authority Host\n   */\n  AzureChina = \"https://login.chinacloudapi.cn\",\n  /**\n   * Germany-based Azure Authority Host\n   */\n  AzureGermany = \"https://login.microsoftonline.de\",\n  /**\n   * US Government Azure Authority Host\n   */\n  AzureGovernment = \"https://login.microsoftonline.us\",\n  /**\n   * Public Cloud Azure Authority Host\n   */\n  AzurePublicCloud = \"https://login.microsoftonline.com\",\n}\n\n/**\n * The default authority host.\n */\nexport const DefaultAuthorityHost = AzureAuthorityHosts.AzurePublicCloud;\n\n/**\n * Allow acquiring tokens for any tenant for multi-tentant auth.\n */\nexport const ALL_TENANTS: string[] = [\"*\"];\n\nexport const CACHE_CAE_SUFFIX = \".cae\";\nexport const CACHE_NON_CAE_SUFFIX = \".nocae\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TracingContext, TracingSpan } from \"./interfaces.js\";\n\n/** @internal */\nexport const knownContextKeys = {\n  span: Symbol.for(\"@azure/core-tracing span\"),\n  namespace: Symbol.for(\"@azure/core-tracing namespace\"),\n};\n\n/**\n * Creates a new {@link TracingContext} with the given options.\n * @param options - A set of known keys that may be set on the context.\n * @returns A new {@link TracingContext} with the given options.\n *\n * @internal\n */\nexport function createTracingContext(options: CreateTracingContextOptions = {}): TracingContext {\n  let context: TracingContext = new TracingContextImpl(options.parentContext);\n  if (options.span) {\n    context = context.setValue(knownContextKeys.span, options.span);\n  }\n  if (options.namespace) {\n    context = context.setValue(knownContextKeys.namespace, options.namespace);\n  }\n  return context;\n}\n\n/** @internal */\nexport class TracingContextImpl implements TracingContext {\n  private _contextMap: Map<symbol, unknown>;\n  constructor(initialContext?: TracingContext) {\n    this._contextMap =\n      initialContext instanceof TracingContextImpl\n        ? new Map<symbol, unknown>(initialContext._contextMap)\n        : new Map();\n  }\n\n  setValue(key: symbol, value: unknown): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.set(key, value);\n    return newContext;\n  }\n\n  getValue(key: symbol): unknown {\n    return this._contextMap.get(key);\n  }\n\n  deleteValue(key: symbol): TracingContext {\n    const newContext = new TracingContextImpl(this);\n    newContext._contextMap.delete(key);\n    return newContext;\n  }\n}\n\n/**\n * Represents a set of items that can be set when creating a new {@link TracingContext}.\n */\nexport interface CreateTracingContextOptions {\n  /** The {@link parentContext} - the newly created context will contain all the values of the parent context unless overridden. */\n  parentContext?: TracingContext;\n  /** An initial span to set on the context. */\n  span?: TracingSpan;\n  /** The namespace to set on any child spans. */\n  namespace?: string;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { Instrumenter } from \"./interfaces.js\";\n\n/**\n * Browser-only implementation of the module's state. The browser esm variant will not load the commonjs state, so we do not need to share state between the two.\n */\nexport const state = {\n  instrumenterImplementation: undefined as Instrumenter | undefined,\n};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  Instrumenter,\n  InstrumenterSpanOptions,\n  TracingContext,\n  TracingSpan,\n} from \"./interfaces.js\";\n\nimport { createTracingContext } from \"./tracingContext.js\";\nimport { state } from \"./state.js\";\n\nexport function createDefaultTracingSpan(): TracingSpan {\n  return {\n    end: () => {\n      // noop\n    },\n    isRecording: () => false,\n    recordException: () => {\n      // noop\n    },\n    setAttribute: () => {\n      // noop\n    },\n    setStatus: () => {\n      // noop\n    },\n  };\n}\n\nexport function createDefaultInstrumenter(): Instrumenter {\n  return {\n    createRequestHeaders: (): Record<string, string> => {\n      return {};\n    },\n    parseTraceparentHeader: (): TracingContext | undefined => {\n      return undefined;\n    },\n    startSpan: (\n      _name: string,\n      spanOptions: InstrumenterSpanOptions,\n    ): { span: TracingSpan; tracingContext: TracingContext } => {\n      return {\n        span: createDefaultTracingSpan(),\n        tracingContext: createTracingContext({ parentContext: spanOptions.tracingContext }),\n      };\n    },\n    withContext<\n      CallbackArgs extends unknown[],\n      Callback extends (...args: CallbackArgs) => ReturnType<Callback>,\n    >(\n      _context: TracingContext,\n      callback: Callback,\n      ...callbackArgs: CallbackArgs\n    ): ReturnType<Callback> {\n      return callback(...callbackArgs);\n    },\n  };\n}\n\n/**\n * Extends the Azure SDK with support for a given instrumenter implementation.\n *\n * @param instrumenter - The instrumenter implementation to use.\n */\nexport function useInstrumenter(instrumenter: Instrumenter): void {\n  state.instrumenterImplementation = instrumenter;\n}\n\n/**\n * Gets the currently set instrumenter, a No-Op instrumenter by default.\n *\n * @returns The currently set instrumenter\n */\nexport function getInstrumenter(): Instrumenter {\n  if (!state.instrumenterImplementation) {\n    state.instrumenterImplementation = createDefaultInstrumenter();\n  }\n  return state.instrumenterImplementation;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  OperationTracingOptions,\n  OptionsWithTracingContext,\n  Resolved,\n  TracingClient,\n  TracingClientOptions,\n  TracingContext,\n  TracingSpan,\n  TracingSpanOptions,\n} from \"./interfaces.js\";\nimport { getInstrumenter } from \"./instrumenter.js\";\nimport { knownContextKeys } from \"./tracingContext.js\";\n\n/**\n * Creates a new tracing client.\n *\n * @param options - Options used to configure the tracing client.\n * @returns - An instance of {@link TracingClient}.\n */\nexport function createTracingClient(options: TracingClientOptions): TracingClient {\n  const { namespace, packageName, packageVersion } = options;\n\n  function startSpan<Options extends { tracingOptions?: OperationTracingOptions }>(\n    name: string,\n    operationOptions?: Options,\n    spanOptions?: TracingSpanOptions,\n  ): {\n    span: TracingSpan;\n    updatedOptions: OptionsWithTracingContext<Options>;\n  } {\n    const startSpanResult = getInstrumenter().startSpan(name, {\n      ...spanOptions,\n      packageName: packageName,\n      packageVersion: packageVersion,\n      tracingContext: operationOptions?.tracingOptions?.tracingContext,\n    });\n    let tracingContext = startSpanResult.tracingContext;\n    const span = startSpanResult.span;\n    if (!tracingContext.getValue(knownContextKeys.namespace)) {\n      tracingContext = tracingContext.setValue(knownContextKeys.namespace, namespace);\n    }\n    span.setAttribute(\"az.namespace\", tracingContext.getValue(knownContextKeys.namespace));\n    const updatedOptions: OptionsWithTracingContext<Options> = Object.assign({}, operationOptions, {\n      tracingOptions: { ...operationOptions?.tracingOptions, tracingContext },\n    });\n\n    return {\n      span,\n      updatedOptions,\n    };\n  }\n\n  async function withSpan<\n    Options extends { tracingOptions?: OperationTracingOptions },\n    Callback extends (\n      updatedOptions: Options,\n      span: Omit<TracingSpan, \"end\">,\n    ) => ReturnType<Callback>,\n  >(\n    name: string,\n    operationOptions: Options,\n    callback: Callback,\n    spanOptions?: TracingSpanOptions,\n  ): Promise<Resolved<ReturnType<Callback>>> {\n    const { span, updatedOptions } = startSpan(name, operationOptions, spanOptions);\n    try {\n      const result = await withContext(updatedOptions.tracingOptions.tracingContext, () =>\n        Promise.resolve(callback(updatedOptions, span)),\n      );\n      span.setStatus({ status: \"success\" });\n      return result as ReturnType<typeof withSpan>;\n    } catch (err: any) {\n      span.setStatus({ status: \"error\", error: err });\n      throw err;\n    } finally {\n      span.end();\n    }\n  }\n\n  function withContext<\n    CallbackArgs extends unknown[],\n    Callback extends (...args: CallbackArgs) => ReturnType<Callback>,\n  >(\n    context: TracingContext,\n    callback: Callback,\n    ...callbackArgs: CallbackArgs\n  ): ReturnType<Callback> {\n    return getInstrumenter().withContext(context, callback, ...callbackArgs);\n  }\n\n  /**\n   * Parses a traceparent header value into a span identifier.\n   *\n   * @param traceparentHeader - The traceparent header to parse.\n   * @returns An implementation-specific identifier for the span.\n   */\n  function parseTraceparentHeader(traceparentHeader: string): TracingContext | undefined {\n    return getInstrumenter().parseTraceparentHeader(traceparentHeader);\n  }\n\n  /**\n   * Creates a set of request headers to propagate tracing information to a backend.\n   *\n   * @param tracingContext - The context containing the span to serialize.\n   * @returns The set of headers to add to a request.\n   */\n  function createRequestHeaders(tracingContext?: TracingContext): Record<string, string> {\n    return getInstrumenter().createRequestHeaders(tracingContext);\n  }\n\n  return {\n    startSpan,\n    withSpan,\n    withContext,\n    parseTraceparentHeader,\n    createRequestHeaders,\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport {\n  Instrumenter,\n  InstrumenterSpanOptions,\n  OperationTracingOptions,\n  OptionsWithTracingContext,\n  Resolved,\n  SpanStatus,\n  SpanStatusError,\n  SpanStatusSuccess,\n  TracingClient,\n  TracingClientOptions,\n  TracingContext,\n  TracingSpan,\n  TracingSpanKind,\n  TracingSpanLink,\n  TracingSpanOptions,\n} from \"./interfaces.js\";\nexport { useInstrumenter } from \"./instrumenter.js\";\nexport { createTracingClient } from \"./tracingClient.js\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { SDK_VERSION } from \"../constants\";\nimport { createTracingClient } from \"@azure/core-tracing\";\n\n/**\n * Creates a span using the global tracer.\n * @internal\n */\nexport const tracingClient = createTracingClient({\n  namespace: \"Microsoft.AAD\",\n  packageName: \"@azure/identity\",\n  packageVersion: SDK_VERSION,\n});\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { AggregateAuthenticationError, CredentialUnavailableError } from \"../errors\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { tracingClient } from \"../util/tracing\";\n\n/**\n * @internal\n */\nexport const logger = credentialLogger(\"ChainedTokenCredential\");\n\n/**\n * Enables multiple `TokenCredential` implementations to be tried in order\n * until one of the getToken methods returns an access token.\n */\nexport class ChainedTokenCredential implements TokenCredential {\n  private _sources: TokenCredential[] = [];\n\n  /**\n   * Creates an instance of ChainedTokenCredential using the given credentials.\n   *\n   * @param sources - `TokenCredential` implementations to be tried in order.\n   *\n   * Example usage:\n   * ```javascript\n   * const firstCredential = new ClientSecretCredential(tenantId, clientId, clientSecret);\n   * const secondCredential = new ClientSecretCredential(tenantId, anotherClientId, anotherSecret);\n   * const credentialChain = new ChainedTokenCredential(firstCredential, secondCredential);\n   * ```\n   */\n  constructor(...sources: TokenCredential[]) {\n    this._sources = sources;\n  }\n\n  /**\n   * Returns the first access token returned by one of the chained\n   * `TokenCredential` implementations.  Throws an {@link AggregateAuthenticationError}\n   * when one or more credentials throws an {@link AuthenticationError} and\n   * no credentials have returned an access token.\n   *\n   * This method is called automatically by Azure SDK client libraries. You may call this method\n   * directly, but you must also handle token caching and token refreshing.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                `TokenCredential` implementation might make.\n   */\n  async getToken(scopes: string | string[], options: GetTokenOptions = {}): Promise<AccessToken> {\n    const { token } = await this.getTokenInternal(scopes, options);\n    return token;\n  }\n\n  private async getTokenInternal(\n    scopes: string | string[],\n    options: GetTokenOptions = {}\n  ): Promise<{ token: AccessToken; successfulCredential: TokenCredential }> {\n    let token: AccessToken | null = null;\n    let successfulCredential: TokenCredential;\n    const errors: Error[] = [];\n\n    return tracingClient.withSpan(\n      \"ChainedTokenCredential.getToken\",\n      options,\n      async (updatedOptions) => {\n        for (let i = 0; i < this._sources.length && token === null; i++) {\n          try {\n            token = await this._sources[i].getToken(scopes, updatedOptions);\n            successfulCredential = this._sources[i];\n          } catch (err: any) {\n            if (\n              err.name === \"CredentialUnavailableError\" ||\n              err.name === \"AuthenticationRequiredError\"\n            ) {\n              errors.push(err);\n            } else {\n              logger.getToken.info(formatError(scopes, err));\n              throw err;\n            }\n          }\n        }\n\n        if (!token && errors.length > 0) {\n          const err = new AggregateAuthenticationError(\n            errors,\n            \"ChainedTokenCredential authentication failed.\"\n          );\n          logger.getToken.info(formatError(scopes, err));\n          throw err;\n        }\n\n        logger.getToken.info(\n          `Result for ${successfulCredential.constructor.name}: ${formatSuccess(scopes)}`\n        );\n\n        if (token === null) {\n          throw new CredentialUnavailableError(\"Failed to retrieve a valid token\");\n        }\n        return { token, successfulCredential };\n      }\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { AccessToken } from \"@azure/core-auth\";\nimport { ChainedTokenCredential } from \"./chainedTokenCredential\";\nimport { TokenCredentialOptions } from \"../tokenCredentialOptions\";\n\nconst BrowserNotSupportedError = new Error(\n  \"DefaultAzureCredential is not supported in the browser. Use InteractiveBrowserCredential instead.\"\n);\nconst logger = credentialLogger(\"DefaultAzureCredential\");\n\n/**\n * Provides a default {@link ChainedTokenCredential} configuration for\n * applications that will be deployed to Azure.\n *\n * Only available in Node.js.\n */\nexport class DefaultAzureCredential extends ChainedTokenCredential {\n  /**\n   * Creates an instance of the DefaultAzureCredential class.\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(_tokenCredentialOptions?: TokenCredentialOptions) {\n    super();\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { Logger, LogLevel } from \"@azure/msal-common\";\nimport {\n    BrowserConfiguration,\n    buildConfiguration,\n    Configuration,\n} from \"../config/Configuration\";\nimport { version, name } from \"../packageMetadata\";\nimport {\n    BrowserCacheLocation,\n    LOG_LEVEL_CACHE_KEY,\n    LOG_PII_CACHE_KEY,\n} from \"../utils/BrowserConstants\";\n\n/**\n * Base class for operating context\n * Operating contexts are contexts in which MSAL.js is being run\n * More than one operating context may be available at a time\n * It's important from a logging and telemetry point of view for us to be able to identify the operating context.\n * For example: Some operating contexts will pre-cache tokens impacting performance telemetry\n */\nexport abstract class BaseOperatingContext {\n    protected logger: Logger;\n    protected config: BrowserConfiguration;\n    protected available: boolean;\n    protected browserEnvironment: boolean;\n\n    protected static loggerCallback(level: LogLevel, message: string): void {\n        switch (level) {\n            case LogLevel.Error:\n                // eslint-disable-next-line no-console\n                console.error(message);\n                return;\n            case LogLevel.Info:\n                // eslint-disable-next-line no-console\n                console.info(message);\n                return;\n            case LogLevel.Verbose:\n                // eslint-disable-next-line no-console\n                console.debug(message);\n                return;\n            case LogLevel.Warning:\n                // eslint-disable-next-line no-console\n                console.warn(message);\n                return;\n            default:\n                // eslint-disable-next-line no-console\n                console.log(message);\n                return;\n        }\n    }\n\n    constructor(config: Configuration) {\n        /*\n         * If loaded in an environment where window is not available,\n         * set internal flag to false so that further requests fail.\n         * This is to support server-side rendering environments.\n         */\n        this.browserEnvironment = typeof window !== \"undefined\";\n        this.config = buildConfiguration(config, this.browserEnvironment);\n\n        let sessionStorage: Storage | undefined;\n        try {\n            sessionStorage = window[BrowserCacheLocation.SessionStorage];\n            // Mute errors if it's a non-browser environment or cookies are blocked.\n        } catch (e) {}\n\n        const logLevelKey = sessionStorage?.getItem(LOG_LEVEL_CACHE_KEY);\n        const piiLoggingKey = sessionStorage\n            ?.getItem(LOG_PII_CACHE_KEY)\n            ?.toLowerCase();\n\n        const piiLoggingEnabled =\n            piiLoggingKey === \"true\"\n                ? true\n                : piiLoggingKey === \"false\"\n                ? false\n                : undefined;\n        const loggerOptions = { ...this.config.system.loggerOptions };\n\n        const logLevel =\n            logLevelKey && Object.keys(LogLevel).includes(logLevelKey)\n                ? LogLevel[logLevelKey]\n                : undefined;\n        if (logLevel) {\n            loggerOptions.loggerCallback = BaseOperatingContext.loggerCallback;\n            loggerOptions.logLevel = logLevel;\n        }\n        if (piiLoggingEnabled !== undefined) {\n            loggerOptions.piiLoggingEnabled = piiLoggingEnabled;\n        }\n\n        this.logger = new Logger(loggerOptions, name, version);\n        this.available = false;\n    }\n\n    /**\n     * returns the name of the module containing the API controller associated with this operating context\n     */\n    abstract getModuleName(): string;\n\n    /**\n     * returns the string identifier of this operating context\n     */\n    abstract getId(): string;\n\n    /**\n     * returns a boolean indicating whether this operating context is present\n     */\n    abstract initialize(): Promise<boolean>;\n\n    /**\n     * Return the MSAL config\n     * @returns BrowserConfiguration\n     */\n    getConfig(): BrowserConfiguration {\n        return this.config;\n    }\n\n    /**\n     * Returns the MSAL Logger\n     * @returns Logger\n     */\n    getLogger(): Logger {\n        return this.logger;\n    }\n\n    isAvailable(): boolean {\n        return this.available;\n    }\n\n    isBrowserEnvironment(): boolean {\n        return this.browserEnvironment;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { AccountInfo } from \"./AccountInfo\";\nimport { AuthBridge, AuthBridgeResponse } from \"./AuthBridge\";\nimport { AuthResult } from \"./AuthResult\";\nimport { BridgeCapabilities } from \"./BridgeCapabilities\";\nimport { BridgeError } from \"./BridgeError\";\nimport { BridgeRequest } from \"./BridgeRequest\";\nimport { BridgeRequestEnvelope, BridgeMethods } from \"./BridgeRequestEnvelope\";\nimport { BridgeResponseEnvelope } from \"./BridgeResponseEnvelope\";\nimport { BridgeStatusCode } from \"./BridgeStatusCode\";\nimport { IBridgeProxy } from \"./IBridgeProxy\";\nimport { InitContext } from \"./InitContext\";\nimport { TokenRequest } from \"./TokenRequest\";\nimport * as BrowserCrypto from \"../crypto/BrowserCrypto\";\n\ndeclare global {\n    interface Window {\n        nestedAppAuthBridge: AuthBridge;\n    }\n}\n\n/**\n * BridgeProxy\n * Provides a proxy for accessing a bridge to a host app and/or\n * platform broker\n */\nexport class BridgeProxy implements IBridgeProxy {\n    static bridgeRequests: BridgeRequest[] = [];\n    sdkName: string;\n    sdkVersion: string;\n    capabilities?: BridgeCapabilities;\n\n    /**\n     * initializeNestedAppAuthBridge - Initializes the bridge to the host app\n     * @returns a promise that resolves to an InitializeBridgeResponse or rejects with an Error\n     * @remarks This method will be called by the create factory method\n     * @remarks If the bridge is not available, this method will throw an error\n     */\n    protected static async initializeNestedAppAuthBridge(): Promise<InitContext> {\n        if (window === undefined) {\n            throw new Error(\"window is undefined\");\n        }\n        if (window.nestedAppAuthBridge === undefined) {\n            throw new Error(\"window.nestedAppAuthBridge is undefined\");\n        }\n\n        try {\n            window.nestedAppAuthBridge.addEventListener(\n                \"message\",\n                (response: AuthBridgeResponse) => {\n                    const responsePayload =\n                        typeof response === \"string\" ? response : response.data;\n                    const responseEnvelope: BridgeResponseEnvelope =\n                        JSON.parse(responsePayload);\n                    const request = BridgeProxy.bridgeRequests.find(\n                        (element) =>\n                            element.requestId === responseEnvelope.requestId\n                    );\n                    if (request !== undefined) {\n                        BridgeProxy.bridgeRequests.splice(\n                            BridgeProxy.bridgeRequests.indexOf(request),\n                            1\n                        );\n                        if (responseEnvelope.success) {\n                            request.resolve(responseEnvelope);\n                        } else {\n                            request.reject(responseEnvelope.error);\n                        }\n                    }\n                }\n            );\n\n            const bridgeResponse = await new Promise<BridgeResponseEnvelope>(\n                (resolve, reject) => {\n                    const message: BridgeRequestEnvelope = {\n                        messageType: \"NestedAppAuthRequest\",\n                        method: \"GetInitContext\",\n                        requestId: BrowserCrypto.createNewGuid(),\n                    };\n                    const request: BridgeRequest = {\n                        requestId: message.requestId,\n                        method: message.method,\n                        resolve: resolve,\n                        reject: reject,\n                    };\n                    BridgeProxy.bridgeRequests.push(request);\n                    window.nestedAppAuthBridge.postMessage(\n                        JSON.stringify(message)\n                    );\n                }\n            );\n\n            return BridgeProxy.validateBridgeResultOrThrow(\n                bridgeResponse.initContext\n            );\n        } catch (error) {\n            window.console.log(error);\n            throw error;\n        }\n    }\n\n    /**\n     * getTokenInteractive - Attempts to get a token interactively from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to an auth result or rejects with a BridgeError\n     */\n    public getTokenInteractive(request: TokenRequest): Promise<AuthResult> {\n        return this.getToken(\"GetTokenPopup\", request);\n    }\n\n    /**\n     * getTokenSilent Attempts to get a token silently from the bridge\n     * @param request A token request\n     * @returns a promise that resolves to an auth result or rejects with a BridgeError\n     */\n    public getTokenSilent(request: TokenRequest): Promise<AuthResult> {\n        return this.getToken(\"GetToken\", request);\n    }\n\n    private async getToken(\n        requestType: BridgeMethods,\n        request: TokenRequest\n    ): Promise<AuthResult> {\n        const result = await this.sendRequest(requestType, {\n            tokenParams: request,\n        });\n        return {\n            token: BridgeProxy.validateBridgeResultOrThrow(result.token),\n            account: BridgeProxy.validateBridgeResultOrThrow(result.account),\n        };\n    }\n\n    public async getActiveAccount(): Promise<AccountInfo> {\n        const result = await this.sendRequest(\"GetActiveAccount\");\n        return BridgeProxy.validateBridgeResultOrThrow(result.account);\n    }\n\n    public getHostCapabilities(): BridgeCapabilities | null {\n        return this.capabilities ?? null;\n    }\n\n    /**\n     * A method used to send a request to the bridge\n     * @param request A token request\n     * @returns a promise that resolves to a response of provided type or rejects with a BridgeError\n     */\n    private sendRequest(\n        method: BridgeMethods,\n        requestParams?: Partial<BridgeRequestEnvelope>\n    ): Promise<BridgeResponseEnvelope> {\n        const message: BridgeRequestEnvelope = {\n            messageType: \"NestedAppAuthRequest\",\n            method: method,\n            requestId: BrowserCrypto.createNewGuid(),\n            ...requestParams,\n        };\n\n        const promise = new Promise<BridgeResponseEnvelope>(\n            (resolve, reject) => {\n                const request: BridgeRequest = {\n                    requestId: message.requestId,\n                    method: message.method,\n                    resolve: resolve,\n                    reject: reject,\n                };\n                BridgeProxy.bridgeRequests.push(request);\n                window.nestedAppAuthBridge.postMessage(JSON.stringify(message));\n            }\n        );\n\n        return promise;\n    }\n\n    private static validateBridgeResultOrThrow<T>(input: T | undefined): T {\n        if (input === undefined) {\n            const bridgeError: BridgeError = {\n                status: BridgeStatusCode.NestedAppAuthUnavailable,\n            };\n            throw bridgeError;\n        }\n        return input;\n    }\n\n    /**\n     * Private constructor for BridgeProxy\n     * @param sdkName The name of the SDK being used to make requests on behalf of the app\n     * @param sdkVersion The version of the SDK being used to make requests on behalf of the app\n     * @param capabilities The capabilities of the bridge / SDK / platform broker\n     */\n    private constructor(\n        sdkName: string,\n        sdkVersion: string,\n        capabilities?: BridgeCapabilities\n    ) {\n        this.sdkName = sdkName;\n        this.sdkVersion = sdkVersion;\n        this.capabilities = capabilities;\n    }\n\n    /**\n     * Factory method for creating an implementation of IBridgeProxy\n     * @returns A promise that resolves to a BridgeProxy implementation\n     */\n    public static async create(): Promise<IBridgeProxy> {\n        const response = await BridgeProxy.initializeNestedAppAuthBridge();\n        return new BridgeProxy(\n            response.sdkName,\n            response.sdkVersion,\n            response.capabilities\n        );\n    }\n}\n\nexport default BridgeProxy;\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\nimport { IBridgeProxy } from \"../naa/IBridgeProxy\";\nimport { BridgeProxy } from \"../naa/BridgeProxy\";\nimport { AccountInfo } from \"../naa/AccountInfo\";\n\nexport class TeamsAppOperatingContext extends BaseOperatingContext {\n    protected bridgeProxy: IBridgeProxy | undefined = undefined;\n    protected activeAccount: AccountInfo | undefined = undefined;\n\n    /*\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n     * containing the implementation for this operating context\n     */\n    static readonly MODULE_NAME: string = \"\";\n\n    /**\n     * Unique identifier for the operating context\n     */\n    static readonly ID: string = \"TeamsAppOperatingContext\";\n\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName(): string {\n        return TeamsAppOperatingContext.MODULE_NAME;\n    }\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId(): string {\n        return TeamsAppOperatingContext.ID;\n    }\n\n    getBridgeProxy(): IBridgeProxy | undefined {\n        return this.bridgeProxy;\n    }\n\n    getActiveAccount(): AccountInfo | undefined {\n        return this.activeAccount;\n    }\n\n    setActiveAccount(account: AccountInfo): void {\n        this.activeAccount = account;\n    }\n\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize(): Promise<boolean> {\n        /*\n         * TODO: Add implementation to check for presence of inject Nested App Auth Bridge JavaScript interface\n         *\n         */\n        try {\n            if (typeof window !== \"undefined\") {\n                const bridgeProxy: IBridgeProxy = await BridgeProxy.create();\n                /*\n                 * Because we want single sign on we need to attempt to\n                 * grab the active account as part of initialization\n                 * this.activeAccount = await bridgeProxy.getActiveAccount();\n                 */\n                try {\n                    if (bridgeProxy.getHostCapabilities()?.queryAccount) {\n                        this.activeAccount =\n                            await bridgeProxy.getActiveAccount();\n                    }\n                } catch (e) {\n                    this.activeAccount = undefined;\n                }\n                this.bridgeProxy = bridgeProxy;\n                this.available = bridgeProxy !== undefined;\n            } else {\n                this.available = false;\n            }\n        } catch (e) {\n            this.available = false;\n        } finally {\n            return this.available;\n        }\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\n\nexport class StandardOperatingContext extends BaseOperatingContext {\n    /*\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n     * containing the implementation for this operating context\n     */\n    static readonly MODULE_NAME: string = \"\";\n\n    /**\n     * Unique identifier for the operating context\n     */\n    static readonly ID: string = \"StandardOperatingContext\";\n\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName(): string {\n        return StandardOperatingContext.MODULE_NAME;\n    }\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId(): string {\n        return StandardOperatingContext.ID;\n    }\n\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize(): Promise<boolean> {\n        this.available = typeof window !== \"undefined\";\n        return this.available;\n        /*\n         * NOTE: The standard context is available as long as there is a window.  If/when we split out WAM from Browser\n         * We can move the current contents of the initialize method to here and verify that the WAM extension is available\n         */\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { TeamsAppOperatingContext } from \"../operatingcontext/TeamsAppOperatingContext\";\nimport { StandardOperatingContext } from \"../operatingcontext/StandardOperatingContext\";\nimport { IController } from \"./IController\";\nimport { Configuration } from \"../config/Configuration\";\n\nexport async function createV3Controller(\n    config: Configuration\n): Promise<IController> {\n    const standard = new StandardOperatingContext(config);\n\n    await standard.initialize();\n\n    const controller = await import(\"./StandardController\");\n    return controller.StandardController.createController(standard);\n}\n\nexport async function createController(\n    config: Configuration\n): Promise<IController | null> {\n    const standard = new StandardOperatingContext(config);\n    const teamsApp = new TeamsAppOperatingContext(config);\n\n    const operatingContexts = [standard.initialize(), teamsApp.initialize()];\n\n    await Promise.all(operatingContexts);\n\n    if (\n        teamsApp.isAvailable() &&\n        teamsApp.getConfig().auth.supportsNestedAppAuth\n    ) {\n        const controller = await import(\"./NestedAppAuthController\");\n        return controller.NestedAppAuthController.createController(teamsApp);\n    } else if (standard.isAvailable()) {\n        const controller = await import(\"./StandardController\");\n        return controller.StandardController.createController(standard);\n    } else {\n        // Since neither of the actual operating contexts are available keep the UnknownOperatingContextController\n        return null;\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { ITokenCache } from \"../cache/ITokenCache\";\nimport { INavigationClient } from \"../navigation/INavigationClient\";\nimport { AuthorizationCodeRequest } from \"../request/AuthorizationCodeRequest\";\nimport { PopupRequest } from \"../request/PopupRequest\";\nimport { RedirectRequest } from \"../request/RedirectRequest\";\nimport { SilentRequest } from \"../request/SilentRequest\";\nimport { WrapperSKU } from \"../utils/BrowserConstants\";\nimport { IPublicClientApplication } from \"./IPublicClientApplication\";\nimport { IController } from \"../controllers/IController\";\nimport {\n    PerformanceCallbackFunction,\n    AccountInfo,\n    AccountFilter,\n    Logger,\n} from \"@azure/msal-common\";\nimport { EndSessionRequest } from \"../request/EndSessionRequest\";\nimport { SsoSilentRequest } from \"../request/SsoSilentRequest\";\nimport * as ControllerFactory from \"../controllers/ControllerFactory\";\nimport { StandardController } from \"../controllers/StandardController\";\nimport { BrowserConfiguration, Configuration } from \"../config/Configuration\";\nimport { StandardOperatingContext } from \"../operatingcontext/StandardOperatingContext\";\nimport { AuthenticationResult } from \"../response/AuthenticationResult\";\nimport { EventCallbackFunction } from \"../event/EventMessage\";\nimport { ClearCacheRequest } from \"../request/ClearCacheRequest\";\nimport { EndSessionPopupRequest } from \"../request/EndSessionPopupRequest\";\n\n/**\n * The PublicClientApplication class is the object exposed by the library to perform authentication and authorization functions in Single Page Applications\n * to obtain JWT tokens as described in the OAuth 2.0 Authorization Code Flow with PKCE specification.\n */\nexport class PublicClientApplication implements IPublicClientApplication {\n    protected controller: IController;\n\n    public static async createPublicClientApplication(\n        configuration: Configuration\n    ): Promise<IPublicClientApplication> {\n        const controller = await ControllerFactory.createV3Controller(\n            configuration\n        );\n        const pca = new PublicClientApplication(configuration, controller);\n\n        return pca;\n    }\n\n    /**\n     * @constructor\n     * Constructor for the PublicClientApplication used to instantiate the PublicClientApplication object\n     *\n     * Important attributes in the Configuration object for auth are:\n     * - clientID: the application ID of your application. You can obtain one by registering your application with our Application registration portal : https://portal.azure.com/#blade/Microsoft_AAD_IAM/ActiveDirectoryMenuBlade/RegisteredAppsPreview\n     * - authority: the authority URL for your application.\n     * - redirect_uri: the uri of your application registered in the portal.\n     *\n     * In Azure AD, authority is a URL indicating the Azure active directory that MSAL uses to obtain tokens.\n     * It is of the form https://login.microsoftonline.com/{Enter_the_Tenant_Info_Here}\n     * If your application supports Accounts in one organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with the Tenant Id or Tenant name (for example, contoso.microsoft.com).\n     * If your application supports Accounts in any organizational directory, replace \"Enter_the_Tenant_Info_Here\" value with organizations.\n     * If your application supports Accounts in any organizational directory and personal Microsoft accounts, replace \"Enter_the_Tenant_Info_Here\" value with common.\n     * To restrict support to Personal Microsoft accounts only, replace \"Enter_the_Tenant_Info_Here\" value with consumers.\n     *\n     * In Azure B2C, authority is of the form https://{instance}/tfp/{tenant}/{policyName}/\n     * Full B2C functionality will be available in this library in future versions.\n     *\n     * @param configuration Object for the MSAL PublicClientApplication instance\n     * @param IController Optional parameter to explictly set the controller. (Will be removed when we remove public constructor)\n     */\n    public constructor(configuration: Configuration, controller?: IController) {\n        if (controller) {\n            this.controller = controller;\n        } else {\n            const standardOperatingContext = new StandardOperatingContext(\n                configuration\n            );\n            this.controller = new StandardController(standardOperatingContext);\n        }\n    }\n\n    /**\n     * Initializer function to perform async startup tasks such as connecting to WAM extension\n     */\n    async initialize(): Promise<void> {\n        return this.controller.initialize();\n    }\n\n    /**\n     * Use when you want to obtain an access_token for your API via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    async acquireTokenPopup(\n        request: PopupRequest\n    ): Promise<AuthenticationResult> {\n        return this.controller.acquireTokenPopup(request);\n    }\n\n    /**\n     * Use when you want to obtain an access_token for your API by redirecting the user's browser window to the authorization endpoint. This function redirects\n     * the page, so any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    acquireTokenRedirect(request: RedirectRequest): Promise<void> {\n        return this.controller.acquireTokenRedirect(request);\n    }\n\n    /**\n     * Silently acquire an access token for a given set of scopes. Returns currently processing promise if parallel requests are made.\n     *\n     * @param {@link (SilentRequest:type)}\n     * @returns {Promise.<AuthenticationResult>} - a promise that is fulfilled when this function has completed, or rejected if an error was raised. Returns the {@link AuthenticationResult} object\n     */\n    acquireTokenSilent(\n        silentRequest: SilentRequest\n    ): Promise<AuthenticationResult> {\n        return this.controller.acquireTokenSilent(silentRequest);\n    }\n\n    /**\n     * This function redeems an authorization code (passed as code) from the eSTS token endpoint.\n     * This authorization code should be acquired server-side using a confidential client to acquire a spa_code.\n     * This API is not indended for normal authorization code acquisition and redemption.\n     *\n     * Redemption of this authorization code will not require PKCE, as it was acquired by a confidential client.\n     *\n     * @param request {@link AuthorizationCodeRequest}\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    acquireTokenByCode(\n        request: AuthorizationCodeRequest\n    ): Promise<AuthenticationResult> {\n        return this.controller.acquireTokenByCode(request);\n    }\n\n    /**\n     * Adds event callbacks to array\n     * @param callback\n     */\n    addEventCallback(callback: EventCallbackFunction): string | null {\n        return this.controller.addEventCallback(callback);\n    }\n\n    /**\n     * Removes callback with provided id from callback array\n     * @param callbackId\n     */\n    removeEventCallback(callbackId: string): void {\n        return this.controller.removeEventCallback(callbackId);\n    }\n\n    /**\n     * Registers a callback to receive performance events.\n     *\n     * @param {PerformanceCallbackFunction} callback\n     * @returns {string}\n     */\n    addPerformanceCallback(callback: PerformanceCallbackFunction): string {\n        return this.controller.addPerformanceCallback(callback);\n    }\n\n    /**\n     * Removes a callback registered with addPerformanceCallback.\n     *\n     * @param {string} callbackId\n     * @returns {boolean}\n     */\n    removePerformanceCallback(callbackId: string): boolean {\n        return this.controller.removePerformanceCallback(callbackId);\n    }\n\n    /**\n     * Adds event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    enableAccountStorageEvents(): void {\n        this.controller.enableAccountStorageEvents();\n    }\n\n    /**\n     * Removes event listener that emits an event when a user account is added or removed from localstorage in a different browser tab or window\n     */\n    disableAccountStorageEvents(): void {\n        this.controller.disableAccountStorageEvents();\n    }\n\n    /**\n     * Returns the first account found in the cache that matches the account filter passed in.\n     * @param accountFilter\n     * @returns The first account found in the cache matching the provided filter or null if no account could be found.\n     */\n    getAccount(accountFilter: AccountFilter): AccountInfo | null {\n        return this.controller.getAccount(accountFilter);\n    }\n\n    /**\n     * Returns the signed in account matching homeAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param homeAccountId\n     * @returns The account object stored in MSAL\n     * @deprecated - Use getAccount instead\n     */\n    getAccountByHomeId(homeAccountId: string): AccountInfo | null {\n        return this.controller.getAccountByHomeId(homeAccountId);\n    }\n\n    /**\n     * Returns the signed in account matching localAccountId.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found\n     * @param localAccountId\n     * @returns The account object stored in MSAL\n     * @deprecated - Use getAccount instead\n     */\n    getAccountByLocalId(localId: string): AccountInfo | null {\n        return this.controller.getAccountByLocalId(localId);\n    }\n\n    /**\n     * Returns the signed in account matching username.\n     * (the account object is created at the time of successful login)\n     * or null when no matching account is found.\n     * This API is provided for convenience but getAccountById should be used for best reliability\n     * @param userName\n     * @returns The account object stored in MSAL\n     * @deprecated - Use getAccount instead\n     */\n    getAccountByUsername(userName: string): AccountInfo | null {\n        return this.controller.getAccountByUsername(userName);\n    }\n\n    /**\n     * Returns all the accounts in the cache that match the optional filter. If no filter is provided, all accounts are returned.\n     * @param accountFilter - (Optional) filter to narrow down the accounts returned\n     * @returns Array of AccountInfo objects in cache\n     */\n    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[] {\n        return this.controller.getAllAccounts(accountFilter);\n    }\n\n    /**\n     * Event handler function which allows users to fire events after the PublicClientApplication object\n     * has loaded during redirect flows. This should be invoked on all page loads involved in redirect\n     * auth flows.\n     * @param hash Hash to process. Defaults to the current value of window.location.hash. Only needs to be provided explicitly if the response to be handled is not contained in the current value.\n     * @returns Token response or null. If the return value is null, then no auth redirect was detected.\n     */\n    handleRedirectPromise(\n        hash?: string | undefined\n    ): Promise<AuthenticationResult | null> {\n        return this.controller.handleRedirectPromise(hash);\n    }\n\n    /**\n     * Use when initiating the login process via opening a popup window in the user's browser\n     *\n     * @param request\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    loginPopup(\n        request?: PopupRequest | undefined\n    ): Promise<AuthenticationResult> {\n        return this.controller.loginPopup(request);\n    }\n\n    /**\n     * Use when initiating the login process by redirecting the user's browser to the authorization endpoint. This function redirects the page, so\n     * any code that follows this function will not execute.\n     *\n     * IMPORTANT: It is NOT recommended to have code that is dependent on the resolution of the Promise. This function will navigate away from the current\n     * browser window. It currently returns a Promise in order to reflect the asynchronous nature of the code running in this function.\n     *\n     * @param request\n     */\n    loginRedirect(request?: RedirectRequest | undefined): Promise<void> {\n        return this.controller.loginRedirect(request);\n    }\n\n    /**\n     * Deprecated logout function. Use logoutRedirect or logoutPopup instead\n     * @param logoutRequest\n     * @deprecated\n     */\n    logout(logoutRequest?: EndSessionRequest): Promise<void> {\n        return this.controller.logout(logoutRequest);\n    }\n\n    /**\n     * Use to log out the current user, and redirect the user to the postLogoutRedirectUri.\n     * Default behaviour is to redirect the user to `window.location.href`.\n     * @param logoutRequest\n     */\n    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void> {\n        return this.controller.logoutRedirect(logoutRequest);\n    }\n\n    /**\n     * Clears local cache for the current user then opens a popup window prompting the user to sign-out of the server\n     * @param logoutRequest\n     */\n    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void> {\n        return this.controller.logoutPopup(logoutRequest);\n    }\n\n    /**\n     * This function uses a hidden iframe to fetch an authorization code from the eSTS. There are cases where this may not work:\n     * - Any browser using a form of Intelligent Tracking Prevention\n     * - If there is not an established session with the service\n     *\n     * In these cases, the request must be done inside a popup or full frame redirect.\n     *\n     * For the cases where interaction is required, you cannot send a request with prompt=none.\n     *\n     * If your refresh token has expired, you can use this function to fetch a new set of tokens silently as long as\n     * you session on the server still exists.\n     * @param request {@link SsoSilentRequest}\n     *\n     * @returns A promise that is fulfilled when this function has completed, or rejected if an error was raised.\n     */\n    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult> {\n        return this.controller.ssoSilent(request);\n    }\n\n    /**\n     * Gets the token cache for the application.\n     */\n    getTokenCache(): ITokenCache {\n        return this.controller.getTokenCache();\n    }\n\n    /**\n     * Returns the logger instance\n     */\n    getLogger(): Logger {\n        return this.controller.getLogger();\n    }\n\n    /**\n     * Replaces the default logger set in configurations with new Logger with new configurations\n     * @param logger Logger instance\n     */\n    setLogger(logger: Logger): void {\n        this.controller.setLogger(logger);\n    }\n\n    /**\n     * Sets the account to use as the active account. If no account is passed to the acquireToken APIs, then MSAL will use this active account.\n     * @param account\n     */\n    setActiveAccount(account: AccountInfo | null): void {\n        this.controller.setActiveAccount(account);\n    }\n\n    /**\n     * Gets the currently active account\n     */\n    getActiveAccount(): AccountInfo | null {\n        return this.controller.getActiveAccount();\n    }\n\n    /**\n     * Called by wrapper libraries (Angular & React) to set SKU and Version passed down to telemetry, logger, etc.\n     * @param sku\n     * @param version\n     */\n    initializeWrapperLibrary(sku: WrapperSKU, version: string): void {\n        return this.controller.initializeWrapperLibrary(sku, version);\n    }\n\n    /**\n     * Sets navigation client\n     * @param navigationClient\n     */\n    setNavigationClient(navigationClient: INavigationClient): void {\n        this.controller.setNavigationClient(navigationClient);\n    }\n\n    /**\n     * Returns the configuration object\n     * @internal\n     */\n    getConfiguration(): BrowserConfiguration {\n        return this.controller.getConfiguration();\n    }\n\n    /**\n     * Hydrates cache with the tokens and account in the AuthenticationResult object\n     * @param result\n     * @param request - The request object that was used to obtain the AuthenticationResult\n     * @returns\n     */\n    async hydrateCache(\n        result: AuthenticationResult,\n        request:\n            | SilentRequest\n            | SsoSilentRequest\n            | RedirectRequest\n            | PopupRequest\n    ): Promise<void> {\n        return this.controller.hydrateCache(result, request);\n    }\n\n    /**\n     * Clears tokens and account from the browser cache.\n     * @param logoutRequest\n     */\n    clearCache(logoutRequest?: ClearCacheRequest): Promise<void> {\n        return this.controller.clearCache(logoutRequest);\n    }\n}\n", "/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License.\n */\n\nimport { BaseOperatingContext } from \"./BaseOperatingContext\";\n\nexport class UnknownOperatingContext extends BaseOperatingContext {\n    /*\n     * TODO: Once we have determine the bundling code return here to specify the name of the bundle\n     * containing the implementation for this operating context\n     */\n    static readonly MODULE_NAME: string = \"\";\n\n    /**\n     * Unique identifier for the operating context\n     */\n    static readonly ID: string = \"UnknownOperatingContext\";\n\n    /**\n     * Return the module name.  Intended for use with import() to enable dynamic import\n     * of the implementation associated with this operating context\n     * @returns\n     */\n    getModuleName(): string {\n        return UnknownOperatingContext.MODULE_NAME;\n    }\n    /**\n     * Returns the unique identifier for this operating context\n     * @returns string\n     */\n    getId(): string {\n        return UnknownOperatingContext.ID;\n    }\n\n    /**\n     * Checks whether the operating context is available.\n     * Confirms that the code is running a browser rather.  This is required.\n     * @returns Promise<boolean> indicating whether this operating context is currently available.\n     */\n    async initialize(): Promise<boolean> {\n        /**\n         * This operating context is in use when we have not checked for what the operating context is.\n         * The context is unknown until we check it.\n         */\n        return true;\n    }\n}\n", "/*! @azure/msal-browser v3.13.0 2024-04-11 */\n'use strict';\nimport * as BrowserUtils from './utils/BrowserUtils.mjs';\nexport { BrowserUtils };\nexport { PublicClientApplication } from './app/PublicClientApplication.mjs';\nexport { PublicClientNext } from './app/PublicClientNext.mjs';\nexport { DEFAULT_IFRAME_TIMEOUT_MS } from './config/Configuration.mjs';\nexport { ApiId, BrowserCacheLocation, CacheLookupPolicy, InteractionStatus, InteractionType, WrapperSKU } from './utils/BrowserConstants.mjs';\nexport { BrowserAuthError, BrowserAuthErrorMessage } from './error/BrowserAuthError.mjs';\nexport { BrowserConfigurationAuthError, BrowserConfigurationAuthErrorMessage } from './error/BrowserConfigurationAuthError.mjs';\nexport { stubbedPublicClientApplication } from './app/IPublicClientApplication.mjs';\nexport { NavigationClient } from './navigation/NavigationClient.mjs';\nexport { MemoryStorage } from './cache/MemoryStorage.mjs';\nexport { BrowserStorage } from './cache/BrowserStorage.mjs';\nexport { EventMessageUtils } from './event/EventMessage.mjs';\nexport { EventType } from './event/EventType.mjs';\nexport { SignedHttpRequest } from './crypto/SignedHttpRequest.mjs';\nexport { BrowserPerformanceClient } from './telemetry/BrowserPerformanceClient.mjs';\nexport { BrowserPerformanceMeasurement } from './telemetry/BrowserPerformanceMeasurement.mjs';\nexport { AccountEntity, AuthError, AuthErrorCodes, AuthErrorMessage, AuthenticationHeaderParser, AuthenticationScheme, AzureCloudInstance, ClientAuthError, ClientAuthErrorCodes, ClientAuthErrorMessage, ClientConfigurationError, ClientConfigurationErrorCodes, ClientConfigurationErrorMessage, InteractionRequiredAuthError, InteractionRequiredAuthErrorCodes, InteractionRequiredAuthErrorMessage, JsonWebTokenTypes, LogLevel, Logger, OIDC_DEFAULT_SCOPES, PerformanceEvents, PromptValue, ProtocolMode, ServerError, ServerResponseType, StringUtils, StubPerformanceClient, UrlString } from '@azure/msal-common';\nexport { version } from './packageMetadata.mjs';\nimport * as BrowserAuthErrorCodes from './error/BrowserAuthErrorCodes.mjs';\nexport { BrowserAuthErrorCodes };\nimport * as BrowserConfigurationAuthErrorCodes from './error/BrowserConfigurationAuthErrorCodes.mjs';\nexport { BrowserConfigurationAuthErrorCodes };\n//# sourceMappingURL=index.mjs.map\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../shims-public.d.ts\" />\n\ntype AbortEventListener = (this: AbortSignalLike, ev?: any) => any;\n\nconst listenersMap = new WeakMap<AbortSignal, AbortEventListener[]>();\nconst abortedMap = new WeakMap<AbortSignal, boolean>();\n\n/**\n * Allows the request to be aborted upon firing of the \"abort\" event.\n * Compatible with the browser built-in AbortSignal and common polyfills.\n */\nexport interface AbortSignalLike {\n  /**\n   * Indicates if the signal has already been aborted.\n   */\n  readonly aborted: boolean;\n  /**\n   * Add new \"abort\" event listener, only support \"abort\" event.\n   */\n  addEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   */\n  removeEventListener(\n    type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any,\n    options?: any\n  ): void;\n}\n\n/**\n * An aborter instance implements AbortSignal interface, can abort HTTP requests.\n *\n * - Call AbortSignal.none to create a new AbortSignal instance that cannot be cancelled.\n * Use `AbortSignal.none` when you are required to pass a cancellation token but the operation\n * cannot or will not ever be cancelled.\n *\n * @example\n * Abort without timeout\n * ```ts\n * await doAsyncWork(AbortSignal.none);\n * ```\n */\nexport class AbortSignal implements AbortSignalLike {\n  constructor() {\n    listenersMap.set(this, []);\n    abortedMap.set(this, false);\n  }\n\n  /**\n   * Status of whether aborted or not.\n   *\n   * @readonly\n   */\n  public get aborted(): boolean {\n    if (!abortedMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    return abortedMap.get(this)!;\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will never be aborted.\n   *\n   * @readonly\n   */\n  public static get none(): AbortSignal {\n    return new AbortSignal();\n  }\n\n  /**\n   * onabort event listener.\n   */\n  public onabort: ((ev?: Event) => any) | null = null;\n\n  /**\n   * Added new \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be added\n   */\n  public addEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n    listeners.push(listener);\n  }\n\n  /**\n   * Remove \"abort\" event listener, only support \"abort\" event.\n   *\n   * @param _type - Only support \"abort\" event\n   * @param listener - The listener to be removed\n   */\n  public removeEventListener(\n    // tslint:disable-next-line:variable-name\n    _type: \"abort\",\n    listener: (this: AbortSignalLike, ev: any) => any\n  ): void {\n    if (!listenersMap.has(this)) {\n      throw new TypeError(\"Expected `this` to be an instance of AbortSignal.\");\n    }\n\n    const listeners = listenersMap.get(this)!;\n\n    const index = listeners.indexOf(listener);\n    if (index > -1) {\n      listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Dispatches a synthetic event to the AbortSignal.\n   */\n  dispatchEvent(_event: Event): boolean {\n    throw new Error(\n      \"This is a stub dispatchEvent implementation that should not be used.  It only exists for type-checking purposes.\"\n    );\n  }\n}\n\n/**\n * Helper to trigger an abort event immediately, the onabort and all abort event listeners will be triggered.\n * Will try to trigger abort event for all linked AbortSignal nodes.\n *\n * - If there is a timeout, the timer will be cancelled.\n * - If aborted is true, nothing will happen.\n *\n * @internal\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nexport function abortSignal(signal: AbortSignal): void {\n  if (signal.aborted) {\n    return;\n  }\n\n  if (signal.onabort) {\n    signal.onabort.call(signal);\n  }\n\n  const listeners = listenersMap.get(signal)!;\n  if (listeners) {\n    // Create a copy of listeners so mutations to the array\n    // (e.g. via removeListener calls) don't affect the listeners\n    // we invoke.\n    listeners.slice().forEach((listener) => {\n      listener.call(signal, { type: \"abort\" });\n    });\n  }\n\n  abortedMap.set(signal, true);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortSignal, AbortSignalLike, abortSignal } from \"./AbortSignal\";\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n\n/**\n * An AbortController provides an AbortSignal and the associated controls to signal\n * that an asynchronous operation should be aborted.\n *\n * @example\n * Abort an operation when another event fires\n * ```ts\n * const controller = new AbortController();\n * const signal = controller.signal;\n * doAsyncWork(signal);\n * button.addEventListener('click', () => controller.abort());\n * ```\n *\n * @example\n * Share aborter cross multiple operations in 30s\n * ```ts\n * // Upload the same data to 2 different data centers at the same time,\n * // abort another when any of them is finished\n * const controller = AbortController.withTimeout(30 * 1000);\n * doAsyncWork(controller.signal).then(controller.abort);\n * doAsyncWork(controller.signal).then(controller.abort);\n *```\n *\n * @example\n * Cascaded aborting\n * ```ts\n * // All operations can't take more than 30 seconds\n * const aborter = Aborter.timeout(30 * 1000);\n *\n * // Following 2 operations can't take more than 25 seconds\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * await doAsyncWork(aborter.withTimeout(25 * 1000));\n * ```\n */\nexport class AbortController {\n  private _signal: AbortSignal;\n\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(parentSignals?: AbortSignalLike[]);\n  /**\n   * @param parentSignals - The AbortSignals that will signal aborted on the AbortSignal associated with this controller.\n   */\n  constructor(...parentSignals: AbortSignalLike[]);\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  constructor(parentSignals?: any) {\n    this._signal = new AbortSignal();\n\n    if (!parentSignals) {\n      return;\n    }\n    // coerce parentSignals into an array\n    if (!Array.isArray(parentSignals)) {\n      // eslint-disable-next-line prefer-rest-params\n      parentSignals = arguments;\n    }\n    for (const parentSignal of parentSignals) {\n      // if the parent signal has already had abort() called,\n      // then call abort on this signal as well.\n      if (parentSignal.aborted) {\n        this.abort();\n      } else {\n        // when the parent signal aborts, this signal should as well.\n        parentSignal.addEventListener(\"abort\", () => {\n          this.abort();\n        });\n      }\n    }\n  }\n\n  /**\n   * The AbortSignal associated with this controller that will signal aborted\n   * when the abort method is called on this controller.\n   *\n   * @readonly\n   */\n  public get signal(): AbortSignal {\n    return this._signal;\n  }\n\n  /**\n   * Signal that any operations passed this controller's associated abort signal\n   * to cancel any remaining work and throw an `AbortError`.\n   */\n  abort(): void {\n    abortSignal(this._signal);\n  }\n\n  /**\n   * Creates a new AbortSignal instance that will abort after the provided ms.\n   * @param ms - Elapsed time in milliseconds to trigger an abort.\n   */\n  public static timeout(ms: number): AbortSignal {\n    const signal = new AbortSignal();\n    const timer = setTimeout(abortSignal, ms, signal);\n    // Prevent the active Timer from keeping the Node.js event loop active.\n    if (typeof timer.unref === \"function\") {\n      timer.unref();\n    }\n    return signal;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// Changes to Aborter\n// * Rename Aborter to AbortSignal\n// * Remove withValue and getValue - async context should be solved differently/wholistically, not tied to cancellation\n// * Remove withTimeout, it's moved to the controller\n// * AbortSignal constructor no longer takes a parent. Cancellation graphs are created from the controller.\n\n// Potential changes to align with DOM Spec\n// * dispatchEvent on Signal\n\nexport { AbortController, AbortError } from \"./AbortController\";\nexport { AbortSignal, AbortSignalLike } from \"./AbortSignal\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  interface Event {}\n}\n\nexport { AbortError } from \"./AbortError.js\";\nexport { AbortSignalLike } from \"./AbortSignalLike.js\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport type { AbortOptions } from \"./aborterUtils.js\";\n\n/**\n * Options for the createAbortablePromise function.\n */\nexport interface CreateAbortablePromiseOptions extends AbortOptions {\n  /** A function to be called if the promise was aborted */\n  cleanupBeforeAbort?: () => void;\n}\n\n/**\n * Creates an abortable promise.\n * @param buildPromise - A function that takes the resolve and reject functions as parameters.\n * @param options - The options for the abortable promise.\n * @returns A promise that can be aborted.\n */\nexport function createAbortablePromise<T>(\n  buildPromise: (\n    resolve: (value: T | PromiseLike<T>) => void,\n    reject: (reason?: any) => void,\n  ) => void,\n  options?: CreateAbortablePromiseOptions,\n): Promise<T> {\n  const { cleanupBeforeAbort, abortSignal, abortErrorMsg } = options ?? {};\n  return new Promise((resolve, reject) => {\n    function rejectOnAbort(): void {\n      reject(new AbortError(abortErrorMsg ?? \"The operation was aborted.\"));\n    }\n    function removeListeners(): void {\n      abortSignal?.removeEventListener(\"abort\", onAbort);\n    }\n    function onAbort(): void {\n      cleanupBeforeAbort?.();\n      removeListeners();\n      rejectOnAbort();\n    }\n    if (abortSignal?.aborted) {\n      return rejectOnAbort();\n    }\n    try {\n      buildPromise(\n        (x) => {\n          removeListeners();\n          resolve(x);\n        },\n        (x) => {\n          removeListeners();\n          reject(x);\n        },\n      );\n    } catch (err) {\n      reject(err);\n    }\n    abortSignal?.addEventListener(\"abort\", onAbort);\n  });\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { AbortOptions } from \"./aborterUtils.js\";\nimport { createAbortablePromise } from \"./createAbortablePromise.js\";\n\nconst StandardAbortMessage = \"The delay was aborted.\";\n\n/**\n * Options for support abort functionality for the delay method\n */\nexport interface DelayOptions extends AbortOptions {}\n\n/**\n * A wrapper for setTimeout that resolves a promise after timeInMs milliseconds.\n * @param timeInMs - The number of milliseconds to be delayed.\n * @param options - The options for delay - currently abort options\n * @returns Promise that is resolved after timeInMs\n */\nexport function delay(timeInMs: number, options?: DelayOptions): Promise<void> {\n  let token: ReturnType<typeof setTimeout>;\n  const { abortSignal, abortErrorMsg } = options ?? {};\n  return createAbortablePromise(\n    (resolve) => {\n      token = setTimeout(resolve, timeInMs);\n    },\n    {\n      cleanupBeforeAbort: () => clearTimeout(token),\n      abortSignal,\n      abortErrorMsg: abortErrorMsg ?? StandardAbortMessage,\n    },\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\n\n/**\n * Options related to abort controller.\n */\nexport interface AbortOptions {\n  /**\n   * The abortSignal associated with containing operation.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * The abort error message associated with containing operation.\n   */\n  abortErrorMsg?: string;\n}\n\n/**\n * Represents a function that returns a promise that can be aborted.\n */\nexport type AbortablePromiseBuilder<T> = (abortOptions: {\n  abortSignal?: AbortSignalLike;\n}) => Promise<T>;\n\n/**\n * promise.race() wrapper that aborts rest of promises as soon as the first promise settles.\n */\nexport async function cancelablePromiseRace<T extends unknown[]>(\n  abortablePromiseBuilders: AbortablePromiseBuilder<T[number]>[],\n  options?: { abortSignal?: AbortSignalLike },\n): Promise<T[number]> {\n  const aborter = new AbortController();\n  function abortHandler(): void {\n    aborter.abort();\n  }\n  options?.abortSignal?.addEventListener(\"abort\", abortHandler);\n  try {\n    return await Promise.race(\n      abortablePromiseBuilders.map((p) => p({ abortSignal: aborter.signal })),\n    );\n  } finally {\n    aborter.abort();\n    options?.abortSignal?.removeEventListener(\"abort\", abortHandler);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Returns a random integer value between a lower and upper bound,\n * inclusive of both bounds.\n * Note that this uses Math.random and isn't secure. If you need to use\n * this for any kind of security purpose, find a better source of random.\n * @param min - The smallest integer value allowed.\n * @param max - The largest integer value allowed.\n */\nexport function getRandomIntegerInclusive(min: number, max: number): number {\n  // Make sure inputs are integers.\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  // Pick a random offset from zero to the size of the range.\n  // Since Math.random() can never return 1, we have to make the range one larger\n  // in order to be inclusive of the maximum value after we take the floor.\n  const offset = Math.floor(Math.random() * (max - min + 1));\n  return offset + min;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * A generic shape for a plain JS object.\n */\nexport type UnknownObject = { [s: string]: unknown };\n\n/**\n * Helper to determine when an input is a generic JS object.\n * @returns true when input is an object type that is not null, Array, RegExp, or Date.\n */\nexport function isObject(input: unknown): input is UnknownObject {\n  return (\n    typeof input === \"object\" &&\n    input !== null &&\n    !Array.isArray(input) &&\n    !(input instanceof RegExp) &&\n    !(input instanceof Date)\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isObject } from \"./object.js\";\n\n/**\n * Typeguard for an error object shape (has name and message)\n * @param e - Something caught by a catch clause.\n */\nexport function isError(e: unknown): e is Error {\n  if (isObject(e)) {\n    const hasName = typeof e.name === \"string\";\n    const hasMessage = typeof e.message === \"string\";\n    return hasName && hasMessage;\n  }\n  return false;\n}\n\n/**\n * Given what is thought to be an error object, return the message if possible.\n * If the message is missing, returns a stringified version of the input.\n * @param e - Something thrown from a try block\n * @returns The error message or a string of the input\n */\nexport function getErrorMessage(e: unknown): string {\n  if (isError(e)) {\n    return e.message;\n  } else {\n    let stringified: string;\n    try {\n      if (typeof e === \"object\" && e) {\n        stringified = JSON.stringify(e);\n      } else {\n        stringified = String(e);\n      }\n    } catch (err: any) {\n      stringified = \"[unable to stringify input]\";\n    }\n    return `Unknown error ${stringified}`;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  // stub these out for the browser\n  function btoa(input: string): string;\n  function atob(input: string): string;\n}\n\n/** The supported character encoding type */\nexport type EncodingType = \"utf-8\" | \"base64\" | \"base64url\" | \"hex\";\n\n/**\n * The helper that transforms bytes with specific character encoding into string\n * @param bytes - the uint8array bytes\n * @param format - the format we use to encode the byte\n * @returns a string of the encoded string\n */\nexport function uint8ArrayToString(bytes: Uint8Array, format: EncodingType): string {\n  switch (format) {\n    case \"utf-8\":\n      return uint8ArrayToUtf8String(bytes);\n    case \"base64\":\n      return uint8ArrayToBase64(bytes);\n    case \"base64url\":\n      return uint8ArrayToBase64Url(bytes);\n    case \"hex\":\n      return uint8ArrayToHexString(bytes);\n  }\n}\n\n/**\n * The helper that transforms string to specific character encoded bytes array.\n * @param value - the string to be converted\n * @param format - the format we use to decode the value\n * @returns a uint8array\n */\nexport function stringToUint8Array(value: string, format: EncodingType): Uint8Array {\n  switch (format) {\n    case \"utf-8\":\n      return utf8StringToUint8Array(value);\n    case \"base64\":\n      return base64ToUint8Array(value);\n    case \"base64url\":\n      return base64UrlToUint8Array(value);\n    case \"hex\":\n      return hexStringToUint8Array(value);\n  }\n}\n\n/**\n * Decodes a Uint8Array into a Base64 string.\n * @internal\n */\nexport function uint8ArrayToBase64(bytes: Uint8Array): string {\n  return btoa([...bytes].map((x) => String.fromCharCode(x)).join(\"\"));\n}\n\n/**\n * Decodes a Uint8Array into a Base64Url string.\n * @internal\n */\nexport function uint8ArrayToBase64Url(bytes: Uint8Array): string {\n  return uint8ArrayToBase64(bytes).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n}\n\n/**\n * Decodes a Uint8Array into a javascript string.\n * @internal\n */\nexport function uint8ArrayToUtf8String(bytes: Uint8Array): string {\n  const decoder = new TextDecoder();\n  const dataString = decoder.decode(bytes);\n  return dataString;\n}\n\n/**\n * Decodes a Uint8Array into a hex string\n * @internal\n */\nexport function uint8ArrayToHexString(bytes: Uint8Array): string {\n  return [...bytes].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n\n/**\n * Encodes a JavaScript string into a Uint8Array.\n * @internal\n */\nexport function utf8StringToUint8Array(value: string): Uint8Array {\n  return new TextEncoder().encode(value);\n}\n\n/**\n * Encodes a Base64 string into a Uint8Array.\n * @internal\n */\nexport function base64ToUint8Array(value: string): Uint8Array {\n  return new Uint8Array([...atob(value)].map((x) => x.charCodeAt(0)));\n}\n\n/**\n * Encodes a Base64Url string into a Uint8Array.\n * @internal\n */\nexport function base64UrlToUint8Array(value: string): Uint8Array {\n  const base64String = value.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  return base64ToUint8Array(base64String);\n}\n\nconst hexDigits = new Set(\"0123456789abcdefABCDEF\");\n\n/**\n * Encodes a hex string into a Uint8Array\n * @internal\n */\nexport function hexStringToUint8Array(value: string): Uint8Array {\n  // If value has odd length, the last character will be ignored, consistent with NodeJS Buffer behavior\n  const bytes = new Uint8Array(value.length / 2);\n  for (let i = 0; i < value.length / 2; ++i) {\n    const highNibble = value[2 * i];\n    const lowNibble = value[2 * i + 1];\n    if (!hexDigits.has(highNibble) || !hexDigits.has(lowNibble)) {\n      // Replicate Node Buffer behavior by exiting early when we encounter an invalid byte\n      return bytes.slice(0, i);\n    }\n\n    bytes[i] = parseInt(`${highNibble}${lowNibble}`, 16);\n  }\n\n  return bytes;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { stringToUint8Array, uint8ArrayToString } from \"./bytesEncoding.js\";\n\n// stubs for browser self.crypto\ninterface JsonWebKey {}\ninterface CryptoKey {}\ntype KeyUsage =\n  | \"decrypt\"\n  | \"deriveBits\"\n  | \"deriveKey\"\n  | \"encrypt\"\n  | \"sign\"\n  | \"unwrapKey\"\n  | \"verify\"\n  | \"wrapKey\";\ninterface Algorithm {\n  name: string;\n}\ninterface SubtleCrypto {\n  importKey(\n    format: string,\n    keyData: JsonWebKey,\n    algorithm: HmacImportParams,\n    extractable: boolean,\n    usage: KeyUsage[],\n  ): Promise<CryptoKey>;\n  sign(\n    algorithm: HmacImportParams,\n    key: CryptoKey,\n    data: ArrayBufferView | ArrayBuffer,\n  ): Promise<ArrayBuffer>;\n  digest(algorithm: Algorithm, data: ArrayBufferView | ArrayBuffer): Promise<ArrayBuffer>;\n}\ninterface Crypto {\n  readonly subtle: SubtleCrypto;\n  getRandomValues<T extends ArrayBufferView | null>(array: T): T;\n}\ndeclare const self: {\n  crypto: Crypto;\n};\ninterface HmacImportParams {\n  name: string;\n  hash: Algorithm;\n  length?: number;\n}\n\nlet subtleCrypto: SubtleCrypto | undefined;\n\n/**\n * Returns a cached reference to the Web API crypto.subtle object.\n * @internal\n */\nfunction getCrypto(): SubtleCrypto {\n  if (subtleCrypto) {\n    return subtleCrypto;\n  }\n\n  if (!self.crypto || !self.crypto.subtle) {\n    throw new Error(\"Your browser environment does not support cryptography functions.\");\n  }\n\n  subtleCrypto = self.crypto.subtle;\n  return subtleCrypto;\n}\n\n/**\n * Generates a SHA-256 HMAC signature.\n * @param key - The HMAC key represented as a base64 string, used to generate the cryptographic HMAC hash.\n * @param stringToSign - The data to be signed.\n * @param encoding - The textual encoding to use for the returned HMAC digest.\n */\nexport async function computeSha256Hmac(\n  key: string,\n  stringToSign: string,\n  encoding: \"base64\" | \"hex\",\n): Promise<string> {\n  const crypto = getCrypto();\n  const keyBytes = stringToUint8Array(key, \"base64\");\n  const stringToSignBytes = stringToUint8Array(stringToSign, \"utf-8\");\n\n  const cryptoKey = await crypto.importKey(\n    \"raw\",\n    keyBytes,\n    {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    },\n    false,\n    [\"sign\"],\n  );\n  const signature = await crypto.sign(\n    {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    },\n    cryptoKey,\n    stringToSignBytes,\n  );\n\n  return uint8ArrayToString(new Uint8Array(signature), encoding);\n}\n\n/**\n * Generates a SHA-256 hash.\n * @param content - The data to be included in the hash.\n * @param encoding - The textual encoding to use for the returned hash.\n */\nexport async function computeSha256Hash(\n  content: string,\n  encoding: \"base64\" | \"hex\",\n): Promise<string> {\n  const contentBytes = stringToUint8Array(content, \"utf-8\");\n  const digest = await getCrypto().digest({ name: \"SHA-256\" }, contentBytes);\n\n  return uint8ArrayToString(new Uint8Array(digest), encoding);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Helper TypeGuard that checks if something is defined or not.\n * @param thing - Anything\n */\nexport function isDefined<T>(thing: T | undefined | null): thing is T {\n  return typeof thing !== \"undefined\" && thing !== null;\n}\n\n/**\n * Helper TypeGuard that checks if the input is an object with the specified properties.\n * @param thing - Anything.\n * @param properties - The name of the properties that should appear in the object.\n */\nexport function isObjectWithProperties<Thing, PropertyName extends string>(\n  thing: Thing,\n  properties: PropertyName[],\n): thing is Thing & Record<PropertyName, unknown> {\n  if (!isDefined(thing) || typeof thing !== \"object\") {\n    return false;\n  }\n\n  for (const property of properties) {\n    if (!objectHasProperty(thing, property)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Helper TypeGuard that checks if the input is an object with the specified property.\n * @param thing - Any object.\n * @param property - The name of the property that should appear in the object.\n */\nexport function objectHasProperty<Thing, PropertyName extends string>(\n  thing: Thing,\n  property: PropertyName,\n): thing is Thing & Record<PropertyName, unknown> {\n  return (\n    isDefined(thing) && typeof thing === \"object\" && property in (thing as Record<string, unknown>)\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function generateUUID(): string {\n  let uuid = \"\";\n  for (let i = 0; i < 32; i++) {\n    // Generate a random number between 0 and 15\n    const randomNumber = Math.floor(Math.random() * 16);\n    // Set the UUID version to 4 in the 13th position\n    if (i === 12) {\n      uuid += \"4\";\n    } else if (i === 16) {\n      // Set the UUID variant to \"10\" in the 17th position\n      uuid += (randomNumber & 0x3) | 0x8;\n    } else {\n      // Add a random hexadecimal digit to the UUID string\n      uuid += randomNumber.toString(16);\n    }\n    // Add hyphens to the UUID string at the appropriate positions\n    if (i === 7 || i === 11 || i === 15 || i === 19) {\n      uuid += \"-\";\n    }\n  }\n  return uuid;\n}\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID(): string {\n  return generateUUID();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { generateUUID } from \"./uuidUtils.common.js\";\n\ninterface Crypto {\n  randomUUID(): string;\n}\n\ndeclare const globalThis: {\n  crypto: Crypto;\n};\n\n// NOTE: This could be undefined if not used in a secure context\nconst uuidFunction =\n  typeof globalThis?.crypto?.randomUUID === \"function\"\n    ? globalThis.crypto.randomUUID.bind(globalThis.crypto)\n    : generateUUID;\n\n/**\n * Generated Universally Unique Identifier\n *\n * @returns RFC4122 v4 UUID.\n */\nexport function randomUUID(): string {\n  return uuidFunction();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ninterface Window {\n  document: unknown;\n}\n\ninterface DedicatedWorkerGlobalScope {\n  constructor: {\n    name: string;\n  };\n\n  importScripts: (...paths: string[]) => void;\n}\n\ninterface Navigator {\n  product: string;\n}\n\ninterface DenoGlobal {\n  version: {\n    deno: string;\n  };\n}\n\ninterface BunGlobal {\n  version: string;\n}\n\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\ndeclare const window: Window;\ndeclare const self: DedicatedWorkerGlobalScope;\ndeclare const Deno: DenoGlobal;\ndeclare const Bun: BunGlobal;\ndeclare const navigator: Navigator;\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Browser.\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-no-window\nexport const isBrowser = typeof window !== \"undefined\" && typeof window.document !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is a Web Worker.\n */\nexport const isWebWorker =\n  typeof self === \"object\" &&\n  typeof self?.importScripts === \"function\" &&\n  (self.constructor?.name === \"DedicatedWorkerGlobalScope\" ||\n    self.constructor?.name === \"ServiceWorkerGlobalScope\" ||\n    self.constructor?.name === \"SharedWorkerGlobalScope\");\n\n/**\n * A constant that indicates whether the environment the code is running is Deno.\n */\nexport const isDeno =\n  typeof Deno !== \"undefined\" &&\n  typeof Deno.version !== \"undefined\" &&\n  typeof Deno.version.deno !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is Bun.sh.\n */\nexport const isBun = typeof Bun !== \"undefined\" && typeof Bun.version !== \"undefined\";\n\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n */\nexport const isNodeLike =\n  typeof globalThis.process !== \"undefined\" &&\n  Boolean(globalThis.process.version) &&\n  Boolean(globalThis.process.versions?.node);\n\n/**\n * A constant that indicates whether the environment the code is running is a Node.js compatible environment.\n * @deprecated Use `isNodeLike` instead.\n */\nexport const isNode = isNodeLike;\n\n/**\n * A constant that indicates whether the environment the code is running is Node.JS.\n */\nexport const isNodeRuntime = isNodeLike && !isBun && !isDeno;\n\n/**\n * A constant that indicates whether the environment the code is running is in React-Native.\n */\n// https://github.com/facebook/react-native/blob/main/packages/react-native/Libraries/Core/setUpNavigator.js\nexport const isReactNative =\n  typeof navigator !== \"undefined\" && navigator?.product === \"ReactNative\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport { delay, type DelayOptions } from \"./delay.js\";\nexport {\n  type AbortOptions,\n  cancelablePromiseRace,\n  type AbortablePromiseBuilder,\n} from \"./aborterUtils.js\";\nexport {\n  createAbortablePromise,\n  type CreateAbortablePromiseOptions,\n} from \"./createAbortablePromise.js\";\nexport { getRandomIntegerInclusive } from \"./random.js\";\nexport { isObject, type UnknownObject } from \"./object.js\";\nexport { isError, getErrorMessage } from \"./error.js\";\nexport { computeSha256Hash, computeSha256Hmac } from \"./sha256.js\";\nexport { isDefined, isObjectWithProperties, objectHasProperty } from \"./typeGuards.js\";\nexport { randomUUID } from \"./uuidUtils.js\";\nexport {\n  isBrowser,\n  isBun,\n  isNode,\n  isNodeLike,\n  isNodeRuntime,\n  isDeno,\n  isReactNative,\n  isWebWorker,\n} from \"./checkEnvironment.js\";\nexport { uint8ArrayToString, stringToUint8Array, type EncodingType } from \"./bytesEncoding.js\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as msalCommon from \"@azure/msal-browser\";\n\nimport { AccessToken, GetTokenOptions } from \"@azure/core-auth\";\nimport { AuthenticationRecord, MsalAccountInfo, MsalResult, MsalToken } from \"./types\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../errors\";\nimport { CredentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport { DefaultAuthorityHost, DefaultTenantId } from \"../constants\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { MsalFlowOptions } from \"./flows\";\nimport { isNode, randomUUID } from \"@azure/core-util\";\nimport { AzureLogLevel } from \"@azure/logger\";\n\nexport interface ILoggerCallback {\n  (level: msalCommon.LogLevel, message: string, containsPii: boolean): void;\n}\n\n/**\n * Latest AuthenticationRecord version\n * @internal\n */\nconst LatestAuthenticationRecordVersion = \"1.0\";\n\n/**\n * Ensures the validity of the MSAL token\n * @internal\n */\nexport function ensureValidMsalToken(\n  scopes: string | string[],\n  logger: CredentialLogger,\n  msalToken?: MsalToken,\n  getTokenOptions?: GetTokenOptions\n): void {\n  const error = (message: string): Error => {\n    logger.getToken.info(message);\n    return new AuthenticationRequiredError({\n      scopes: Array.isArray(scopes) ? scopes : [scopes],\n      getTokenOptions,\n      message,\n    });\n  };\n  if (!msalToken) {\n    throw error(\"No response\");\n  }\n  if (!msalToken.expiresOn) {\n    throw error(`Response had no \"expiresOn\" property.`);\n  }\n  if (!msalToken.accessToken) {\n    throw error(`Response had no \"accessToken\" property.`);\n  }\n}\n\n/**\n * Generates a valid authority by combining a host with a tenantId.\n * @internal\n */\nexport function getAuthority(tenantId: string, host?: string): string {\n  if (!host) {\n    host = DefaultAuthorityHost;\n  }\n  if (new RegExp(`${tenantId}/?$`).test(host)) {\n    return host;\n  }\n  if (host.endsWith(\"/\")) {\n    return host + tenantId;\n  } else {\n    return `${host}/${tenantId}`;\n  }\n}\n\n/**\n * Generates the known authorities.\n * If the Tenant Id is `adfs`, the authority can't be validated since the format won't match the expected one.\n * For that reason, we have to force MSAL to disable validating the authority\n * by sending it within the known authorities in the MSAL configuration.\n * @internal\n */\nexport function getKnownAuthorities(\n  tenantId: string,\n  authorityHost: string,\n  disableInstanceDiscovery?: boolean\n): string[] {\n  if ((tenantId === \"adfs\" && authorityHost) || disableInstanceDiscovery) {\n    return [authorityHost];\n  }\n  return [];\n}\n\n/**\n * Generates a logger that can be passed to the MSAL clients.\n * @param logger - The logger of the credential.\n * @internal\n */\nexport const defaultLoggerCallback: (\n  logger: CredentialLogger,\n  platform?: \"Node\" | \"Browser\"\n) => msalCommon.ILoggerCallback =\n  (logger: CredentialLogger, platform: \"Node\" | \"Browser\" = isNode ? \"Node\" : \"Browser\") =>\n  (level, message, containsPii): void => {\n    if (containsPii) {\n      return;\n    }\n    switch (level) {\n      case msalCommon.LogLevel.Error:\n        logger.info(`MSAL ${platform} V2 error: ${message}`);\n        return;\n      case msalCommon.LogLevel.Info:\n        logger.info(`MSAL ${platform} V2 info message: ${message}`);\n        return;\n      case msalCommon.LogLevel.Verbose:\n        logger.info(`MSAL ${platform} V2 verbose message: ${message}`);\n        return;\n      case msalCommon.LogLevel.Warning:\n        logger.info(`MSAL ${platform} V2 warning: ${message}`);\n        return;\n    }\n  };\n\n/**\n * @internal\n */\nexport function getMSALLogLevel(logLevel: AzureLogLevel | undefined): msalCommon.LogLevel {\n  switch (logLevel) {\n    case \"error\":\n      return msalCommon.LogLevel.Error;\n    case \"info\":\n      return msalCommon.LogLevel.Info;\n    case \"verbose\":\n      return msalCommon.LogLevel.Verbose;\n    case \"warning\":\n      return msalCommon.LogLevel.Warning;\n    default:\n      // default msal logging level should be Info\n      return msalCommon.LogLevel.Info;\n  }\n}\n\n/**\n * The common utility functions for the MSAL clients.\n * Defined as a class so that the classes extending this one can have access to its methods and protected properties.\n *\n * It keeps track of a logger and an in-memory copy of the AuthenticationRecord.\n *\n * @internal\n */\nexport class MsalBaseUtilities {\n  protected logger: CredentialLogger;\n  protected account: AuthenticationRecord | undefined;\n\n  constructor(options: MsalFlowOptions) {\n    this.logger = options.logger;\n    this.account = options.authenticationRecord;\n  }\n\n  /**\n   * Generates a UUID\n   */\n  generateUuid(): string {\n    return randomUUID();\n  }\n\n  /**\n   * Handles the MSAL authentication result.\n   * If the result has an account, we update the local account reference.\n   * If the token received is invalid, an error will be thrown depending on what's missing.\n   */\n  protected handleResult(\n    scopes: string | string[],\n    clientId: string,\n    result?: MsalResult,\n    getTokenOptions?: GetTokenOptions\n  ): AccessToken {\n    if (result?.account) {\n      this.account = msalToPublic(clientId, result.account);\n    }\n    ensureValidMsalToken(scopes, this.logger, result, getTokenOptions);\n    this.logger.getToken.info(formatSuccess(scopes));\n    return {\n      token: result!.accessToken!,\n      expiresOnTimestamp: result!.expiresOn!.getTime(),\n    };\n  }\n\n  /**\n   * Handles MSAL errors.\n   */\n  protected handleError(scopes: string[], error: Error, getTokenOptions?: GetTokenOptions): Error {\n    if (\n      error.name === \"AuthError\" ||\n      error.name === \"ClientAuthError\" ||\n      error.name === \"BrowserAuthError\"\n    ) {\n      const msalError = error as msalCommon.AuthError;\n      switch (msalError.errorCode) {\n        case \"endpoints_resolution_error\":\n          this.logger.info(formatError(scopes, error.message));\n          return new CredentialUnavailableError(error.message);\n        case \"device_code_polling_cancelled\":\n          return new AbortError(\"The authentication has been aborted by the caller.\");\n        case \"consent_required\":\n        case \"interaction_required\":\n        case \"login_required\":\n          this.logger.info(\n            formatError(scopes, `Authentication returned errorCode ${msalError.errorCode}`)\n          );\n          break;\n        default:\n          this.logger.info(formatError(scopes, `Failed to acquire token: ${error.message}`));\n          break;\n      }\n    }\n    if (\n      error.name === \"ClientConfigurationError\" ||\n      error.name === \"BrowserConfigurationAuthError\" ||\n      error.name === \"AbortError\"\n    ) {\n      return error;\n    }\n    return new AuthenticationRequiredError({ scopes, getTokenOptions, message: error.message });\n  }\n}\n\n// transformations.ts\n\nexport function publicToMsal(account: AuthenticationRecord): msalCommon.AccountInfo {\n  const [environment] = account.authority.match(/([a-z]*\\.[a-z]*\\.[a-z]*)/) || [\"\"];\n  return {\n    ...account,\n    localAccountId: account.homeAccountId,\n    environment,\n  };\n}\n\nexport function msalToPublic(clientId: string, account: MsalAccountInfo): AuthenticationRecord {\n  const record = {\n    authority: getAuthority(account.tenantId, account.environment),\n    homeAccountId: account.homeAccountId,\n    tenantId: account.tenantId || DefaultTenantId,\n    username: account.username,\n    clientId,\n    version: LatestAuthenticationRecordVersion,\n  };\n  return record;\n}\n\n/**\n * Serializes an `AuthenticationRecord` into a string.\n *\n * The output of a serialized authentication record will contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * To later convert this string to a serialized `AuthenticationRecord`, please use the exported function `deserializeAuthenticationRecord()`.\n */\nexport function serializeAuthenticationRecord(record: AuthenticationRecord): string {\n  return JSON.stringify(record);\n}\n\n/**\n * Deserializes a previously serialized authentication record from a string into an object.\n *\n * The input string must contain the following properties:\n *\n * - \"authority\"\n * - \"homeAccountId\"\n * - \"clientId\"\n * - \"tenantId\"\n * - \"username\"\n * - \"version\"\n *\n * If the version we receive is unsupported, an error will be thrown.\n *\n * At the moment, the only available version is: \"1.0\", which is always set when the authentication record is serialized.\n *\n * @param serializedRecord - Authentication record previously serialized into string.\n * @returns AuthenticationRecord.\n */\nexport function deserializeAuthenticationRecord(serializedRecord: string): AuthenticationRecord {\n  const parsed: AuthenticationRecord & { version?: string } = JSON.parse(serializedRecord);\n\n  if (parsed.version && parsed.version !== LatestAuthenticationRecordVersion) {\n    throw Error(\"Unsupported AuthenticationRecord version\");\n  }\n\n  return parsed;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { HttpClient, PipelineRequest, PipelineResponse, SendRequest } from \"./interfaces.js\";\n\n/**\n * Policies are executed in phases.\n * The execution order is:\n * 1. Serialize Phase\n * 2. Policies not in a phase\n * 3. Deserialize Phase\n * 4. Retry Phase\n * 5. Sign Phase\n */\nexport type PipelinePhase = \"Deserialize\" | \"Serialize\" | \"Retry\" | \"Sign\";\n\nconst ValidPhaseNames = new Set<PipelinePhase>([\"Deserialize\", \"Serialize\", \"Retry\", \"Sign\"]);\n\n/**\n * Options when adding a policy to the pipeline.\n * Used to express dependencies on other policies.\n */\nexport interface AddPolicyOptions {\n  /**\n   * Policies that this policy must come before.\n   */\n  beforePolicies?: string[];\n  /**\n   * Policies that this policy must come after.\n   */\n  afterPolicies?: string[];\n  /**\n   * The phase that this policy must come after.\n   */\n  afterPhase?: PipelinePhase;\n  /**\n   * The phase this policy belongs to.\n   */\n  phase?: PipelinePhase;\n}\n\n/**\n * A pipeline policy manipulates a request as it travels through the pipeline.\n * It is conceptually a middleware that is allowed to modify the request before\n * it is made as well as the response when it is received.\n */\nexport interface PipelinePolicy {\n  /**\n   * The policy name. Must be a unique string in the pipeline.\n   */\n  name: string;\n  /**\n   * The main method to implement that manipulates a request/response.\n   * @param request - The request being performed.\n   * @param next - The next policy in the pipeline. Must be called to continue the pipeline.\n   */\n  sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse>;\n}\n\n/**\n * Represents a pipeline for making a HTTP request to a URL.\n * Pipelines can have multiple policies to manage manipulating each request\n * before and after it is made to the server.\n */\nexport interface Pipeline {\n  /**\n   * Add a new policy to the pipeline.\n   * @param policy - A policy that manipulates a request.\n   * @param options - A set of options for when the policy should run.\n   */\n  addPolicy(policy: PipelinePolicy, options?: AddPolicyOptions): void;\n  /**\n   * Remove a policy from the pipeline.\n   * @param options - Options that let you specify which policies to remove.\n   */\n  removePolicy(options: { name?: string; phase?: PipelinePhase }): PipelinePolicy[];\n  /**\n   * Uses the pipeline to make a HTTP request.\n   * @param httpClient - The HttpClient that actually performs the request.\n   * @param request - The request to be made.\n   */\n  sendRequest(httpClient: HttpClient, request: PipelineRequest): Promise<PipelineResponse>;\n  /**\n   * Returns the current set of policies in the pipeline in the order in which\n   * they will be applied to the request. Later in the list is closer to when\n   * the request is performed.\n   */\n  getOrderedPolicies(): PipelinePolicy[];\n  /**\n   * Duplicates this pipeline to allow for modifying an existing one without mutating it.\n   */\n  clone(): Pipeline;\n}\n\ninterface PipelineDescriptor {\n  policy: PipelinePolicy;\n  options: AddPolicyOptions;\n}\n\ninterface PolicyGraphNode {\n  policy: PipelinePolicy;\n  dependsOn: Set<PolicyGraphNode>;\n  dependants: Set<PolicyGraphNode>;\n  afterPhase?: Phase;\n}\n\ninterface Phase {\n  name: PipelinePhase | \"None\";\n  policies: Set<PolicyGraphNode>;\n  hasRun: boolean;\n  hasAfterPolicies: boolean;\n}\n\n/**\n * A private implementation of Pipeline.\n * Do not export this class from the package.\n * @internal\n */\nclass HttpPipeline implements Pipeline {\n  private _policies: PipelineDescriptor[] = [];\n  private _orderedPolicies?: PipelinePolicy[];\n\n  private constructor(policies?: PipelineDescriptor[]) {\n    this._policies = policies?.slice(0) ?? [];\n    this._orderedPolicies = undefined;\n  }\n\n  public addPolicy(policy: PipelinePolicy, options: AddPolicyOptions = {}): void {\n    if (options.phase && options.afterPhase) {\n      throw new Error(\"Policies inside a phase cannot specify afterPhase.\");\n    }\n    if (options.phase && !ValidPhaseNames.has(options.phase)) {\n      throw new Error(`Invalid phase name: ${options.phase}`);\n    }\n    if (options.afterPhase && !ValidPhaseNames.has(options.afterPhase)) {\n      throw new Error(`Invalid afterPhase name: ${options.afterPhase}`);\n    }\n    this._policies.push({\n      policy,\n      options,\n    });\n    this._orderedPolicies = undefined;\n  }\n\n  public removePolicy(options: { name?: string; phase?: string }): PipelinePolicy[] {\n    const removedPolicies: PipelinePolicy[] = [];\n\n    this._policies = this._policies.filter((policyDescriptor) => {\n      if (\n        (options.name && policyDescriptor.policy.name === options.name) ||\n        (options.phase && policyDescriptor.options.phase === options.phase)\n      ) {\n        removedPolicies.push(policyDescriptor.policy);\n        return false;\n      } else {\n        return true;\n      }\n    });\n    this._orderedPolicies = undefined;\n\n    return removedPolicies;\n  }\n\n  public sendRequest(httpClient: HttpClient, request: PipelineRequest): Promise<PipelineResponse> {\n    const policies = this.getOrderedPolicies();\n\n    const pipeline = policies.reduceRight<SendRequest>(\n      (next, policy) => {\n        return (req: PipelineRequest) => {\n          return policy.sendRequest(req, next);\n        };\n      },\n      (req: PipelineRequest) => httpClient.sendRequest(req),\n    );\n\n    return pipeline(request);\n  }\n\n  public getOrderedPolicies(): PipelinePolicy[] {\n    if (!this._orderedPolicies) {\n      this._orderedPolicies = this.orderPolicies();\n    }\n    return this._orderedPolicies;\n  }\n\n  public clone(): Pipeline {\n    return new HttpPipeline(this._policies);\n  }\n\n  public static create(): Pipeline {\n    return new HttpPipeline();\n  }\n\n  private orderPolicies(): PipelinePolicy[] {\n    /**\n     * The goal of this method is to reliably order pipeline policies\n     * based on their declared requirements when they were added.\n     *\n     * Order is first determined by phase:\n     *\n     * 1. Serialize Phase\n     * 2. Policies not in a phase\n     * 3. Deserialize Phase\n     * 4. Retry Phase\n     * 5. Sign Phase\n     *\n     * Within each phase, policies are executed in the order\n     * they were added unless they were specified to execute\n     * before/after other policies or after a particular phase.\n     *\n     * To determine the final order, we will walk the policy list\n     * in phase order multiple times until all dependencies are\n     * satisfied.\n     *\n     * `afterPolicies` are the set of policies that must be\n     * executed before a given policy. This requirement is\n     * considered satisfied when each of the listed policies\n     * have been scheduled.\n     *\n     * `beforePolicies` are the set of policies that must be\n     * executed after a given policy. Since this dependency\n     * can be expressed by converting it into a equivalent\n     * `afterPolicies` declarations, they are normalized\n     * into that form for simplicity.\n     *\n     * An `afterPhase` dependency is considered satisfied when all\n     * policies in that phase have scheduled.\n     *\n     */\n    const result: PipelinePolicy[] = [];\n\n    // Track all policies we know about.\n    const policyMap: Map<string, PolicyGraphNode> = new Map<string, PolicyGraphNode>();\n\n    function createPhase(name: PipelinePhase | \"None\"): Phase {\n      return {\n        name,\n        policies: new Set<PolicyGraphNode>(),\n        hasRun: false,\n        hasAfterPolicies: false,\n      };\n    }\n\n    // Track policies for each phase.\n    const serializePhase = createPhase(\"Serialize\");\n    const noPhase = createPhase(\"None\");\n    const deserializePhase = createPhase(\"Deserialize\");\n    const retryPhase = createPhase(\"Retry\");\n    const signPhase = createPhase(\"Sign\");\n\n    // a list of phases in order\n    const orderedPhases = [serializePhase, noPhase, deserializePhase, retryPhase, signPhase];\n\n    // Small helper function to map phase name to each Phase\n    function getPhase(phase: PipelinePhase | undefined): Phase {\n      if (phase === \"Retry\") {\n        return retryPhase;\n      } else if (phase === \"Serialize\") {\n        return serializePhase;\n      } else if (phase === \"Deserialize\") {\n        return deserializePhase;\n      } else if (phase === \"Sign\") {\n        return signPhase;\n      } else {\n        return noPhase;\n      }\n    }\n\n    // First walk each policy and create a node to track metadata.\n    for (const descriptor of this._policies) {\n      const policy = descriptor.policy;\n      const options = descriptor.options;\n      const policyName = policy.name;\n      if (policyMap.has(policyName)) {\n        throw new Error(\"Duplicate policy names not allowed in pipeline\");\n      }\n      const node: PolicyGraphNode = {\n        policy,\n        dependsOn: new Set<PolicyGraphNode>(),\n        dependants: new Set<PolicyGraphNode>(),\n      };\n      if (options.afterPhase) {\n        node.afterPhase = getPhase(options.afterPhase);\n        node.afterPhase.hasAfterPolicies = true;\n      }\n      policyMap.set(policyName, node);\n      const phase = getPhase(options.phase);\n      phase.policies.add(node);\n    }\n\n    // Now that each policy has a node, connect dependency references.\n    for (const descriptor of this._policies) {\n      const { policy, options } = descriptor;\n      const policyName = policy.name;\n      const node = policyMap.get(policyName);\n      if (!node) {\n        throw new Error(`Missing node for policy ${policyName}`);\n      }\n\n      if (options.afterPolicies) {\n        for (const afterPolicyName of options.afterPolicies) {\n          const afterNode = policyMap.get(afterPolicyName);\n          if (afterNode) {\n            // Linking in both directions helps later\n            // when we want to notify dependants.\n            node.dependsOn.add(afterNode);\n            afterNode.dependants.add(node);\n          }\n        }\n      }\n      if (options.beforePolicies) {\n        for (const beforePolicyName of options.beforePolicies) {\n          const beforeNode = policyMap.get(beforePolicyName);\n          if (beforeNode) {\n            // To execute before another node, make it\n            // depend on the current node.\n            beforeNode.dependsOn.add(node);\n            node.dependants.add(beforeNode);\n          }\n        }\n      }\n    }\n\n    function walkPhase(phase: Phase): void {\n      phase.hasRun = true;\n      // Sets iterate in insertion order\n      for (const node of phase.policies) {\n        if (node.afterPhase && (!node.afterPhase.hasRun || node.afterPhase.policies.size)) {\n          // If this node is waiting on a phase to complete,\n          // we need to skip it for now.\n          // Even if the phase is empty, we should wait for it\n          // to be walked to avoid re-ordering policies.\n          continue;\n        }\n        if (node.dependsOn.size === 0) {\n          // If there's nothing else we're waiting for, we can\n          // add this policy to the result list.\n          result.push(node.policy);\n          // Notify anything that depends on this policy that\n          // the policy has been scheduled.\n          for (const dependant of node.dependants) {\n            dependant.dependsOn.delete(node);\n          }\n          policyMap.delete(node.policy.name);\n          phase.policies.delete(node);\n        }\n      }\n    }\n\n    function walkPhases(): void {\n      for (const phase of orderedPhases) {\n        walkPhase(phase);\n        // if the phase isn't complete\n        if (phase.policies.size > 0 && phase !== noPhase) {\n          if (!noPhase.hasRun) {\n            // Try running noPhase to see if that unblocks this phase next tick.\n            // This can happen if a phase that happens before noPhase\n            // is waiting on a noPhase policy to complete.\n            walkPhase(noPhase);\n          }\n          // Don't proceed to the next phase until this phase finishes.\n          return;\n        }\n\n        if (phase.hasAfterPolicies) {\n          // Run any policies unblocked by this phase\n          walkPhase(noPhase);\n        }\n      }\n    }\n\n    // Iterate until we've put every node in the result list.\n    let iteration = 0;\n    while (policyMap.size > 0) {\n      iteration++;\n      const initialResultLength = result.length;\n      // Keep walking each phase in order until we can order every node.\n      walkPhases();\n      // The result list *should* get at least one larger each time\n      // after the first full pass.\n      // Otherwise, we're going to loop forever.\n      if (result.length <= initialResultLength && iteration > 1) {\n        throw new Error(\"Cannot satisfy policy dependencies due to requirements cycle.\");\n      }\n    }\n\n    return result;\n  }\n}\n\n/**\n * Creates a totally empty pipeline.\n * Useful for testing or creating a custom one.\n */\nexport function createEmptyPipeline(): Pipeline {\n  return HttpPipeline.create();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-rest-pipeline\");\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { type UnknownObject, isObject } from \"@azure/core-util\";\n\n/**\n * @internal\n */\nexport interface SanitizerOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n}\n\nconst RedactedString = \"REDACTED\";\n\n// Make sure this list is up-to-date with the one under core/logger/Readme#Keyconcepts\nconst defaultAllowedHeaderNames = [\n  \"x-ms-client-request-id\",\n  \"x-ms-return-client-request-id\",\n  \"x-ms-useragent\",\n  \"x-ms-correlation-request-id\",\n  \"x-ms-request-id\",\n  \"client-request-id\",\n  \"ms-cv\",\n  \"return-client-request-id\",\n  \"traceparent\",\n\n  \"Access-Control-Allow-Credentials\",\n  \"Access-Control-Allow-Headers\",\n  \"Access-Control-Allow-Methods\",\n  \"Access-Control-Allow-Origin\",\n  \"Access-Control-Expose-Headers\",\n  \"Access-Control-Max-Age\",\n  \"Access-Control-Request-Headers\",\n  \"Access-Control-Request-Method\",\n  \"Origin\",\n\n  \"Accept\",\n  \"Accept-Encoding\",\n  \"Cache-Control\",\n  \"Connection\",\n  \"Content-Length\",\n  \"Content-Type\",\n  \"Date\",\n  \"ETag\",\n  \"Expires\",\n  \"If-Match\",\n  \"If-Modified-Since\",\n  \"If-None-Match\",\n  \"If-Unmodified-Since\",\n  \"Last-Modified\",\n  \"Pragma\",\n  \"Request-Id\",\n  \"Retry-After\",\n  \"Server\",\n  \"Transfer-Encoding\",\n  \"User-Agent\",\n  \"WWW-Authenticate\",\n];\n\nconst defaultAllowedQueryParameters: string[] = [\"api-version\"];\n\n/**\n * @internal\n */\nexport class Sanitizer {\n  private allowedHeaderNames: Set<string>;\n  private allowedQueryParameters: Set<string>;\n\n  constructor({\n    additionalAllowedHeaderNames: allowedHeaderNames = [],\n    additionalAllowedQueryParameters: allowedQueryParameters = [],\n  }: SanitizerOptions = {}) {\n    allowedHeaderNames = defaultAllowedHeaderNames.concat(allowedHeaderNames);\n    allowedQueryParameters = defaultAllowedQueryParameters.concat(allowedQueryParameters);\n\n    this.allowedHeaderNames = new Set(allowedHeaderNames.map((n) => n.toLowerCase()));\n    this.allowedQueryParameters = new Set(allowedQueryParameters.map((p) => p.toLowerCase()));\n  }\n\n  public sanitize(obj: unknown): string {\n    const seen = new Set<unknown>();\n    return JSON.stringify(\n      obj,\n      (key: string, value: unknown) => {\n        // Ensure Errors include their interesting non-enumerable members\n        if (value instanceof Error) {\n          return {\n            ...value,\n            name: value.name,\n            message: value.message,\n          };\n        }\n\n        if (key === \"headers\") {\n          return this.sanitizeHeaders(value as UnknownObject);\n        } else if (key === \"url\") {\n          return this.sanitizeUrl(value as string);\n        } else if (key === \"query\") {\n          return this.sanitizeQuery(value as UnknownObject);\n        } else if (key === \"body\") {\n          // Don't log the request body\n          return undefined;\n        } else if (key === \"response\") {\n          // Don't log response again\n          return undefined;\n        } else if (key === \"operationSpec\") {\n          // When using sendOperationRequest, the request carries a massive\n          // field with the autorest spec. No need to log it.\n          return undefined;\n        } else if (Array.isArray(value) || isObject(value)) {\n          if (seen.has(value)) {\n            return \"[Circular]\";\n          }\n          seen.add(value);\n        }\n\n        return value;\n      },\n      2,\n    );\n  }\n\n  private sanitizeHeaders(obj: UnknownObject): UnknownObject {\n    const sanitized: UnknownObject = {};\n    for (const key of Object.keys(obj)) {\n      if (this.allowedHeaderNames.has(key.toLowerCase())) {\n        sanitized[key] = obj[key];\n      } else {\n        sanitized[key] = RedactedString;\n      }\n    }\n    return sanitized;\n  }\n\n  private sanitizeQuery(value: UnknownObject): UnknownObject {\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    const sanitized: UnknownObject = {};\n\n    for (const k of Object.keys(value)) {\n      if (this.allowedQueryParameters.has(k.toLowerCase())) {\n        sanitized[k] = value[k];\n      } else {\n        sanitized[k] = RedactedString;\n      }\n    }\n\n    return sanitized;\n  }\n\n  private sanitizeUrl(value: string): string {\n    if (typeof value !== \"string\" || value === null) {\n      return value;\n    }\n\n    const url = new URL(value);\n\n    if (!url.search) {\n      return value;\n    }\n\n    for (const [key] of url.searchParams) {\n      if (!this.allowedQueryParameters.has(key.toLowerCase())) {\n        url.searchParams.set(key, RedactedString);\n      }\n    }\n\n    return url.toString();\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { Debugger } from \"@azure/logger\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { logger as coreLogger } from \"../log.js\";\nimport { Sanitizer } from \"../util/sanitizer.js\";\n\n/**\n * The programmatic identifier of the logPolicy.\n */\nexport const logPolicyName = \"logPolicy\";\n\n/**\n * Options to configure the logPolicy.\n */\nexport interface LogPolicyOptions {\n  /**\n   * Header names whose values will be logged when logging is enabled.\n   * Defaults include a list of well-known safe headers. Any headers\n   * specified in this field will be added to that list.  Any other values will\n   * be written to logs as \"REDACTED\".\n   */\n  additionalAllowedHeaderNames?: string[];\n\n  /**\n   * Query string names whose values will be logged when logging is enabled. By default no\n   * query string values are logged.\n   */\n  additionalAllowedQueryParameters?: string[];\n\n  /**\n   * The log function to use for writing pipeline logs.\n   * Defaults to core-http's built-in logger.\n   * Compatible with the `debug` library.\n   */\n  logger?: Debugger;\n}\n\n/**\n * A policy that logs all requests and responses.\n * @param options - Options to configure logPolicy.\n */\nexport function logPolicy(options: LogPolicyOptions = {}): PipelinePolicy {\n  const logger = options.logger ?? coreLogger.info;\n  const sanitizer = new Sanitizer({\n    additionalAllowedHeaderNames: options.additionalAllowedHeaderNames,\n    additionalAllowedQueryParameters: options.additionalAllowedQueryParameters,\n  });\n  return {\n    name: logPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!logger.enabled) {\n        return next(request);\n      }\n\n      logger(`Request: ${sanitizer.sanitize(request)}`);\n\n      const response = await next(request);\n\n      logger(`Response status code: ${response.status}`);\n      logger(`Headers: ${sanitizer.sanitize(response.headers)}`);\n\n      return response;\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\n\n/**\n * The programmatic identifier of the redirectPolicy.\n */\nexport const redirectPolicyName = \"redirectPolicy\";\n\n/**\n * Methods that are allowed to follow redirects 301 and 302\n */\nconst allowedRedirect = [\"GET\", \"HEAD\"];\n\n/**\n * Options for how redirect responses are handled.\n */\nexport interface RedirectPolicyOptions {\n  /**\n   * The maximum number of times the redirect URL will be tried before\n   * failing.  Defaults to 20.\n   */\n  maxRetries?: number;\n}\n\n/**\n * A policy to follow Location headers from the server in order\n * to support server-side redirection.\n * In the browser, this policy is not used.\n * @param options - Options to control policy behavior.\n */\nexport function redirectPolicy(options: RedirectPolicyOptions = {}): PipelinePolicy {\n  const { maxRetries = 20 } = options;\n  return {\n    name: redirectPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      const response = await next(request);\n      return handleRedirect(next, response, maxRetries);\n    },\n  };\n}\n\nasync function handleRedirect(\n  next: SendRequest,\n  response: PipelineResponse,\n  maxRetries: number,\n  currentRetries: number = 0,\n): Promise<PipelineResponse> {\n  const { request, status, headers } = response;\n  const locationHeader = headers.get(\"location\");\n  if (\n    locationHeader &&\n    (status === 300 ||\n      (status === 301 && allowedRedirect.includes(request.method)) ||\n      (status === 302 && allowedRedirect.includes(request.method)) ||\n      (status === 303 && request.method === \"POST\") ||\n      status === 307) &&\n    currentRetries < maxRetries\n  ) {\n    const url = new URL(locationHeader, request.url);\n    request.url = url.toString();\n\n    // POST request with Status code 303 should be converted into a\n    // redirected GET request if the redirect url is present in the location header\n    if (status === 303) {\n      request.method = \"GET\";\n      request.headers.delete(\"Content-Length\");\n      delete request.body;\n    }\n\n    request.headers.delete(\"Authorization\");\n\n    const res = await next(request);\n    return handleRedirect(next, res, maxRetries, currentRetries + 1);\n  }\n\n  return response;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json.\n */\n\n/**\n * @internal\n */\nexport function getHeaderName(): string {\n  return \"x-ms-useragent\";\n}\n\ninterface NavigatorEx extends Navigator {\n  userAgentData?: {\n    platform?: string;\n  };\n}\n\n/**\n * @internal\n */\nexport function setPlatformSpecificData(map: Map<string, string>): void {\n  const localNavigator = globalThis.navigator as NavigatorEx;\n  map.set(\n    \"OS\",\n    (localNavigator?.userAgentData?.platform ?? localNavigator?.platform ?? \"unknown\").replace(\n      \" \",\n      \"\",\n    ),\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION: string = \"1.16.0\";\n\nexport const DEFAULT_RETRY_POLICY_COUNT = 3;\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getHeaderName, setPlatformSpecificData } from \"./userAgentPlatform.js\";\nimport { SDK_VERSION } from \"../constants.js\";\n\nfunction getUserAgentString(telemetryInfo: Map<string, string>): string {\n  const parts: string[] = [];\n  for (const [key, value] of telemetryInfo) {\n    const token = value ? `${key}/${value}` : key;\n    parts.push(token);\n  }\n  return parts.join(\" \");\n}\n\n/**\n * @internal\n */\nexport function getUserAgentHeaderName(): string {\n  return getHeaderName();\n}\n\n/**\n * @internal\n */\nexport function getUserAgentValue(prefix?: string): string {\n  const runtimeInfo = new Map<string, string>();\n  runtimeInfo.set(\"core-rest-pipeline\", SDK_VERSION);\n  setPlatformSpecificData(runtimeInfo);\n  const defaultAgent = getUserAgentString(runtimeInfo);\n  const userAgentValue = prefix ? `${prefix} ${defaultAgent}` : defaultAgent;\n  return userAgentValue;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { getUserAgentHeaderName, getUserAgentValue } from \"../util/userAgent.js\";\n\nconst UserAgentHeaderName = getUserAgentHeaderName();\n\n/**\n * The programmatic identifier of the userAgentPolicy.\n */\nexport const userAgentPolicyName = \"userAgentPolicy\";\n\n/**\n * Options for adding user agent details to outgoing requests.\n */\nexport interface UserAgentPolicyOptions {\n  /**\n   * String prefix to add to the user agent for outgoing requests.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\n/**\n * A policy that sets the User-Agent header (or equivalent) to reflect\n * the library version.\n * @param options - Options to customize the user agent value.\n */\nexport function userAgentPolicy(options: UserAgentPolicyOptions = {}): PipelinePolicy {\n  const userAgentValue = getUserAgentValue(options.userAgentPrefix);\n  return {\n    name: userAgentPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(UserAgentHeaderName)) {\n        request.headers.set(UserAgentHeaderName, userAgentValue);\n      }\n      return next(request);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function isNodeReadableStream(x: unknown): x is NodeJS.ReadableStream {\n  return Boolean(x && typeof (x as NodeJS.ReadableStream)[\"pipe\"] === \"function\");\n}\n\nexport function isWebReadableStream(x: unknown): x is ReadableStream {\n  return Boolean(\n    x &&\n      typeof (x as ReadableStream).getReader === \"function\" &&\n      typeof (x as ReadableStream).tee === \"function\",\n  );\n}\n\nexport function isReadableStream(x: unknown): x is ReadableStream | NodeJS.ReadableStream {\n  return isNodeReadableStream(x) || isWebReadableStream(x);\n}\n\nexport function isBlob(x: unknown): x is Blob {\n  return typeof (x as Blob).stream === \"function\";\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isNodeLike } from \"@azure/core-util\";\nimport { isNodeReadableStream } from \"./typeGuards.js\";\n\n/**\n * Options passed into createFile specifying metadata about the file.\n */\nexport interface CreateFileOptions {\n  /**\n   * The MIME type of the file.\n   */\n  type?: string;\n\n  /**\n   * Last modified time of the file as a UNIX timestamp.\n   * This will default to the current date.\n   */\n  lastModified?: number;\n\n  /**\n   * relative path of this file when uploading a directory.\n   */\n  webkitRelativePath?: string;\n}\n\n/**\n * Extra options for createFile when a stream is being passed in.\n */\nexport interface CreateFileFromStreamOptions extends CreateFileOptions {\n  /**\n   * Size of the file represented by the stream in bytes.\n   *\n   * This will be used by the pipeline when calculating the Content-Length header\n   * for the overall request.\n   */\n  size?: number;\n}\n\nconst unimplementedMethods = {\n  arrayBuffer: () => {\n    throw new Error(\"Not implemented\");\n  },\n  slice: () => {\n    throw new Error(\"Not implemented\");\n  },\n  text: () => {\n    throw new Error(\"Not implemented\");\n  },\n};\n\n/**\n * Private symbol used as key on objects created using createFile containing the\n * original source of the file object.\n *\n * This is used in Node to access the original Node stream without using Blob#stream, which\n * returns a web stream. This is done to avoid a couple of bugs to do with Blob#stream and\n * Readable#to/fromWeb in Node versions we support:\n * - https://github.com/nodejs/node/issues/42694 (fixed in Node 18.14)\n * - https://github.com/nodejs/node/issues/48916 (fixed in Node 20.6)\n *\n * Once these versions are no longer supported, we may be able to stop doing this.\n *\n * @internal\n */\nconst rawContent: unique symbol = Symbol(\"rawContent\");\n\n/**\n * Type signature of a blob-like object with a raw content property.\n */\ninterface RawContent {\n  [rawContent](): Uint8Array | NodeJS.ReadableStream | ReadableStream<Uint8Array>;\n}\n\nfunction hasRawContent(x: unknown): x is RawContent {\n  return typeof (x as RawContent)[rawContent] === \"function\";\n}\n\n/**\n * Extract the raw content from a given blob-like object. If the input was created using createFile\n * or createFileFromStream, the exact content passed into createFile/createFileFromStream will be used.\n * For true instances of Blob and File, returns the blob's content as a Web ReadableStream<Uint8Array>.\n *\n * @internal\n */\nexport function getRawContent(\n  blob: Blob,\n): NodeJS.ReadableStream | ReadableStream<Uint8Array> | Uint8Array {\n  if (hasRawContent(blob)) {\n    return blob[rawContent]();\n  } else {\n    return blob.stream();\n  }\n}\n\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function to:\n * - Create a File object for use in RequestBodyType.formData in environments where the\n *   global File object is unavailable.\n * - Create a File-like object from a readable stream without reading the stream into memory.\n *\n * @param stream - the content of the file as a callback returning a stream. When a File object made using createFile is\n *                  passed in a request's form data map, the stream will not be read into memory\n *                  and instead will be streamed when the request is made. In the event of a retry, the\n *                  stream needs to be read again, so this callback SHOULD return a fresh stream if possible.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFileFromStream(\n  stream: () => ReadableStream<Uint8Array> | NodeJS.ReadableStream,\n  name: string,\n  options: CreateFileFromStreamOptions = {},\n): File {\n  return {\n    ...unimplementedMethods,\n    type: options.type ?? \"\",\n    lastModified: options.lastModified ?? new Date().getTime(),\n    webkitRelativePath: options.webkitRelativePath ?? \"\",\n    size: options.size ?? -1,\n    name,\n    stream: () => {\n      const s = stream();\n      if (isNodeReadableStream(s)) {\n        throw new Error(\n          \"Not supported: a Node stream was provided as input to createFileFromStream.\",\n        );\n      }\n\n      return s;\n    },\n    [rawContent]: stream,\n  } as File & RawContent;\n}\n\n/**\n * Create an object that implements the File interface. This object is intended to be\n * passed into RequestBodyType.formData, and is not guaranteed to work as expected in\n * other situations.\n *\n * Use this function create a File object for use in RequestBodyType.formData in environments where the global File object is unavailable.\n *\n * @param content - the content of the file as a Uint8Array in memory.\n * @param name - the name of the file.\n * @param options - optional metadata about the file, e.g. file name, file size, MIME type.\n */\nexport function createFile(\n  content: Uint8Array,\n  name: string,\n  options: CreateFileOptions = {},\n): File {\n  if (isNodeLike) {\n    return {\n      ...unimplementedMethods,\n      type: options.type ?? \"\",\n      lastModified: options.lastModified ?? new Date().getTime(),\n      webkitRelativePath: options.webkitRelativePath ?? \"\",\n      size: content.byteLength,\n      name,\n      arrayBuffer: async () => content.buffer,\n      stream: () => new Blob([content]).stream(),\n      [rawContent]: () => content,\n    } as File & RawContent;\n  } else {\n    return new File([content], name, options);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getRawContent } from \"./file.js\";\nimport { isNodeReadableStream, isWebReadableStream } from \"./typeGuards.js\";\n\n/**\n * Drain the content of the given ReadableStream into a Blob.\n * The blob's content may end up in memory or on disk dependent on size.\n */\nfunction drain(stream: ReadableStream<Uint8Array>): Promise<Blob> {\n  return new Response(stream).blob();\n}\n\nasync function toBlobPart(\n  source: ReadableStream<Uint8Array> | Blob | Uint8Array,\n): Promise<BlobPart> {\n  if (source instanceof Blob || source instanceof Uint8Array) {\n    return source;\n  }\n\n  if (isWebReadableStream(source)) {\n    return drain(source);\n  }\n\n  // If it's not a true Blob, and it's not a Uint8Array, we can assume the source\n  // is a fake File created by createFileFromStream and we can get the original stream\n  // using getRawContent.\n  const rawContent = getRawContent(source);\n\n  // Shouldn't happen but guard for it anyway\n  if (isNodeReadableStream(rawContent)) {\n    throw new Error(\n      \"Encountered unexpected type. In the browser, `concat` supports Web ReadableStream, Blob, Uint8Array, and files created using `createFile` only.\",\n    );\n  }\n\n  return toBlobPart(rawContent);\n}\n\n/**\n * Accepted binary data types for concat\n *\n * @internal\n */\ntype ConcatSource = ReadableStream<Uint8Array> | Blob | Uint8Array;\n\n/**\n * Utility function that concatenates a set of binary inputs into one combined output.\n *\n * @param sources - array of sources for the concatenation\n * @returns - in Node, a (() =\\> NodeJS.ReadableStream) which, when read, produces a concatenation of all the inputs.\n *           In browser, returns a `Blob` representing all the concatenated inputs.\n *\n * @internal\n */\nexport async function concat(\n  sources: (ConcatSource | (() => ConcatSource))[],\n): Promise<(() => NodeJS.ReadableStream) | Blob> {\n  const parts = [];\n  for (const source of sources) {\n    parts.push(await toBlobPart(typeof source === \"function\" ? source() : source));\n  }\n\n  return new Blob(parts);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { randomUUID, stringToUint8Array } from \"@azure/core-util\";\nimport type { BodyPart, HttpHeaders, PipelineRequest, PipelineResponse } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { concat } from \"../util/concat.js\";\nimport { isBlob } from \"../util/typeGuards.js\";\n\nfunction generateBoundary(): string {\n  return `----AzSDKFormBoundary${randomUUID()}`;\n}\n\nfunction encodeHeaders(headers: HttpHeaders): string {\n  let result = \"\";\n  for (const [key, value] of headers) {\n    result += `${key}: ${value}\\r\\n`;\n  }\n  return result;\n}\n\nfunction getLength(\n  source:\n    | (() => ReadableStream<Uint8Array>)\n    | (() => NodeJS.ReadableStream)\n    | Uint8Array\n    | Blob\n    | ReadableStream\n    | NodeJS.ReadableStream,\n): number | undefined {\n  if (source instanceof Uint8Array) {\n    return source.byteLength;\n  } else if (isBlob(source)) {\n    // if was created using createFile then -1 means we have an unknown size\n    return source.size === -1 ? undefined : source.size;\n  } else {\n    return undefined;\n  }\n}\n\nfunction getTotalLength(\n  sources: (\n    | (() => ReadableStream<Uint8Array>)\n    | (() => NodeJS.ReadableStream)\n    | Uint8Array\n    | Blob\n    | ReadableStream\n    | NodeJS.ReadableStream\n  )[],\n): number | undefined {\n  let total = 0;\n  for (const source of sources) {\n    const partLength = getLength(source);\n    if (partLength === undefined) {\n      return undefined;\n    } else {\n      total += partLength;\n    }\n  }\n  return total;\n}\n\nasync function buildRequestBody(\n  request: PipelineRequest,\n  parts: BodyPart[],\n  boundary: string,\n): Promise<void> {\n  const sources = [\n    stringToUint8Array(`--${boundary}`, \"utf-8\"),\n    ...parts.flatMap((part) => [\n      stringToUint8Array(\"\\r\\n\", \"utf-8\"),\n      stringToUint8Array(encodeHeaders(part.headers), \"utf-8\"),\n      stringToUint8Array(\"\\r\\n\", \"utf-8\"),\n      part.body,\n      stringToUint8Array(`\\r\\n--${boundary}`, \"utf-8\"),\n    ]),\n    stringToUint8Array(\"--\\r\\n\\r\\n\", \"utf-8\"),\n  ];\n\n  const contentLength = getTotalLength(sources);\n  if (contentLength) {\n    request.headers.set(\"Content-Length\", contentLength);\n  }\n\n  request.body = await concat(sources);\n}\n\n/**\n * Name of multipart policy\n */\nexport const multipartPolicyName = \"multipartPolicy\";\n\nconst maxBoundaryLength = 70;\nconst validBoundaryCharacters = new Set(\n  `abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'()+,-./:=?`,\n);\n\nfunction assertValidBoundary(boundary: string): void {\n  if (boundary.length > maxBoundaryLength) {\n    throw new Error(`Multipart boundary \"${boundary}\" exceeds maximum length of 70 characters`);\n  }\n\n  if (Array.from(boundary).some((x) => !validBoundaryCharacters.has(x))) {\n    throw new Error(`Multipart boundary \"${boundary}\" contains invalid characters`);\n  }\n}\n\n/**\n * Pipeline policy for multipart requests\n */\nexport function multipartPolicy(): PipelinePolicy {\n  return {\n    name: multipartPolicyName,\n    async sendRequest(request, next): Promise<PipelineResponse> {\n      if (!request.multipartBody) {\n        return next(request);\n      }\n\n      if (request.body) {\n        throw new Error(\"multipartBody and regular body cannot be set at the same time\");\n      }\n\n      let boundary = request.multipartBody.boundary;\n\n      const contentTypeHeader = request.headers.get(\"Content-Type\") ?? \"multipart/mixed\";\n      const parsedHeader = contentTypeHeader.match(/^(multipart\\/[^ ;]+)(?:; *boundary=(.+))?$/);\n      if (!parsedHeader) {\n        throw new Error(\n          `Got multipart request body, but content-type header was not multipart: ${contentTypeHeader}`,\n        );\n      }\n\n      const [, contentType, parsedBoundary] = parsedHeader;\n      if (parsedBoundary && boundary && parsedBoundary !== boundary) {\n        throw new Error(\n          `Multipart boundary was specified as ${parsedBoundary} in the header, but got ${boundary} in the request body`,\n        );\n      }\n\n      boundary ??= parsedBoundary;\n      if (boundary) {\n        assertValidBoundary(boundary);\n      } else {\n        boundary = generateBoundary();\n      }\n      request.headers.set(\"Content-Type\", `${contentType}; boundary=${boundary}`);\n      await buildRequestBody(request, request.multipartBody.parts, boundary);\n\n      request.multipartBody = undefined;\n\n      return next(request);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n */\n\nexport const decompressResponsePolicyName = \"decompressResponsePolicy\";\n\n/**\n * decompressResponsePolicy is not supported in the browser and attempting\n * to use it will raise an error.\n */\nexport function decompressResponsePolicy(): never {\n  throw new Error(\"decompressResponsePolicy is not supported in browser environment\");\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/**\n * This error is thrown when an asynchronous operation has been aborted.\n * Check for this error by testing the `name` that the name property of the\n * error matches `\"AbortError\"`.\n *\n * @example\n * ```ts\n * const controller = new AbortController();\n * controller.abort();\n * try {\n *   doAsyncWork(controller.signal)\n * } catch (e) {\n *   if (e.name === 'AbortError') {\n *     // handle abort error here.\n *   }\n * }\n * ```\n */\nexport class AbortError extends Error {\n  constructor(message?: string) {\n    super(message);\n    this.name = \"AbortError\";\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  interface Event {}\n}\n\nexport { AbortError } from \"./AbortError.js\";\nexport { AbortSignalLike } from \"./AbortSignalLike.js\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError, type AbortSignalLike } from \"@azure/abort-controller\";\nimport type { PipelineResponse } from \"../interfaces.js\";\n\nconst StandardAbortMessage = \"The operation was aborted.\";\n\n/**\n * A wrapper for setTimeout that resolves a promise after delayInMs milliseconds.\n * @param delayInMs - The number of milliseconds to be delayed.\n * @param value - The value to be resolved with after a timeout of t milliseconds.\n * @param options - The options for delay - currently abort options\n *                  - abortSignal - The abortSignal associated with containing operation.\n *                  - abortErrorMsg - The abort error message associated with containing operation.\n * @returns Resolved promise\n */\nexport function delay<T>(\n  delayInMs: number,\n  value?: T,\n  options?: {\n    abortSignal?: AbortSignalLike;\n    abortErrorMsg?: string;\n  },\n): Promise<T | void> {\n  return new Promise((resolve, reject) => {\n    let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n    let onAborted: (() => void) | undefined = undefined;\n\n    const rejectOnAbort = (): void => {\n      return reject(\n        new AbortError(options?.abortErrorMsg ? options?.abortErrorMsg : StandardAbortMessage),\n      );\n    };\n\n    const removeListeners = (): void => {\n      if (options?.abortSignal && onAborted) {\n        options.abortSignal.removeEventListener(\"abort\", onAborted);\n      }\n    };\n\n    onAborted = (): void => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n      removeListeners();\n      return rejectOnAbort();\n    };\n\n    if (options?.abortSignal && options.abortSignal.aborted) {\n      return rejectOnAbort();\n    }\n\n    timer = setTimeout(() => {\n      removeListeners();\n      resolve(value);\n    }, delayInMs);\n\n    if (options?.abortSignal) {\n      options.abortSignal.addEventListener(\"abort\", onAborted);\n    }\n  });\n}\n\n/**\n * @internal\n * @returns the parsed value or undefined if the parsed value is invalid.\n */\nexport function parseHeaderValueAsNumber(\n  response: PipelineResponse,\n  headerName: string,\n): number | undefined {\n  const value = response.headers.get(headerName);\n  if (!value) return;\n  const valueAsNum = Number(value);\n  if (Number.isNaN(valueAsNum)) return;\n  return valueAsNum;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineResponse } from \"../index.js\";\nimport { parseHeaderValueAsNumber } from \"../util/helpers.js\";\nimport type { RetryStrategy } from \"./retryStrategy.js\";\n\n/**\n * The header that comes back from Azure services representing\n * the amount of time (minimum) to wait to retry (in seconds or timestamp after which we can retry).\n */\nconst RetryAfterHeader = \"Retry-After\";\n/**\n * The headers that come back from Azure services representing\n * the amount of time (minimum) to wait to retry.\n *\n * \"retry-after-ms\", \"x-ms-retry-after-ms\" : milliseconds\n * \"Retry-After\" : seconds or timestamp\n */\nconst AllRetryAfterHeaders: string[] = [\"retry-after-ms\", \"x-ms-retry-after-ms\", RetryAfterHeader];\n\n/**\n * A response is a throttling retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n *\n * Returns the `retryAfterInMs` value if the response is a throttling retry response.\n * If not throttling retry response, returns `undefined`.\n *\n * @internal\n */\nfunction getRetryAfterInMs(response?: PipelineResponse): number | undefined {\n  if (!(response && [429, 503].includes(response.status))) return undefined;\n  try {\n    // Headers: \"retry-after-ms\", \"x-ms-retry-after-ms\", \"Retry-After\"\n    for (const header of AllRetryAfterHeaders) {\n      const retryAfterValue = parseHeaderValueAsNumber(response, header);\n      if (retryAfterValue === 0 || retryAfterValue) {\n        // \"Retry-After\" header ==> seconds\n        // \"retry-after-ms\", \"x-ms-retry-after-ms\" headers ==> milli-seconds\n        const multiplyingFactor = header === RetryAfterHeader ? 1000 : 1;\n        return retryAfterValue * multiplyingFactor; // in milli-seconds\n      }\n    }\n\n    // RetryAfterHeader (\"Retry-After\") has a special case where it might be formatted as a date instead of a number of seconds\n    const retryAfterHeader = response.headers.get(RetryAfterHeader);\n    if (!retryAfterHeader) return;\n\n    const date = Date.parse(retryAfterHeader);\n    const diff = date - Date.now();\n    // negative diff would mean a date in the past, so retry asap with 0 milliseconds\n    return Number.isFinite(diff) ? Math.max(0, diff) : undefined;\n  } catch (e: any) {\n    return undefined;\n  }\n}\n\n/**\n * A response is a retry response if it has a throttling status code (429 or 503),\n * as long as one of the [ \"Retry-After\" or \"retry-after-ms\" or \"x-ms-retry-after-ms\" ] headers has a valid value.\n */\nexport function isThrottlingRetryResponse(response?: PipelineResponse): boolean {\n  return Number.isFinite(getRetryAfterInMs(response));\n}\n\nexport function throttlingRetryStrategy(): RetryStrategy {\n  return {\n    name: \"throttlingRetryStrategy\",\n    retry({ response }) {\n      const retryAfterInMs = getRetryAfterInMs(response);\n      if (!Number.isFinite(retryAfterInMs)) {\n        return { skipStrategy: true };\n      }\n      return {\n        retryAfterInMs,\n      };\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineResponse } from \"../interfaces.js\";\nimport type { RestError } from \"../restError.js\";\nimport { getRandomIntegerInclusive } from \"@azure/core-util\";\nimport type { RetryStrategy } from \"./retryStrategy.js\";\nimport { isThrottlingRetryResponse } from \"./throttlingRetryStrategy.js\";\n\n// intervals are in milliseconds\nconst DEFAULT_CLIENT_RETRY_INTERVAL = 1000;\nconst DEFAULT_CLIENT_MAX_RETRY_INTERVAL = 1000 * 64;\n\n/**\n * A retry strategy that retries with an exponentially increasing delay in these two cases:\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails (408, greater or equal than 500, except for 501 and 505).\n */\nexport function exponentialRetryStrategy(\n  options: {\n    /**\n     * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n     * (1 second.) The delay increases exponentially with each retry up to a maximum\n     * specified by maxRetryDelayInMs.\n     */\n    retryDelayInMs?: number;\n\n    /**\n     * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n     * to 64000 (64 seconds).\n     */\n    maxRetryDelayInMs?: number;\n\n    /**\n     * If true it won't retry if it received a system error.\n     */\n    ignoreSystemErrors?: boolean;\n\n    /**\n     * If true it won't retry if it received a non-fatal HTTP status code.\n     */\n    ignoreHttpStatusCodes?: boolean;\n  } = {},\n): RetryStrategy {\n  const retryInterval = options.retryDelayInMs ?? DEFAULT_CLIENT_RETRY_INTERVAL;\n  const maxRetryInterval = options.maxRetryDelayInMs ?? DEFAULT_CLIENT_MAX_RETRY_INTERVAL;\n\n  let retryAfterInMs = retryInterval;\n\n  return {\n    name: \"exponentialRetryStrategy\",\n    retry({ retryCount, response, responseError }) {\n      const matchedSystemError = isSystemError(responseError);\n      const ignoreSystemErrors = matchedSystemError && options.ignoreSystemErrors;\n\n      const isExponential = isExponentialRetryResponse(response);\n      const ignoreExponentialResponse = isExponential && options.ignoreHttpStatusCodes;\n      const unknownResponse = response && (isThrottlingRetryResponse(response) || !isExponential);\n\n      if (unknownResponse || ignoreExponentialResponse || ignoreSystemErrors) {\n        return { skipStrategy: true };\n      }\n\n      if (responseError && !matchedSystemError && !isExponential) {\n        return { errorToThrow: responseError };\n      }\n\n      // Exponentially increase the delay each time\n      const exponentialDelay = retryAfterInMs * Math.pow(2, retryCount);\n      // Don't let the delay exceed the maximum\n      const clampedExponentialDelay = Math.min(maxRetryInterval, exponentialDelay);\n      // Allow the final value to have some \"jitter\" (within 50% of the delay size) so\n      // that retries across multiple clients don't occur simultaneously.\n      retryAfterInMs =\n        clampedExponentialDelay / 2 + getRandomIntegerInclusive(0, clampedExponentialDelay / 2);\n      return { retryAfterInMs };\n    },\n  };\n}\n\n/**\n * A response is a retry response if it has status codes:\n * - 408, or\n * - Greater or equal than 500, except for 501 and 505.\n */\nexport function isExponentialRetryResponse(response?: PipelineResponse): boolean {\n  return Boolean(\n    response &&\n      response.status !== undefined &&\n      (response.status >= 500 || response.status === 408) &&\n      response.status !== 501 &&\n      response.status !== 505,\n  );\n}\n\n/**\n * Determines whether an error from a pipeline response was triggered in the network layer.\n */\nexport function isSystemError(err?: RestError): boolean {\n  if (!err) {\n    return false;\n  }\n  return (\n    err.code === \"ETIMEDOUT\" ||\n    err.code === \"ESOCKETTIMEDOUT\" ||\n    err.code === \"ECONNREFUSED\" ||\n    err.code === \"ECONNRESET\" ||\n    err.code === \"ENOENT\" ||\n    err.code === \"ENOTFOUND\"\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { delay } from \"../util/helpers.js\";\nimport { type AzureLogger, createClientLogger } from \"@azure/logger\";\nimport type { RetryStrategy } from \"../retryStrategies/retryStrategy.js\";\nimport type { RestError } from \"../restError.js\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n\nconst retryPolicyLogger = createClientLogger(\"core-rest-pipeline retryPolicy\");\n\n/**\n * The programmatic identifier of the retryPolicy.\n */\nconst retryPolicyName = \"retryPolicy\";\n\n/**\n * Options to the {@link retryPolicy}\n */\nexport interface RetryPolicyOptions {\n  /**\n   * Maximum number of retries. If not specified, it will limit to 3 retries.\n   */\n  maxRetries?: number;\n  /**\n   * Logger. If it's not provided, a default logger is used.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * retryPolicy is a generic policy to enable retrying requests when certain conditions are met\n */\nexport function retryPolicy(\n  strategies: RetryStrategy[],\n  options: RetryPolicyOptions = { maxRetries: DEFAULT_RETRY_POLICY_COUNT },\n): PipelinePolicy {\n  const logger = options.logger || retryPolicyLogger;\n  return {\n    name: retryPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      let response: PipelineResponse | undefined;\n      let responseError: RestError | undefined;\n      let retryCount = -1;\n\n      // eslint-disable-next-line no-constant-condition\n      retryRequest: while (true) {\n        retryCount += 1;\n        response = undefined;\n        responseError = undefined;\n\n        try {\n          logger.info(`Retry ${retryCount}: Attempting to send request`, request.requestId);\n          response = await next(request);\n          logger.info(`Retry ${retryCount}: Received a response from request`, request.requestId);\n        } catch (e: any) {\n          logger.error(`Retry ${retryCount}: Received an error from request`, request.requestId);\n\n          // RestErrors are valid targets for the retry strategies.\n          // If none of the retry strategies can work with them, they will be thrown later in this policy.\n          // If the received error is not a RestError, it is immediately thrown.\n          responseError = e as RestError;\n          if (!e || responseError.name !== \"RestError\") {\n            throw e;\n          }\n\n          response = responseError.response;\n        }\n\n        if (request.abortSignal?.aborted) {\n          logger.error(`Retry ${retryCount}: Request aborted.`);\n          const abortError = new AbortError();\n          throw abortError;\n        }\n\n        if (retryCount >= (options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT)) {\n          logger.info(\n            `Retry ${retryCount}: Maximum retries reached. Returning the last received response, or throwing the last received error.`,\n          );\n          if (responseError) {\n            throw responseError;\n          } else if (response) {\n            return response;\n          } else {\n            throw new Error(\"Maximum retries reached with no response or error to throw\");\n          }\n        }\n\n        logger.info(`Retry ${retryCount}: Processing ${strategies.length} retry strategies.`);\n\n        strategiesLoop: for (const strategy of strategies) {\n          const strategyLogger = strategy.logger || retryPolicyLogger;\n          strategyLogger.info(`Retry ${retryCount}: Processing retry strategy ${strategy.name}.`);\n\n          const modifiers = strategy.retry({\n            retryCount,\n            response,\n            responseError,\n          });\n\n          if (modifiers.skipStrategy) {\n            strategyLogger.info(`Retry ${retryCount}: Skipped.`);\n            continue strategiesLoop;\n          }\n\n          const { errorToThrow, retryAfterInMs, redirectTo } = modifiers;\n\n          if (errorToThrow) {\n            strategyLogger.error(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} throws error:`,\n              errorToThrow,\n            );\n            throw errorToThrow;\n          }\n\n          if (retryAfterInMs || retryAfterInMs === 0) {\n            strategyLogger.info(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} retries after ${retryAfterInMs}`,\n            );\n            await delay(retryAfterInMs, undefined, { abortSignal: request.abortSignal });\n            continue retryRequest;\n          }\n\n          if (redirectTo) {\n            strategyLogger.info(\n              `Retry ${retryCount}: Retry strategy ${strategy.name} redirects to ${redirectTo}`,\n            );\n            request.url = redirectTo;\n            continue retryRequest;\n          }\n        }\n\n        if (responseError) {\n          logger.info(\n            `None of the retry strategies could work with the received error. Throwing it.`,\n          );\n          throw responseError;\n        }\n        if (response) {\n          logger.info(\n            `None of the retry strategies could work with the received response. Returning it.`,\n          );\n          return response;\n        }\n\n        // If all the retries skip and there's no response,\n        // we're still in the retry loop, so a new request will be sent\n        // until `maxRetries` is reached.\n      }\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRetryOptions } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy.js\";\nimport { throttlingRetryStrategy } from \"../retryStrategies/throttlingRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n\n/**\n * Name of the {@link defaultRetryPolicy}\n */\nexport const defaultRetryPolicyName = \"defaultRetryPolicy\";\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface DefaultRetryPolicyOptions extends PipelineRetryOptions {}\n\n/**\n * A policy that retries according to three strategies:\n * - When the server sends a 429 response with a Retry-After header.\n * - When there are errors in the underlying transport layer (e.g. DNS lookup failures).\n * - Or otherwise if the outgoing request fails, it will retry with an exponentially increasing delay.\n */\nexport function defaultRetryPolicy(options: DefaultRetryPolicyOptions = {}): PipelinePolicy {\n  return {\n    name: defaultRetryPolicyName,\n    sendRequest: retryPolicy([throttlingRetryStrategy(), exponentialRetryStrategy(options)], {\n      maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT,\n    }).sendRequest,\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { HttpHeaders, RawHttpHeaders, RawHttpHeadersInput } from \"./interfaces.js\";\n\ninterface HeaderEntry {\n  name: string;\n  value: string;\n}\n\nfunction normalizeName(name: string): string {\n  return name.toLowerCase();\n}\n\nfunction* headerIterator(map: Map<string, HeaderEntry>): IterableIterator<[string, string]> {\n  for (const entry of map.values()) {\n    yield [entry.name, entry.value];\n  }\n}\n\nclass HttpHeadersImpl implements HttpHeaders {\n  private readonly _headersMap: Map<string, HeaderEntry>;\n\n  constructor(rawHeaders?: RawHttpHeaders | RawHttpHeadersInput) {\n    this._headersMap = new Map<string, HeaderEntry>();\n    if (rawHeaders) {\n      for (const headerName of Object.keys(rawHeaders)) {\n        this.set(headerName, rawHeaders[headerName]);\n      }\n    }\n  }\n\n  /**\n   * Set a header in this collection with the provided name and value. The name is\n   * case-insensitive.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   * @param value - The value of the header to set.\n   */\n  public set(name: string, value: string | number | boolean): void {\n    this._headersMap.set(normalizeName(name), { name, value: String(value).trim() });\n  }\n\n  /**\n   * Get the header value for the provided header name, or undefined if no header exists in this\n   * collection with the provided name.\n   * @param name - The name of the header. This value is case-insensitive.\n   */\n  public get(name: string): string | undefined {\n    return this._headersMap.get(normalizeName(name))?.value;\n  }\n\n  /**\n   * Get whether or not this header collection contains a header entry for the provided header name.\n   * @param name - The name of the header to set. This value is case-insensitive.\n   */\n  public has(name: string): boolean {\n    return this._headersMap.has(normalizeName(name));\n  }\n\n  /**\n   * Remove the header with the provided headerName.\n   * @param name - The name of the header to remove.\n   */\n  public delete(name: string): void {\n    this._headersMap.delete(normalizeName(name));\n  }\n\n  /**\n   * Get the JSON object representation of this HTTP header collection.\n   */\n  public toJSON(options: { preserveCase?: boolean } = {}): RawHttpHeaders {\n    const result: RawHttpHeaders = {};\n    if (options.preserveCase) {\n      for (const entry of this._headersMap.values()) {\n        result[entry.name] = entry.value;\n      }\n    } else {\n      for (const [normalizedName, entry] of this._headersMap) {\n        result[normalizedName] = entry.value;\n      }\n    }\n\n    return result;\n  }\n\n  /**\n   * Get the string representation of this HTTP header collection.\n   */\n  public toString(): string {\n    return JSON.stringify(this.toJSON({ preserveCase: true }));\n  }\n\n  /**\n   * Iterate over tuples of header [name, value] pairs.\n   */\n  [Symbol.iterator](): Iterator<[string, string]> {\n    return headerIterator(this._headersMap);\n  }\n}\n\n/**\n * Creates an object that satisfies the `HttpHeaders` interface.\n * @param rawHeaders - A simple object representing initial headers\n */\nexport function createHttpHeaders(rawHeaders?: RawHttpHeadersInput): HttpHeaders {\n  return new HttpHeadersImpl(rawHeaders);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isNodeLike, stringToUint8Array } from \"@azure/core-util\";\nimport { createHttpHeaders } from \"../httpHeaders.js\";\nimport type {\n  BodyPart,\n  FormDataMap,\n  FormDataValue,\n  PipelineRequest,\n  PipelineResponse,\n  SendRequest,\n} from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\n\n/**\n * The programmatic identifier of the formDataPolicy.\n */\nexport const formDataPolicyName = \"formDataPolicy\";\n\nfunction formDataToFormDataMap(formData: FormData): FormDataMap {\n  const formDataMap: FormDataMap = {};\n  for (const [key, value] of formData.entries()) {\n    formDataMap[key] ??= [];\n    (formDataMap[key] as FormDataValue[]).push(value);\n  }\n  return formDataMap;\n}\n\n/**\n * A policy that encodes FormData on the request into the body.\n */\nexport function formDataPolicy(): PipelinePolicy {\n  return {\n    name: formDataPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (isNodeLike && typeof FormData !== \"undefined\" && request.body instanceof FormData) {\n        request.formData = formDataToFormDataMap(request.body);\n        request.body = undefined;\n      }\n\n      if (request.formData) {\n        const contentType = request.headers.get(\"Content-Type\");\n        if (contentType && contentType.indexOf(\"application/x-www-form-urlencoded\") !== -1) {\n          request.body = wwwFormUrlEncode(request.formData);\n        } else {\n          await prepareFormData(request.formData, request);\n        }\n\n        request.formData = undefined;\n      }\n      return next(request);\n    },\n  };\n}\n\nfunction wwwFormUrlEncode(formData: FormDataMap): string {\n  const urlSearchParams = new URLSearchParams();\n  for (const [key, value] of Object.entries(formData)) {\n    if (Array.isArray(value)) {\n      for (const subValue of value) {\n        urlSearchParams.append(key, subValue.toString());\n      }\n    } else {\n      urlSearchParams.append(key, value.toString());\n    }\n  }\n  return urlSearchParams.toString();\n}\n\nasync function prepareFormData(formData: FormDataMap, request: PipelineRequest): Promise<void> {\n  // validate content type (multipart/form-data)\n  const contentType = request.headers.get(\"Content-Type\");\n  if (contentType && !contentType.startsWith(\"multipart/form-data\")) {\n    // content type is specified and is not multipart/form-data. Exit.\n    return;\n  }\n\n  request.headers.set(\"Content-Type\", contentType ?? \"multipart/form-data\");\n\n  // set body to MultipartRequestBody using content from FormDataMap\n  const parts: BodyPart[] = [];\n\n  for (const [fieldName, values] of Object.entries(formData)) {\n    for (const value of Array.isArray(values) ? values : [values]) {\n      if (typeof value === \"string\") {\n        parts.push({\n          headers: createHttpHeaders({\n            \"Content-Disposition\": `form-data; name=\"${fieldName}\"`,\n          }),\n          body: stringToUint8Array(value, \"utf-8\"),\n        });\n      } else if (value === undefined || value === null || typeof value !== \"object\") {\n        throw new Error(\n          `Unexpected value for key ${fieldName}: ${value}. Value should be serialized to string first.`,\n        );\n      } else {\n        // using || instead of ?? here since if value.name is empty we should create a file name\n        const fileName = (value as File).name || \"blob\";\n        const headers = createHttpHeaders();\n        headers.set(\n          \"Content-Disposition\",\n          `form-data; name=\"${fieldName}\"; filename=\"${fileName}\"`,\n        );\n\n        // again, || is used since an empty value.type means the content type is unset\n        headers.set(\"Content-Type\", value.type || \"application/octet-stream\");\n\n        parts.push({\n          headers,\n          body: value,\n        });\n      }\n    }\n  }\n  request.multipartBody = { parts };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/*\n * NOTE: When moving this file, please update \"browser\" section in package.json\n */\n\nexport const proxyPolicyName = \"proxyPolicy\";\nconst errorMessage = \"proxyPolicy is not supported in browser environment\";\n\nexport function getDefaultProxySettings(): never {\n  throw new Error(errorMessage);\n}\n\n/**\n * proxyPolicy is not supported in the browser and attempting\n * to use it will raise an error.\n */\nexport function proxyPolicy(): never {\n  throw new Error(errorMessage);\n}\n\n/**\n * A function to reset the cached agents.\n * proxyPolicy is not supported in the browser and attempting\n * to use it will raise an error.\n * @internal\n */\nexport function resetCachedProxyAgents(): never {\n  throw new Error(errorMessage);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\n\n/**\n * The programmatic identifier of the setClientRequestIdPolicy.\n */\nexport const setClientRequestIdPolicyName = \"setClientRequestIdPolicy\";\n\n/**\n * Each PipelineRequest gets a unique id upon creation.\n * This policy passes that unique id along via an HTTP header to enable better\n * telemetry and tracing.\n * @param requestIdHeaderName - The name of the header to pass the request ID to.\n */\nexport function setClientRequestIdPolicy(\n  requestIdHeaderName = \"x-ms-client-request-id\",\n): PipelinePolicy {\n  return {\n    name: setClientRequestIdPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.headers.has(requestIdHeaderName)) {\n        request.headers.set(requestIdHeaderName, request.requestId);\n      }\n      return next(request);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport type { TlsSettings } from \"../interfaces.js\";\n\n/**\n * Name of the TLS Policy\n */\nexport const tlsPolicyName = \"tlsPolicy\";\n\n/**\n * Gets a pipeline policy that adds the client certificate to the HttpClient agent for authentication.\n */\nexport function tlsPolicy(tlsSettings?: TlsSettings): PipelinePolicy {\n  return {\n    name: tlsPolicyName,\n    sendRequest: async (req, next) => {\n      // Users may define a request tlsSettings, honor those over the client level one\n      if (!req.tlsSettings) {\n        req.tlsSettings = tlsSettings;\n      }\n      return next(req);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const custom = {};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { isError } from \"@azure/core-util\";\nimport type { PipelineRequest, PipelineResponse } from \"./interfaces.js\";\nimport { custom } from \"./util/inspect.js\";\nimport { Sanitizer } from \"./util/sanitizer.js\";\n\nconst errorSanitizer = new Sanitizer();\n\n/**\n * The options supported by RestError.\n */\nexport interface RestErrorOptions {\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  response?: PipelineResponse;\n}\n\n/**\n * A custom error type for failed pipeline requests.\n */\nexport class RestError extends Error {\n  /**\n   * Something went wrong when making the request.\n   * This means the actual request failed for some reason,\n   * such as a DNS issue or the connection being lost.\n   */\n  static readonly REQUEST_SEND_ERROR: string = \"REQUEST_SEND_ERROR\";\n  /**\n   * This means that parsing the response from the server failed.\n   * It may have been malformed.\n   */\n  static readonly PARSE_ERROR: string = \"PARSE_ERROR\";\n\n  /**\n   * The code of the error itself (use statics on RestError if possible.)\n   */\n  public code?: string;\n  /**\n   * The HTTP status code of the request (if applicable.)\n   */\n  public statusCode?: number;\n  /**\n   * The request that was made.\n   */\n  public request?: PipelineRequest;\n  /**\n   * The response received (if any.)\n   */\n  public response?: PipelineResponse;\n  /**\n   * Bonus property set by the throw site.\n   */\n  public details?: unknown;\n\n  constructor(message: string, options: RestErrorOptions = {}) {\n    super(message);\n    this.name = \"RestError\";\n    this.code = options.code;\n    this.statusCode = options.statusCode;\n    this.request = options.request;\n    this.response = options.response;\n\n    Object.setPrototypeOf(this, RestError.prototype);\n  }\n\n  /**\n   * Logging method for util.inspect in Node\n   */\n  [custom](): string {\n    return `RestError: ${this.message} \\n ${errorSanitizer.sanitize(this)}`;\n  }\n}\n\n/**\n * Typeguard for RestError\n * @param e - Something caught by a catch clause.\n */\nexport function isRestError(e: unknown): e is RestError {\n  if (e instanceof RestError) {\n    return true;\n  }\n  return isError(e) && e.name === \"RestError\";\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  type TracingClient,\n  type TracingContext,\n  type TracingSpan,\n  createTracingClient,\n} from \"@azure/core-tracing\";\nimport { SDK_VERSION } from \"../constants.js\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { getUserAgentValue } from \"../util/userAgent.js\";\nimport { logger } from \"../log.js\";\nimport { getErrorMessage, isError } from \"@azure/core-util\";\nimport { isRestError } from \"../restError.js\";\n\n/**\n * The programmatic identifier of the tracingPolicy.\n */\nexport const tracingPolicyName = \"tracingPolicy\";\n\n/**\n * Options to configure the tracing policy.\n */\nexport interface TracingPolicyOptions {\n  /**\n   * String prefix to add to the user agent logged as metadata\n   * on the generated Span.\n   * Defaults to an empty string.\n   */\n  userAgentPrefix?: string;\n}\n\n/**\n * A simple policy to create OpenTelemetry Spans for each request made by the pipeline\n * that has SpanOptions with a parent.\n * Requests made without a parent Span will not be recorded.\n * @param options - Options to configure the telemetry logged by the tracing policy.\n */\nexport function tracingPolicy(options: TracingPolicyOptions = {}): PipelinePolicy {\n  const userAgent = getUserAgentValue(options.userAgentPrefix);\n  const tracingClient = tryCreateTracingClient();\n\n  return {\n    name: tracingPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!tracingClient || !request.tracingOptions?.tracingContext) {\n        return next(request);\n      }\n\n      const { span, tracingContext } = tryCreateSpan(tracingClient, request, userAgent) ?? {};\n\n      if (!span || !tracingContext) {\n        return next(request);\n      }\n\n      try {\n        const response = await tracingClient.withContext(tracingContext, next, request);\n        tryProcessResponse(span, response);\n        return response;\n      } catch (err: any) {\n        tryProcessError(span, err);\n        throw err;\n      }\n    },\n  };\n}\n\nfunction tryCreateTracingClient(): TracingClient | undefined {\n  try {\n    return createTracingClient({\n      namespace: \"\",\n      packageName: \"@azure/core-rest-pipeline\",\n      packageVersion: SDK_VERSION,\n    });\n  } catch (e: unknown) {\n    logger.warning(`Error when creating the TracingClient: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\n\nfunction tryCreateSpan(\n  tracingClient: TracingClient,\n  request: PipelineRequest,\n  userAgent?: string,\n): { span: TracingSpan; tracingContext: TracingContext } | undefined {\n  try {\n    // As per spec, we do not need to differentiate between HTTP and HTTPS in span name.\n    const { span, updatedOptions } = tracingClient.startSpan(\n      `HTTP ${request.method}`,\n      { tracingOptions: request.tracingOptions },\n      {\n        spanKind: \"client\",\n        spanAttributes: {\n          \"http.method\": request.method,\n          \"http.url\": request.url,\n          requestId: request.requestId,\n        },\n      },\n    );\n\n    // If the span is not recording, don't do any more work.\n    if (!span.isRecording()) {\n      span.end();\n      return undefined;\n    }\n\n    if (userAgent) {\n      span.setAttribute(\"http.user_agent\", userAgent);\n    }\n\n    // set headers\n    const headers = tracingClient.createRequestHeaders(\n      updatedOptions.tracingOptions.tracingContext,\n    );\n    for (const [key, value] of Object.entries(headers)) {\n      request.headers.set(key, value);\n    }\n    return { span, tracingContext: updatedOptions.tracingOptions.tracingContext };\n  } catch (e: any) {\n    logger.warning(`Skipping creating a tracing span due to an error: ${getErrorMessage(e)}`);\n    return undefined;\n  }\n}\n\nfunction tryProcessError(span: TracingSpan, error: unknown): void {\n  try {\n    span.setStatus({\n      status: \"error\",\n      error: isError(error) ? error : undefined,\n    });\n    if (isRestError(error) && error.statusCode) {\n      span.setAttribute(\"http.status_code\", error.statusCode);\n    }\n    span.end();\n  } catch (e: any) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\n\nfunction tryProcessResponse(span: TracingSpan, response: PipelineResponse): void {\n  try {\n    span.setAttribute(\"http.status_code\", response.status);\n    const serviceRequestId = response.headers.get(\"x-ms-request-id\");\n    if (serviceRequestId) {\n      span.setAttribute(\"serviceRequestId\", serviceRequestId);\n    }\n    span.setStatus({\n      status: \"success\",\n    });\n    span.end();\n  } catch (e: any) {\n    logger.warning(`Skipping tracing span processing due to an error: ${getErrorMessage(e)}`);\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { type LogPolicyOptions, logPolicy } from \"./policies/logPolicy.js\";\nimport { type Pipeline, createEmptyPipeline } from \"./pipeline.js\";\nimport type { PipelineRetryOptions, TlsSettings, ProxySettings } from \"./interfaces.js\";\nimport { type RedirectPolicyOptions, redirectPolicy } from \"./policies/redirectPolicy.js\";\nimport { type UserAgentPolicyOptions, userAgentPolicy } from \"./policies/userAgentPolicy.js\";\nimport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\nimport { decompressResponsePolicy } from \"./policies/decompressResponsePolicy.js\";\nimport { defaultRetryPolicy } from \"./policies/defaultRetryPolicy.js\";\nimport { formDataPolicy } from \"./policies/formDataPolicy.js\";\nimport { isNodeLike } from \"@azure/core-util\";\nimport { proxyPolicy } from \"./policies/proxyPolicy.js\";\nimport { setClientRequestIdPolicy } from \"./policies/setClientRequestIdPolicy.js\";\nimport { tlsPolicy } from \"./policies/tlsPolicy.js\";\nimport { tracingPolicy } from \"./policies/tracingPolicy.js\";\n\n/**\n * Defines options that are used to configure the HTTP pipeline for\n * an SDK client.\n */\nexport interface PipelineOptions {\n  /**\n   * Options that control how to retry failed requests.\n   */\n  retryOptions?: PipelineRetryOptions;\n\n  /**\n   * Options to configure a proxy for outgoing requests.\n   */\n  proxyOptions?: ProxySettings;\n\n  /** Options for configuring TLS authentication */\n  tlsOptions?: TlsSettings;\n\n  /**\n   * Options for how redirect responses are handled.\n   */\n  redirectOptions?: RedirectPolicyOptions;\n\n  /**\n   * Options for adding user agent details to outgoing requests.\n   */\n  userAgentOptions?: UserAgentPolicyOptions;\n\n  /**\n   * Options for setting common telemetry and tracing info to outgoing requests.\n   */\n  telemetryOptions?: TelemetryOptions;\n}\n\n/**\n * Defines options that are used to configure common telemetry and tracing info\n */\nexport interface TelemetryOptions {\n  /**\n   * The name of the header to pass the request ID to.\n   */\n  clientRequestIdHeaderName?: string;\n}\n\n/**\n * Defines options that are used to configure internal options of\n * the HTTP pipeline for an SDK client.\n */\nexport interface InternalPipelineOptions extends PipelineOptions {\n  /**\n   * Options to configure request/response logging.\n   */\n  loggingOptions?: LogPolicyOptions;\n}\n\n/**\n * Create a new pipeline with a default set of customizable policies.\n * @param options - Options to configure a custom pipeline.\n */\nexport function createPipelineFromOptions(options: InternalPipelineOptions): Pipeline {\n  const pipeline = createEmptyPipeline();\n\n  if (isNodeLike) {\n    if (options.tlsOptions) {\n      pipeline.addPolicy(tlsPolicy(options.tlsOptions));\n    }\n    pipeline.addPolicy(proxyPolicy(options.proxyOptions));\n    pipeline.addPolicy(decompressResponsePolicy());\n  }\n\n  pipeline.addPolicy(formDataPolicy(), { beforePolicies: [multipartPolicyName] });\n  pipeline.addPolicy(userAgentPolicy(options.userAgentOptions));\n  pipeline.addPolicy(setClientRequestIdPolicy(options.telemetryOptions?.clientRequestIdHeaderName));\n  // The multipart policy is added after policies with no phase, so that\n  // policies can be added between it and formDataPolicy to modify\n  // properties (e.g., making the boundary constant in recorded tests).\n  pipeline.addPolicy(multipartPolicy(), { afterPhase: \"Deserialize\" });\n  pipeline.addPolicy(defaultRetryPolicy(options.retryOptions), { phase: \"Retry\" });\n  pipeline.addPolicy(tracingPolicy(options.userAgentOptions), { afterPhase: \"Retry\" });\n  if (isNodeLike) {\n    // Both XHR and Fetch expect to handle redirects automatically,\n    // so only include this policy when we're in Node.\n    pipeline.addPolicy(redirectPolicy(options.redirectOptions), { afterPhase: \"Retry\" });\n  }\n  pipeline.addPolicy(logPolicy(options.loggingOptions), { afterPhase: \"Sign\" });\n\n  return pipeline;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AbortError } from \"@azure/abort-controller\";\nimport type {\n  HttpClient,\n  HttpHeaders as PipelineHeaders,\n  PipelineRequest,\n  PipelineResponse,\n  TransferProgressEvent,\n} from \"./interfaces.js\";\nimport { RestError } from \"./restError.js\";\nimport { createHttpHeaders } from \"./httpHeaders.js\";\nimport { isNodeReadableStream, isWebReadableStream } from \"./util/typeGuards.js\";\n\n/**\n * Checks if the body is a Blob or Blob-like\n */\nfunction isBlob(body: unknown): body is Blob {\n  // File objects count as a type of Blob, so we want to use instanceof explicitly\n  return (typeof Blob === \"function\" || typeof Blob === \"object\") && body instanceof Blob;\n}\n\n/**\n * A HttpClient implementation that uses window.fetch to send HTTP requests.\n * @internal\n */\nclass FetchHttpClient implements HttpClient {\n  /**\n   * Makes a request over an underlying transport layer and returns the response.\n   * @param request - The request to be made.\n   */\n  public async sendRequest(request: PipelineRequest): Promise<PipelineResponse> {\n    const url = new URL(request.url);\n    const isInsecure = url.protocol !== \"https:\";\n\n    if (isInsecure && !request.allowInsecureConnection) {\n      throw new Error(`Cannot connect to ${request.url} while allowInsecureConnection is false.`);\n    }\n\n    if (request.proxySettings) {\n      throw new Error(\"HTTP proxy is not supported in browser environment\");\n    }\n\n    try {\n      return await makeRequest(request);\n    } catch (e: any) {\n      throw getError(e, request);\n    }\n  }\n}\n\n/**\n * Sends a request\n */\nasync function makeRequest(request: PipelineRequest): Promise<PipelineResponse> {\n  const { abortController, abortControllerCleanup } = setupAbortSignal(request);\n  try {\n    const headers = buildFetchHeaders(request.headers);\n    const { streaming, body: requestBody } = buildRequestBody(request);\n    const requestInit: RequestInit = {\n      body: requestBody,\n      method: request.method,\n      headers: headers,\n      signal: abortController.signal,\n      // Cloudflare doesn't implement the full Fetch API spec\n      // because of some of it doesn't make sense in the edge.\n      // See https://github.com/cloudflare/workerd/issues/902\n      ...(\"credentials\" in Request.prototype\n        ? { credentials: request.withCredentials ? \"include\" : \"same-origin\" }\n        : {}),\n      ...(\"cache\" in Request.prototype ? { cache: \"no-store\" } : {}),\n    };\n\n    // According to https://fetch.spec.whatwg.org/#fetch-method,\n    // init.duplex must be set when body is a ReadableStream object.\n    // currently \"half\" is the only valid value.\n    if (streaming) {\n      (requestInit as any).duplex = \"half\";\n    }\n    /**\n     * Developers of the future:\n     * Do not set redirect: \"manual\" as part\n     * of request options.\n     * It will not work as you expect.\n     */\n    const response = await fetch(request.url, requestInit);\n    // If we're uploading a blob, we need to fire the progress event manually\n    if (isBlob(request.body) && request.onUploadProgress) {\n      request.onUploadProgress({ loadedBytes: request.body.size });\n    }\n    return buildPipelineResponse(response, request, abortControllerCleanup);\n  } catch (e) {\n    abortControllerCleanup?.();\n    throw e;\n  }\n}\n\n/**\n * Creates a pipeline response from a Fetch response;\n */\nasync function buildPipelineResponse(\n  httpResponse: Response,\n  request: PipelineRequest,\n  abortControllerCleanup?: () => void,\n): Promise<PipelineResponse> {\n  const headers = buildPipelineHeaders(httpResponse);\n  const response: PipelineResponse = {\n    request,\n    headers,\n    status: httpResponse.status,\n  };\n\n  const bodyStream = isWebReadableStream(httpResponse.body)\n    ? buildBodyStream(httpResponse.body, {\n        onProgress: request.onDownloadProgress,\n        onEnd: abortControllerCleanup,\n      })\n    : httpResponse.body;\n\n  if (\n    // Value of POSITIVE_INFINITY in streamResponseStatusCodes is considered as any status code\n    request.streamResponseStatusCodes?.has(Number.POSITIVE_INFINITY) ||\n    request.streamResponseStatusCodes?.has(response.status)\n  ) {\n    if (request.enableBrowserStreams) {\n      response.browserStreamBody = bodyStream ?? undefined;\n    } else {\n      const responseStream = new Response(bodyStream);\n      response.blobBody = responseStream.blob();\n      abortControllerCleanup?.();\n    }\n  } else {\n    const responseStream = new Response(bodyStream);\n\n    response.bodyAsText = await responseStream.text();\n    abortControllerCleanup?.();\n  }\n\n  return response;\n}\n\nfunction setupAbortSignal(request: PipelineRequest): {\n  abortController: AbortController;\n  abortControllerCleanup: (() => void) | undefined;\n} {\n  const abortController = new AbortController();\n\n  // Cleanup function\n  let abortControllerCleanup: (() => void) | undefined;\n\n  /**\n   * Attach an abort listener to the request\n   */\n  let abortListener: ((event: any) => void) | undefined;\n  if (request.abortSignal) {\n    if (request.abortSignal.aborted) {\n      throw new AbortError(\"The operation was aborted.\");\n    }\n\n    abortListener = (event: Event) => {\n      if (event.type === \"abort\") {\n        abortController.abort();\n      }\n    };\n    request.abortSignal.addEventListener(\"abort\", abortListener);\n    abortControllerCleanup = () => {\n      if (abortListener) {\n        request.abortSignal?.removeEventListener(\"abort\", abortListener);\n      }\n    };\n  }\n\n  // If a timeout was passed, call the abort signal once the time elapses\n  if (request.timeout > 0) {\n    setTimeout(() => {\n      abortController.abort();\n    }, request.timeout);\n  }\n\n  return { abortController, abortControllerCleanup };\n}\n\n/**\n * Gets the specific error\n */\n// eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\nfunction getError(e: RestError, request: PipelineRequest): RestError {\n  if (e && e?.name === \"AbortError\") {\n    return e;\n  } else {\n    return new RestError(`Error sending request: ${e.message}`, {\n      code: e?.code ?? RestError.REQUEST_SEND_ERROR,\n      request,\n    });\n  }\n}\n\n/**\n * Converts PipelineRequest headers to Fetch headers\n */\nfunction buildFetchHeaders(pipelineHeaders: PipelineHeaders): Headers {\n  const headers = new Headers();\n  for (const [name, value] of pipelineHeaders) {\n    headers.append(name, value);\n  }\n\n  return headers;\n}\n\nfunction buildPipelineHeaders(httpResponse: Response): PipelineHeaders {\n  const responseHeaders = createHttpHeaders();\n  for (const [name, value] of httpResponse.headers) {\n    responseHeaders.set(name, value);\n  }\n\n  return responseHeaders;\n}\n\ninterface BuildRequestBodyResponse {\n  body:\n    | string\n    | Blob\n    | ReadableStream<Uint8Array>\n    | ArrayBuffer\n    | ArrayBufferView\n    | FormData\n    | null\n    | undefined;\n  streaming: boolean;\n}\n\nfunction buildRequestBody(request: PipelineRequest): BuildRequestBodyResponse {\n  const body = typeof request.body === \"function\" ? request.body() : request.body;\n  if (isNodeReadableStream(body)) {\n    throw new Error(\"Node streams are not supported in browser environment.\");\n  }\n\n  return isWebReadableStream(body)\n    ? { streaming: true, body: buildBodyStream(body, { onProgress: request.onUploadProgress }) }\n    : { streaming: false, body };\n}\n\n/**\n * Reads the request/response original stream and stream it through a new\n * ReadableStream, this is done to be able to report progress in a way that\n * all modern browsers support. TransformStreams would be an alternative,\n * however they are not yet supported by all browsers i.e Firefox\n */\nfunction buildBodyStream(\n  readableStream: ReadableStream<Uint8Array>,\n  options: { onProgress?: (progress: TransferProgressEvent) => void; onEnd?: () => void } = {},\n): ReadableStream<Uint8Array> {\n  let loadedBytes = 0;\n  const { onProgress, onEnd } = options;\n\n  // If the current browser supports pipeThrough we use a TransformStream\n  // to report progress\n  if (isTransformStreamSupported(readableStream)) {\n    return readableStream.pipeThrough(\n      new TransformStream({\n        transform(chunk, controller) {\n          if (chunk === null) {\n            controller.terminate();\n            return;\n          }\n\n          controller.enqueue(chunk);\n          loadedBytes += chunk.length;\n          if (onProgress) {\n            onProgress({ loadedBytes });\n          }\n        },\n        flush() {\n          onEnd?.();\n        },\n      }),\n    );\n  } else {\n    // If we can't use transform streams, wrap the original stream in a new readable stream\n    // and use pull to enqueue each chunk and report progress.\n    const reader = readableStream.getReader();\n    return new ReadableStream({\n      async pull(controller) {\n        const { done, value } = await reader.read();\n        // When no more data needs to be consumed, break the reading\n        if (done || !value) {\n          onEnd?.();\n          // Close the stream\n          controller.close();\n          reader.releaseLock();\n          return;\n        }\n\n        loadedBytes += value?.length ?? 0;\n\n        // Enqueue the next data chunk into our target stream\n        controller.enqueue(value);\n\n        if (onProgress) {\n          onProgress({ loadedBytes });\n        }\n      },\n      cancel(reason?: string) {\n        onEnd?.();\n        return reader.cancel(reason);\n      },\n    });\n  }\n}\n\n/**\n * Create a new HttpClient instance for the browser environment.\n * @internal\n */\nexport function createFetchHttpClient(): HttpClient {\n  return new FetchHttpClient();\n}\n\nfunction isTransformStreamSupported(readableStream: ReadableStream): boolean {\n  return readableStream.pipeThrough !== undefined && self.TransformStream !== undefined;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { HttpClient } from \"./interfaces.js\";\nimport { createFetchHttpClient } from \"./fetchHttpClient.js\";\n\n/**\n * Create the correct HttpClient for the current environment.\n */\nexport function createDefaultHttpClient(): HttpClient {\n  return createFetchHttpClient();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type {\n  FormDataMap,\n  HttpHeaders,\n  HttpMethods,\n  MultipartRequestBody,\n  PipelineRequest,\n  ProxySettings,\n  RequestBodyType,\n  TransferProgressEvent,\n} from \"./interfaces.js\";\nimport { createHttpHeaders } from \"./httpHeaders.js\";\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { randomUUID } from \"@azure/core-util\";\nimport type { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * Settings to initialize a request.\n * Almost equivalent to Partial<PipelineRequest>, but url is mandatory.\n */\nexport interface PipelineRequestOptions {\n  /**\n   * The URL to make the request to.\n   */\n  url: string;\n\n  /**\n   * The HTTP method to use when making the request.\n   */\n  method?: HttpMethods;\n\n  /**\n   * The HTTP headers to use when making the request.\n   */\n  headers?: HttpHeaders;\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   * If the request is terminated, an `AbortError` is thrown.\n   * Defaults to 0, which disables the timeout.\n   */\n  timeout?: number;\n\n  /**\n   * If credentials (cookies) should be sent along during an XHR.\n   * Defaults to false.\n   */\n  withCredentials?: boolean;\n\n  /**\n   * A unique identifier for the request. Used for logging and tracing.\n   */\n  requestId?: string;\n\n  /**\n   * The HTTP body content (if any)\n   */\n  body?: RequestBodyType;\n\n  /**\n   * Body for a multipart request.\n   */\n  multipartBody?: MultipartRequestBody;\n\n  /**\n   * To simulate a browser form post\n   */\n  formData?: FormDataMap;\n\n  /**\n   * A list of response status codes whose corresponding PipelineResponse body should be treated as a stream.\n   */\n  streamResponseStatusCodes?: Set<number>;\n\n  /**\n   * BROWSER ONLY\n   *\n   * A browser only option to enable use of the Streams API. If this option is set and streaming is used\n   * (see `streamResponseStatusCodes`), the response will have a property `browserStream` instead of\n   * `blobBody` which will be undefined.\n   *\n   * Default value is false\n   */\n  enableBrowserStreams?: boolean;\n\n  /**\n   * Proxy configuration.\n   */\n  proxySettings?: ProxySettings;\n\n  /**\n   * If the connection should not be reused.\n   */\n  disableKeepAlive?: boolean;\n\n  /**\n   * Used to abort the request later.\n   */\n  abortSignal?: AbortSignalLike;\n\n  /**\n   * Options used to create a span when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Callback which fires upon download progress. */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /** Set to true if the request is sent over HTTP instead of HTTPS */\n  allowInsecureConnection?: boolean;\n}\n\nclass PipelineRequestImpl implements PipelineRequest {\n  public url: string;\n  public method: HttpMethods;\n  public headers: HttpHeaders;\n  public timeout: number;\n  public withCredentials: boolean;\n  public body?: RequestBodyType;\n  public multipartBody?: MultipartRequestBody;\n  public formData?: FormDataMap;\n  public streamResponseStatusCodes?: Set<number>;\n  public enableBrowserStreams: boolean;\n\n  public proxySettings?: ProxySettings;\n  public disableKeepAlive: boolean;\n  public abortSignal?: AbortSignalLike;\n  public requestId: string;\n  public tracingOptions?: OperationTracingOptions;\n  public allowInsecureConnection?: boolean;\n  public onUploadProgress?: (progress: TransferProgressEvent) => void;\n  public onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  constructor(options: PipelineRequestOptions) {\n    this.url = options.url;\n    this.body = options.body;\n    this.headers = options.headers ?? createHttpHeaders();\n    this.method = options.method ?? \"GET\";\n    this.timeout = options.timeout ?? 0;\n    this.multipartBody = options.multipartBody;\n    this.formData = options.formData;\n    this.disableKeepAlive = options.disableKeepAlive ?? false;\n    this.proxySettings = options.proxySettings;\n    this.streamResponseStatusCodes = options.streamResponseStatusCodes;\n    this.withCredentials = options.withCredentials ?? false;\n    this.abortSignal = options.abortSignal;\n    this.tracingOptions = options.tracingOptions;\n    this.onUploadProgress = options.onUploadProgress;\n    this.onDownloadProgress = options.onDownloadProgress;\n    this.requestId = options.requestId || randomUUID();\n    this.allowInsecureConnection = options.allowInsecureConnection ?? false;\n    this.enableBrowserStreams = options.enableBrowserStreams ?? false;\n  }\n}\n\n/**\n * Creates a new pipeline request with the given options.\n * This method is to allow for the easy setting of default values and not required.\n * @param options - The options to create the request with.\n */\nexport function createPipelineRequest(options: PipelineRequestOptions): PipelineRequest {\n  return new PipelineRequestImpl(options);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n\n/**\n * The programmatic identifier of the exponentialRetryPolicy.\n */\nexport const exponentialRetryPolicyName = \"exponentialRetryPolicy\";\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface ExponentialRetryPolicyOptions {\n  /**\n   * The maximum number of retry attempts. Defaults to 3.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n   * (1 second.) The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 64000 (64 seconds).\n   */\n  maxRetryDelayInMs?: number;\n}\n\n/**\n * A policy that attempts to retry requests while introducing an exponentially increasing delay.\n * @param options - Options that configure retry logic.\n */\nexport function exponentialRetryPolicy(\n  options: ExponentialRetryPolicyOptions = {},\n): PipelinePolicy {\n  return retryPolicy(\n    [\n      exponentialRetryStrategy({\n        ...options,\n        ignoreSystemErrors: true,\n      }),\n    ],\n    {\n      maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT,\n    },\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { exponentialRetryStrategy } from \"../retryStrategies/exponentialRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n\n/**\n * Name of the {@link systemErrorRetryPolicy}\n */\nexport const systemErrorRetryPolicyName = \"systemErrorRetryPolicy\";\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface SystemErrorRetryPolicyOptions {\n  /**\n   * The maximum number of retry attempts. Defaults to 3.\n   */\n  maxRetries?: number;\n\n  /**\n   * The amount of delay in milliseconds between retry attempts. Defaults to 1000\n   * (1 second.) The delay increases exponentially with each retry up to a maximum\n   * specified by maxRetryDelayInMs.\n   */\n  retryDelayInMs?: number;\n\n  /**\n   * The maximum delay in milliseconds allowed before retrying an operation. Defaults\n   * to 64000 (64 seconds).\n   */\n  maxRetryDelayInMs?: number;\n}\n\n/**\n * A retry policy that specifically seeks to handle errors in the\n * underlying transport layer (e.g. DNS lookup failures) rather than\n * retryable error codes from the server itself.\n * @param options - Options that customize the policy.\n */\nexport function systemErrorRetryPolicy(\n  options: SystemErrorRetryPolicyOptions = {},\n): PipelinePolicy {\n  return {\n    name: systemErrorRetryPolicyName,\n    sendRequest: retryPolicy(\n      [\n        exponentialRetryStrategy({\n          ...options,\n          ignoreHttpStatusCodes: true,\n        }),\n      ],\n      {\n        maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT,\n      },\n    ).sendRequest,\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { throttlingRetryStrategy } from \"../retryStrategies/throttlingRetryStrategy.js\";\nimport { retryPolicy } from \"./retryPolicy.js\";\nimport { DEFAULT_RETRY_POLICY_COUNT } from \"../constants.js\";\n\n/**\n * Name of the {@link throttlingRetryPolicy}\n */\nexport const throttlingRetryPolicyName = \"throttlingRetryPolicy\";\n\n/**\n * Options that control how to retry failed requests.\n */\nexport interface ThrottlingRetryPolicyOptions {\n  /**\n   * The maximum number of retry attempts. Defaults to 3.\n   */\n  maxRetries?: number;\n}\n\n/**\n * A policy that retries when the server sends a 429 response with a Retry-After header.\n *\n * To learn more, please refer to\n * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-request-limits,\n * https://docs.microsoft.com/en-us/azure/azure-subscription-service-limits and\n * https://docs.microsoft.com/en-us/azure/virtual-machines/troubleshooting/troubleshooting-throttling-errors\n *\n * @param options - Options that configure retry logic.\n */\nexport function throttlingRetryPolicy(options: ThrottlingRetryPolicyOptions = {}): PipelinePolicy {\n  return {\n    name: throttlingRetryPolicyName,\n    sendRequest: retryPolicy([throttlingRetryStrategy()], {\n      maxRetries: options.maxRetries ?? DEFAULT_RETRY_POLICY_COUNT,\n    }).sendRequest,\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { delay } from \"./helpers.js\";\n\n/**\n * A function that gets a promise of an access token and allows providing\n * options.\n *\n * @param options - the options to pass to the underlying token provider\n */\nexport type AccessTokenGetter = (\n  scopes: string | string[],\n  options: GetTokenOptions,\n) => Promise<AccessToken>;\n\nexport interface TokenCyclerOptions {\n  /**\n   * The window of time before token expiration during which the token will be\n   * considered unusable due to risk of the token expiring before sending the\n   * request.\n   *\n   * This will only become meaningful if the refresh fails for over\n   * (refreshWindow - forcedRefreshWindow) milliseconds.\n   */\n  forcedRefreshWindowInMs: number;\n  /**\n   * Interval in milliseconds to retry failed token refreshes.\n   */\n  retryIntervalInMs: number;\n  /**\n   * The window of time before token expiration during which\n   * we will attempt to refresh the token.\n   */\n  refreshWindowInMs: number;\n}\n\n// Default options for the cycler if none are provided\nexport const DEFAULT_CYCLER_OPTIONS: TokenCyclerOptions = {\n  forcedRefreshWindowInMs: 1000, // Force waiting for a refresh 1s before the token expires\n  retryIntervalInMs: 3000, // Allow refresh attempts every 3s\n  refreshWindowInMs: 1000 * 60 * 2, // Start refreshing 2m before expiry\n};\n\n/**\n * Converts an an unreliable access token getter (which may resolve with null)\n * into an AccessTokenGetter by retrying the unreliable getter in a regular\n * interval.\n *\n * @param getAccessToken - A function that produces a promise of an access token that may fail by returning null.\n * @param retryIntervalInMs - The time (in milliseconds) to wait between retry attempts.\n * @param refreshTimeout - The timestamp after which the refresh attempt will fail, throwing an exception.\n * @returns - A promise that, if it resolves, will resolve with an access token.\n */\nasync function beginRefresh(\n  getAccessToken: () => Promise<AccessToken | null>,\n  retryIntervalInMs: number,\n  refreshTimeout: number,\n): Promise<AccessToken> {\n  // This wrapper handles exceptions gracefully as long as we haven't exceeded\n  // the timeout.\n  async function tryGetAccessToken(): Promise<AccessToken | null> {\n    if (Date.now() < refreshTimeout) {\n      try {\n        return await getAccessToken();\n      } catch {\n        return null;\n      }\n    } else {\n      const finalToken = await getAccessToken();\n\n      // Timeout is up, so throw if it's still null\n      if (finalToken === null) {\n        throw new Error(\"Failed to refresh access token.\");\n      }\n\n      return finalToken;\n    }\n  }\n\n  let token: AccessToken | null = await tryGetAccessToken();\n\n  while (token === null) {\n    await delay(retryIntervalInMs);\n\n    token = await tryGetAccessToken();\n  }\n\n  return token;\n}\n\n/**\n * Creates a token cycler from a credential, scopes, and optional settings.\n *\n * A token cycler represents a way to reliably retrieve a valid access token\n * from a TokenCredential. It will handle initializing the token, refreshing it\n * when it nears expiration, and synchronizes refresh attempts to avoid\n * concurrency hazards.\n *\n * @param credential - the underlying TokenCredential that provides the access\n * token\n * @param tokenCyclerOptions - optionally override default settings for the cycler\n *\n * @returns - a function that reliably produces a valid access token\n */\nexport function createTokenCycler(\n  credential: TokenCredential,\n  tokenCyclerOptions?: Partial<TokenCyclerOptions>,\n): AccessTokenGetter {\n  let refreshWorker: Promise<AccessToken> | null = null;\n  let token: AccessToken | null = null;\n  let tenantId: string | undefined;\n\n  const options = {\n    ...DEFAULT_CYCLER_OPTIONS,\n    ...tokenCyclerOptions,\n  };\n\n  /**\n   * This little holder defines several predicates that we use to construct\n   * the rules of refreshing the token.\n   */\n  const cycler = {\n    /**\n     * Produces true if a refresh job is currently in progress.\n     */\n    get isRefreshing(): boolean {\n      return refreshWorker !== null;\n    },\n    /**\n     * Produces true if the cycler SHOULD refresh (we are within the refresh\n     * window and not already refreshing)\n     */\n    get shouldRefresh(): boolean {\n      return (\n        !cycler.isRefreshing &&\n        (token?.expiresOnTimestamp ?? 0) - options.refreshWindowInMs < Date.now()\n      );\n    },\n    /**\n     * Produces true if the cycler MUST refresh (null or nearly-expired\n     * token).\n     */\n    get mustRefresh(): boolean {\n      return (\n        token === null || token.expiresOnTimestamp - options.forcedRefreshWindowInMs < Date.now()\n      );\n    },\n  };\n\n  /**\n   * Starts a refresh job or returns the existing job if one is already\n   * running.\n   */\n  function refresh(\n    scopes: string | string[],\n    getTokenOptions: GetTokenOptions,\n  ): Promise<AccessToken> {\n    if (!cycler.isRefreshing) {\n      // We bind `scopes` here to avoid passing it around a lot\n      const tryGetAccessToken = (): Promise<AccessToken | null> =>\n        credential.getToken(scopes, getTokenOptions);\n\n      // Take advantage of promise chaining to insert an assignment to `token`\n      // before the refresh can be considered done.\n      refreshWorker = beginRefresh(\n        tryGetAccessToken,\n        options.retryIntervalInMs,\n        // If we don't have a token, then we should timeout immediately\n        token?.expiresOnTimestamp ?? Date.now(),\n      )\n        .then((_token) => {\n          refreshWorker = null;\n          token = _token;\n          tenantId = getTokenOptions.tenantId;\n          return token;\n        })\n        .catch((reason) => {\n          // We also should reset the refresher if we enter a failed state.  All\n          // existing awaiters will throw, but subsequent requests will start a\n          // new retry chain.\n          refreshWorker = null;\n          token = null;\n          tenantId = undefined;\n          throw reason;\n        });\n    }\n\n    return refreshWorker as Promise<AccessToken>;\n  }\n\n  return async (scopes: string | string[], tokenOptions: GetTokenOptions): Promise<AccessToken> => {\n    //\n    // Simple rules:\n    // - If we MUST refresh, then return the refresh task, blocking\n    //   the pipeline until a token is available.\n    // - If we SHOULD refresh, then run refresh but don't return it\n    //   (we can still use the cached token).\n    // - Return the token, since it's fine if we didn't return in\n    //   step 1.\n    //\n\n    // If the tenantId passed in token options is different to the one we have\n    // Or if we are in claim challenge and the token was rejected and a new access token need to be issued, we need to\n    // refresh the token with the new tenantId or token.\n    const mustRefresh =\n      tenantId !== tokenOptions.tenantId || Boolean(tokenOptions.claims) || cycler.mustRefresh;\n\n    if (mustRefresh) return refresh(scopes, tokenOptions);\n\n    if (cycler.shouldRefresh) {\n      refresh(scopes, tokenOptions);\n    }\n\n    return token as AccessToken;\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport type { AzureLogger } from \"@azure/logger\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { createTokenCycler } from \"../util/tokenCycler.js\";\nimport { logger as coreLogger } from \"../log.js\";\n\n/**\n * The programmatic identifier of the bearerTokenAuthenticationPolicy.\n */\nexport const bearerTokenAuthenticationPolicyName = \"bearerTokenAuthenticationPolicy\";\n\n/**\n * Options sent to the authorizeRequest callback\n */\nexport interface AuthorizeRequestOptions {\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string[];\n  /**\n   * Function that retrieves either a cached access token or a new access token.\n   */\n  getAccessToken: (scopes: string[], options: GetTokenOptions) => Promise<AccessToken | null>;\n  /**\n   * Request that the policy is trying to fulfill.\n   */\n  request: PipelineRequest;\n  /**\n   * A logger, if one was sent through the HTTP pipeline.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Options sent to the authorizeRequestOnChallenge callback\n */\nexport interface AuthorizeRequestOnChallengeOptions {\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string[];\n  /**\n   * Function that retrieves either a cached access token or a new access token.\n   */\n  getAccessToken: (scopes: string[], options: GetTokenOptions) => Promise<AccessToken | null>;\n  /**\n   * Request that the policy is trying to fulfill.\n   */\n  request: PipelineRequest;\n  /**\n   * Response containing the challenge.\n   */\n  response: PipelineResponse;\n  /**\n   * A logger, if one was sent through the HTTP pipeline.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Options to override the processing of [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation) challenges.\n */\nexport interface ChallengeCallbacks {\n  /**\n   * Allows for the authorization of the main request of this policy before it's sent.\n   */\n  authorizeRequest?(options: AuthorizeRequestOptions): Promise<void>;\n  /**\n   * Allows to handle authentication challenges and to re-authorize the request.\n   * The response containing the challenge is `options.response`.\n   * If this method returns true, the underlying request will be sent once again.\n   * The request may be modified before being sent.\n   */\n  authorizeRequestOnChallenge?(options: AuthorizeRequestOnChallengeOptions): Promise<boolean>;\n}\n\n/**\n * Options to configure the bearerTokenAuthenticationPolicy\n */\nexport interface BearerTokenAuthenticationPolicyOptions {\n  /**\n   * The TokenCredential implementation that can supply the bearer token.\n   */\n  credential?: TokenCredential;\n  /**\n   * The scopes for which the bearer token applies.\n   */\n  scopes: string | string[];\n  /**\n   * Allows for the processing of [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation) challenges.\n   * If provided, it must contain at least the `authorizeRequestOnChallenge` method.\n   * If provided, after a request is sent, if it has a challenge, it can be processed to re-send the original request with the relevant challenge information.\n   */\n  challengeCallbacks?: ChallengeCallbacks;\n  /**\n   * A logger can be sent for debugging purposes.\n   */\n  logger?: AzureLogger;\n}\n\n/**\n * Default authorize request handler\n */\nasync function defaultAuthorizeRequest(options: AuthorizeRequestOptions): Promise<void> {\n  const { scopes, getAccessToken, request } = options;\n  const getTokenOptions: GetTokenOptions = {\n    abortSignal: request.abortSignal,\n    tracingOptions: request.tracingOptions,\n  };\n  const accessToken = await getAccessToken(scopes, getTokenOptions);\n\n  if (accessToken) {\n    options.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n  }\n}\n\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response: PipelineResponse): string | undefined {\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n  return;\n}\n\n/**\n * A policy that can request a token from a TokenCredential implementation and\n * then apply it to the Authorization header of a request as a Bearer token.\n */\nexport function bearerTokenAuthenticationPolicy(\n  options: BearerTokenAuthenticationPolicyOptions,\n): PipelinePolicy {\n  const { credential, scopes, challengeCallbacks } = options;\n  const logger = options.logger || coreLogger;\n  const callbacks = {\n    authorizeRequest: challengeCallbacks?.authorizeRequest ?? defaultAuthorizeRequest,\n    authorizeRequestOnChallenge: challengeCallbacks?.authorizeRequestOnChallenge,\n    // keep all other properties\n    ...challengeCallbacks,\n  };\n\n  // This function encapsulates the entire process of reliably retrieving the token\n  // The options are left out of the public API until there's demand to configure this.\n  // Remember to extend `BearerTokenAuthenticationPolicyOptions` with `TokenCyclerOptions`\n  // in order to pass through the `options` object.\n  const getAccessToken = credential\n    ? createTokenCycler(credential /* , options */)\n    : () => Promise.resolve(null);\n\n  return {\n    name: bearerTokenAuthenticationPolicyName,\n    /**\n     * If there's no challenge parameter:\n     * - It will try to retrieve the token using the cache, or the credential's getToken.\n     * - Then it will try the next policy with or without the retrieved token.\n     *\n     * It uses the challenge parameters to:\n     * - Skip a first attempt to get the token from the credential if there's no cached token,\n     *   since it expects the token to be retrievable only after the challenge.\n     * - Prepare the outgoing request if the `prepareRequest` method has been provided.\n     * - Send an initial request to receive the challenge if it fails.\n     * - Process a challenge if the response contains it.\n     * - Retrieve a token with the challenge information, then re-send the request.\n     */\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication is not permitted for non-TLS protected (non-https) URLs.\",\n        );\n      }\n\n      await callbacks.authorizeRequest({\n        scopes: Array.isArray(scopes) ? scopes : [scopes],\n        request,\n        getAccessToken,\n        logger,\n      });\n\n      let response: PipelineResponse;\n      let error: Error | undefined;\n      try {\n        response = await next(request);\n      } catch (err: any) {\n        error = err;\n        response = err.response;\n      }\n\n      if (\n        callbacks.authorizeRequestOnChallenge &&\n        response?.status === 401 &&\n        getChallenge(response)\n      ) {\n        // processes challenge\n        const shouldSendRequest = await callbacks.authorizeRequestOnChallenge({\n          scopes: Array.isArray(scopes) ? scopes : [scopes],\n          request,\n          response,\n          getAccessToken,\n          logger,\n        });\n\n        if (shouldSendRequest) {\n          return next(request);\n        }\n      }\n\n      if (error) {\n        throw error;\n      } else {\n        return response;\n      }\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\n\n/**\n * The programmatic identifier of the ndJsonPolicy.\n */\nexport const ndJsonPolicyName = \"ndJsonPolicy\";\n\n/**\n * ndJsonPolicy is a policy used to control keep alive settings for every request.\n */\nexport function ndJsonPolicy(): PipelinePolicy {\n  return {\n    name: ndJsonPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      // There currently isn't a good way to bypass the serializer\n      if (typeof request.body === \"string\" && request.body.startsWith(\"[\")) {\n        const body = JSON.parse(request.body);\n        if (Array.isArray(body)) {\n          request.body = body.map((item) => JSON.stringify(item) + \"\\n\").join(\"\");\n        }\n      }\n      return next(request);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport type { AzureLogger } from \"@azure/logger\";\nimport type { PipelineRequest, PipelineResponse, SendRequest } from \"../interfaces.js\";\nimport type { PipelinePolicy } from \"../pipeline.js\";\nimport { type AccessTokenGetter, createTokenCycler } from \"../util/tokenCycler.js\";\nimport { logger as coreLogger } from \"../log.js\";\nimport type { AuthorizeRequestOptions } from \"./bearerTokenAuthenticationPolicy.js\";\n\n/**\n * The programmatic identifier of the auxiliaryAuthenticationHeaderPolicy.\n */\nexport const auxiliaryAuthenticationHeaderPolicyName = \"auxiliaryAuthenticationHeaderPolicy\";\nconst AUTHORIZATION_AUXILIARY_HEADER = \"x-ms-authorization-auxiliary\";\n\n/**\n * Options to configure the auxiliaryAuthenticationHeaderPolicy\n */\nexport interface AuxiliaryAuthenticationHeaderPolicyOptions {\n  /**\n   * TokenCredential list used to get token from auxiliary tenants and\n   * one credential for each tenant the client may need to access\n   */\n  credentials?: TokenCredential[];\n  /**\n   * Scopes depend on the cloud your application runs in\n   */\n  scopes: string | string[];\n  /**\n   * A logger can be sent for debugging purposes.\n   */\n  logger?: AzureLogger;\n}\n\nasync function sendAuthorizeRequest(options: AuthorizeRequestOptions): Promise<string> {\n  const { scopes, getAccessToken, request } = options;\n  const getTokenOptions: GetTokenOptions = {\n    abortSignal: request.abortSignal,\n    tracingOptions: request.tracingOptions,\n  };\n\n  return (await getAccessToken(scopes, getTokenOptions))?.token ?? \"\";\n}\n\n/**\n * A policy for external tokens to `x-ms-authorization-auxiliary` header.\n * This header will be used when creating a cross-tenant application we may need to handle authentication requests\n * for resources that are in different tenants.\n * You could see [ARM docs](https://learn.microsoft.com/en-us/azure/azure-resource-manager/management/authenticate-multi-tenant) for a rundown of how this feature works\n */\nexport function auxiliaryAuthenticationHeaderPolicy(\n  options: AuxiliaryAuthenticationHeaderPolicyOptions,\n): PipelinePolicy {\n  const { credentials, scopes } = options;\n  const logger = options.logger || coreLogger;\n  const tokenCyclerMap = new WeakMap<TokenCredential, AccessTokenGetter>();\n\n  return {\n    name: auxiliaryAuthenticationHeaderPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      if (!request.url.toLowerCase().startsWith(\"https://\")) {\n        throw new Error(\n          \"Bearer token authentication for auxiliary header is not permitted for non-TLS protected (non-https) URLs.\",\n        );\n      }\n      if (!credentials || credentials.length === 0) {\n        logger.info(\n          `${auxiliaryAuthenticationHeaderPolicyName} header will not be set due to empty credentials.`,\n        );\n        return next(request);\n      }\n\n      const tokenPromises: Promise<string>[] = [];\n      for (const credential of credentials) {\n        let getAccessToken = tokenCyclerMap.get(credential);\n        if (!getAccessToken) {\n          getAccessToken = createTokenCycler(credential);\n          tokenCyclerMap.set(credential, getAccessToken);\n        }\n        tokenPromises.push(\n          sendAuthorizeRequest({\n            scopes: Array.isArray(scopes) ? scopes : [scopes],\n            request,\n            getAccessToken,\n            logger,\n          }),\n        );\n      }\n      const auxiliaryTokens = (await Promise.all(tokenPromises)).filter((token) => Boolean(token));\n      if (auxiliaryTokens.length === 0) {\n        logger.warning(\n          `None of the auxiliary tokens are valid. ${AUTHORIZATION_AUXILIARY_HEADER} header will not be set.`,\n        );\n        return next(request);\n      }\n      request.headers.set(\n        AUTHORIZATION_AUXILIARY_HEADER,\n        auxiliaryTokens.map((token) => `Bearer ${token}`).join(\", \"),\n      );\n\n      return next(request);\n    },\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\ndeclare global {\n  interface FormData {}\n  interface Blob {}\n  interface File {}\n  interface ReadableStream<R = any> {}\n  interface TransformStream<I = any, O = any> {}\n}\n/* eslint-enable @typescript-eslint/no-unused-vars */\n\nexport type {\n  Agent,\n  BodyPart,\n  FormDataMap,\n  FormDataValue,\n  HttpClient,\n  HttpHeaders,\n  HttpMethods,\n  KeyObject,\n  MultipartRequestBody,\n  PipelineRequest,\n  PipelineResponse,\n  PipelineRetryOptions,\n  ProxySettings,\n  PxfObject,\n  RawHttpHeaders,\n  RawHttpHeadersInput,\n  RequestBodyType,\n  SendRequest,\n  TlsSettings,\n  TransferProgressEvent,\n} from \"./interfaces.js\";\nexport {\n  type AddPolicyOptions as AddPipelineOptions,\n  type PipelinePhase,\n  type PipelinePolicy,\n  type Pipeline,\n  createEmptyPipeline,\n} from \"./pipeline.js\";\nexport {\n  createPipelineFromOptions,\n  type TelemetryOptions,\n  type InternalPipelineOptions,\n  type PipelineOptions,\n} from \"./createPipelineFromOptions.js\";\nexport { createDefaultHttpClient } from \"./defaultHttpClient.js\";\nexport { createHttpHeaders } from \"./httpHeaders.js\";\nexport { createPipelineRequest, type PipelineRequestOptions } from \"./pipelineRequest.js\";\nexport { RestError, type RestErrorOptions, isRestError } from \"./restError.js\";\nexport {\n  decompressResponsePolicy,\n  decompressResponsePolicyName,\n} from \"./policies/decompressResponsePolicy.js\";\nexport {\n  exponentialRetryPolicy,\n  type ExponentialRetryPolicyOptions,\n  exponentialRetryPolicyName,\n} from \"./policies/exponentialRetryPolicy.js\";\nexport {\n  setClientRequestIdPolicy,\n  setClientRequestIdPolicyName,\n} from \"./policies/setClientRequestIdPolicy.js\";\nexport { logPolicy, logPolicyName, type LogPolicyOptions } from \"./policies/logPolicy.js\";\nexport { multipartPolicy, multipartPolicyName } from \"./policies/multipartPolicy.js\";\nexport { proxyPolicy, proxyPolicyName, getDefaultProxySettings } from \"./policies/proxyPolicy.js\";\nexport {\n  redirectPolicy,\n  redirectPolicyName,\n  type RedirectPolicyOptions,\n} from \"./policies/redirectPolicy.js\";\nexport {\n  systemErrorRetryPolicy,\n  type SystemErrorRetryPolicyOptions,\n  systemErrorRetryPolicyName,\n} from \"./policies/systemErrorRetryPolicy.js\";\nexport {\n  throttlingRetryPolicy,\n  throttlingRetryPolicyName,\n  type ThrottlingRetryPolicyOptions,\n} from \"./policies/throttlingRetryPolicy.js\";\nexport { retryPolicy, type RetryPolicyOptions } from \"./policies/retryPolicy.js\";\nexport type {\n  RetryStrategy,\n  RetryInformation,\n  RetryModifiers,\n} from \"./retryStrategies/retryStrategy.js\";\nexport {\n  tracingPolicy,\n  tracingPolicyName,\n  type TracingPolicyOptions,\n} from \"./policies/tracingPolicy.js\";\nexport {\n  defaultRetryPolicy,\n  type DefaultRetryPolicyOptions,\n} from \"./policies/defaultRetryPolicy.js\";\nexport {\n  userAgentPolicy,\n  userAgentPolicyName,\n  type UserAgentPolicyOptions,\n} from \"./policies/userAgentPolicy.js\";\nexport { tlsPolicy, tlsPolicyName } from \"./policies/tlsPolicy.js\";\nexport { formDataPolicy, formDataPolicyName } from \"./policies/formDataPolicy.js\";\nexport {\n  bearerTokenAuthenticationPolicy,\n  type BearerTokenAuthenticationPolicyOptions,\n  bearerTokenAuthenticationPolicyName,\n  type ChallengeCallbacks,\n  type AuthorizeRequestOptions,\n  type AuthorizeRequestOnChallengeOptions,\n} from \"./policies/bearerTokenAuthenticationPolicy.js\";\nexport { ndJsonPolicy, ndJsonPolicyName } from \"./policies/ndJsonPolicy.js\";\nexport {\n  auxiliaryAuthenticationHeaderPolicy,\n  type AuxiliaryAuthenticationHeaderPolicyOptions,\n  auxiliaryAuthenticationHeaderPolicyName,\n} from \"./policies/auxiliaryAuthenticationHeaderPolicy.js\";\nexport {\n  createFile,\n  createFileFromStream,\n  type CreateFileOptions,\n  type CreateFileFromStreamOptions,\n} from \"./util/file.js\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { GetTokenOptions } from \"@azure/core-auth\";\n\nfunction createConfigurationErrorMessage(tenantId: string): string {\n  return `The current credential is not configured to acquire tokens for tenant ${tenantId}. To enable acquiring tokens for this tenant add it to the AdditionallyAllowedTenants on the credential options, or add \"*\" to AdditionallyAllowedTenants to allow acquiring tokens for any tenant.`;\n}\n\n/**\n * Of getToken contains a tenantId, this functions allows picking this tenantId as the appropriate for authentication,\n * unless multitenant authentication has been disabled through the AZURE_IDENTITY_DISABLE_MULTITENANTAUTH (on Node.js),\n * or unless the original tenant Id is `adfs`.\n * @internal\n */\nexport function processMultiTenantRequest(\n  tenantId?: string,\n  getTokenOptions?: GetTokenOptions,\n  additionallyAllowedTenantIds: string[] = []\n): string | undefined {\n  let resolvedTenantId: string | undefined;\n  if (tenantId === \"adfs\") {\n    resolvedTenantId = tenantId;\n  } else {\n    resolvedTenantId = getTokenOptions?.tenantId ?? tenantId;\n  }\n\n  if (\n    tenantId &&\n    resolvedTenantId !== tenantId &&\n    !additionallyAllowedTenantIds.includes(\"*\") &&\n    !additionallyAllowedTenantIds.some((t) => t.localeCompare(resolvedTenantId!) === 0)\n  ) {\n    throw new Error(createConfigurationErrorMessage(tenantId));\n  }\n\n  return resolvedTenantId;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { ALL_TENANTS, DeveloperSignOnClientId } from \"../constants\";\nimport { CredentialLogger, formatError } from \"./logging\";\nexport { processMultiTenantRequest } from \"./processMultiTenantRequest\";\n\n/**\n * @internal\n */\nexport function checkTenantId(logger: CredentialLogger, tenantId: string): void {\n  if (!tenantId.match(/^[0-9a-zA-Z-.]+$/)) {\n    const error = new Error(\n      \"Invalid tenant id provided. You can locate your tenant id by following the instructions listed here: https://learn.microsoft.com/partner-center/find-ids-and-domain-names.\"\n    );\n    logger.info(formatError(\"\", error));\n    throw error;\n  }\n}\n\n/**\n * @internal\n */\nexport function resolveTenantId(\n  logger: CredentialLogger,\n  tenantId?: string,\n  clientId?: string\n): string {\n  if (tenantId) {\n    checkTenantId(logger, tenantId);\n    return tenantId;\n  }\n  if (!clientId) {\n    clientId = DeveloperSignOnClientId;\n  }\n  if (clientId !== DeveloperSignOnClientId) {\n    return \"common\";\n  }\n  return \"organizations\";\n}\n\n/**\n * @internal\n */\nexport function resolveAdditionallyAllowedTenantIds(\n  additionallyAllowedTenants?: string[]\n): string[] {\n  if (!additionallyAllowedTenants || additionallyAllowedTenants.length === 0) {\n    return [];\n  }\n\n  if (additionallyAllowedTenants.includes(\"*\")) {\n    return ALL_TENANTS;\n  }\n\n  return additionallyAllowedTenants;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\ndeclare global {\n  // stub these out for the browser\n  function btoa(input: string): string;\n  function atob(input: string): string;\n}\n\n/**\n * Encodes a string in base64 format.\n * @param value - the string to encode\n * @internal\n */\nexport function encodeString(value: string): string {\n  return btoa(value);\n}\n\n/**\n * Encodes a byte array in base64 format.\n * @param value - the Uint8Aray to encode\n * @internal\n */\nexport function encodeByteArray(value: Uint8Array): string {\n  let str = \"\";\n  for (let i = 0; i < value.length; i++) {\n    str += String.fromCharCode(value[i]);\n  }\n  return btoa(str);\n}\n\n/**\n * Decodes a base64 string into a byte array.\n * @param value - the base64 string to decode\n * @internal\n */\nexport function decodeString(value: string): Uint8Array {\n  const byteString = atob(value);\n  const arr = new Uint8Array(byteString.length);\n  for (let i = 0; i < byteString.length; i++) {\n    arr[i] = byteString.charCodeAt(i);\n  }\n  return arr;\n}\n\n/**\n * Decodes a base64 string into a string.\n * @param value - the base64 string to decode\n * @internal\n */\nexport function decodeStringToString(value: string): string {\n  return atob(value);\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  HttpClient,\n  HttpMethods,\n  PipelineOptions,\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  TransferProgressEvent,\n} from \"@azure/core-rest-pipeline\";\nimport { AbortSignalLike } from \"@azure/abort-controller\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\n\n/**\n * Default key used to access the XML attributes.\n */\nexport const XML_ATTRKEY = \"$\";\n/**\n * Default key used to access the XML value content.\n */\nexport const XML_CHARKEY = \"_\";\n/**\n * Options to govern behavior of xml parser and builder.\n */\nexport interface XmlOptions {\n  /**\n   * indicates the name of the root element in the resulting XML when building XML.\n   */\n  rootName?: string;\n  /**\n   * indicates whether the root element is to be included or not in the output when parsing XML.\n   */\n  includeRoot?: boolean;\n  /**\n   * key used to access the XML value content when parsing XML.\n   */\n  xmlCharKey?: string;\n}\n/**\n * Options to configure serialization/de-serialization behavior.\n */\nexport interface SerializerOptions {\n  /**\n   * Options to configure xml parser/builder behavior.\n   */\n  xml: XmlOptions;\n  /**\n   * Normally additional properties are included in the result object, even if there is no mapper for them.\n   * This flag disables this behavior when true. It is used when parsing headers to avoid polluting the result object.\n   */\n  ignoreUnknownProperties?: boolean;\n}\n\nexport type RequiredSerializerOptions = {\n  [K in keyof SerializerOptions]: Required<SerializerOptions[K]>;\n};\n\n/**\n * A type alias for future proofing.\n */\nexport type OperationRequest = PipelineRequest;\n\n/**\n * Metadata that is used to properly parse a response.\n */\nexport interface OperationRequestInfo {\n  /**\n   * Used to parse the response.\n   */\n  operationSpec?: OperationSpec;\n\n  /**\n   * Used to encode the request.\n   */\n  operationArguments?: OperationArguments;\n\n  /**\n   * A function that returns the proper OperationResponseMap for the given OperationSpec and\n   * PipelineResponse combination. If this is undefined, then a simple status code lookup will\n   * be used.\n   */\n  operationResponseGetter?: (\n    operationSpec: OperationSpec,\n    response: PipelineResponse,\n  ) => undefined | OperationResponseMap;\n\n  /**\n   * Whether or not the PipelineResponse should be deserialized. Defaults to true.\n   */\n  shouldDeserialize?: boolean | ((response: PipelineResponse) => boolean);\n}\n\n/**\n * The base options type for all operations.\n */\nexport interface OperationOptions {\n  /**\n   * The signal which can be used to abort requests.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Options used when creating and sending HTTP requests for this operation.\n   */\n  requestOptions?: OperationRequestOptions;\n  /**\n   * Options used when tracing is enabled.\n   */\n  tracingOptions?: OperationTracingOptions;\n  /**\n   * Options to override serialization/de-serialization behavior.\n   */\n  serializerOptions?: SerializerOptions;\n\n  /**\n   * A function to be called each time a response is received from the server\n   * while performing the requested operation.\n   * May be called multiple times.\n   */\n  onResponse?: RawResponseCallback;\n}\n\n/**\n * Options used when creating and sending HTTP requests for this operation.\n */\nexport interface OperationRequestOptions {\n  /**\n   * User defined custom request headers that\n   * will be applied before the request is sent.\n   */\n  customHeaders?: { [key: string]: string };\n\n  /**\n   * The number of milliseconds a request can take before automatically being terminated.\n   */\n  timeout?: number;\n\n  /**\n   * Callback which fires upon upload progress.\n   */\n  onUploadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Callback which fires upon download progress.\n   */\n  onDownloadProgress?: (progress: TransferProgressEvent) => void;\n\n  /**\n   * Whether or not the HttpOperationResponse should be deserialized. If this is undefined, then the\n   * HttpOperationResponse should be deserialized.\n   */\n  shouldDeserialize?: boolean | ((response: PipelineResponse) => boolean);\n\n  /**\n   * Set to true if the request is sent over HTTP instead of HTTPS\n   */\n  allowInsecureConnection?: boolean;\n}\n\n/**\n * A collection of properties that apply to a single invocation of an operation.\n */\nexport interface OperationArguments {\n  /**\n   * The parameters that were passed to the operation method.\n   */\n  [parameterName: string]: unknown;\n\n  /**\n   * The optional arguments that are provided to an operation.\n   */\n  options?: OperationOptions;\n}\n\n/**\n * The format that will be used to join an array of values together for a query parameter value.\n */\nexport type QueryCollectionFormat = \"CSV\" | \"SSV\" | \"TSV\" | \"Pipes\" | \"Multi\";\n\n/**\n * Encodes how to reach a particular property on an object.\n */\nexport type ParameterPath = string | string[] | { [propertyName: string]: ParameterPath };\n\n/**\n * A common interface that all Operation parameter's extend.\n */\nexport interface OperationParameter {\n  /**\n   * The path to this parameter's value in OperationArguments or the object that contains paths for\n   * each property's value in OperationArguments.\n   */\n  parameterPath: ParameterPath;\n\n  /**\n   * The mapper that defines how to validate and serialize this parameter's value.\n   */\n  mapper: Mapper;\n}\n\n/**\n * A parameter for an operation that will be substituted into the operation's request URL.\n */\nexport interface OperationURLParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the URL parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n}\n\n/**\n * A parameter for an operation that will be added as a query parameter to the operation's HTTP\n * request.\n */\nexport interface OperationQueryParameter extends OperationParameter {\n  /**\n   * Whether or not to skip encoding the query parameter's value before adding it to the URL.\n   */\n  skipEncoding?: boolean;\n\n  /**\n   * If this query parameter's value is a collection, what type of format should the value be\n   * converted to.\n   */\n  collectionFormat?: QueryCollectionFormat;\n}\n\n/**\n * An OperationResponse that can be returned from an operation request for a single status code.\n */\nexport interface OperationResponseMap {\n  /**\n   * The mapper that will be used to deserialize the response headers.\n   */\n  headersMapper?: Mapper;\n\n  /**\n   * The mapper that will be used to deserialize the response body.\n   */\n  bodyMapper?: Mapper;\n\n  /**\n   * Indicates if this is an error response\n   */\n  isError?: boolean;\n}\n\n/**\n * A specification that defines an operation.\n */\nexport interface OperationSpec {\n  /**\n   * The serializer to use in this operation.\n   */\n  readonly serializer: Serializer;\n\n  /**\n   * The HTTP method that should be used by requests for this operation.\n   */\n  readonly httpMethod: HttpMethods;\n\n  /**\n   * The URL that was provided in the service's specification. This will still have all of the URL\n   * template variables in it. If this is not provided when the OperationSpec is created, then it\n   * will be populated by a \"baseUri\" property on the ServiceClient.\n   */\n  readonly baseUrl?: string;\n\n  /**\n   * The fixed path for this operation's URL. This will still have all of the URL template variables\n   * in it.\n   */\n  readonly path?: string;\n\n  /**\n   * The content type of the request body. This value will be used as the \"Content-Type\" header if\n   * it is provided.\n   */\n  readonly contentType?: string;\n\n  /**\n   * The media type of the request body.\n   * This value can be used to aide in serialization if it is provided.\n   */\n  readonly mediaType?:\n    | \"json\"\n    | \"xml\"\n    | \"form\"\n    | \"binary\"\n    | \"multipart\"\n    | \"text\"\n    | \"unknown\"\n    | string;\n  /**\n   * The parameter that will be used to construct the HTTP request's body.\n   */\n  readonly requestBody?: OperationParameter;\n\n  /**\n   * Whether or not this operation uses XML request and response bodies.\n   */\n  readonly isXML?: boolean;\n\n  /**\n   * The parameters to the operation method that will be substituted into the constructed URL.\n   */\n  readonly urlParameters?: ReadonlyArray<OperationURLParameter>;\n\n  /**\n   * The parameters to the operation method that will be added to the constructed URL's query.\n   */\n  readonly queryParameters?: ReadonlyArray<OperationQueryParameter>;\n\n  /**\n   * The parameters to the operation method that will be converted to headers on the operation's\n   * HTTP request.\n   */\n  readonly headerParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The parameters to the operation method that will be used to create a formdata body for the\n   * operation's HTTP request.\n   */\n  readonly formDataParameters?: ReadonlyArray<OperationParameter>;\n\n  /**\n   * The different types of responses that this operation can return based on what status code is\n   * returned.\n   */\n  readonly responses: { [responseCode: string]: OperationResponseMap };\n}\n\n/**\n * Wrapper object for http request and response. Deserialized object is stored in\n * the `parsedBody` property when the response body is received in JSON or XML.\n */\nexport interface FullOperationResponse extends PipelineResponse {\n  /**\n   * The parsed HTTP response headers.\n   */\n  parsedHeaders?: { [key: string]: unknown };\n\n  /**\n   * The response body as parsed JSON or XML.\n   */\n  parsedBody?: any;\n\n  /**\n   * The request that generated the response.\n   */\n  request: OperationRequest;\n}\n\n/**\n * A function to be called each time a response is received from the server\n * while performing the requested operation.\n * May be called multiple times.\n */\nexport type RawResponseCallback = (\n  rawResponse: FullOperationResponse,\n  flatResponse: unknown,\n  error?: unknown,\n) => void;\n\n/**\n * Used to map raw response objects to final shapes.\n * Helps packing and unpacking Dates and other encoded types that are not intrinsic to JSON.\n * Also allows pulling values from headers, as well as inserting default values and constants.\n */\nexport interface Serializer {\n  /**\n   * The provided model mapper.\n   */\n  readonly modelMappers: { [key: string]: any };\n  /**\n   * Whether the contents are XML or not.\n   */\n  readonly isXML: boolean;\n\n  /**\n   * Validates constraints, if any. This function will throw if the provided value does not respect those constraints.\n   * @param mapper - The definition of data models.\n   * @param value - The value.\n   * @param objectName - Name of the object. Used in the error messages.\n   * @deprecated Removing the constraints validation on client side.\n   */\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void;\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper.\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object.\n   * @param object - A valid Javascript object to be serialized.\n   * @param objectName - Name of the serialized object.\n   * @param options - additional options to deserialization.\n   * @returns A valid serialized Javascript object.\n   */\n  serialize(mapper: Mapper, object: any, objectName?: string, options?: SerializerOptions): any;\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper.\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object.\n   * @param responseBody - A valid Javascript entity to be deserialized.\n   * @param objectName - Name of the deserialized object.\n   * @param options - Controls behavior of XML parser and builder.\n   * @returns A valid deserialized Javascript object.\n   */\n  deserialize(\n    mapper: Mapper,\n    responseBody: any,\n    objectName: string,\n    options?: SerializerOptions,\n  ): any;\n}\n\n/**\n * Description of various value constraints such as integer ranges and string regex.\n */\nexport interface MapperConstraints {\n  /**\n   * The value should be less than or equal to the `InclusiveMaximum` value.\n   */\n  InclusiveMaximum?: number;\n  /**\n   * The value should be less than the `ExclusiveMaximum` value.\n   */\n  ExclusiveMaximum?: number;\n  /**\n   * The value should be greater than or equal to the `InclusiveMinimum` value.\n   */\n  InclusiveMinimum?: number;\n  /**\n   * The value should be greater than the `InclusiveMinimum` value.\n   */\n  ExclusiveMinimum?: number;\n  /**\n   * The length should be smaller than the `MaxLength`.\n   */\n  MaxLength?: number;\n  /**\n   * The length should be bigger than the `MinLength`.\n   */\n  MinLength?: number;\n  /**\n   * The value must match the pattern.\n   */\n  Pattern?: RegExp;\n  /**\n   * The value must contain fewer items than the MaxItems value.\n   */\n  MaxItems?: number;\n  /**\n   * The value must contain more items than the `MinItems` value.\n   */\n  MinItems?: number;\n  /**\n   * The value must contain only unique items.\n   */\n  UniqueItems?: true;\n  /**\n   * The value should be exactly divisible by the `MultipleOf` value.\n   */\n  MultipleOf?: number;\n}\n\n/**\n * Type of the mapper. Includes known mappers.\n */\nexport type MapperType =\n  | SimpleMapperType\n  | CompositeMapperType\n  | SequenceMapperType\n  | DictionaryMapperType\n  | EnumMapperType;\n\n/**\n * The type of a simple mapper.\n */\nexport interface SimpleMapperType {\n  /**\n   * Name of the type of the property.\n   */\n  name:\n    | \"Base64Url\"\n    | \"Boolean\"\n    | \"ByteArray\"\n    | \"Date\"\n    | \"DateTime\"\n    | \"DateTimeRfc1123\"\n    | \"Object\"\n    | \"Stream\"\n    | \"String\"\n    | \"TimeSpan\"\n    | \"UnixTime\"\n    | \"Uuid\"\n    | \"Number\"\n    | \"any\";\n}\n\n/**\n * Helps build a mapper that describes how to map a set of properties of an object based on other mappers.\n *\n * Only one of the following properties should be present: `className`, `modelProperties` and `additionalProperties`.\n */\nexport interface CompositeMapperType {\n  /**\n   * Name of the composite mapper type.\n   */\n  name: \"Composite\";\n\n  /**\n   * Use `className` to reference another type definition.\n   */\n  className?: string;\n\n  /**\n   * Use `modelProperties` when the reference to the other type has been resolved.\n   */\n  modelProperties?: { [propertyName: string]: Mapper };\n\n  /**\n   * Used when a model has `additionalProperties: true`. Allows the generic processing of unnamed model properties on the response object.\n   */\n  additionalProperties?: Mapper;\n\n  /**\n   * The name of the top-most parent scheme, the one that has no parents.\n   */\n  uberParent?: string;\n\n  /**\n   * A polymorphic discriminator.\n   */\n  polymorphicDiscriminator?: PolymorphicDiscriminator;\n}\n\n/**\n * Helps build a mapper that describes how to parse a sequence of mapped values.\n */\nexport interface SequenceMapperType {\n  /**\n   * Name of the sequence type mapper.\n   */\n  name: \"Sequence\";\n  /**\n   * The mapper to use to map each one of the properties of the sequence.\n   */\n  element: Mapper;\n}\n\n/**\n * Helps build a mapper that describes how to parse a dictionary of mapped values.\n */\nexport interface DictionaryMapperType {\n  /**\n   * Name of the sequence type mapper.\n   */\n  name: \"Dictionary\";\n  /**\n   * The mapper to use to map the value of each property in the dictionary.\n   */\n  value: Mapper;\n}\n\n/**\n * Helps build a mapper that describes how to parse an enum value.\n */\nexport interface EnumMapperType {\n  /**\n   * Name of the enum type mapper.\n   */\n  name: \"Enum\";\n  /**\n   * Values allowed by this mapper.\n   */\n  allowedValues: any[];\n}\n\n/**\n * The base definition of a mapper. Can be used for XML and plain JavaScript objects.\n */\nexport interface BaseMapper {\n  /**\n   * Name for the xml element\n   */\n  xmlName?: string;\n  /**\n   * Xml element namespace\n   */\n  xmlNamespace?: string;\n  /**\n   * Xml element namespace prefix\n   */\n  xmlNamespacePrefix?: string;\n  /**\n   * Determines if the current property should be serialized as an attribute of the parent xml element\n   */\n  xmlIsAttribute?: boolean;\n  /**\n   * Determines if the current property should be serialized as the inner content of the xml element\n   */\n  xmlIsMsText?: boolean;\n  /**\n   * Name for the xml elements when serializing an array\n   */\n  xmlElementName?: string;\n  /**\n   * Whether or not the current property should have a wrapping XML element\n   */\n  xmlIsWrapped?: boolean;\n  /**\n   * Whether or not the current property is readonly\n   */\n  readOnly?: boolean;\n  /**\n   * Whether or not the current property is a constant\n   */\n  isConstant?: boolean;\n  /**\n   * Whether or not the current property is required\n   */\n  required?: boolean;\n  /**\n   * Whether or not the current property allows mull as a value\n   */\n  nullable?: boolean;\n  /**\n   * The name to use when serializing\n   */\n  serializedName?: string;\n  /**\n   * Type of the mapper\n   */\n  type: MapperType;\n  /**\n   * Default value when one is not explicitly provided\n   */\n  defaultValue?: any;\n  /**\n   * Constraints to test the current value against\n   */\n  constraints?: MapperConstraints;\n}\n\n/**\n * Mappers are definitions of the data models used in the library.\n * These data models are part of the Operation or Client definitions in the responses or parameters.\n */\nexport type Mapper = BaseMapper | CompositeMapper | SequenceMapper | DictionaryMapper | EnumMapper;\n\n/**\n * Used to disambiguate discriminated type unions.\n * For example, if response can have many shapes but also includes a 'kind' field (or similar),\n * that field can be used to determine how to deserialize the response to the correct type.\n */\nexport interface PolymorphicDiscriminator {\n  /**\n   * Name of the discriminant property in the original JSON payload, e.g. `@odata.kind`.\n   */\n  serializedName: string;\n  /**\n   * Name to use on the resulting object instead of the original property name.\n   * Useful since the JSON property could be difficult to work with.\n   * For example: For a field received as `@odata.kind`, the final object could instead include a property simply named `kind`.\n   */\n  clientName: string;\n  /**\n   * It may contain any other property.\n   */\n  [key: string]: string;\n}\n\n/**\n * A mapper composed of other mappers.\n */\nexport interface CompositeMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `CompositeMapper`.\n   */\n  type: CompositeMapperType;\n}\n\n/**\n * A mapper describing arrays.\n */\nexport interface SequenceMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `SequenceMapper`.\n   */\n  type: SequenceMapperType;\n}\n\n/**\n * A mapper describing plain JavaScript objects used as key/value pairs.\n */\nexport interface DictionaryMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `DictionaryMapper`.\n   */\n  type: DictionaryMapperType;\n  /**\n   * Optionally, a prefix to add to the header collection.\n   */\n  headerCollectionPrefix?: string;\n}\n\n/**\n * A mapper describing an enum value.\n */\nexport interface EnumMapper extends BaseMapper {\n  /**\n   * The type descriptor of the `EnumMapper`.\n   */\n  type: EnumMapperType;\n}\n\nexport interface UrlParameterValue {\n  value: string;\n  skipUrlEncoding: boolean;\n}\n\n/**\n * Configuration for creating a new Tracing Span\n */\nexport interface SpanConfig {\n  /**\n   * Package name prefix\n   */\n  packagePrefix: string;\n  /**\n   * Service namespace\n   */\n  namespace: string;\n}\n\n/**\n * Used to configure additional policies added to the pipeline at construction.\n */\nexport interface AdditionalPolicyConfig {\n  /**\n   * A policy to be added.\n   */\n  policy: PipelinePolicy;\n  /**\n   * Determines if this policy be applied before or after retry logic.\n   * Only use `perRetry` if you need to modify the request again\n   * each time the operation is retried due to retryable service\n   * issues.\n   */\n  position: \"perCall\" | \"perRetry\";\n}\n\n/**\n * The common set of options that high level clients are expected to expose.\n */\nexport interface CommonClientOptions extends PipelineOptions {\n  /**\n   * The HttpClient that will be used to send HTTP requests.\n   */\n  httpClient?: HttpClient;\n  /**\n   * Set to true if the request is sent over HTTP instead of HTTPS\n   */\n  allowInsecureConnection?: boolean;\n  /**\n   * Additional policies to include in the HTTP pipeline.\n   */\n  additionalPolicies?: AdditionalPolicyConfig[];\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CompositeMapper, FullOperationResponse, OperationResponseMap } from \"./interfaces.js\";\n\n/**\n * The union of all possible types for a primitive response body.\n * @internal\n */\nexport type BodyPrimitive = number | string | boolean | Date | Uint8Array | undefined | null;\n\n/**\n * A type guard for a primitive response body.\n * @param value - Value to test\n *\n * @internal\n */\nexport function isPrimitiveBody(value: unknown, mapperTypeName?: string): value is BodyPrimitive {\n  return (\n    mapperTypeName !== \"Composite\" &&\n    mapperTypeName !== \"Dictionary\" &&\n    (typeof value === \"string\" ||\n      typeof value === \"number\" ||\n      typeof value === \"boolean\" ||\n      mapperTypeName?.match(/^(Date|DateTime|DateTimeRfc1123|UnixTime|ByteArray|Base64Url)$/i) !==\n        null ||\n      value === undefined ||\n      value === null)\n  );\n}\n\nconst validateISODuration =\n  /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n\n/**\n * Returns true if the given string is in ISO 8601 format.\n * @param value - The value to be validated for ISO 8601 duration format.\n * @internal\n */\nexport function isDuration(value: string): boolean {\n  return validateISODuration.test(value);\n}\n\nconst validUuidRegex =\n  /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;\n\n/**\n * Returns true if the provided uuid is valid.\n *\n * @param uuid - The uuid that needs to be validated.\n *\n * @internal\n */\nexport function isValidUuid(uuid: string): boolean {\n  return validUuidRegex.test(uuid);\n}\n\n/**\n * Representation of parsed response headers and body coupled with information\n * about how to map them:\n * - whether the response body should be wrapped (typically if its type is primitive).\n * - whether the response is nullable so it can be null if the combination of\n *   the headers and the body is empty.\n */\ninterface ResponseObjectWithMetadata {\n  /** whether the mapper allows nullable body */\n  hasNullableType: boolean;\n  /** whether the response's body should be wrapped */\n  shouldWrapBody: boolean;\n  /** parsed headers of the response */\n  headers:\n    | {\n        [key: string]: unknown;\n      }\n    | undefined;\n  /** parsed body of the response */\n  body: any;\n}\n\n/**\n * Maps the response as follows:\n * - wraps the response body if needed (typically if its type is primitive).\n * - returns null if the combination of the headers and the body is empty.\n * - otherwise, returns the combination of the headers and the body.\n *\n * @param responseObject - a representation of the parsed response\n * @returns the response that will be returned to the user which can be null and/or wrapped\n *\n * @internal\n */\nfunction handleNullableResponseAndWrappableBody(\n  responseObject: ResponseObjectWithMetadata,\n): unknown | null {\n  const combinedHeadersAndBody = {\n    ...responseObject.headers,\n    ...responseObject.body,\n  };\n  if (\n    responseObject.hasNullableType &&\n    Object.getOwnPropertyNames(combinedHeadersAndBody).length === 0\n  ) {\n    return responseObject.shouldWrapBody ? { body: null } : null;\n  } else {\n    return responseObject.shouldWrapBody\n      ? {\n          ...responseObject.headers,\n          body: responseObject.body,\n        }\n      : combinedHeadersAndBody;\n  }\n}\n\n/**\n * Take a `FullOperationResponse` and turn it into a flat\n * response object to hand back to the consumer.\n * @param fullResponse - The processed response from the operation request\n * @param responseSpec - The response map from the OperationSpec\n *\n * @internal\n */\nexport function flattenResponse(\n  fullResponse: FullOperationResponse,\n  responseSpec: OperationResponseMap | undefined,\n): unknown {\n  const parsedHeaders = fullResponse.parsedHeaders;\n\n  // head methods never have a body, but we return a boolean set to body property\n  // to indicate presence/absence of the resource\n  if (fullResponse.request.method === \"HEAD\") {\n    return {\n      ...parsedHeaders,\n      body: fullResponse.parsedBody,\n    };\n  }\n  const bodyMapper = responseSpec && responseSpec.bodyMapper;\n  const isNullable = Boolean(bodyMapper?.nullable);\n  const expectedBodyTypeName = bodyMapper?.type.name;\n\n  /** If the body is asked for, we look at the expected body type to handle it */\n  if (expectedBodyTypeName === \"Stream\") {\n    return {\n      ...parsedHeaders,\n      blobBody: fullResponse.blobBody,\n      readableStreamBody: fullResponse.readableStreamBody,\n    };\n  }\n\n  const modelProperties =\n    (expectedBodyTypeName === \"Composite\" &&\n      (bodyMapper as CompositeMapper).type.modelProperties) ||\n    {};\n  const isPageableResponse = Object.keys(modelProperties).some(\n    (k) => modelProperties[k].serializedName === \"\",\n  );\n  if (expectedBodyTypeName === \"Sequence\" || isPageableResponse) {\n    const arrayResponse: { [key: string]: unknown } =\n      fullResponse.parsedBody ?? ([] as unknown as { [key: string]: unknown });\n\n    for (const key of Object.keys(modelProperties)) {\n      if (modelProperties[key].serializedName) {\n        arrayResponse[key] = fullResponse.parsedBody?.[key];\n      }\n    }\n\n    if (parsedHeaders) {\n      for (const key of Object.keys(parsedHeaders)) {\n        arrayResponse[key] = parsedHeaders[key];\n      }\n    }\n    return isNullable &&\n      !fullResponse.parsedBody &&\n      !parsedHeaders &&\n      Object.getOwnPropertyNames(modelProperties).length === 0\n      ? null\n      : arrayResponse;\n  }\n\n  return handleNullableResponseAndWrappableBody({\n    body: fullResponse.parsedBody,\n    headers: parsedHeaders,\n    hasNullableType: isNullable,\n    shouldWrapBody: isPrimitiveBody(fullResponse.parsedBody, expectedBodyTypeName),\n  });\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as base64 from \"./base64.js\";\nimport {\n  BaseMapper,\n  CompositeMapper,\n  DictionaryMapper,\n  EnumMapper,\n  Mapper,\n  MapperConstraints,\n  PolymorphicDiscriminator,\n  RequiredSerializerOptions,\n  SequenceMapper,\n  Serializer,\n  SerializerOptions,\n  XML_ATTRKEY,\n  XML_CHARKEY,\n} from \"./interfaces.js\";\nimport { isDuration, isValidUuid } from \"./utils.js\";\n\nclass SerializerImpl implements Serializer {\n  constructor(\n    public readonly modelMappers: { [key: string]: any } = {},\n    public readonly isXML: boolean = false,\n  ) {}\n\n  /**\n   * @deprecated Removing the constraints validation on client side.\n   */\n  validateConstraints(mapper: Mapper, value: any, objectName: string): void {\n    const failValidation = (\n      constraintName: keyof MapperConstraints,\n      constraintValue: any,\n    ): never => {\n      throw new Error(\n        `\"${objectName}\" with value \"${value}\" should satisfy the constraint \"${constraintName}\": ${constraintValue}.`,\n      );\n    };\n    if (mapper.constraints && value !== undefined && value !== null) {\n      const {\n        ExclusiveMaximum,\n        ExclusiveMinimum,\n        InclusiveMaximum,\n        InclusiveMinimum,\n        MaxItems,\n        MaxLength,\n        MinItems,\n        MinLength,\n        MultipleOf,\n        Pattern,\n        UniqueItems,\n      } = mapper.constraints;\n      if (ExclusiveMaximum !== undefined && value >= ExclusiveMaximum) {\n        failValidation(\"ExclusiveMaximum\", ExclusiveMaximum);\n      }\n      if (ExclusiveMinimum !== undefined && value <= ExclusiveMinimum) {\n        failValidation(\"ExclusiveMinimum\", ExclusiveMinimum);\n      }\n      if (InclusiveMaximum !== undefined && value > InclusiveMaximum) {\n        failValidation(\"InclusiveMaximum\", InclusiveMaximum);\n      }\n      if (InclusiveMinimum !== undefined && value < InclusiveMinimum) {\n        failValidation(\"InclusiveMinimum\", InclusiveMinimum);\n      }\n      if (MaxItems !== undefined && value.length > MaxItems) {\n        failValidation(\"MaxItems\", MaxItems);\n      }\n      if (MaxLength !== undefined && value.length > MaxLength) {\n        failValidation(\"MaxLength\", MaxLength);\n      }\n      if (MinItems !== undefined && value.length < MinItems) {\n        failValidation(\"MinItems\", MinItems);\n      }\n      if (MinLength !== undefined && value.length < MinLength) {\n        failValidation(\"MinLength\", MinLength);\n      }\n      if (MultipleOf !== undefined && value % MultipleOf !== 0) {\n        failValidation(\"MultipleOf\", MultipleOf);\n      }\n      if (Pattern) {\n        const pattern: RegExp = typeof Pattern === \"string\" ? new RegExp(Pattern) : Pattern;\n        if (typeof value !== \"string\" || value.match(pattern) === null) {\n          failValidation(\"Pattern\", Pattern);\n        }\n      }\n      if (\n        UniqueItems &&\n        value.some((item: any, i: number, ar: Array<any>) => ar.indexOf(item) !== i)\n      ) {\n        failValidation(\"UniqueItems\", UniqueItems);\n      }\n    }\n  }\n\n  /**\n   * Serialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   *\n   * @param object - A valid Javascript object to be serialized\n   *\n   * @param objectName - Name of the serialized object\n   *\n   * @param options - additional options to serialization\n   *\n   * @returns A valid serialized Javascript object\n   */\n  serialize(\n    mapper: Mapper,\n    object: any,\n    objectName?: string,\n    options: SerializerOptions = { xml: {} },\n  ): any {\n    const updatedOptions: RequiredSerializerOptions = {\n      xml: {\n        rootName: options.xml.rootName ?? \"\",\n        includeRoot: options.xml.includeRoot ?? false,\n        xmlCharKey: options.xml.xmlCharKey ?? XML_CHARKEY,\n      },\n    };\n    let payload: any = {};\n    const mapperType = mapper.type.name as string;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n    if (mapperType.match(/^Sequence$/i) !== null) {\n      payload = [];\n    }\n\n    if (mapper.isConstant) {\n      object = mapper.defaultValue;\n    }\n\n    // This table of allowed values should help explain\n    // the mapper.required and mapper.nullable properties.\n    // X means \"neither undefined or null are allowed\".\n    //           || required\n    //           || true      | false\n    //  nullable || ==========================\n    //      true || null      | undefined/null\n    //     false || X         | undefined\n    // undefined || X         | undefined/null\n\n    const { required, nullable } = mapper;\n\n    if (required && nullable && object === undefined) {\n      throw new Error(`${objectName} cannot be undefined.`);\n    }\n    if (required && !nullable && (object === undefined || object === null)) {\n      throw new Error(`${objectName} cannot be null or undefined.`);\n    }\n    if (!required && nullable === false && object === null) {\n      throw new Error(`${objectName} cannot be null.`);\n    }\n\n    if (object === undefined || object === null) {\n      payload = object;\n    } else {\n      if (mapperType.match(/^any$/i) !== null) {\n        payload = object;\n      } else if (mapperType.match(/^(Number|String|Boolean|Object|Stream|Uuid)$/i) !== null) {\n        payload = serializeBasicTypes(mapperType, objectName, object);\n      } else if (mapperType.match(/^Enum$/i) !== null) {\n        const enumMapper = mapper as EnumMapper;\n        payload = serializeEnumType(objectName, enumMapper.type.allowedValues, object);\n      } else if (\n        mapperType.match(/^(Date|DateTime|TimeSpan|DateTimeRfc1123|UnixTime)$/i) !== null\n      ) {\n        payload = serializeDateTypes(mapperType, object, objectName);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = serializeByteArrayType(objectName, object);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = serializeBase64UrlType(objectName, object);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = serializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions,\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = serializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions,\n        );\n      } else if (mapperType.match(/^Composite$/i) !== null) {\n        payload = serializeCompositeType(\n          this,\n          mapper as CompositeMapper,\n          object,\n          objectName,\n          Boolean(this.isXML),\n          updatedOptions,\n        );\n      }\n    }\n    return payload;\n  }\n\n  /**\n   * Deserialize the given object based on its metadata defined in the mapper\n   *\n   * @param mapper - The mapper which defines the metadata of the serializable object\n   *\n   * @param responseBody - A valid Javascript entity to be deserialized\n   *\n   * @param objectName - Name of the deserialized object\n   *\n   * @param options - Controls behavior of XML parser and builder.\n   *\n   * @returns A valid deserialized Javascript object\n   */\n  deserialize(\n    mapper: Mapper,\n    responseBody: any,\n    objectName: string,\n    options: SerializerOptions = { xml: {} },\n  ): any {\n    const updatedOptions: RequiredSerializerOptions = {\n      xml: {\n        rootName: options.xml.rootName ?? \"\",\n        includeRoot: options.xml.includeRoot ?? false,\n        xmlCharKey: options.xml.xmlCharKey ?? XML_CHARKEY,\n      },\n      ignoreUnknownProperties: options.ignoreUnknownProperties ?? false,\n    };\n    if (responseBody === undefined || responseBody === null) {\n      if (this.isXML && mapper.type.name === \"Sequence\" && !mapper.xmlIsWrapped) {\n        // Edge case for empty XML non-wrapped lists. xml2js can't distinguish\n        // between the list being empty versus being missing,\n        // so let's do the more user-friendly thing and return an empty list.\n        responseBody = [];\n      }\n      // specifically check for undefined as default value can be a falsey value `0, \"\", false, null`\n      if (mapper.defaultValue !== undefined) {\n        responseBody = mapper.defaultValue;\n      }\n      return responseBody;\n    }\n\n    let payload: any;\n    const mapperType = mapper.type.name;\n    if (!objectName) {\n      objectName = mapper.serializedName!;\n    }\n\n    if (mapperType.match(/^Composite$/i) !== null) {\n      payload = deserializeCompositeType(\n        this,\n        mapper as CompositeMapper,\n        responseBody,\n        objectName,\n        updatedOptions,\n      );\n    } else {\n      if (this.isXML) {\n        const xmlCharKey = updatedOptions.xml.xmlCharKey;\n        /**\n         * If the mapper specifies this as a non-composite type value but the responseBody contains\n         * both header (\"$\" i.e., XML_ATTRKEY) and body (\"#\" i.e., XML_CHARKEY) properties,\n         * then just reduce the responseBody value to the body (\"#\" i.e., XML_CHARKEY) property.\n         */\n        if (responseBody[XML_ATTRKEY] !== undefined && responseBody[xmlCharKey] !== undefined) {\n          responseBody = responseBody[xmlCharKey];\n        }\n      }\n\n      if (mapperType.match(/^Number$/i) !== null) {\n        payload = parseFloat(responseBody);\n        if (isNaN(payload)) {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^Boolean$/i) !== null) {\n        if (responseBody === \"true\") {\n          payload = true;\n        } else if (responseBody === \"false\") {\n          payload = false;\n        } else {\n          payload = responseBody;\n        }\n      } else if (mapperType.match(/^(String|Enum|Object|Stream|Uuid|TimeSpan|any)$/i) !== null) {\n        payload = responseBody;\n      } else if (mapperType.match(/^(Date|DateTime|DateTimeRfc1123)$/i) !== null) {\n        payload = new Date(responseBody);\n      } else if (mapperType.match(/^UnixTime$/i) !== null) {\n        payload = unixTimeToDate(responseBody);\n      } else if (mapperType.match(/^ByteArray$/i) !== null) {\n        payload = base64.decodeString(responseBody);\n      } else if (mapperType.match(/^Base64Url$/i) !== null) {\n        payload = base64UrlToByteArray(responseBody);\n      } else if (mapperType.match(/^Sequence$/i) !== null) {\n        payload = deserializeSequenceType(\n          this,\n          mapper as SequenceMapper,\n          responseBody,\n          objectName,\n          updatedOptions,\n        );\n      } else if (mapperType.match(/^Dictionary$/i) !== null) {\n        payload = deserializeDictionaryType(\n          this,\n          mapper as DictionaryMapper,\n          responseBody,\n          objectName,\n          updatedOptions,\n        );\n      }\n    }\n\n    if (mapper.isConstant) {\n      payload = mapper.defaultValue;\n    }\n\n    return payload;\n  }\n}\n\n/**\n * Method that creates and returns a Serializer.\n * @param modelMappers - Known models to map\n * @param isXML - If XML should be supported\n */\nexport function createSerializer(\n  modelMappers: { [key: string]: any } = {},\n  isXML: boolean = false,\n): Serializer {\n  return new SerializerImpl(modelMappers, isXML);\n}\n\nfunction trimEnd(str: string, ch: string): string {\n  let len = str.length;\n  while (len - 1 >= 0 && str[len - 1] === ch) {\n    --len;\n  }\n  return str.substr(0, len);\n}\n\nfunction bufferToBase64Url(buffer: Uint8Array): string | undefined {\n  if (!buffer) {\n    return undefined;\n  }\n  if (!(buffer instanceof Uint8Array)) {\n    throw new Error(`Please provide an input of type Uint8Array for converting to Base64Url.`);\n  }\n  // Uint8Array to Base64.\n  const str = base64.encodeByteArray(buffer);\n  // Base64 to Base64Url.\n  return trimEnd(str, \"=\").replace(/\\+/g, \"-\").replace(/\\//g, \"_\");\n}\n\nfunction base64UrlToByteArray(str: string): Uint8Array | undefined {\n  if (!str) {\n    return undefined;\n  }\n  if (str && typeof str.valueOf() !== \"string\") {\n    throw new Error(\"Please provide an input of type string for converting to Uint8Array\");\n  }\n  // Base64Url to Base64.\n  str = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  // Base64 to Uint8Array.\n  return base64.decodeString(str);\n}\n\nfunction splitSerializeName(prop: string | undefined): string[] {\n  const classes: string[] = [];\n  let partialclass = \"\";\n  if (prop) {\n    const subwords = prop.split(\".\");\n\n    for (const item of subwords) {\n      if (item.charAt(item.length - 1) === \"\\\\\") {\n        partialclass += item.substr(0, item.length - 1) + \".\";\n      } else {\n        partialclass += item;\n        classes.push(partialclass);\n        partialclass = \"\";\n      }\n    }\n  }\n\n  return classes;\n}\n\nfunction dateToUnixTime(d: string | Date): number | undefined {\n  if (!d) {\n    return undefined;\n  }\n\n  if (typeof d.valueOf() === \"string\") {\n    d = new Date(d as string);\n  }\n  return Math.floor((d as Date).getTime() / 1000);\n}\n\nfunction unixTimeToDate(n: number): Date | undefined {\n  if (!n) {\n    return undefined;\n  }\n  return new Date(n * 1000);\n}\n\nfunction serializeBasicTypes(typeName: string, objectName: string, value: any): any {\n  if (value !== null && value !== undefined) {\n    if (typeName.match(/^Number$/i) !== null) {\n      if (typeof value !== \"number\") {\n        throw new Error(`${objectName} with value ${value} must be of type number.`);\n      }\n    } else if (typeName.match(/^String$/i) !== null) {\n      if (typeof value.valueOf() !== \"string\") {\n        throw new Error(`${objectName} with value \"${value}\" must be of type string.`);\n      }\n    } else if (typeName.match(/^Uuid$/i) !== null) {\n      if (!(typeof value.valueOf() === \"string\" && isValidUuid(value))) {\n        throw new Error(\n          `${objectName} with value \"${value}\" must be of type string and a valid uuid.`,\n        );\n      }\n    } else if (typeName.match(/^Boolean$/i) !== null) {\n      if (typeof value !== \"boolean\") {\n        throw new Error(`${objectName} with value ${value} must be of type boolean.`);\n      }\n    } else if (typeName.match(/^Stream$/i) !== null) {\n      const objectType = typeof value;\n      if (\n        objectType !== \"string\" &&\n        typeof value.pipe !== \"function\" && // NodeJS.ReadableStream\n        typeof value.tee !== \"function\" && // browser ReadableStream\n        !(value instanceof ArrayBuffer) &&\n        !ArrayBuffer.isView(value) &&\n        // File objects count as a type of Blob, so we want to use instanceof explicitly\n        !((typeof Blob === \"function\" || typeof Blob === \"object\") && value instanceof Blob) &&\n        objectType !== \"function\"\n      ) {\n        throw new Error(\n          `${objectName} must be a string, Blob, ArrayBuffer, ArrayBufferView, ReadableStream, or () => ReadableStream.`,\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeEnumType(objectName: string, allowedValues: Array<any>, value: any): any {\n  if (!allowedValues) {\n    throw new Error(\n      `Please provide a set of allowedValues to validate ${objectName} as an Enum Type.`,\n    );\n  }\n  const isPresent = allowedValues.some((item) => {\n    if (typeof item.valueOf() === \"string\") {\n      return item.toLowerCase() === value.toLowerCase();\n    }\n    return item === value;\n  });\n  if (!isPresent) {\n    throw new Error(\n      `${value} is not a valid value for ${objectName}. The valid values are: ${JSON.stringify(\n        allowedValues,\n      )}.`,\n    );\n  }\n  return value;\n}\n\nfunction serializeByteArrayType(objectName: string, value: any): any {\n  if (value !== undefined && value !== null) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = base64.encodeByteArray(value);\n  }\n  return value;\n}\n\nfunction serializeBase64UrlType(objectName: string, value: any): any {\n  if (value !== undefined && value !== null) {\n    if (!(value instanceof Uint8Array)) {\n      throw new Error(`${objectName} must be of type Uint8Array.`);\n    }\n    value = bufferToBase64Url(value);\n  }\n  return value;\n}\n\nfunction serializeDateTypes(typeName: string, value: any, objectName: string): any {\n  if (value !== undefined && value !== null) {\n    if (typeName.match(/^Date$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value =\n        value instanceof Date\n          ? value.toISOString().substring(0, 10)\n          : new Date(value).toISOString().substring(0, 10);\n    } else if (typeName.match(/^DateTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in ISO8601 format.`);\n      }\n      value = value instanceof Date ? value.toISOString() : new Date(value).toISOString();\n    } else if (typeName.match(/^DateTimeRfc1123$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(`${objectName} must be an instanceof Date or a string in RFC-1123 format.`);\n      }\n      value = value instanceof Date ? value.toUTCString() : new Date(value).toUTCString();\n    } else if (typeName.match(/^UnixTime$/i) !== null) {\n      if (\n        !(\n          value instanceof Date ||\n          (typeof value.valueOf() === \"string\" && !isNaN(Date.parse(value)))\n        )\n      ) {\n        throw new Error(\n          `${objectName} must be an instanceof Date or a string in RFC-1123/ISO8601 format ` +\n            `for it to be serialized in UnixTime/Epoch format.`,\n        );\n      }\n      value = dateToUnixTime(value);\n    } else if (typeName.match(/^TimeSpan$/i) !== null) {\n      if (!isDuration(value)) {\n        throw new Error(\n          `${objectName} must be a string in ISO 8601 format. Instead was \"${value}\".`,\n        );\n      }\n    }\n  }\n  return value;\n}\n\nfunction serializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (!Array.isArray(object)) {\n    throw new Error(`${objectName} must be of type Array.`);\n  }\n  let elementType = mapper.type.element;\n  if (!elementType || typeof elementType !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`,\n    );\n  }\n  // Quirk: Composite mappers referenced by `element` might\n  // not have *all* properties declared (like uberParent),\n  // so let's try to look up the full definition by name.\n  if (elementType.type.name === \"Composite\" && elementType.type.className) {\n    elementType = serializer.modelMappers[elementType.type.className] ?? elementType;\n  }\n  const tempArray = [];\n  for (let i = 0; i < object.length; i++) {\n    const serializedValue = serializer.serialize(elementType, object[i], objectName, options);\n    if (isXml && elementType.xmlNamespace) {\n      const xmlnsKey = elementType.xmlNamespacePrefix\n        ? `xmlns:${elementType.xmlNamespacePrefix}`\n        : \"xmlns\";\n      if (elementType.type.name === \"Composite\") {\n        tempArray[i] = { ...serializedValue };\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      } else {\n        tempArray[i] = {};\n        tempArray[i][options.xml.xmlCharKey] = serializedValue;\n        tempArray[i][XML_ATTRKEY] = { [xmlnsKey]: elementType.xmlNamespace };\n      }\n    } else {\n      tempArray[i] = serializedValue;\n    }\n  }\n  return tempArray;\n}\n\nfunction serializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (typeof object !== \"object\") {\n    throw new Error(`${objectName} must be of type object.`);\n  }\n  const valueType = mapper.type.value;\n  if (!valueType || typeof valueType !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}.`,\n    );\n  }\n  const tempDictionary: { [key: string]: any } = {};\n  for (const key of Object.keys(object)) {\n    const serializedValue = serializer.serialize(valueType, object[key], objectName, options);\n    // If the element needs an XML namespace we need to add it within the $ property\n    tempDictionary[key] = getXmlObjectValue(valueType, serializedValue, isXml, options);\n  }\n\n  // Add the namespace to the root element if needed\n  if (isXml && mapper.xmlNamespace) {\n    const xmlnsKey = mapper.xmlNamespacePrefix ? `xmlns:${mapper.xmlNamespacePrefix}` : \"xmlns\";\n    const result = tempDictionary;\n    result[XML_ATTRKEY] = { [xmlnsKey]: mapper.xmlNamespace };\n    return result;\n  }\n\n  return tempDictionary;\n}\n\n/**\n * Resolves the additionalProperties property from a referenced mapper\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveAdditionalProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string,\n): SequenceMapper | BaseMapper | CompositeMapper | DictionaryMapper | EnumMapper | undefined {\n  const additionalProperties = mapper.type.additionalProperties;\n\n  if (!additionalProperties && mapper.type.className) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    return modelMapper?.type.additionalProperties;\n  }\n\n  return additionalProperties;\n}\n\n/**\n * Finds the mapper referenced by className\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n * @param objectName - name of the object being serialized\n */\nfunction resolveReferencedMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string,\n): CompositeMapper | undefined {\n  const className = mapper.type.className;\n  if (!className) {\n    throw new Error(\n      `Class name for model \"${objectName}\" is not provided in the mapper \"${JSON.stringify(\n        mapper,\n        undefined,\n        2,\n      )}\".`,\n    );\n  }\n\n  return serializer.modelMappers[className];\n}\n\n/**\n * Resolves a composite mapper's modelProperties.\n * @param serializer - the serializer containing the entire set of mappers\n * @param mapper - the composite mapper to resolve\n */\nfunction resolveModelProperties(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  objectName: string,\n): { [propertyName: string]: Mapper } {\n  let modelProps = mapper.type.modelProperties;\n  if (!modelProps) {\n    const modelMapper = resolveReferencedMapper(serializer, mapper, objectName);\n    if (!modelMapper) {\n      throw new Error(`mapper() cannot be null or undefined for model \"${mapper.type.className}\".`);\n    }\n    modelProps = modelMapper?.type.modelProperties;\n    if (!modelProps) {\n      throw new Error(\n        `modelProperties cannot be null or undefined in the ` +\n          `mapper \"${JSON.stringify(modelMapper)}\" of type \"${\n            mapper.type.className\n          }\" for object \"${objectName}\".`,\n      );\n    }\n  }\n\n  return modelProps;\n}\n\nfunction serializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  objectName: string,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, object, \"clientName\");\n  }\n\n  if (object !== undefined && object !== null) {\n    const payload: any = {};\n    const modelProps = resolveModelProperties(serializer, mapper, objectName);\n    for (const key of Object.keys(modelProps)) {\n      const propertyMapper = modelProps[key];\n      if (propertyMapper.readOnly) {\n        continue;\n      }\n\n      let propName: string | undefined;\n      let parentObject: any = payload;\n      if (serializer.isXML) {\n        if (propertyMapper.xmlIsWrapped) {\n          propName = propertyMapper.xmlName;\n        } else {\n          propName = propertyMapper.xmlElementName || propertyMapper.xmlName;\n        }\n      } else {\n        const paths = splitSerializeName(propertyMapper.serializedName!);\n        propName = paths.pop();\n\n        for (const pathName of paths) {\n          const childObject = parentObject[pathName];\n          if (\n            (childObject === undefined || childObject === null) &&\n            ((object[key] !== undefined && object[key] !== null) ||\n              propertyMapper.defaultValue !== undefined)\n          ) {\n            parentObject[pathName] = {};\n          }\n          parentObject = parentObject[pathName];\n        }\n      }\n\n      if (parentObject !== undefined && parentObject !== null) {\n        if (isXml && mapper.xmlNamespace) {\n          const xmlnsKey = mapper.xmlNamespacePrefix\n            ? `xmlns:${mapper.xmlNamespacePrefix}`\n            : \"xmlns\";\n          parentObject[XML_ATTRKEY] = {\n            ...parentObject[XML_ATTRKEY],\n            [xmlnsKey]: mapper.xmlNamespace,\n          };\n        }\n        const propertyObjectName =\n          propertyMapper.serializedName !== \"\"\n            ? objectName + \".\" + propertyMapper.serializedName\n            : objectName;\n\n        let toSerialize = object[key];\n        const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n        if (\n          polymorphicDiscriminator &&\n          polymorphicDiscriminator.clientName === key &&\n          (toSerialize === undefined || toSerialize === null)\n        ) {\n          toSerialize = mapper.serializedName;\n        }\n\n        const serializedValue = serializer.serialize(\n          propertyMapper,\n          toSerialize,\n          propertyObjectName,\n          options,\n        );\n        if (serializedValue !== undefined && propName !== undefined && propName !== null) {\n          const value = getXmlObjectValue(propertyMapper, serializedValue, isXml, options);\n          if (isXml && propertyMapper.xmlIsAttribute) {\n            // XML_ATTRKEY, i.e., $ is the key attributes are kept under in xml2js.\n            // This keeps things simple while preventing name collision\n            // with names in user documents.\n            parentObject[XML_ATTRKEY] = parentObject[XML_ATTRKEY] || {};\n            parentObject[XML_ATTRKEY][propName] = serializedValue;\n          } else if (isXml && propertyMapper.xmlIsWrapped) {\n            parentObject[propName] = { [propertyMapper.xmlElementName!]: value };\n          } else {\n            parentObject[propName] = value;\n          }\n        }\n      }\n    }\n\n    const additionalPropertiesMapper = resolveAdditionalProperties(serializer, mapper, objectName);\n    if (additionalPropertiesMapper) {\n      const propNames = Object.keys(modelProps);\n      for (const clientPropName in object) {\n        const isAdditionalProperty = propNames.every((pn) => pn !== clientPropName);\n        if (isAdditionalProperty) {\n          payload[clientPropName] = serializer.serialize(\n            additionalPropertiesMapper,\n            object[clientPropName],\n            objectName + '[\"' + clientPropName + '\"]',\n            options,\n          );\n        }\n      }\n    }\n\n    return payload;\n  }\n  return object;\n}\n\nfunction getXmlObjectValue(\n  propertyMapper: Mapper,\n  serializedValue: any,\n  isXml: boolean,\n  options: RequiredSerializerOptions,\n): any {\n  if (!isXml || !propertyMapper.xmlNamespace) {\n    return serializedValue;\n  }\n\n  const xmlnsKey = propertyMapper.xmlNamespacePrefix\n    ? `xmlns:${propertyMapper.xmlNamespacePrefix}`\n    : \"xmlns\";\n  const xmlNamespace = { [xmlnsKey]: propertyMapper.xmlNamespace };\n\n  if ([\"Composite\"].includes(propertyMapper.type.name)) {\n    if (serializedValue[XML_ATTRKEY]) {\n      return serializedValue;\n    } else {\n      const result: any = { ...serializedValue };\n      result[XML_ATTRKEY] = xmlNamespace;\n      return result;\n    }\n  }\n  const result: any = {};\n  result[options.xml.xmlCharKey] = serializedValue;\n  result[XML_ATTRKEY] = xmlNamespace;\n  return result;\n}\n\nfunction isSpecialXmlProperty(propertyName: string, options: RequiredSerializerOptions): boolean {\n  return [XML_ATTRKEY, options.xml.xmlCharKey].includes(propertyName);\n}\n\nfunction deserializeCompositeType(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  responseBody: any,\n  objectName: string,\n  options: RequiredSerializerOptions,\n): any {\n  const xmlCharKey = options.xml.xmlCharKey ?? XML_CHARKEY;\n  if (getPolymorphicDiscriminatorRecursively(serializer, mapper)) {\n    mapper = getPolymorphicMapper(serializer, mapper, responseBody, \"serializedName\");\n  }\n\n  const modelProps = resolveModelProperties(serializer, mapper, objectName);\n  let instance: { [key: string]: any } = {};\n  const handledPropertyNames: string[] = [];\n\n  for (const key of Object.keys(modelProps)) {\n    const propertyMapper = modelProps[key];\n    const paths = splitSerializeName(modelProps[key].serializedName!);\n    handledPropertyNames.push(paths[0]);\n    const { serializedName, xmlName, xmlElementName } = propertyMapper;\n    let propertyObjectName = objectName;\n    if (serializedName !== \"\" && serializedName !== undefined) {\n      propertyObjectName = objectName + \".\" + serializedName;\n    }\n\n    const headerCollectionPrefix = (propertyMapper as DictionaryMapper).headerCollectionPrefix;\n    if (headerCollectionPrefix) {\n      const dictionary: any = {};\n      for (const headerKey of Object.keys(responseBody)) {\n        if (headerKey.startsWith(headerCollectionPrefix)) {\n          dictionary[headerKey.substring(headerCollectionPrefix.length)] = serializer.deserialize(\n            (propertyMapper as DictionaryMapper).type.value,\n            responseBody[headerKey],\n            propertyObjectName,\n            options,\n          );\n        }\n\n        handledPropertyNames.push(headerKey);\n      }\n      instance[key] = dictionary;\n    } else if (serializer.isXML) {\n      if (propertyMapper.xmlIsAttribute && responseBody[XML_ATTRKEY]) {\n        instance[key] = serializer.deserialize(\n          propertyMapper,\n          responseBody[XML_ATTRKEY][xmlName!],\n          propertyObjectName,\n          options,\n        );\n      } else if (propertyMapper.xmlIsMsText) {\n        if (responseBody[xmlCharKey] !== undefined) {\n          instance[key] = responseBody[xmlCharKey];\n        } else if (typeof responseBody === \"string\") {\n          // The special case where xml parser parses \"<Name>content</Name>\" into JSON of\n          //   `{ name: \"content\"}` instead of `{ name: { \"_\": \"content\" }}`\n          instance[key] = responseBody;\n        }\n      } else {\n        const propertyName = xmlElementName || xmlName || serializedName;\n        if (propertyMapper.xmlIsWrapped) {\n          /* a list of <xmlElementName> wrapped by <xmlName>\n            For the xml example below\n              <Cors>\n                <CorsRule>...</CorsRule>\n                <CorsRule>...</CorsRule>\n              </Cors>\n            the responseBody has\n              {\n                Cors: {\n                  CorsRule: [{...}, {...}]\n                }\n              }\n            xmlName is \"Cors\" and xmlElementName is\"CorsRule\".\n          */\n          const wrapped = responseBody[xmlName!];\n          const elementList = wrapped?.[xmlElementName!] ?? [];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            elementList,\n            propertyObjectName,\n            options,\n          );\n          handledPropertyNames.push(xmlName!);\n        } else {\n          const property = responseBody[propertyName!];\n          instance[key] = serializer.deserialize(\n            propertyMapper,\n            property,\n            propertyObjectName,\n            options,\n          );\n          handledPropertyNames.push(propertyName!);\n        }\n      }\n    } else {\n      // deserialize the property if it is present in the provided responseBody instance\n      let propertyInstance;\n      let res = responseBody;\n      // traversing the object step by step.\n      let steps = 0;\n      for (const item of paths) {\n        if (!res) break;\n        steps++;\n        res = res[item];\n      }\n      // only accept null when reaching the last position of object otherwise it would be undefined\n      if (res === null && steps < paths.length) {\n        res = undefined;\n      }\n      propertyInstance = res;\n      const polymorphicDiscriminator = mapper.type.polymorphicDiscriminator;\n      // checking that the model property name (key)(ex: \"fishtype\") and the\n      // clientName of the polymorphicDiscriminator {metadata} (ex: \"fishtype\")\n      // instead of the serializedName of the polymorphicDiscriminator (ex: \"fish.type\")\n      // is a better approach. The generator is not consistent with escaping '\\.' in the\n      // serializedName of the property (ex: \"fish\\.type\") that is marked as polymorphic discriminator\n      // and the serializedName of the metadata polymorphicDiscriminator (ex: \"fish.type\"). However,\n      // the clientName transformation of the polymorphicDiscriminator (ex: \"fishtype\") and\n      // the transformation of model property name (ex: \"fishtype\") is done consistently.\n      // Hence, it is a safer bet to rely on the clientName of the polymorphicDiscriminator.\n      if (\n        polymorphicDiscriminator &&\n        key === polymorphicDiscriminator.clientName &&\n        (propertyInstance === undefined || propertyInstance === null)\n      ) {\n        propertyInstance = mapper.serializedName;\n      }\n\n      let serializedValue;\n      // paging\n      if (Array.isArray(responseBody[key]) && modelProps[key].serializedName === \"\") {\n        propertyInstance = responseBody[key];\n        const arrayInstance = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options,\n        );\n        // Copy over any properties that have already been added into the instance, where they do\n        // not exist on the newly de-serialized array\n        for (const [k, v] of Object.entries(instance)) {\n          if (!Object.prototype.hasOwnProperty.call(arrayInstance, k)) {\n            arrayInstance[k] = v;\n          }\n        }\n        instance = arrayInstance;\n      } else if (propertyInstance !== undefined || propertyMapper.defaultValue !== undefined) {\n        serializedValue = serializer.deserialize(\n          propertyMapper,\n          propertyInstance,\n          propertyObjectName,\n          options,\n        );\n        instance[key] = serializedValue;\n      }\n    }\n  }\n\n  const additionalPropertiesMapper = mapper.type.additionalProperties;\n  if (additionalPropertiesMapper) {\n    const isAdditionalProperty = (responsePropName: string): boolean => {\n      for (const clientPropName in modelProps) {\n        const paths = splitSerializeName(modelProps[clientPropName].serializedName);\n        if (paths[0] === responsePropName) {\n          return false;\n        }\n      }\n      return true;\n    };\n\n    for (const responsePropName in responseBody) {\n      if (isAdditionalProperty(responsePropName)) {\n        instance[responsePropName] = serializer.deserialize(\n          additionalPropertiesMapper,\n          responseBody[responsePropName],\n          objectName + '[\"' + responsePropName + '\"]',\n          options,\n        );\n      }\n    }\n  } else if (responseBody && !options.ignoreUnknownProperties) {\n    for (const key of Object.keys(responseBody)) {\n      if (\n        instance[key] === undefined &&\n        !handledPropertyNames.includes(key) &&\n        !isSpecialXmlProperty(key, options)\n      ) {\n        instance[key] = responseBody[key];\n      }\n    }\n  }\n\n  return instance;\n}\n\nfunction deserializeDictionaryType(\n  serializer: Serializer,\n  mapper: DictionaryMapper,\n  responseBody: any,\n  objectName: string,\n  options: RequiredSerializerOptions,\n): any {\n  /* jshint validthis: true */\n  const value = mapper.type.value;\n  if (!value || typeof value !== \"object\") {\n    throw new Error(\n      `\"value\" metadata for a Dictionary must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`,\n    );\n  }\n  if (responseBody) {\n    const tempDictionary: { [key: string]: any } = {};\n    for (const key of Object.keys(responseBody)) {\n      tempDictionary[key] = serializer.deserialize(value, responseBody[key], objectName, options);\n    }\n    return tempDictionary;\n  }\n  return responseBody;\n}\n\nfunction deserializeSequenceType(\n  serializer: Serializer,\n  mapper: SequenceMapper,\n  responseBody: any,\n  objectName: string,\n  options: RequiredSerializerOptions,\n): any {\n  let element = mapper.type.element;\n  if (!element || typeof element !== \"object\") {\n    throw new Error(\n      `element\" metadata for an Array must be defined in the ` +\n        `mapper and it must of type \"object\" in ${objectName}`,\n    );\n  }\n  if (responseBody) {\n    if (!Array.isArray(responseBody)) {\n      // xml2js will interpret a single element array as just the element, so force it to be an array\n      responseBody = [responseBody];\n    }\n\n    // Quirk: Composite mappers referenced by `element` might\n    // not have *all* properties declared (like uberParent),\n    // so let's try to look up the full definition by name.\n    if (element.type.name === \"Composite\" && element.type.className) {\n      element = serializer.modelMappers[element.type.className] ?? element;\n    }\n\n    const tempArray = [];\n    for (let i = 0; i < responseBody.length; i++) {\n      tempArray[i] = serializer.deserialize(\n        element,\n        responseBody[i],\n        `${objectName}[${i}]`,\n        options,\n      );\n    }\n    return tempArray;\n  }\n  return responseBody;\n}\n\nfunction getIndexDiscriminator(\n  discriminators: Record<string, CompositeMapper>,\n  discriminatorValue: string,\n  typeName: string,\n): CompositeMapper | undefined {\n  const typeNamesToCheck = [typeName];\n  while (typeNamesToCheck.length) {\n    const currentName = typeNamesToCheck.shift();\n    const indexDiscriminator =\n      discriminatorValue === currentName\n        ? discriminatorValue\n        : currentName + \".\" + discriminatorValue;\n    if (Object.prototype.hasOwnProperty.call(discriminators, indexDiscriminator)) {\n      return discriminators[indexDiscriminator];\n    } else {\n      for (const [name, mapper] of Object.entries(discriminators)) {\n        if (\n          name.startsWith(currentName + \".\") &&\n          mapper.type.uberParent === currentName &&\n          mapper.type.className\n        ) {\n          typeNamesToCheck.push(mapper.type.className);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\nfunction getPolymorphicMapper(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n  object: any,\n  polymorphicPropertyName: \"clientName\" | \"serializedName\",\n): CompositeMapper {\n  const polymorphicDiscriminator = getPolymorphicDiscriminatorRecursively(serializer, mapper);\n\n  if (polymorphicDiscriminator) {\n    let discriminatorName = polymorphicDiscriminator[polymorphicPropertyName];\n    if (discriminatorName) {\n      // The serializedName might have \\\\, which we just want to ignore\n      if (polymorphicPropertyName === \"serializedName\") {\n        discriminatorName = discriminatorName.replace(/\\\\/gi, \"\");\n      }\n      const discriminatorValue = object[discriminatorName];\n      const typeName = mapper.type.uberParent ?? mapper.type.className;\n\n      if (typeof discriminatorValue === \"string\" && typeName) {\n        const polymorphicMapper = getIndexDiscriminator(\n          serializer.modelMappers.discriminators,\n          discriminatorValue,\n          typeName,\n        );\n        if (polymorphicMapper) {\n          mapper = polymorphicMapper;\n        }\n      }\n    }\n  }\n  return mapper;\n}\n\nfunction getPolymorphicDiscriminatorRecursively(\n  serializer: Serializer,\n  mapper: CompositeMapper,\n): PolymorphicDiscriminator | undefined {\n  return (\n    mapper.type.polymorphicDiscriminator ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.uberParent) ||\n    getPolymorphicDiscriminatorSafely(serializer, mapper.type.className)\n  );\n}\n\nfunction getPolymorphicDiscriminatorSafely(\n  serializer: Serializer,\n  typeName?: string,\n): PolymorphicDiscriminator | undefined {\n  return (\n    typeName &&\n    serializer.modelMappers[typeName] &&\n    serializer.modelMappers[typeName].type.polymorphicDiscriminator\n  );\n}\n\n/**\n * Known types of Mappers\n */\nexport const MapperTypeNames = {\n  Base64Url: \"Base64Url\",\n  Boolean: \"Boolean\",\n  ByteArray: \"ByteArray\",\n  Composite: \"Composite\",\n  Date: \"Date\",\n  DateTime: \"DateTime\",\n  DateTimeRfc1123: \"DateTimeRfc1123\",\n  Dictionary: \"Dictionary\",\n  Enum: \"Enum\",\n  Number: \"Number\",\n  Object: \"Object\",\n  Sequence: \"Sequence\",\n  String: \"String\",\n  Stream: \"Stream\",\n  TimeSpan: \"TimeSpan\",\n  UnixTime: \"UnixTime\",\n} as const;\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationRequest, OperationRequestInfo } from \"./interfaces.js\";\n\n/**\n * Browser-only implementation of the module's state. The browser esm variant will not load the commonjs state, so we do not need to share state between the two.\n */\nexport const state = {\n  operationRequestMap: new WeakMap<OperationRequest, OperationRequestInfo>(),\n};\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  CompositeMapper,\n  Mapper,\n  OperationArguments,\n  OperationParameter,\n  OperationRequest,\n  OperationRequestInfo,\n  ParameterPath,\n} from \"./interfaces.js\";\n\nimport { state } from \"./state.js\";\n\n/**\n * @internal\n * Retrieves the value to use for a given operation argument\n * @param operationArguments - The arguments passed from the generated client\n * @param parameter - The parameter description\n * @param fallbackObject - If something isn't found in the arguments bag, look here.\n *  Generally used to look at the service client properties.\n */\nexport function getOperationArgumentValueFromParameter(\n  operationArguments: OperationArguments,\n  parameter: OperationParameter,\n  fallbackObject?: { [parameterName: string]: any },\n): any {\n  let parameterPath = parameter.parameterPath;\n  const parameterMapper = parameter.mapper;\n  let value: any;\n  if (typeof parameterPath === \"string\") {\n    parameterPath = [parameterPath];\n  }\n  if (Array.isArray(parameterPath)) {\n    if (parameterPath.length > 0) {\n      if (parameterMapper.isConstant) {\n        value = parameterMapper.defaultValue;\n      } else {\n        let propertySearchResult = getPropertyFromParameterPath(operationArguments, parameterPath);\n\n        if (!propertySearchResult.propertyFound && fallbackObject) {\n          propertySearchResult = getPropertyFromParameterPath(fallbackObject, parameterPath);\n        }\n\n        let useDefaultValue = false;\n        if (!propertySearchResult.propertyFound) {\n          useDefaultValue =\n            parameterMapper.required ||\n            (parameterPath[0] === \"options\" && parameterPath.length === 2);\n        }\n        value = useDefaultValue ? parameterMapper.defaultValue : propertySearchResult.propertyValue;\n      }\n    }\n  } else {\n    if (parameterMapper.required) {\n      value = {};\n    }\n\n    for (const propertyName in parameterPath) {\n      const propertyMapper: Mapper = (parameterMapper as CompositeMapper).type.modelProperties![\n        propertyName\n      ];\n      const propertyPath: ParameterPath = parameterPath[propertyName];\n      const propertyValue: any = getOperationArgumentValueFromParameter(\n        operationArguments,\n        {\n          parameterPath: propertyPath,\n          mapper: propertyMapper,\n        },\n        fallbackObject,\n      );\n      if (propertyValue !== undefined) {\n        if (!value) {\n          value = {};\n        }\n        value[propertyName] = propertyValue;\n      }\n    }\n  }\n  return value;\n}\n\ninterface PropertySearchResult {\n  propertyValue?: any;\n  propertyFound: boolean;\n}\n\nfunction getPropertyFromParameterPath(\n  parent: { [parameterName: string]: any },\n  parameterPath: string[],\n): PropertySearchResult {\n  const result: PropertySearchResult = { propertyFound: false };\n  let i = 0;\n  for (; i < parameterPath.length; ++i) {\n    const parameterPathPart: string = parameterPath[i];\n    // Make sure to check inherited properties too, so don't use hasOwnProperty().\n    if (parent && parameterPathPart in parent) {\n      parent = parent[parameterPathPart];\n    } else {\n      break;\n    }\n  }\n  if (i === parameterPath.length) {\n    result.propertyValue = parent;\n    result.propertyFound = true;\n  }\n  return result;\n}\n\nconst originalRequestSymbol = Symbol.for(\"@azure/core-client original request\");\n\nfunction hasOriginalRequest(\n  request: OperationRequest,\n): request is OperationRequest & { [originalRequestSymbol]: OperationRequest } {\n  return originalRequestSymbol in request;\n}\n\nexport function getOperationRequestInfo(request: OperationRequest): OperationRequestInfo {\n  if (hasOriginalRequest(request)) {\n    return getOperationRequestInfo(request[originalRequestSymbol]);\n  }\n  let info = state.operationRequestMap.get(request);\n\n  if (!info) {\n    info = {};\n    state.operationRequestMap.set(request, info);\n  }\n  return info;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  FullOperationResponse,\n  OperationRequest,\n  OperationResponseMap,\n  OperationSpec,\n  RequiredSerializerOptions,\n  SerializerOptions,\n  XML_CHARKEY,\n  XmlOptions,\n} from \"./interfaces.js\";\nimport {\n  PipelinePolicy,\n  PipelineRequest,\n  PipelineResponse,\n  RestError,\n  SendRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getOperationRequestInfo } from \"./operationHelpers.js\";\n\nconst defaultJsonContentTypes = [\"application/json\", \"text/json\"];\nconst defaultXmlContentTypes = [\"application/xml\", \"application/atom+xml\"];\n\n/**\n * The programmatic identifier of the deserializationPolicy.\n */\nexport const deserializationPolicyName = \"deserializationPolicy\";\n\n/**\n * Options to configure API response deserialization.\n */\nexport interface DeserializationPolicyOptions {\n  /**\n   * Configures the expected content types for the deserialization of\n   * JSON and XML response bodies.\n   */\n  expectedContentTypes?: DeserializationContentTypes;\n\n  /**\n   * A function that is able to parse XML. Required for XML support.\n   */\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>;\n\n  /**\n   * Configures behavior of xml parser and builder.\n   */\n  serializerOptions?: SerializerOptions;\n}\n\n/**\n * The content-types that will indicate that an operation response should be deserialized in a\n * particular way.\n */\nexport interface DeserializationContentTypes {\n  /**\n   * The content-types that indicate that an operation response should be deserialized as JSON.\n   * Defaults to [ \"application/json\", \"text/json\" ].\n   */\n  json?: string[];\n\n  /**\n   * The content-types that indicate that an operation response should be deserialized as XML.\n   * Defaults to [ \"application/xml\", \"application/atom+xml\" ].\n   */\n  xml?: string[];\n}\n\n/**\n * This policy handles parsing out responses according to OperationSpecs on the request.\n */\nexport function deserializationPolicy(options: DeserializationPolicyOptions = {}): PipelinePolicy {\n  const jsonContentTypes = options.expectedContentTypes?.json ?? defaultJsonContentTypes;\n  const xmlContentTypes = options.expectedContentTypes?.xml ?? defaultXmlContentTypes;\n  const parseXML = options.parseXML;\n  const serializerOptions = options.serializerOptions;\n  const updatedOptions: RequiredSerializerOptions = {\n    xml: {\n      rootName: serializerOptions?.xml.rootName ?? \"\",\n      includeRoot: serializerOptions?.xml.includeRoot ?? false,\n      xmlCharKey: serializerOptions?.xml.xmlCharKey ?? XML_CHARKEY,\n    },\n  };\n\n  return {\n    name: deserializationPolicyName,\n    async sendRequest(request: PipelineRequest, next: SendRequest): Promise<PipelineResponse> {\n      const response = await next(request);\n      return deserializeResponseBody(\n        jsonContentTypes,\n        xmlContentTypes,\n        response,\n        updatedOptions,\n        parseXML,\n      );\n    },\n  };\n}\n\nfunction getOperationResponseMap(\n  parsedResponse: PipelineResponse,\n): undefined | OperationResponseMap {\n  let result: OperationResponseMap | undefined;\n  const request: OperationRequest = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const operationSpec = operationInfo?.operationSpec;\n  if (operationSpec) {\n    if (!operationInfo?.operationResponseGetter) {\n      result = operationSpec.responses[parsedResponse.status];\n    } else {\n      result = operationInfo?.operationResponseGetter(operationSpec, parsedResponse);\n    }\n  }\n  return result;\n}\n\nfunction shouldDeserializeResponse(parsedResponse: PipelineResponse): boolean {\n  const request: OperationRequest = parsedResponse.request;\n  const operationInfo = getOperationRequestInfo(request);\n  const shouldDeserialize = operationInfo?.shouldDeserialize;\n  let result: boolean;\n  if (shouldDeserialize === undefined) {\n    result = true;\n  } else if (typeof shouldDeserialize === \"boolean\") {\n    result = shouldDeserialize;\n  } else {\n    result = shouldDeserialize(parsedResponse);\n  }\n  return result;\n}\n\nasync function deserializeResponseBody(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  response: PipelineResponse,\n  options: RequiredSerializerOptions,\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>,\n): Promise<PipelineResponse> {\n  const parsedResponse = await parse(\n    jsonContentTypes,\n    xmlContentTypes,\n    response,\n    options,\n    parseXML,\n  );\n  if (!shouldDeserializeResponse(parsedResponse)) {\n    return parsedResponse;\n  }\n\n  const operationInfo = getOperationRequestInfo(parsedResponse.request);\n  const operationSpec = operationInfo?.operationSpec;\n  if (!operationSpec || !operationSpec.responses) {\n    return parsedResponse;\n  }\n\n  const responseSpec = getOperationResponseMap(parsedResponse);\n  const { error, shouldReturnResponse } = handleErrorResponse(\n    parsedResponse,\n    operationSpec,\n    responseSpec,\n    options,\n  );\n  if (error) {\n    throw error;\n  } else if (shouldReturnResponse) {\n    return parsedResponse;\n  }\n\n  // An operation response spec does exist for current status code, so\n  // use it to deserialize the response.\n  if (responseSpec) {\n    if (responseSpec.bodyMapper) {\n      let valueToDeserialize: any = parsedResponse.parsedBody;\n      if (operationSpec.isXML && responseSpec.bodyMapper.type.name === MapperTypeNames.Sequence) {\n        valueToDeserialize =\n          typeof valueToDeserialize === \"object\"\n            ? valueToDeserialize[responseSpec.bodyMapper.xmlElementName!]\n            : [];\n      }\n      try {\n        parsedResponse.parsedBody = operationSpec.serializer.deserialize(\n          responseSpec.bodyMapper,\n          valueToDeserialize,\n          \"operationRes.parsedBody\",\n          options,\n        );\n      } catch (deserializeError: any) {\n        const restError = new RestError(\n          `Error ${deserializeError} occurred in deserializing the responseBody - ${parsedResponse.bodyAsText}`,\n          {\n            statusCode: parsedResponse.status,\n            request: parsedResponse.request,\n            response: parsedResponse,\n          },\n        );\n        throw restError;\n      }\n    } else if (operationSpec.httpMethod === \"HEAD\") {\n      // head methods never have a body, but we return a boolean to indicate presence/absence of the resource\n      parsedResponse.parsedBody = response.status >= 200 && response.status < 300;\n    }\n\n    if (responseSpec.headersMapper) {\n      parsedResponse.parsedHeaders = operationSpec.serializer.deserialize(\n        responseSpec.headersMapper,\n        parsedResponse.headers.toJSON(),\n        \"operationRes.parsedHeaders\",\n        { xml: {}, ignoreUnknownProperties: true },\n      );\n    }\n  }\n\n  return parsedResponse;\n}\n\nfunction isOperationSpecEmpty(operationSpec: OperationSpec): boolean {\n  const expectedStatusCodes = Object.keys(operationSpec.responses);\n  return (\n    expectedStatusCodes.length === 0 ||\n    (expectedStatusCodes.length === 1 && expectedStatusCodes[0] === \"default\")\n  );\n}\n\nfunction handleErrorResponse(\n  parsedResponse: FullOperationResponse,\n  operationSpec: OperationSpec,\n  responseSpec: OperationResponseMap | undefined,\n  options: RequiredSerializerOptions,\n): { error: RestError | null; shouldReturnResponse: boolean } {\n  const isSuccessByStatus = 200 <= parsedResponse.status && parsedResponse.status < 300;\n  const isExpectedStatusCode: boolean = isOperationSpecEmpty(operationSpec)\n    ? isSuccessByStatus\n    : !!responseSpec;\n\n  if (isExpectedStatusCode) {\n    if (responseSpec) {\n      if (!responseSpec.isError) {\n        return { error: null, shouldReturnResponse: false };\n      }\n    } else {\n      return { error: null, shouldReturnResponse: false };\n    }\n  }\n\n  const errorResponseSpec = responseSpec ?? operationSpec.responses.default;\n\n  const initialErrorMessage = parsedResponse.request.streamResponseStatusCodes?.has(\n    parsedResponse.status,\n  )\n    ? `Unexpected status code: ${parsedResponse.status}`\n    : (parsedResponse.bodyAsText as string);\n\n  const error = new RestError(initialErrorMessage, {\n    statusCode: parsedResponse.status,\n    request: parsedResponse.request,\n    response: parsedResponse,\n  });\n\n  // If the item failed but there's no error spec or default spec to deserialize the error,\n  // we should fail so we just throw the parsed response\n  if (!errorResponseSpec) {\n    throw error;\n  }\n\n  const defaultBodyMapper = errorResponseSpec.bodyMapper;\n  const defaultHeadersMapper = errorResponseSpec.headersMapper;\n\n  try {\n    // If error response has a body, try to deserialize it using default body mapper.\n    // Then try to extract error code & message from it\n    if (parsedResponse.parsedBody) {\n      const parsedBody = parsedResponse.parsedBody;\n      let deserializedError;\n\n      if (defaultBodyMapper) {\n        let valueToDeserialize: any = parsedBody;\n        if (operationSpec.isXML && defaultBodyMapper.type.name === MapperTypeNames.Sequence) {\n          valueToDeserialize = [];\n          const elementName = defaultBodyMapper.xmlElementName;\n          if (typeof parsedBody === \"object\" && elementName) {\n            valueToDeserialize = parsedBody[elementName];\n          }\n        }\n        deserializedError = operationSpec.serializer.deserialize(\n          defaultBodyMapper,\n          valueToDeserialize,\n          \"error.response.parsedBody\",\n          options,\n        );\n      }\n\n      const internalError: any = parsedBody.error || deserializedError || parsedBody;\n      error.code = internalError.code;\n      if (internalError.message) {\n        error.message = internalError.message;\n      }\n\n      if (defaultBodyMapper) {\n        (error.response! as FullOperationResponse).parsedBody = deserializedError;\n      }\n    }\n\n    // If error response has headers, try to deserialize it using default header mapper\n    if (parsedResponse.headers && defaultHeadersMapper) {\n      (error.response! as FullOperationResponse).parsedHeaders =\n        operationSpec.serializer.deserialize(\n          defaultHeadersMapper,\n          parsedResponse.headers.toJSON(),\n          \"operationRes.parsedHeaders\",\n        );\n    }\n  } catch (defaultError: any) {\n    error.message = `Error \"${defaultError.message}\" occurred in deserializing the responseBody - \"${parsedResponse.bodyAsText}\" for the default response.`;\n  }\n\n  return { error, shouldReturnResponse: false };\n}\n\nasync function parse(\n  jsonContentTypes: string[],\n  xmlContentTypes: string[],\n  operationResponse: FullOperationResponse,\n  opts: RequiredSerializerOptions,\n  parseXML?: (str: string, opts?: XmlOptions) => Promise<any>,\n): Promise<FullOperationResponse> {\n  if (\n    !operationResponse.request.streamResponseStatusCodes?.has(operationResponse.status) &&\n    operationResponse.bodyAsText\n  ) {\n    const text = operationResponse.bodyAsText;\n    const contentType: string = operationResponse.headers.get(\"Content-Type\") || \"\";\n    const contentComponents: string[] = !contentType\n      ? []\n      : contentType.split(\";\").map((component) => component.toLowerCase());\n\n    try {\n      if (\n        contentComponents.length === 0 ||\n        contentComponents.some((component) => jsonContentTypes.indexOf(component) !== -1)\n      ) {\n        operationResponse.parsedBody = JSON.parse(text);\n        return operationResponse;\n      } else if (contentComponents.some((component) => xmlContentTypes.indexOf(component) !== -1)) {\n        if (!parseXML) {\n          throw new Error(\"Parsing XML not supported.\");\n        }\n        const body = await parseXML(text, opts.xml);\n        operationResponse.parsedBody = body;\n        return operationResponse;\n      }\n    } catch (err: any) {\n      const msg = `Error \"${err}\" occurred while parsing the response body - ${operationResponse.bodyAsText}.`;\n      const errCode = err.code || RestError.PARSE_ERROR;\n      const e = new RestError(msg, {\n        code: errCode,\n        statusCode: operationResponse.status,\n        request: operationResponse.request,\n        response: operationResponse,\n      });\n      throw e;\n    }\n  }\n\n  return operationResponse;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationParameter, OperationSpec } from \"./interfaces.js\";\nimport { MapperTypeNames } from \"./serializer.js\";\n\n/**\n * Gets the list of status codes for streaming responses.\n * @internal\n */\nexport function getStreamingResponseStatusCodes(operationSpec: OperationSpec): Set<number> {\n  const result = new Set<number>();\n  for (const statusCode in operationSpec.responses) {\n    const operationResponse = operationSpec.responses[statusCode];\n    if (\n      operationResponse.bodyMapper &&\n      operationResponse.bodyMapper.type.name === MapperTypeNames.Stream\n    ) {\n      result.add(Number(statusCode));\n    }\n  }\n  return result;\n}\n\n/**\n * Get the path to this parameter's value as a dotted string (a.b.c).\n * @param parameter - The parameter to get the path string for.\n * @returns The path to this parameter's value as a dotted string.\n * @internal\n */\nexport function getPathStringFromParameter(parameter: OperationParameter): string {\n  const { parameterPath, mapper } = parameter;\n  let result: string;\n  if (typeof parameterPath === \"string\") {\n    result = parameterPath;\n  } else if (Array.isArray(parameterPath)) {\n    result = parameterPath.join(\".\");\n  } else {\n    result = mapper.serializedName!;\n  }\n  return result;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  DictionaryMapper,\n  OperationArguments,\n  OperationRequest,\n  OperationSpec,\n  RequiredSerializerOptions,\n  SerializerOptions,\n  XML_ATTRKEY,\n  XML_CHARKEY,\n  XmlOptions,\n} from \"./interfaces.js\";\nimport { PipelinePolicy, PipelineResponse, SendRequest } from \"@azure/core-rest-pipeline\";\nimport {\n  getOperationArgumentValueFromParameter,\n  getOperationRequestInfo,\n} from \"./operationHelpers.js\";\nimport { MapperTypeNames } from \"./serializer.js\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers.js\";\n\n/**\n * The programmatic identifier of the serializationPolicy.\n */\nexport const serializationPolicyName = \"serializationPolicy\";\n\n/**\n * Options to configure API request serialization.\n */\nexport interface SerializationPolicyOptions {\n  /**\n   * A function that is able to write XML. Required for XML support.\n   */\n  stringifyXML?: (obj: any, opts?: XmlOptions) => string;\n\n  /**\n   * Configures behavior of xml parser and builder.\n   */\n  serializerOptions?: SerializerOptions;\n}\n\n/**\n * This policy handles assembling the request body and headers using\n * an OperationSpec and OperationArguments on the request.\n */\nexport function serializationPolicy(options: SerializationPolicyOptions = {}): PipelinePolicy {\n  const stringifyXML = options.stringifyXML;\n\n  return {\n    name: serializationPolicyName,\n    async sendRequest(request: OperationRequest, next: SendRequest): Promise<PipelineResponse> {\n      const operationInfo = getOperationRequestInfo(request);\n      const operationSpec = operationInfo?.operationSpec;\n      const operationArguments = operationInfo?.operationArguments;\n      if (operationSpec && operationArguments) {\n        serializeHeaders(request, operationArguments, operationSpec);\n        serializeRequestBody(request, operationArguments, operationSpec, stringifyXML);\n      }\n      return next(request);\n    },\n  };\n}\n\n/**\n * @internal\n */\nexport function serializeHeaders(\n  request: OperationRequest,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec,\n): void {\n  if (operationSpec.headerParameters) {\n    for (const headerParameter of operationSpec.headerParameters) {\n      let headerValue = getOperationArgumentValueFromParameter(operationArguments, headerParameter);\n      if ((headerValue !== null && headerValue !== undefined) || headerParameter.mapper.required) {\n        headerValue = operationSpec.serializer.serialize(\n          headerParameter.mapper,\n          headerValue,\n          getPathStringFromParameter(headerParameter),\n        );\n        const headerCollectionPrefix = (headerParameter.mapper as DictionaryMapper)\n          .headerCollectionPrefix;\n        if (headerCollectionPrefix) {\n          for (const key of Object.keys(headerValue)) {\n            request.headers.set(headerCollectionPrefix + key, headerValue[key]);\n          }\n        } else {\n          request.headers.set(\n            headerParameter.mapper.serializedName || getPathStringFromParameter(headerParameter),\n            headerValue,\n          );\n        }\n      }\n    }\n  }\n  const customHeaders = operationArguments.options?.requestOptions?.customHeaders;\n  if (customHeaders) {\n    for (const customHeaderName of Object.keys(customHeaders)) {\n      request.headers.set(customHeaderName, customHeaders[customHeaderName]);\n    }\n  }\n}\n\n/**\n * @internal\n */\nexport function serializeRequestBody(\n  request: OperationRequest,\n  operationArguments: OperationArguments,\n  operationSpec: OperationSpec,\n  stringifyXML: (obj: any, opts?: XmlOptions) => string = function () {\n    throw new Error(\"XML serialization unsupported!\");\n  },\n): void {\n  const serializerOptions = operationArguments.options?.serializerOptions;\n  const updatedOptions: RequiredSerializerOptions = {\n    xml: {\n      rootName: serializerOptions?.xml.rootName ?? \"\",\n      includeRoot: serializerOptions?.xml.includeRoot ?? false,\n      xmlCharKey: serializerOptions?.xml.xmlCharKey ?? XML_CHARKEY,\n    },\n  };\n\n  const xmlCharKey = updatedOptions.xml.xmlCharKey;\n  if (operationSpec.requestBody && operationSpec.requestBody.mapper) {\n    request.body = getOperationArgumentValueFromParameter(\n      operationArguments,\n      operationSpec.requestBody,\n    );\n\n    const bodyMapper = operationSpec.requestBody.mapper;\n    const {\n      required,\n      serializedName,\n      xmlName,\n      xmlElementName,\n      xmlNamespace,\n      xmlNamespacePrefix,\n      nullable,\n    } = bodyMapper;\n    const typeName = bodyMapper.type.name;\n\n    try {\n      if (\n        (request.body !== undefined && request.body !== null) ||\n        (nullable && request.body === null) ||\n        required\n      ) {\n        const requestBodyParameterPathString: string = getPathStringFromParameter(\n          operationSpec.requestBody,\n        );\n        request.body = operationSpec.serializer.serialize(\n          bodyMapper,\n          request.body,\n          requestBodyParameterPathString,\n          updatedOptions,\n        );\n\n        const isStream = typeName === MapperTypeNames.Stream;\n\n        if (operationSpec.isXML) {\n          const xmlnsKey = xmlNamespacePrefix ? `xmlns:${xmlNamespacePrefix}` : \"xmlns\";\n          const value = getXmlValueWithNamespace(\n            xmlNamespace,\n            xmlnsKey,\n            typeName,\n            request.body,\n            updatedOptions,\n          );\n\n          if (typeName === MapperTypeNames.Sequence) {\n            request.body = stringifyXML(\n              prepareXMLRootList(\n                value,\n                xmlElementName || xmlName || serializedName!,\n                xmlnsKey,\n                xmlNamespace,\n              ),\n              { rootName: xmlName || serializedName, xmlCharKey },\n            );\n          } else if (!isStream) {\n            request.body = stringifyXML(value, {\n              rootName: xmlName || serializedName,\n              xmlCharKey,\n            });\n          }\n        } else if (\n          typeName === MapperTypeNames.String &&\n          (operationSpec.contentType?.match(\"text/plain\") || operationSpec.mediaType === \"text\")\n        ) {\n          // the String serializer has validated that request body is a string\n          // so just send the string.\n          return;\n        } else if (!isStream) {\n          request.body = JSON.stringify(request.body);\n        }\n      }\n    } catch (error: any) {\n      throw new Error(\n        `Error \"${error.message}\" occurred in serializing the payload - ${JSON.stringify(\n          serializedName,\n          undefined,\n          \"  \",\n        )}.`,\n      );\n    }\n  } else if (operationSpec.formDataParameters && operationSpec.formDataParameters.length > 0) {\n    request.formData = {};\n    for (const formDataParameter of operationSpec.formDataParameters) {\n      const formDataParameterValue = getOperationArgumentValueFromParameter(\n        operationArguments,\n        formDataParameter,\n      );\n      if (formDataParameterValue !== undefined && formDataParameterValue !== null) {\n        const formDataParameterPropertyName: string =\n          formDataParameter.mapper.serializedName || getPathStringFromParameter(formDataParameter);\n        request.formData[formDataParameterPropertyName] = operationSpec.serializer.serialize(\n          formDataParameter.mapper,\n          formDataParameterValue,\n          getPathStringFromParameter(formDataParameter),\n          updatedOptions,\n        );\n      }\n    }\n  }\n}\n\n/**\n * Adds an xml namespace to the xml serialized object if needed, otherwise it just returns the value itself\n */\nfunction getXmlValueWithNamespace(\n  xmlNamespace: string | undefined,\n  xmlnsKey: string,\n  typeName: string,\n  serializedValue: any,\n  options: RequiredSerializerOptions,\n): any {\n  // Composite and Sequence schemas already got their root namespace set during serialization\n  // We just need to add xmlns to the other schema types\n  if (xmlNamespace && ![\"Composite\", \"Sequence\", \"Dictionary\"].includes(typeName)) {\n    const result: any = {};\n    result[options.xml.xmlCharKey] = serializedValue;\n    result[XML_ATTRKEY] = { [xmlnsKey]: xmlNamespace };\n    return result;\n  }\n\n  return serializedValue;\n}\n\nfunction prepareXMLRootList(\n  obj: any,\n  elementName: string,\n  xmlNamespaceKey?: string,\n  xmlNamespace?: string,\n): { [key: string]: any[] } {\n  if (!Array.isArray(obj)) {\n    obj = [obj];\n  }\n  if (!xmlNamespaceKey || !xmlNamespace) {\n    return { [elementName]: obj };\n  }\n\n  const result = { [elementName]: obj };\n  result[XML_ATTRKEY] = { [xmlNamespaceKey]: xmlNamespace };\n  return result;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DeserializationPolicyOptions, deserializationPolicy } from \"./deserializationPolicy.js\";\nimport {\n  InternalPipelineOptions,\n  Pipeline,\n  bearerTokenAuthenticationPolicy,\n  createPipelineFromOptions,\n} from \"@azure/core-rest-pipeline\";\nimport { SerializationPolicyOptions, serializationPolicy } from \"./serializationPolicy.js\";\nimport { TokenCredential } from \"@azure/core-auth\";\n\n/**\n * Options for creating a Pipeline to use with ServiceClient.\n * Mostly for customizing the auth policy (if using token auth) or\n * the deserialization options when using XML.\n */\nexport interface InternalClientPipelineOptions extends InternalPipelineOptions {\n  /**\n   * Options to customize bearerTokenAuthenticationPolicy.\n   */\n  credentialOptions?: { credentialScopes: string | string[]; credential: TokenCredential };\n  /**\n   * Options to customize deserializationPolicy.\n   */\n  deserializationOptions?: DeserializationPolicyOptions;\n  /**\n   * Options to customize serializationPolicy.\n   */\n  serializationOptions?: SerializationPolicyOptions;\n}\n\n/**\n * Creates a new Pipeline for use with a Service Client.\n * Adds in deserializationPolicy by default.\n * Also adds in bearerTokenAuthenticationPolicy if passed a TokenCredential.\n * @param options - Options to customize the created pipeline.\n */\nexport function createClientPipeline(options: InternalClientPipelineOptions = {}): Pipeline {\n  const pipeline = createPipelineFromOptions(options ?? {});\n  if (options.credentialOptions) {\n    pipeline.addPolicy(\n      bearerTokenAuthenticationPolicy({\n        credential: options.credentialOptions.credential,\n        scopes: options.credentialOptions.credentialScopes,\n      }),\n    );\n  }\n\n  pipeline.addPolicy(serializationPolicy(options.serializationOptions), { phase: \"Serialize\" });\n  pipeline.addPolicy(deserializationPolicy(options.deserializationOptions), {\n    phase: \"Deserialize\",\n  });\n\n  return pipeline;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { HttpClient, createDefaultHttpClient } from \"@azure/core-rest-pipeline\";\n\nlet cachedHttpClient: HttpClient | undefined;\n\nexport function getCachedDefaultHttpClient(): HttpClient {\n  if (!cachedHttpClient) {\n    cachedHttpClient = createDefaultHttpClient();\n  }\n\n  return cachedHttpClient;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { OperationArguments, OperationSpec, QueryCollectionFormat } from \"./interfaces.js\";\nimport { getOperationArgumentValueFromParameter } from \"./operationHelpers.js\";\nimport { getPathStringFromParameter } from \"./interfaceHelpers.js\";\n\nconst CollectionFormatToDelimiterMap: { [key in QueryCollectionFormat]: string } = {\n  CSV: \",\",\n  SSV: \" \",\n  Multi: \"Multi\",\n  TSV: \"\\t\",\n  Pipes: \"|\",\n};\n\nexport function getRequestUrl(\n  baseUri: string,\n  operationSpec: OperationSpec,\n  operationArguments: OperationArguments,\n  fallbackObject: { [parameterName: string]: any },\n): string {\n  const urlReplacements = calculateUrlReplacements(\n    operationSpec,\n    operationArguments,\n    fallbackObject,\n  );\n\n  let isAbsolutePath = false;\n\n  let requestUrl = replaceAll(baseUri, urlReplacements);\n  if (operationSpec.path) {\n    let path = replaceAll(operationSpec.path, urlReplacements);\n    // QUIRK: sometimes we get a path component like /{nextLink}\n    // which may be a fully formed URL with a leading /. In that case, we should\n    // remove the leading /\n    if (operationSpec.path === \"/{nextLink}\" && path.startsWith(\"/\")) {\n      path = path.substring(1);\n    }\n    // QUIRK: sometimes we get a path component like {nextLink}\n    // which may be a fully formed URL. In that case, we should\n    // ignore the baseUri.\n    if (isAbsoluteUrl(path)) {\n      requestUrl = path;\n      isAbsolutePath = true;\n    } else {\n      requestUrl = appendPath(requestUrl, path);\n    }\n  }\n\n  const { queryParams, sequenceParams } = calculateQueryParameters(\n    operationSpec,\n    operationArguments,\n    fallbackObject,\n  );\n  /**\n   * Notice that this call sets the `noOverwrite` parameter to true if the `requestUrl`\n   * is an absolute path. This ensures that existing query parameter values in `requestUrl`\n   * do not get overwritten. On the other hand when `requestUrl` is not absolute path, it\n   * is still being built so there is nothing to overwrite.\n   */\n  requestUrl = appendQueryParams(requestUrl, queryParams, sequenceParams, isAbsolutePath);\n\n  return requestUrl;\n}\n\nfunction replaceAll(input: string, replacements: Map<string, string>): string {\n  let result = input;\n  for (const [searchValue, replaceValue] of replacements) {\n    result = result.split(searchValue).join(replaceValue);\n  }\n  return result;\n}\n\nfunction calculateUrlReplacements(\n  operationSpec: OperationSpec,\n  operationArguments: OperationArguments,\n  fallbackObject: { [parameterName: string]: any },\n): Map<string, string> {\n  const result = new Map<string, string>();\n  if (operationSpec.urlParameters?.length) {\n    for (const urlParameter of operationSpec.urlParameters) {\n      let urlParameterValue: string = getOperationArgumentValueFromParameter(\n        operationArguments,\n        urlParameter,\n        fallbackObject,\n      );\n      const parameterPathString = getPathStringFromParameter(urlParameter);\n      urlParameterValue = operationSpec.serializer.serialize(\n        urlParameter.mapper,\n        urlParameterValue,\n        parameterPathString,\n      );\n      if (!urlParameter.skipEncoding) {\n        urlParameterValue = encodeURIComponent(urlParameterValue);\n      }\n      result.set(\n        `{${urlParameter.mapper.serializedName || parameterPathString}}`,\n        urlParameterValue,\n      );\n    }\n  }\n  return result;\n}\n\nfunction isAbsoluteUrl(url: string): boolean {\n  return url.includes(\"://\");\n}\n\nfunction appendPath(url: string, pathToAppend?: string): string {\n  if (!pathToAppend) {\n    return url;\n  }\n\n  const parsedUrl = new URL(url);\n  let newPath = parsedUrl.pathname;\n\n  if (!newPath.endsWith(\"/\")) {\n    newPath = `${newPath}/`;\n  }\n\n  if (pathToAppend.startsWith(\"/\")) {\n    pathToAppend = pathToAppend.substring(1);\n  }\n\n  const searchStart = pathToAppend.indexOf(\"?\");\n  if (searchStart !== -1) {\n    const path = pathToAppend.substring(0, searchStart);\n    const search = pathToAppend.substring(searchStart + 1);\n    newPath = newPath + path;\n    if (search) {\n      parsedUrl.search = parsedUrl.search ? `${parsedUrl.search}&${search}` : search;\n    }\n  } else {\n    newPath = newPath + pathToAppend;\n  }\n\n  parsedUrl.pathname = newPath;\n\n  return parsedUrl.toString();\n}\n\nfunction calculateQueryParameters(\n  operationSpec: OperationSpec,\n  operationArguments: OperationArguments,\n  fallbackObject: { [parameterName: string]: any },\n): {\n  queryParams: Map<string, string | string[]>;\n  sequenceParams: Set<string>;\n} {\n  const result = new Map<string, string | string[]>();\n  const sequenceParams: Set<string> = new Set<string>();\n\n  if (operationSpec.queryParameters?.length) {\n    for (const queryParameter of operationSpec.queryParameters) {\n      if (queryParameter.mapper.type.name === \"Sequence\" && queryParameter.mapper.serializedName) {\n        sequenceParams.add(queryParameter.mapper.serializedName);\n      }\n      let queryParameterValue: string | string[] = getOperationArgumentValueFromParameter(\n        operationArguments,\n        queryParameter,\n        fallbackObject,\n      );\n      if (\n        (queryParameterValue !== undefined && queryParameterValue !== null) ||\n        queryParameter.mapper.required\n      ) {\n        queryParameterValue = operationSpec.serializer.serialize(\n          queryParameter.mapper,\n          queryParameterValue,\n          getPathStringFromParameter(queryParameter),\n        );\n\n        const delimiter = queryParameter.collectionFormat\n          ? CollectionFormatToDelimiterMap[queryParameter.collectionFormat]\n          : \"\";\n        if (Array.isArray(queryParameterValue)) {\n          // replace null and undefined\n          queryParameterValue = queryParameterValue.map((item) => {\n            if (item === null || item === undefined) {\n              return \"\";\n            }\n\n            return item;\n          });\n        }\n        if (queryParameter.collectionFormat === \"Multi\" && queryParameterValue.length === 0) {\n          continue;\n        } else if (\n          Array.isArray(queryParameterValue) &&\n          (queryParameter.collectionFormat === \"SSV\" || queryParameter.collectionFormat === \"TSV\")\n        ) {\n          queryParameterValue = queryParameterValue.join(delimiter);\n        }\n        if (!queryParameter.skipEncoding) {\n          if (Array.isArray(queryParameterValue)) {\n            queryParameterValue = queryParameterValue.map((item: string) => {\n              return encodeURIComponent(item);\n            });\n          } else {\n            queryParameterValue = encodeURIComponent(queryParameterValue);\n          }\n        }\n\n        // Join pipes and CSV *after* encoding, or the server will be upset.\n        if (\n          Array.isArray(queryParameterValue) &&\n          (queryParameter.collectionFormat === \"CSV\" || queryParameter.collectionFormat === \"Pipes\")\n        ) {\n          queryParameterValue = queryParameterValue.join(delimiter);\n        }\n\n        result.set(\n          queryParameter.mapper.serializedName || getPathStringFromParameter(queryParameter),\n          queryParameterValue,\n        );\n      }\n    }\n  }\n  return {\n    queryParams: result,\n    sequenceParams,\n  };\n}\n\nfunction simpleParseQueryParams(queryString: string): Map<string, string | string[] | undefined> {\n  const result: Map<string, string | string[] | undefined> = new Map<\n    string,\n    string | string[] | undefined\n  >();\n  if (!queryString || queryString[0] !== \"?\") {\n    return result;\n  }\n\n  // remove the leading ?\n  queryString = queryString.slice(1);\n  const pairs = queryString.split(\"&\");\n\n  for (const pair of pairs) {\n    const [name, value] = pair.split(\"=\", 2);\n    const existingValue = result.get(name);\n    if (existingValue) {\n      if (Array.isArray(existingValue)) {\n        existingValue.push(value);\n      } else {\n        result.set(name, [existingValue, value]);\n      }\n    } else {\n      result.set(name, value);\n    }\n  }\n\n  return result;\n}\n\n/** @internal */\nexport function appendQueryParams(\n  url: string,\n  queryParams: Map<string, string | string[]>,\n  sequenceParams: Set<string>,\n  noOverwrite: boolean = false,\n): string {\n  if (queryParams.size === 0) {\n    return url;\n  }\n\n  const parsedUrl = new URL(url);\n\n  // QUIRK: parsedUrl.searchParams will have their name/value pairs decoded, which\n  // can change their meaning to the server, such as in the case of a SAS signature.\n  // To avoid accidentally un-encoding a query param, we parse the key/values ourselves\n  const combinedParams = simpleParseQueryParams(parsedUrl.search);\n\n  for (const [name, value] of queryParams) {\n    const existingValue = combinedParams.get(name);\n    if (Array.isArray(existingValue)) {\n      if (Array.isArray(value)) {\n        existingValue.push(...value);\n        const valueSet = new Set(existingValue);\n        combinedParams.set(name, Array.from(valueSet));\n      } else {\n        existingValue.push(value);\n      }\n    } else if (existingValue) {\n      if (Array.isArray(value)) {\n        value.unshift(existingValue);\n      } else if (sequenceParams.has(name)) {\n        combinedParams.set(name, [existingValue, value]);\n      }\n      if (!noOverwrite) {\n        combinedParams.set(name, value);\n      }\n    } else {\n      combinedParams.set(name, value);\n    }\n  }\n\n  const searchPieces: string[] = [];\n  for (const [name, value] of combinedParams) {\n    if (typeof value === \"string\") {\n      searchPieces.push(`${name}=${value}`);\n    } else if (Array.isArray(value)) {\n      // QUIRK: If we get an array of values, include multiple key/value pairs\n      for (const subValue of value) {\n        searchPieces.push(`${name}=${subValue}`);\n      }\n    } else {\n      searchPieces.push(`${name}=${value}`);\n    }\n  }\n\n  // QUIRK: we have to set search manually as searchParams will encode comma when it shouldn't.\n  parsedUrl.search = searchPieces.length ? `?${searchPieces.join(\"&\")}` : \"\";\n  return parsedUrl.toString();\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\nexport const logger = createClientLogger(\"core-client\");\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  CommonClientOptions,\n  OperationArguments,\n  OperationRequest,\n  OperationSpec,\n} from \"./interfaces.js\";\nimport {\n  HttpClient,\n  Pipeline,\n  PipelineRequest,\n  PipelineResponse,\n  createPipelineRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { createClientPipeline } from \"./pipeline.js\";\nimport { flattenResponse } from \"./utils.js\";\nimport { getCachedDefaultHttpClient } from \"./httpClientCache.js\";\nimport { getOperationRequestInfo } from \"./operationHelpers.js\";\nimport { getRequestUrl } from \"./urlHelpers.js\";\nimport { getStreamingResponseStatusCodes } from \"./interfaceHelpers.js\";\nimport { logger } from \"./log.js\";\n\n/**\n * Options to be provided while creating the client.\n */\nexport interface ServiceClientOptions extends CommonClientOptions {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   * @deprecated This property is deprecated and will be removed soon, please use endpoint instead\n   */\n  baseUri?: string;\n  /**\n   * If specified, this is the endpoint that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   * to encourage customer to use endpoint, we mark the baseUri as deprecated.\n   */\n  endpoint?: string;\n  /**\n   * If specified, will be used to build the BearerTokenAuthenticationPolicy.\n   */\n  credentialScopes?: string | string[];\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  requestContentType?: string;\n  /**\n   * Credential used to authenticate the request.\n   */\n  credential?: TokenCredential;\n  /**\n   * A customized pipeline to use, otherwise a default one will be created.\n   */\n  pipeline?: Pipeline;\n}\n\n/**\n * Initializes a new instance of the ServiceClient.\n */\nexport class ServiceClient {\n  /**\n   * If specified, this is the base URI that requests will be made against for this ServiceClient.\n   * If it is not specified, then all OperationSpecs must contain a baseUrl property.\n   */\n  private readonly _endpoint?: string;\n\n  /**\n   * The default request content type for the service.\n   * Used if no requestContentType is present on an OperationSpec.\n   */\n  private readonly _requestContentType?: string;\n\n  /**\n   * Set to true if the request is sent over HTTP instead of HTTPS\n   */\n  private readonly _allowInsecureConnection?: boolean;\n\n  /**\n   * The HTTP client that will be used to send requests.\n   */\n  private readonly _httpClient: HttpClient;\n\n  /**\n   * The pipeline used by this client to make requests\n   */\n  public readonly pipeline: Pipeline;\n\n  /**\n   * The ServiceClient constructor\n   * @param credential - The credentials used for authentication with the service.\n   * @param options - The service client options that govern the behavior of the client.\n   */\n  constructor(options: ServiceClientOptions = {}) {\n    this._requestContentType = options.requestContentType;\n    this._endpoint = options.endpoint ?? options.baseUri;\n    if (options.baseUri) {\n      logger.warning(\n        \"The baseUri option for SDK Clients has been deprecated, please use endpoint instead.\",\n      );\n    }\n    this._allowInsecureConnection = options.allowInsecureConnection;\n    this._httpClient = options.httpClient || getCachedDefaultHttpClient();\n\n    this.pipeline = options.pipeline || createDefaultPipeline(options);\n    if (options.additionalPolicies?.length) {\n      for (const { policy, position } of options.additionalPolicies) {\n        // Sign happens after Retry and is commonly needed to occur\n        // before policies that intercept post-retry.\n        const afterPhase = position === \"perRetry\" ? \"Sign\" : undefined;\n        this.pipeline.addPolicy(policy, {\n          afterPhase,\n        });\n      }\n    }\n  }\n\n  /**\n   * Send the provided httpRequest.\n   */\n  async sendRequest(request: PipelineRequest): Promise<PipelineResponse> {\n    return this.pipeline.sendRequest(this._httpClient, request);\n  }\n\n  /**\n   * Send an HTTP request that is populated using the provided OperationSpec.\n   * @typeParam T - The typed result of the request, based on the OperationSpec.\n   * @param operationArguments - The arguments that the HTTP request's templated values will be populated from.\n   * @param operationSpec - The OperationSpec to use to populate the httpRequest.\n   */\n  async sendOperationRequest<T>(\n    operationArguments: OperationArguments,\n    operationSpec: OperationSpec,\n  ): Promise<T> {\n    const endpoint: string | undefined = operationSpec.baseUrl || this._endpoint;\n    if (!endpoint) {\n      throw new Error(\n        \"If operationSpec.baseUrl is not specified, then the ServiceClient must have a endpoint string property that contains the base URL to use.\",\n      );\n    }\n\n    // Templatized URLs sometimes reference properties on the ServiceClient child class,\n    // so we have to pass `this` below in order to search these properties if they're\n    // not part of OperationArguments\n    const url = getRequestUrl(endpoint, operationSpec, operationArguments, this);\n\n    const request: OperationRequest = createPipelineRequest({\n      url,\n    });\n    request.method = operationSpec.httpMethod;\n    const operationInfo = getOperationRequestInfo(request);\n    operationInfo.operationSpec = operationSpec;\n    operationInfo.operationArguments = operationArguments;\n\n    const contentType = operationSpec.contentType || this._requestContentType;\n    if (contentType && operationSpec.requestBody) {\n      request.headers.set(\"Content-Type\", contentType);\n    }\n\n    const options = operationArguments.options;\n    if (options) {\n      const requestOptions = options.requestOptions;\n\n      if (requestOptions) {\n        if (requestOptions.timeout) {\n          request.timeout = requestOptions.timeout;\n        }\n\n        if (requestOptions.onUploadProgress) {\n          request.onUploadProgress = requestOptions.onUploadProgress;\n        }\n\n        if (requestOptions.onDownloadProgress) {\n          request.onDownloadProgress = requestOptions.onDownloadProgress;\n        }\n\n        if (requestOptions.shouldDeserialize !== undefined) {\n          operationInfo.shouldDeserialize = requestOptions.shouldDeserialize;\n        }\n\n        if (requestOptions.allowInsecureConnection) {\n          request.allowInsecureConnection = true;\n        }\n      }\n\n      if (options.abortSignal) {\n        request.abortSignal = options.abortSignal;\n      }\n\n      if (options.tracingOptions) {\n        request.tracingOptions = options.tracingOptions;\n      }\n    }\n\n    if (this._allowInsecureConnection) {\n      request.allowInsecureConnection = true;\n    }\n\n    if (request.streamResponseStatusCodes === undefined) {\n      request.streamResponseStatusCodes = getStreamingResponseStatusCodes(operationSpec);\n    }\n\n    try {\n      const rawResponse = await this.sendRequest(request);\n      const flatResponse = flattenResponse(\n        rawResponse,\n        operationSpec.responses[rawResponse.status],\n      ) as T;\n      if (options?.onResponse) {\n        options.onResponse(rawResponse, flatResponse);\n      }\n      return flatResponse;\n    } catch (error: any) {\n      if (typeof error === \"object\" && error?.response) {\n        const rawResponse = error.response;\n        const flatResponse = flattenResponse(\n          rawResponse,\n          operationSpec.responses[error.statusCode] || operationSpec.responses[\"default\"],\n        );\n        error.details = flatResponse;\n        if (options?.onResponse) {\n          options.onResponse(rawResponse, flatResponse, error);\n        }\n      }\n      throw error;\n    }\n  }\n}\n\nfunction createDefaultPipeline(options: ServiceClientOptions): Pipeline {\n  const credentialScopes = getCredentialScopes(options);\n  const credentialOptions =\n    options.credential && credentialScopes\n      ? { credentialScopes, credential: options.credential }\n      : undefined;\n\n  return createClientPipeline({\n    ...options,\n    credentialOptions,\n  });\n}\n\nfunction getCredentialScopes(options: ServiceClientOptions): string | string[] | undefined {\n  if (options.credentialScopes) {\n    return options.credentialScopes;\n  }\n\n  if (options.endpoint) {\n    return `${options.endpoint}/.default`;\n  }\n\n  if (options.baseUri) {\n    return `${options.baseUri}/.default`;\n  }\n\n  if (options.credential && !options.credentialScopes) {\n    throw new Error(\n      `When using credentials, the ServiceClientOptions must contain either a endpoint or a credentialScopes. Unable to create a bearerTokenAuthenticationPolicy`,\n    );\n  }\n\n  return undefined;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AuthorizeRequestOnChallengeOptions } from \"@azure/core-rest-pipeline\";\nimport { logger as coreClientLogger } from \"./log.js\";\nimport { decodeStringToString } from \"./base64.js\";\n\n/**\n * Converts: `Bearer a=\"b\", c=\"d\", Bearer d=\"e\", f=\"g\"`.\n * Into: `[ { a: 'b', c: 'd' }, { d: 'e', f: 'g' } ]`.\n *\n * @internal\n */\nexport function parseCAEChallenge(challenges: string): any[] {\n  const bearerChallenges = `, ${challenges.trim()}`.split(\", Bearer \").filter((x) => x);\n  return bearerChallenges.map((challenge) => {\n    const challengeParts = `${challenge.trim()}, `.split('\", ').filter((x) => x);\n    const keyValuePairs = challengeParts.map((keyValue) =>\n      (([key, value]) => ({ [key]: value }))(keyValue.trim().split('=\"')),\n    );\n    // Key-value pairs to plain object:\n    return keyValuePairs.reduce((a, b) => ({ ...a, ...b }), {});\n  });\n}\n\n/**\n * CAE Challenge structure\n */\nexport interface CAEChallenge {\n  scope: string;\n  claims: string;\n}\n\n/**\n * This function can be used as a callback for the `bearerTokenAuthenticationPolicy` of `@azure/core-rest-pipeline`, to support CAE challenges:\n * [Continuous Access Evaluation](https://docs.microsoft.com/azure/active-directory/conditional-access/concept-continuous-access-evaluation).\n *\n * Call the `bearerTokenAuthenticationPolicy` with the following options:\n *\n * ```ts\n * import { bearerTokenAuthenticationPolicy } from \"@azure/core-rest-pipeline\";\n * import { authorizeRequestOnClaimChallenge } from \"@azure/core-client\";\n *\n * const bearerTokenAuthenticationPolicy = bearerTokenAuthenticationPolicy({\n *   authorizeRequestOnChallenge: authorizeRequestOnClaimChallenge\n * });\n * ```\n *\n * Once provided, the `bearerTokenAuthenticationPolicy` policy will internally handle Continuous Access Evaluation (CAE) challenges.\n * When it can't complete a challenge it will return the 401 (unauthorized) response from ARM.\n *\n * Example challenge with claims:\n *\n * ```\n * Bearer authorization_uri=\"https://login.windows-ppe.net/\", error=\"invalid_token\",\n * error_description=\"User session has been revoked\",\n * claims=\"eyJhY2Nlc3NfdG9rZW4iOnsibmJmIjp7ImVzc2VudGlhbCI6dHJ1ZSwgInZhbHVlIjoiMTYwMzc0MjgwMCJ9fX0=\"\n * ```\n */\nexport async function authorizeRequestOnClaimChallenge(\n  onChallengeOptions: AuthorizeRequestOnChallengeOptions,\n): Promise<boolean> {\n  const { scopes, response } = onChallengeOptions;\n  const logger = onChallengeOptions.logger || coreClientLogger;\n\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (!challenge) {\n    logger.info(\n      `The WWW-Authenticate header was missing. Failed to perform the Continuous Access Evaluation authentication flow.`,\n    );\n    return false;\n  }\n  const challenges: CAEChallenge[] = parseCAEChallenge(challenge) || [];\n\n  const parsedChallenge = challenges.find((x) => x.claims);\n  if (!parsedChallenge) {\n    logger.info(\n      `The WWW-Authenticate header was missing the necessary \"claims\" to perform the Continuous Access Evaluation authentication flow.`,\n    );\n    return false;\n  }\n\n  const accessToken = await onChallengeOptions.getAccessToken(\n    parsedChallenge.scope ? [parsedChallenge.scope] : scopes,\n    {\n      claims: decodeStringToString(parsedChallenge.claims),\n    },\n  );\n\n  if (!accessToken) {\n    return false;\n  }\n\n  onChallengeOptions.request.headers.set(\"Authorization\", `Bearer ${accessToken.token}`);\n  return true;\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  AuthorizeRequestOnChallengeOptions,\n  PipelineRequest,\n  PipelineResponse,\n} from \"@azure/core-rest-pipeline\";\n\nimport { GetTokenOptions } from \"@azure/core-auth\";\n\n/**\n * A set of constants used internally when processing requests.\n */\nconst Constants = {\n  DefaultScope: \"/.default\",\n  /**\n   * Defines constants for use with HTTP headers.\n   */\n  HeaderConstants: {\n    /**\n     * The Authorization header.\n     */\n    AUTHORIZATION: \"authorization\",\n  },\n};\n\nfunction isUuid(text: string): boolean {\n  return /^[0-9a-fA-F]{8}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{4}\\b-[0-9a-fA-F]{12}$/.test(\n    text,\n  );\n}\n\n/**\n * Defines a callback to handle auth challenge for Storage APIs.\n * This implements the bearer challenge process described here: https://docs.microsoft.com/rest/api/storageservices/authorize-with-azure-active-directory#bearer-challenge\n * Handling has specific features for storage that departs to the general AAD challenge docs.\n **/\nexport const authorizeRequestOnTenantChallenge: (\n  challengeOptions: AuthorizeRequestOnChallengeOptions,\n) => Promise<boolean> = async (challengeOptions) => {\n  const requestOptions = requestToOptions(challengeOptions.request);\n  const challenge = getChallenge(challengeOptions.response);\n  if (challenge) {\n    const challengeInfo: Challenge = parseChallenge(challenge);\n    const challengeScopes = buildScopes(challengeOptions, challengeInfo);\n    const tenantId = extractTenantId(challengeInfo);\n    if (!tenantId) {\n      return false;\n    }\n    const accessToken = await challengeOptions.getAccessToken(challengeScopes, {\n      ...requestOptions,\n      tenantId,\n    });\n\n    if (!accessToken) {\n      return false;\n    }\n\n    challengeOptions.request.headers.set(\n      Constants.HeaderConstants.AUTHORIZATION,\n      `Bearer ${accessToken.token}`,\n    );\n    return true;\n  }\n  return false;\n};\n\n/**\n * Extracts the tenant id from the challenge information\n * The tenant id is contained in the authorization_uri as the first\n * path part.\n */\nfunction extractTenantId(challengeInfo: Challenge): string | undefined {\n  const parsedAuthUri = new URL(challengeInfo.authorization_uri);\n  const pathSegments = parsedAuthUri.pathname.split(\"/\");\n  const tenantId = pathSegments[1];\n  if (tenantId && isUuid(tenantId)) {\n    return tenantId;\n  }\n  return undefined;\n}\n\n/**\n * Builds the authentication scopes based on the information that comes in the\n * challenge information. Scopes url is present in the resource_id, if it is empty\n * we keep using the original scopes.\n */\nfunction buildScopes(\n  challengeOptions: AuthorizeRequestOnChallengeOptions,\n  challengeInfo: Challenge,\n): string[] {\n  if (!challengeInfo.resource_id) {\n    return challengeOptions.scopes;\n  }\n\n  const challengeScopes = new URL(challengeInfo.resource_id);\n  challengeScopes.pathname = Constants.DefaultScope;\n  let scope = challengeScopes.toString();\n  if (scope === \"https://disk.azure.com/.default\") {\n    // the extra slash is required by the service\n    scope = \"https://disk.azure.com//.default\";\n  }\n  return [scope];\n}\n\n/**\n * We will retrieve the challenge only if the response status code was 401,\n * and if the response contained the header \"WWW-Authenticate\" with a non-empty value.\n */\nfunction getChallenge(response: PipelineResponse): string | undefined {\n  const challenge = response.headers.get(\"WWW-Authenticate\");\n  if (response.status === 401 && challenge) {\n    return challenge;\n  }\n  return;\n}\n\n/**\n * Challenge structure\n */\ninterface Challenge {\n  authorization_uri: string;\n  resource_id?: string;\n}\n\n/**\n * Converts: `Bearer a=\"b\" c=\"d\"`.\n * Into: `[ { a: 'b', c: 'd' }]`.\n *\n * @internal\n */\nfunction parseChallenge(challenge: string): Challenge {\n  const bearerChallenge = challenge.slice(\"Bearer \".length);\n  const challengeParts = `${bearerChallenge.trim()} `.split(\" \").filter((x) => x);\n  const keyValuePairs = challengeParts.map((keyValue) =>\n    (([key, value]) => ({ [key]: value }))(keyValue.trim().split(\"=\")),\n  );\n  // Key-value pairs to plain object:\n  return keyValuePairs.reduce((a, b) => ({ ...a, ...b }), {} as Challenge);\n}\n\n/**\n * Extracts the options form a Pipeline Request for later re-use\n */\nfunction requestToOptions(request: PipelineRequest): GetTokenOptions {\n  return {\n    abortSignal: request.abortSignal,\n    requestOptions: {\n      timeout: request.timeout,\n    },\n    tracingOptions: request.tracingOptions,\n  };\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport { createSerializer, MapperTypeNames } from \"./serializer.js\";\nexport { ServiceClient, ServiceClientOptions } from \"./serviceClient.js\";\nexport { createClientPipeline, InternalClientPipelineOptions } from \"./pipeline.js\";\nexport {\n  OperationSpec,\n  OperationArguments,\n  OperationOptions,\n  OperationResponseMap,\n  OperationParameter,\n  OperationQueryParameter,\n  OperationURLParameter,\n  Serializer,\n  BaseMapper,\n  Mapper,\n  MapperType,\n  SimpleMapperType,\n  EnumMapper,\n  EnumMapperType,\n  SequenceMapper,\n  SequenceMapperType,\n  DictionaryMapper,\n  DictionaryMapperType,\n  CompositeMapper,\n  CompositeMapperType,\n  MapperConstraints,\n  OperationRequest,\n  OperationRequestOptions,\n  OperationRequestInfo,\n  QueryCollectionFormat,\n  ParameterPath,\n  FullOperationResponse,\n  PolymorphicDiscriminator,\n  SpanConfig,\n  XML_ATTRKEY,\n  XML_CHARKEY,\n  XmlOptions,\n  SerializerOptions,\n  RawResponseCallback,\n  CommonClientOptions,\n  AdditionalPolicyConfig,\n} from \"./interfaces.js\";\nexport {\n  deserializationPolicy,\n  deserializationPolicyName,\n  DeserializationPolicyOptions,\n  DeserializationContentTypes,\n} from \"./deserializationPolicy.js\";\nexport {\n  serializationPolicy,\n  serializationPolicyName,\n  SerializationPolicyOptions,\n} from \"./serializationPolicy.js\";\nexport { authorizeRequestOnClaimChallenge } from \"./authorizeRequestOnClaimChallenge.js\";\nexport { authorizeRequestOnTenantChallenge } from \"./authorizeRequestOnTenantChallenge.js\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport function getIdentityTokenEndpointSuffix(tenantId: string): string {\n  if (tenantId === \"adfs\") {\n    return \"oauth2/token\";\n  } else {\n    return \"oauth2/v2.0/token\";\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const DefaultScopeSuffix = \"/.default\";\nexport const imdsHost = \"http://169.254.169.254\";\nexport const imdsEndpointPath = \"/metadata/identity/oauth2/token\";\nexport const imdsApiVersion = \"2018-02-01\";\nexport const azureArcAPIVersion = \"2019-11-01\";\nexport const azureFabricVersion = \"2019-07-01-preview\";\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { DefaultScopeSuffix } from \"./constants\";\n\n/**\n * Most MSIs send requests to the IMDS endpoint, or a similar endpoint.\n * These are GET requests that require sending a `resource` parameter on the query.\n * This resource can be derived from the scopes received through the getToken call, as long as only one scope is received.\n * Multiple scopes assume that the resulting token will have access to multiple resources, which won't be the case.\n *\n * For that reason, when we encounter multiple scopes, we return undefined.\n * It's up to the individual MSI implementations to throw the errors (which helps us provide less generic errors).\n */\nexport function mapScopesToResource(scopes: string | string[]): string | undefined {\n  let scope = \"\";\n  if (Array.isArray(scopes)) {\n    if (scopes.length !== 1) {\n      return;\n    }\n\n    scope = scopes[0];\n  } else if (typeof scopes === \"string\") {\n    scope = scopes;\n  }\n\n  if (!scope.endsWith(DefaultScopeSuffix)) {\n    return scope;\n  }\n\n  return scope.substr(0, scope.lastIndexOf(DefaultScopeSuffix));\n}\n\n/**\n * Internal type roughly matching the raw responses of the authentication endpoints.\n *\n * @internal\n */\nexport interface TokenResponseParsedBody {\n  access_token?: string;\n  refresh_token?: string;\n  expires_in: number;\n  expires_on?: number | string;\n  refresh_in?: number;\n}\n\n/**\n * Given a token response, return the expiration timestamp as the number of milliseconds from the Unix epoch.\n * @param body - A parsed response body from the authentication endpoint.\n */\nexport function parseExpirationTimestamp(body: TokenResponseParsedBody): number {\n  if (typeof body.expires_on === \"number\") {\n    return body.expires_on * 1000;\n  }\n\n  if (typeof body.expires_on === \"string\") {\n    const asNumber = +body.expires_on;\n    if (!isNaN(asNumber)) {\n      return asNumber * 1000;\n    }\n\n    const asDate = Date.parse(body.expires_on);\n    if (!isNaN(asDate)) {\n      return asDate;\n    }\n  }\n\n  if (typeof body.expires_in === \"number\") {\n    return Date.now() + body.expires_in * 1000;\n  }\n\n  throw new Error(\n    `Failed to parse token expiration from body. expires_in=\"${body.expires_in}\", expires_on=\"${body.expires_on}\"`\n  );\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport type { INetworkModule, NetworkRequestOptions, NetworkResponse } from \"@azure/msal-node\";\nimport { AccessToken, GetTokenOptions } from \"@azure/core-auth\";\nimport { ServiceClient } from \"@azure/core-client\";\nimport { isNode } from \"@azure/core-util\";\nimport {\n  PipelineRequest,\n  PipelineResponse,\n  createHttpHeaders,\n  createPipelineRequest,\n} from \"@azure/core-rest-pipeline\";\nimport { AbortController, AbortSignalLike } from \"@azure/abort-controller\";\nimport { AuthenticationError, AuthenticationErrorName } from \"../errors\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { DefaultAuthorityHost, SDK_VERSION } from \"../constants\";\nimport { tracingClient } from \"../util/tracing\";\nimport { logger } from \"../util/logging\";\nimport { TokenCredentialOptions } from \"../tokenCredentialOptions\";\nimport {\n  TokenResponseParsedBody,\n  parseExpirationTimestamp,\n} from \"../credentials/managedIdentityCredential/utils\";\n\nconst noCorrelationId = \"noCorrelationId\";\n\n/**\n * An internal type used to communicate details of a token request's\n * response that should not be sent back as part of the access token.\n */\nexport interface TokenResponse {\n  /**\n   * The AccessToken to be returned from getToken.\n   */\n  accessToken: AccessToken;\n  /**\n   * The refresh token if the 'offline_access' scope was used.\n   */\n  refreshToken?: string;\n}\n\n/**\n * @internal\n */\nexport function getIdentityClientAuthorityHost(options?: TokenCredentialOptions): string {\n  // The authorityHost can come from options or from the AZURE_AUTHORITY_HOST environment variable.\n  let authorityHost = options?.authorityHost;\n\n  // The AZURE_AUTHORITY_HOST environment variable can only be provided in Node.js.\n  if (isNode) {\n    authorityHost = authorityHost ?? process.env.AZURE_AUTHORITY_HOST;\n  }\n\n  // If the authorityHost is not provided, we use the default one from the public cloud: https://login.microsoftonline.com\n  return authorityHost ?? DefaultAuthorityHost;\n}\n\n/**\n * The network module used by the Identity credentials.\n *\n * It allows for credentials to abort any pending request independently of the MSAL flow,\n * by calling to the `abortRequests()` method.\n *\n */\nexport class IdentityClient extends ServiceClient implements INetworkModule {\n  public authorityHost: string;\n  private allowLoggingAccountIdentifiers?: boolean;\n  private abortControllers: Map<string, AbortController[] | undefined>;\n  // used for WorkloadIdentity\n  private tokenCredentialOptions: TokenCredentialOptions;\n\n  constructor(options?: TokenCredentialOptions) {\n    const packageDetails = `azsdk-js-identity/${SDK_VERSION}`;\n    const userAgentPrefix = options?.userAgentOptions?.userAgentPrefix\n      ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`\n      : `${packageDetails}`;\n\n    const baseUri = getIdentityClientAuthorityHost(options);\n    if (!baseUri.startsWith(\"https:\")) {\n      throw new Error(\"The authorityHost address must use the 'https' protocol.\");\n    }\n\n    super({\n      requestContentType: \"application/json; charset=utf-8\",\n      retryOptions: {\n        maxRetries: 3,\n      },\n      ...options,\n      userAgentOptions: {\n        userAgentPrefix,\n      },\n      baseUri,\n    });\n\n    this.authorityHost = baseUri;\n    this.abortControllers = new Map();\n    this.allowLoggingAccountIdentifiers = options?.loggingOptions?.allowLoggingAccountIdentifiers;\n    // used for WorkloadIdentity\n    this.tokenCredentialOptions = { ...options };\n  }\n\n  async sendTokenRequest(request: PipelineRequest): Promise<TokenResponse | null> {\n    logger.info(`IdentityClient: sending token request to [${request.url}]`);\n    const response = await this.sendRequest(request);\n\n    if (response.bodyAsText && (response.status === 200 || response.status === 201)) {\n      const parsedBody: TokenResponseParsedBody = JSON.parse(response.bodyAsText);\n\n      if (!parsedBody.access_token) {\n        return null;\n      }\n\n      this.logIdentifiers(response);\n\n      const token = {\n        accessToken: {\n          token: parsedBody.access_token,\n          expiresOnTimestamp: parseExpirationTimestamp(parsedBody),\n        },\n        refreshToken: parsedBody.refresh_token,\n      };\n\n      logger.info(\n        `IdentityClient: [${request.url}] token acquired, expires on ${token.accessToken.expiresOnTimestamp}`\n      );\n      return token;\n    } else {\n      const error = new AuthenticationError(response.status, response.bodyAsText);\n      logger.warning(\n        `IdentityClient: authentication error. HTTP status: ${response.status}, ${error.errorResponse.errorDescription}`\n      );\n      throw error;\n    }\n  }\n\n  async refreshAccessToken(\n    tenantId: string,\n    clientId: string,\n    scopes: string,\n    refreshToken: string | undefined,\n    clientSecret: string | undefined,\n    options: GetTokenOptions = {}\n  ): Promise<TokenResponse | null> {\n    if (refreshToken === undefined) {\n      return null;\n    }\n    logger.info(\n      `IdentityClient: refreshing access token with client ID: ${clientId}, scopes: ${scopes} started`\n    );\n\n    const refreshParams = {\n      grant_type: \"refresh_token\",\n      client_id: clientId,\n      refresh_token: refreshToken,\n      scope: scopes,\n    };\n\n    if (clientSecret !== undefined) {\n      (refreshParams as any).client_secret = clientSecret;\n    }\n\n    const query = new URLSearchParams(refreshParams);\n\n    return tracingClient.withSpan(\n      \"IdentityClient.refreshAccessToken\",\n      options,\n      async (updatedOptions) => {\n        try {\n          const urlSuffix = getIdentityTokenEndpointSuffix(tenantId);\n          const request = createPipelineRequest({\n            url: `${this.authorityHost}/${tenantId}/${urlSuffix}`,\n            method: \"POST\",\n            body: query.toString(),\n            abortSignal: options.abortSignal,\n            headers: createHttpHeaders({\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n            }),\n            tracingOptions: updatedOptions.tracingOptions,\n          });\n\n          const response = await this.sendTokenRequest(request);\n          logger.info(`IdentityClient: refreshed token for client ID: ${clientId}`);\n          return response;\n        } catch (err: any) {\n          if (\n            err.name === AuthenticationErrorName &&\n            err.errorResponse.error === \"interaction_required\"\n          ) {\n            // It's likely that the refresh token has expired, so\n            // return null so that the credential implementation will\n            // initiate the authentication flow again.\n            logger.info(`IdentityClient: interaction required for client ID: ${clientId}`);\n            return null;\n          } else {\n            logger.warning(\n              `IdentityClient: failed refreshing token for client ID: ${clientId}: ${err}`\n            );\n            throw err;\n          }\n        }\n      }\n    );\n  }\n\n  // Here is a custom layer that allows us to abort requests that go through MSAL,\n  // since MSAL doesn't allow us to pass options all the way through.\n\n  generateAbortSignal(correlationId: string): AbortSignalLike {\n    const controller = new AbortController();\n    const controllers = this.abortControllers.get(correlationId) || [];\n    controllers.push(controller);\n    this.abortControllers.set(correlationId, controllers);\n    const existingOnAbort = controller.signal.onabort;\n    controller.signal.onabort = (...params) => {\n      this.abortControllers.set(correlationId, undefined);\n      if (existingOnAbort) {\n        existingOnAbort(...params);\n      }\n    };\n    return controller.signal;\n  }\n\n  abortRequests(correlationId?: string): void {\n    const key = correlationId || noCorrelationId;\n    const controllers = [\n      ...(this.abortControllers.get(key) || []),\n      // MSAL passes no correlation ID to the get requests...\n      ...(this.abortControllers.get(noCorrelationId) || []),\n    ];\n    if (!controllers.length) {\n      return;\n    }\n    for (const controller of controllers) {\n      controller.abort();\n    }\n    this.abortControllers.set(key, undefined);\n  }\n\n  getCorrelationId(options?: NetworkRequestOptions): string {\n    const parameter = options?.body\n      ?.split(\"&\")\n      .map((part) => part.split(\"=\"))\n      .find(([key]) => key === \"client-request-id\");\n    return parameter && parameter.length ? parameter[1] || noCorrelationId : noCorrelationId;\n  }\n\n  // The MSAL network module methods follow\n\n  async sendGetRequestAsync<T>(\n    url: string,\n    options?: NetworkRequestOptions\n  ): Promise<NetworkResponse<T>> {\n    const request = createPipelineRequest({\n      url,\n      method: \"GET\",\n      body: options?.body,\n      headers: createHttpHeaders(options?.headers),\n      abortSignal: this.generateAbortSignal(noCorrelationId),\n    });\n\n    const response = await this.sendRequest(request);\n\n    this.logIdentifiers(response);\n\n    return {\n      body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,\n      headers: response.headers.toJSON(),\n      status: response.status,\n    };\n  }\n\n  async sendPostRequestAsync<T>(\n    url: string,\n    options?: NetworkRequestOptions\n  ): Promise<NetworkResponse<T>> {\n    const request = createPipelineRequest({\n      url,\n      method: \"POST\",\n      body: options?.body,\n      headers: createHttpHeaders(options?.headers),\n      // MSAL doesn't send the correlation ID on the get requests.\n      abortSignal: this.generateAbortSignal(this.getCorrelationId(options)),\n    });\n\n    const response = await this.sendRequest(request);\n\n    this.logIdentifiers(response);\n\n    return {\n      body: response.bodyAsText ? JSON.parse(response.bodyAsText) : undefined,\n      headers: response.headers.toJSON(),\n      status: response.status,\n    };\n  }\n\n  /**\n   *\n   * @internal\n   */\n  getTokenCredentialOptions(): TokenCredentialOptions {\n    return this.tokenCredentialOptions;\n  }\n  /**\n   * If allowLoggingAccountIdentifiers was set on the constructor options\n   * we try to log the account identifiers by parsing the received access token.\n   *\n   * The account identifiers we try to log are:\n   * - `appid`: The application or Client Identifier.\n   * - `upn`: User Principal Name.\n   *   - It might not be available in some authentication scenarios.\n   *   - If it's not available, we put a placeholder: \"No User Principal Name available\".\n   * - `tid`: Tenant Identifier.\n   * - `oid`: Object Identifier of the authenticated user.\n   */\n  private logIdentifiers(response: PipelineResponse): void {\n    if (!this.allowLoggingAccountIdentifiers || !response.bodyAsText) {\n      return;\n    }\n    const unavailableUpn = \"No User Principal Name available\";\n    try {\n      const parsed = (response as any).parsedBody || JSON.parse(response.bodyAsText);\n      const accessToken = parsed.access_token;\n      if (!accessToken) {\n        // Without an access token allowLoggingAccountIdentifiers isn't useful.\n        return;\n      }\n      const base64Metadata = accessToken.split(\".\")[1];\n      const { appid, upn, tid, oid } = JSON.parse(\n        Buffer.from(base64Metadata, \"base64\").toString(\"utf8\")\n      );\n\n      logger.info(\n        `[Authenticated account] Client ID: ${appid}. Tenant ID: ${tid}. User Principal Name: ${\n          upn || unavailableUpn\n        }. Object ID (user): ${oid}`\n      );\n    } catch (e: any) {\n      logger.warning(\n        \"allowLoggingAccountIdentifiers was set, but we couldn't log the account information. Error:\",\n        e.message\n      );\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatError, formatSuccess } from \"../util/logging\";\nimport {\n  processMultiTenantRequest,\n  resolveAdditionallyAllowedTenantIds,\n} from \"../util/tenantIdUtils\";\nimport { ClientSecretCredentialOptions } from \"./clientSecretCredentialOptions\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { tracingClient } from \"../util/tracing\";\n\nconst logger = credentialLogger(\"ClientSecretCredential\");\n\n// This credential is exported on browser bundles for development purposes.\n// For this credential to work in browsers, browsers would need to have security features disabled.\n// Please do not disable your browser security features.\n\n/**\n * Enables authentication to Azure Active Directory using a client secret\n * that was generated for an App Registration.  More information on how\n * to configure a client secret can be found here:\n *\n * https://learn.microsoft.com/en-us/azure/active-directory/develop/quickstart-configure-app-access-web-apis#add-credentials-to-your-web-application\n *\n */\nexport class ClientSecretCredential implements TokenCredential {\n  private identityClient: IdentityClient;\n  private tenantId: string;\n  private additionallyAllowedTenantIds: string[];\n  private clientId: string;\n  private clientSecret: string;\n\n  /**\n   * Creates an instance of the ClientSecretCredential with the details\n   * needed to authenticate against Azure Active Directory with a client\n   * secret.\n   *\n   * @param tenantId - The Azure Active Directory tenant (directory) ID.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param clientSecret - A client secret that was generated for the App Registration.\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    tenantId: string,\n    clientId: string,\n    clientSecret: string,\n    options?: ClientSecretCredentialOptions\n  ) {\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantId;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(\n      options?.additionallyAllowedTenants\n    );\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  public async getToken(\n    scopes: string | string[],\n    options: GetTokenOptions = {}\n  ): Promise<AccessToken | null> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.getToken`,\n      options,\n      async (newOptions) => {\n        const tenantId = processMultiTenantRequest(\n          this.tenantId,\n          newOptions,\n          this.additionallyAllowedTenantIds\n        );\n\n        const query = new URLSearchParams({\n          response_type: \"token\",\n          grant_type: \"client_credentials\",\n          client_id: this.clientId,\n          client_secret: this.clientSecret,\n          scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \"),\n        });\n\n        try {\n          const urlSuffix = getIdentityTokenEndpointSuffix(tenantId!);\n          const request = createPipelineRequest({\n            url: `${this.identityClient.authorityHost}/${tenantId!}/${urlSuffix}`,\n            method: \"POST\",\n            body: query.toString(),\n            headers: createHttpHeaders({\n              Accept: \"application/json\",\n              \"Content-Type\": \"application/x-www-form-urlencoded\",\n            }),\n            abortSignal: options && options.abortSignal,\n            tracingOptions: newOptions?.tracingOptions,\n          });\n\n          const tokenResponse = await this.identityClient.sendTokenRequest(request);\n          logger.getToken.info(formatSuccess(scopes));\n          return (tokenResponse && tokenResponse.accessToken) || null;\n        } catch (err: any) {\n          logger.getToken.info(formatError(scopes, err));\n          throw err;\n        }\n      }\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"EnvironmentCredential is not supported in the browser.\"\n);\nconst logger = credentialLogger(\"EnvironmentCredential\");\n\n/**\n * Enables authentication to Azure Active Directory using client secret\n * details configured in environment variables\n */\nexport class EnvironmentCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"ClientCertificateCredential is not supported in the browser.\"\n);\nconst logger = credentialLogger(\"ClientCertificateCredential\");\n\n/**\n * Enables authentication to Azure Active Directory using a PEM-encoded\n * certificate that is assigned to an App Registration.\n */\nexport class ClientCertificateCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"ClientAssertionCredential is not supported in the browser.\"\n);\nconst logger = credentialLogger(\"ClientAssertionCredential\");\n\n/**\n * Authenticates a service principal with a JWT assertion.\n */\nexport class ClientAssertionCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\"AzureCliCredential is not supported in the browser.\");\nconst logger = credentialLogger(\"AzureCliCredential\");\n\n/**\n * This credential will use the currently logged-in user login information\n * via the Azure CLI ('az') commandline tool.\n */\nexport class AzureCliCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"AzureDeveloperCliCredential is not supported in the browser.\"\n);\nconst logger = credentialLogger(\"AzureDeveloperCliCredential\");\n\n/**\n * This credential will use the currently logged-in user login information\n * via the Azure Developer CLI ('azd') commandline tool.\n */\nexport class AzureDeveloperCliCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as msalBrowser from \"@azure/msal-browser\";\nimport { AuthenticationRequiredError, CredentialUnavailableError } from \"../../errors\";\nimport { MsalBaseUtilities, getAuthority, getKnownAuthorities } from \"../utils\";\nimport { MsalFlow, MsalFlowOptions } from \"../flows\";\nimport {\n  processMultiTenantRequest,\n  resolveAdditionallyAllowedTenantIds,\n  resolveTenantId,\n} from \"../../util/tenantIdUtils\";\nimport { AccessToken } from \"@azure/core-auth\";\nimport { AuthenticationRecord } from \"../types\";\nimport { BrowserLoginStyle } from \"../../credentials/interactiveBrowserCredentialOptions\";\nimport { CredentialFlowGetTokenOptions } from \"../credentials\";\nimport { DefaultTenantId } from \"../../constants\";\nimport { MultiTenantTokenCredentialOptions } from \"../../credentials/multiTenantTokenCredentialOptions\";\nimport { LogPolicyOptions } from \"@azure/core-rest-pipeline\";\n\n/**\n * Union of the constructor parameters that all MSAL flow types take.\n * Some properties might not be used by some flow types.\n */\nexport interface MsalBrowserFlowOptions extends MsalFlowOptions {\n  tokenCredentialOptions: MultiTenantTokenCredentialOptions;\n  redirectUri?: string;\n  loginStyle: BrowserLoginStyle;\n  loginHint?: string;\n  /**\n   * Allows users to configure settings for logging policy options, allow logging account information and personally identifiable information for customer support.\n   */\n  loggingOptions?: LogPolicyOptions & {\n    /**\n     * Allows logging account information once the authentication flow succeeds.\n     */\n    allowLoggingAccountIdentifiers?: boolean;\n    /**\n     * Allows logging personally identifiable information for customer support.\n     */\n    enableUnsafeSupportLogging?: boolean;\n  };\n}\n\n/**\n * The common methods we use to work with the MSAL browser flows.\n * @internal\n */\nexport interface MsalBrowserFlow extends MsalFlow {\n  login(scopes?: string[]): Promise<AuthenticationRecord | undefined>;\n  handleRedirect(): Promise<AuthenticationRecord | undefined>;\n}\n\n/**\n * Generates a MSAL configuration that generally works for browsers\n * @internal\n */\nexport function defaultBrowserMsalConfig(\n  options: MsalBrowserFlowOptions\n): msalBrowser.Configuration {\n  const tenantId = options.tenantId || DefaultTenantId;\n  const authority = getAuthority(tenantId, options.authorityHost);\n  return {\n    auth: {\n      clientId: options.clientId!,\n      authority,\n      knownAuthorities: getKnownAuthorities(tenantId, authority, options.disableInstanceDiscovery),\n      // If the users picked redirect as their login style,\n      // but they didn't provide a redirectUri,\n      // we can try to use the current page we're in as a default value.\n      redirectUri: options.redirectUri || self.location.origin,\n    },\n  };\n}\n\n/**\n * MSAL partial base client for the browsers.\n *\n * It completes the input configuration with some default values.\n * It also provides with utility protected methods that can be used from any of the clients,\n * which includes handlers for successful responses and errors.\n *\n * @internal\n */\nexport abstract class MsalBrowser extends MsalBaseUtilities implements MsalBrowserFlow {\n  protected loginStyle: BrowserLoginStyle;\n  protected clientId: string;\n  protected tenantId: string;\n  protected additionallyAllowedTenantIds: string[];\n  protected authorityHost?: string;\n  protected account: AuthenticationRecord | undefined;\n  protected msalConfig: msalBrowser.Configuration;\n  protected disableAutomaticAuthentication?: boolean;\n  protected app?: msalBrowser.IPublicClientApplication;\n\n  constructor(options: MsalBrowserFlowOptions) {\n    super(options);\n    this.logger = options.logger;\n    this.loginStyle = options.loginStyle;\n    if (!options.clientId) {\n      throw new CredentialUnavailableError(\"A client ID is required in browsers\");\n    }\n    this.clientId = options.clientId;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(\n      options?.tokenCredentialOptions?.additionallyAllowedTenants\n    );\n    this.tenantId = resolveTenantId(this.logger, options.tenantId, options.clientId);\n    this.authorityHost = options.authorityHost;\n    this.msalConfig = defaultBrowserMsalConfig(options);\n    this.disableAutomaticAuthentication = options.disableAutomaticAuthentication;\n\n    if (options.authenticationRecord) {\n      this.account = {\n        ...options.authenticationRecord,\n        tenantId: this.tenantId,\n      };\n    }\n  }\n\n  /**\n   * In the browsers we don't need to init()\n   */\n  async init(): Promise<void> {\n    // Nothing to do here.\n  }\n\n  /**\n   * Attempts to handle a redirection request the least amount of times possible.\n   */\n  public abstract handleRedirect(): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Clears MSAL's cache.\n   */\n  async logout(): Promise<void> {\n    this.app?.logout();\n  }\n\n  /**\n   * Uses MSAL to retrieve the active account.\n   */\n  public abstract getActiveAccount(): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Uses MSAL to trigger a redirect or a popup login.\n   */\n  public abstract login(scopes?: string | string[]): Promise<AuthenticationRecord | undefined>;\n\n  /**\n   * Attempts to retrieve a token from cache.\n   */\n  public abstract getTokenSilent(scopes: string[]): Promise<AccessToken>;\n\n  /**\n   * Attempts to retrieve the token in the browser.\n   */\n  protected abstract doGetToken(scopes: string[]): Promise<AccessToken>;\n\n  /**\n   * Attempts to retrieve an authenticated token from MSAL.\n   */\n  public async getToken(\n    scopes: string[],\n    options: CredentialFlowGetTokenOptions = {}\n  ): Promise<AccessToken> {\n    const tenantId =\n      processMultiTenantRequest(this.tenantId, options, this.additionallyAllowedTenantIds) ||\n      this.tenantId;\n\n    if (!options.authority) {\n      options.authority = getAuthority(tenantId, this.authorityHost);\n    }\n\n    // We ensure that redirection is handled at this point.\n    await this.handleRedirect();\n\n    if (!(await this.getActiveAccount()) && !this.disableAutomaticAuthentication) {\n      await this.login(scopes);\n    }\n    return this.getTokenSilent(scopes).catch((err) => {\n      if (err.name !== \"AuthenticationRequiredError\") {\n        throw err;\n      }\n      if (options?.disableAutomaticAuthentication) {\n        throw new AuthenticationRequiredError({\n          scopes,\n          getTokenOptions: options,\n          message:\n            \"Automatic authentication has been disabled. You may call the authentication() method.\",\n        });\n      }\n      this.logger.info(\n        `Silent authentication failed, falling back to interactive method ${this.loginStyle}`\n      );\n      return this.doGetToken(scopes);\n    });\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport * as msalBrowser from \"@azure/msal-browser\";\n\nimport { MsalBrowser, MsalBrowserFlowOptions } from \"./msalBrowserCommon\";\nimport { defaultLoggerCallback, getMSALLogLevel, msalToPublic, publicToMsal } from \"../utils\";\n\nimport { AccessToken } from \"@azure/core-auth\";\nimport { AuthenticationRecord } from \"../types\";\nimport { AuthenticationRequiredError } from \"../../errors\";\nimport { CredentialFlowGetTokenOptions } from \"../credentials\";\nimport { getLogLevel } from \"@azure/logger\";\n\n// We keep a copy of the redirect hash.\nconst redirectHash = self.location.hash;\n\n/**\n * Uses MSAL Browser 2.X for browser authentication,\n * which uses the [Auth Code Flow](https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n * @internal\n */\nexport class MSALAuthCode extends MsalBrowser {\n  protected app?: msalBrowser.IPublicClientApplication;\n  private loginHint?: string;\n\n  /**\n   * Sets up an MSAL object based on the given parameters.\n   * MSAL with Auth Code allows sending a previously obtained `authenticationRecord` through the optional parameters,\n   * which is set to be the active account.\n   * @param options - Parameters necessary and otherwise used to create the MSAL object.\n   */\n  constructor(options: MsalBrowserFlowOptions) {\n    super(options);\n    this.loginHint = options.loginHint;\n\n    this.msalConfig.cache = {\n      cacheLocation: \"sessionStorage\",\n      storeAuthStateInCookie: true, // Set to true to improve the experience on IE11 and Edge.\n    };\n    this.msalConfig.system = {\n      loggerOptions: {\n        loggerCallback: defaultLoggerCallback(this.logger, \"Browser\"),\n        logLevel: getMSALLogLevel(getLogLevel()),\n        piiLoggingEnabled: options.loggingOptions?.enableUnsafeSupportLogging,\n      },\n    };\n  }\n\n  private async getApp(): Promise<msalBrowser.IPublicClientApplication> {\n    if (!this.app) {\n      // Prepare the MSAL application\n      this.app = await msalBrowser.PublicClientApplication.createPublicClientApplication(\n        this.msalConfig as msalBrowser.Configuration\n      );\n\n      // setting the account right after the app is created.\n      if (this.account) {\n        this.app.setActiveAccount(publicToMsal(this.account));\n      }\n    }\n\n    return this.app;\n  }\n\n  /**\n   * Loads the account based on the result of the authentication.\n   * If no result was received, tries to load the account from the cache.\n   * @param result - Result object received from MSAL.\n   */\n  private async handleBrowserResult(\n    result?: msalBrowser.AuthenticationResult\n  ): Promise<AuthenticationRecord | undefined> {\n    try {\n      const app = await this.getApp();\n      if (result && result.account) {\n        this.logger.info(`MSAL Browser V2 authentication successful.`);\n        app.setActiveAccount(result.account);\n        return msalToPublic(this.clientId, result.account);\n      }\n\n      // If by this point we happen to have an active account, we should stop trying to parse this.\n      const activeAccount = await this.app!.getActiveAccount();\n      if (activeAccount) {\n        return msalToPublic(this.clientId, activeAccount);\n      }\n\n      // If we don't have an active account, we try to activate it from all the already loaded accounts.\n      const accounts = app.getAllAccounts();\n      if (accounts.length > 1) {\n        // If there's more than one account in memory, we force the user to authenticate again.\n        // At this point we can't identify which account should this credential work with,\n        // since at this point the user won't have provided enough information.\n        // We log a message in case that helps.\n        this.logger.info(\n          `More than one account was found authenticated for this Client ID and Tenant ID.\nHowever, no \"authenticationRecord\" has been provided for this credential,\ntherefore we're unable to pick between these accounts.\nA new login attempt will be requested, to ensure the correct account is picked.\nTo work with multiple accounts for the same Client ID and Tenant ID, please provide an \"authenticationRecord\" when initializing \"InteractiveBrowserCredential\".`\n        );\n        // To safely trigger a new login, we're also ensuring the local cache is cleared up for this MSAL object.\n        // However, we want to avoid kicking the user out of their authentication on the Azure side.\n        // We do this by calling to logout while specifying a `onRedirectNavigate` that returns false.\n        await app.logout({\n          onRedirectNavigate: () => false,\n        });\n        return;\n      }\n\n      // If there's only one account for this MSAL object, we can safely activate it.\n      if (accounts.length === 1) {\n        const account = accounts[0];\n        app.setActiveAccount(account);\n        return msalToPublic(this.clientId, account);\n      }\n\n      this.logger.info(`No accounts were found through MSAL.`);\n    } catch (e: any) {\n      this.logger.info(`Failed to acquire token through MSAL. ${e.message}`);\n    }\n    return;\n  }\n\n  /**\n   * Uses MSAL to handle the redirect.\n   */\n  public async handleRedirect(): Promise<AuthenticationRecord | undefined> {\n    const app = await this.getApp();\n    return this.handleBrowserResult((await app.handleRedirectPromise(redirectHash)) || undefined);\n  }\n\n  /**\n   * Uses MSAL to trigger a redirect or a popup login.\n   */\n  public async login(scopes: string | string[] = []): Promise<AuthenticationRecord | undefined> {\n    const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n    const loginRequest: msalBrowser.RedirectRequest = {\n      scopes: arrayScopes,\n      loginHint: this.loginHint,\n    };\n    const app = await this.getApp();\n    switch (this.loginStyle) {\n      case \"redirect\": {\n        await app.loginRedirect(loginRequest);\n        return;\n      }\n      case \"popup\":\n        return this.handleBrowserResult(await app.loginPopup(loginRequest));\n    }\n  }\n\n  /**\n   * Uses MSAL to retrieve the active account.\n   */\n  public async getActiveAccount(): Promise<AuthenticationRecord | undefined> {\n    const app = await this.getApp();\n    const account = app.getActiveAccount();\n    if (!account) {\n      return;\n    }\n    return msalToPublic(this.clientId, account);\n  }\n\n  /**\n   * Attempts to retrieve a token from cache.\n   */\n  public async getTokenSilent(\n    scopes: string[],\n    options?: CredentialFlowGetTokenOptions\n  ): Promise<AccessToken> {\n    const account = await this.getActiveAccount();\n    if (!account) {\n      throw new AuthenticationRequiredError({\n        scopes,\n        getTokenOptions: options,\n        message:\n          \"Silent authentication failed. We couldn't retrieve an active account from the cache.\",\n      });\n    }\n\n    const parameters: msalBrowser.SilentRequest = {\n      authority: options?.authority || this.msalConfig.auth.authority!,\n      correlationId: options?.correlationId,\n      claims: options?.claims,\n      account: publicToMsal(account),\n      forceRefresh: false,\n      scopes,\n    };\n\n    try {\n      this.logger.info(\"Attempting to acquire token silently\");\n      const app = await this.getApp();\n      const response = await app.acquireTokenSilent(parameters);\n      return this.handleResult(scopes, this.clientId, response);\n    } catch (err: any) {\n      throw this.handleError(scopes, err, options);\n    }\n  }\n\n  /**\n   * Attempts to retrieve the token in the browser.\n   */\n  protected async doGetToken(\n    scopes: string[],\n    options?: CredentialFlowGetTokenOptions\n  ): Promise<AccessToken> {\n    const account = await this.getActiveAccount();\n    if (!account) {\n      throw new AuthenticationRequiredError({\n        scopes,\n        getTokenOptions: options,\n        message:\n          \"Silent authentication failed. We couldn't retrieve an active account from the cache.\",\n      });\n    }\n\n    const parameters: msalBrowser.RedirectRequest = {\n      authority: options?.authority || this.msalConfig.auth.authority!,\n      correlationId: options?.correlationId,\n      claims: options?.claims,\n      account: publicToMsal(account),\n      loginHint: this.loginHint,\n      scopes,\n    };\n    const app = await this.getApp();\n    switch (this.loginStyle) {\n      case \"redirect\":\n        // This will go out of the page.\n        // Once the InteractiveBrowserCredential is initialized again,\n        // we'll load the MSAL account in the constructor.\n\n        await app.acquireTokenRedirect(parameters);\n        return { token: \"\", expiresOnTimestamp: 0 };\n      case \"popup\":\n        return this.handleResult(scopes, this.clientId, await app.acquireTokenPopup(parameters));\n    }\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { CredentialLogger, formatError } from \"./logging\";\n\n/**\n * Ensures the scopes value is an array.\n * @internal\n */\nexport function ensureScopes(scopes: string | string[]): string[] {\n  return Array.isArray(scopes) ? scopes : [scopes];\n}\n\n/**\n * Throws if the received scope is not valid.\n * @internal\n */\nexport function ensureValidScopeForDevTimeCreds(scope: string, logger: CredentialLogger): void {\n  if (!scope.match(/^[0-9a-zA-Z-_.:/]+$/)) {\n    const error = new Error(\"Invalid scope was specified by the user or calling client\");\n    logger.getToken.info(formatError(scope, error));\n    throw error;\n  }\n}\n\n/**\n * Returns the resource out of a scope.\n * @internal\n */\nexport function getScopeResource(scope: string): string {\n  return scope.replace(/\\/.default$/, \"\");\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport {\n  InteractiveBrowserCredentialInBrowserOptions,\n  InteractiveBrowserCredentialNodeOptions,\n} from \"./interactiveBrowserCredentialOptions\";\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport {\n  processMultiTenantRequest,\n  resolveAdditionallyAllowedTenantIds,\n} from \"../util/tenantIdUtils\";\nimport { AuthenticationRecord } from \"../msal/types\";\nimport { MSALAuthCode } from \"../msal/browserFlows/msalAuthCode\";\nimport { MsalBrowserFlowOptions } from \"../msal/browserFlows/msalBrowserCommon\";\nimport { MsalFlow } from \"../msal/flows\";\nimport { ensureScopes } from \"../util/scopeUtils\";\nimport { tracingClient } from \"../util/tracing\";\n\nconst logger = credentialLogger(\"InteractiveBrowserCredential\");\n\n/**\n * Enables authentication to Azure Active Directory inside of the web browser\n * using the interactive login flow.\n */\nexport class InteractiveBrowserCredential implements TokenCredential {\n  private tenantId?: string;\n  private additionallyAllowedTenantIds: string[];\n  private msalFlow: MsalFlow;\n  private disableAutomaticAuthentication?: boolean;\n\n  /**\n   * Creates an instance of the InteractiveBrowserCredential with the\n   * details needed to authenticate against Azure Active Directory with\n   * a user identity.\n   *\n   * This credential uses the [Authorization Code Flow](https://learn.microsoft.com/en-us/azure/active-directory/develop/v2-oauth2-auth-code-flow).\n   * On Node.js, it will open a browser window while it listens for a redirect response from the authentication service.\n   * On browsers, it authenticates via popups. The `loginStyle` optional parameter can be set to `redirect` to authenticate by redirecting the user to an Azure secure login page, which then will redirect the user back to the web application where the authentication started.\n   *\n   * It's recommended that the Microsoft Entra Applications used are configured to authenticate using Single Page Applications.\n   * More information here: [link](https://learn.microsoft.com/en-us/azure/active-directory/develop/scenario-spa-app-registration#redirect-uri-msaljs-20-with-auth-code-flow).\n   *\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    options: InteractiveBrowserCredentialInBrowserOptions | InteractiveBrowserCredentialNodeOptions\n  ) {\n    if (!options?.clientId) {\n      const error = new Error(\n        \"The parameter `clientId` cannot be left undefined for the `InteractiveBrowserCredential`\"\n      );\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    this.tenantId = options?.tenantId;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(\n      options?.additionallyAllowedTenants\n    );\n\n    const browserOptions = options as InteractiveBrowserCredentialInBrowserOptions;\n    const loginStyle = browserOptions.loginStyle || \"popup\";\n    const loginStyles = [\"redirect\", \"popup\"];\n\n    if (loginStyles.indexOf(loginStyle) === -1) {\n      const error = new Error(\n        `Invalid loginStyle: ${\n          browserOptions.loginStyle\n        }. Should be any of the following: ${loginStyles.join(\", \")}.`\n      );\n      logger.info(formatError(\"\", error));\n      throw error;\n    }\n\n    const msalOptions: MsalBrowserFlowOptions = {\n      ...options,\n      tokenCredentialOptions: options,\n      logger,\n      loginStyle: loginStyle,\n      redirectUri:\n        typeof options.redirectUri === \"function\" ? options.redirectUri() : options.redirectUri,\n    };\n\n    this.msalFlow = new MSALAuthCode(msalOptions);\n    this.disableAutomaticAuthentication = options?.disableAutomaticAuthentication;\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the user provided the option `disableAutomaticAuthentication`,\n   * once the token can't be retrieved silently,\n   * this method won't attempt to request user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  async getToken(scopes: string | string[], options: GetTokenOptions = {}): Promise<AccessToken> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.getToken`,\n      options,\n      async (newOptions) => {\n        const tenantId = processMultiTenantRequest(\n          this.tenantId,\n          newOptions,\n          this.additionallyAllowedTenantIds\n        );\n        newOptions.tenantId = tenantId;\n\n        const arrayScopes = ensureScopes(scopes);\n        return this.msalFlow.getToken(arrayScopes, {\n          ...newOptions,\n          disableAutomaticAuthentication: this.disableAutomaticAuthentication,\n        });\n      }\n    );\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if successful.\n   * If authentication fails, a {@link CredentialUnavailableError} will be thrown with the details of the failure.\n   *\n   * If the token can't be retrieved silently, this method will require user interaction to retrieve the token.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                  TokenCredential implementation might make.\n   */\n  async authenticate(\n    scopes: string | string[],\n    options: GetTokenOptions = {}\n  ): Promise<AuthenticationRecord | undefined> {\n    return tracingClient.withSpan(\n      `${this.constructor.name}.authenticate`,\n      options,\n      async (newOptions) => {\n        const arrayScopes = Array.isArray(scopes) ? scopes : [scopes];\n        await this.msalFlow.getToken(arrayScopes, newOptions);\n        return this.msalFlow.getActiveAccount();\n      }\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\n\nimport { TokenCredentialOptions } from \"../../tokenCredentialOptions\";\nimport { credentialLogger, formatError } from \"../../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"ManagedIdentityCredential is not supported in the browser.\"\n);\nconst logger = credentialLogger(\"ManagedIdentityCredential\");\n\nexport class ManagedIdentityCredential implements TokenCredential {\n  constructor(clientId: string, options?: TokenCredentialOptions);\n  constructor(options?: TokenCredentialOptions);\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public async getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\n\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\"DeviceCodeCredential is not supported in the browser.\");\nconst logger = credentialLogger(\"DeviceCodeCredential\");\n\n/**\n * Enables authentication to Azure Active Directory using a device code\n * that the user can enter into https://microsoft.com/devicelogin.\n */\nexport class DeviceCodeCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\nimport { AuthorizationCodeCredentialOptions } from \"./authorizationCodeCredentialOptions\";\n\nconst BrowserNotSupportedError = new Error(\n  \"AuthorizationCodeCredential is not supported in the browser. InteractiveBrowserCredential is more appropriate for this use case.\"\n);\nconst logger = credentialLogger(\"AuthorizationCodeCredential\");\n\nexport class AuthorizationCodeCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor(\n    tenantId: string | \"common\",\n    clientId: string,\n    clientSecret: string,\n    authorizationCode: string,\n    redirectUri: string,\n    options?: AuthorizationCodeCredentialOptions\n  );\n  constructor(\n    tenantId: string | \"common\",\n    clientId: string,\n    authorizationCode: string,\n    redirectUri: string,\n    options?: AuthorizationCodeCredentialOptions\n  );\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"AzurePowerShellCredential is not supported in the browser.\"\n);\nconst logger = credentialLogger(\"AzurePowerShellCredential\");\n\n/**\n * This credential will use the currently-logged-in user's login information via the Azure Power Shell command line tool.\n */\nexport class AzurePowerShellCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport {\n  checkTenantId,\n  processMultiTenantRequest,\n  resolveAdditionallyAllowedTenantIds,\n} from \"../util/tenantIdUtils\";\nimport { createHttpHeaders, createPipelineRequest } from \"@azure/core-rest-pipeline\";\nimport { credentialLogger, formatSuccess } from \"../util/logging\";\nimport { IdentityClient } from \"../client/identityClient\";\nimport { UsernamePasswordCredentialOptions } from \"./usernamePasswordCredentialOptions\";\nimport { getIdentityTokenEndpointSuffix } from \"../util/identityTokenEndpoint\";\nimport { tracingClient } from \"../util/tracing\";\n\nconst logger = credentialLogger(\"UsernamePasswordCredential\");\n\n/**\n * Enables authentication to Azure Active Directory with a user's\n * username and password. This credential requires a high degree of\n * trust so you should only use it when other, more secure credential\n * types can't be used.\n */\nexport class UsernamePasswordCredential implements TokenCredential {\n  private identityClient: IdentityClient;\n  private tenantId: string;\n  private additionallyAllowedTenantIds: string[];\n  private clientId: string;\n  private username: string;\n  private password: string;\n\n  /**\n   * Creates an instance of the UsernamePasswordCredential with the details\n   * needed to authenticate against Azure Active Directory with a username\n   * and password.\n   *\n   * @param tenantIdOrName - The Azure Active Directory tenant (directory) ID or name.\n   * @param clientId - The client (application) ID of an App Registration in the tenant.\n   * @param username - The user account's e-mail address (user name).\n   * @param password - The user account's account password\n   * @param options - Options for configuring the client which makes the authentication request.\n   */\n  constructor(\n    tenantIdOrName: string,\n    clientId: string,\n    username: string,\n    password: string,\n    options?: UsernamePasswordCredentialOptions\n  ) {\n    checkTenantId(logger, tenantIdOrName);\n\n    this.identityClient = new IdentityClient(options);\n    this.tenantId = tenantIdOrName;\n    this.additionallyAllowedTenantIds = resolveAdditionallyAllowedTenantIds(\n      options?.additionallyAllowedTenants\n    );\n    this.clientId = clientId;\n    this.username = username;\n    this.password = password;\n  }\n\n  /**\n   * Authenticates with Azure Active Directory and returns an access token if\n   * successful.  If authentication cannot be performed at this time, this method may\n   * return null.  If an error occurs during authentication, an {@link AuthenticationError}\n   * containing failure details will be thrown.\n   *\n   * @param scopes - The list of scopes for which the token will have access.\n   * @param options - The options used to configure any requests this\n   *                TokenCredential implementation might make.\n   */\n  public async getToken(\n    scopes: string | string[],\n    options: GetTokenOptions = {}\n  ): Promise<AccessToken | null> {\n    return tracingClient.withSpan(\n      \"UsernamePasswordCredential.getToken\",\n      options,\n      async (newOptions) => {\n        const tenantId = processMultiTenantRequest(\n          this.tenantId,\n          newOptions,\n          this.additionallyAllowedTenantIds\n        );\n        newOptions.tenantId = tenantId;\n\n        const urlSuffix = getIdentityTokenEndpointSuffix(this.tenantId);\n        const params = new URLSearchParams({\n          response_type: \"token\",\n          grant_type: \"password\",\n          client_id: this.clientId,\n          username: this.username,\n          password: this.password,\n          scope: typeof scopes === \"string\" ? scopes : scopes.join(\" \"),\n        });\n        const webResource = createPipelineRequest({\n          url: `${this.identityClient.authorityHost}/${this.tenantId}/${urlSuffix}`,\n          method: \"POST\",\n          body: params.toString(),\n          headers: createHttpHeaders({\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/x-www-form-urlencoded\",\n          }),\n          abortSignal: options && options.abortSignal,\n          tracingOptions: newOptions.tracingOptions,\n        });\n\n        const tokenResponse = await this.identityClient.sendTokenRequest(webResource);\n        logger.getToken.info(formatSuccess(scopes));\n        return (tokenResponse && tokenResponse.accessToken) || null;\n      }\n    );\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"VisualStudioCodeCredential is not supported in the browser.\"\n);\nconst logger = credentialLogger(\"VisualStudioCodeCredential\");\n\nexport const vsCodeCredentialControl = {\n  set vsCodeCredentialFinder(_finder: never) {\n    throw new Error(\n      \"Attempted to register a VisualStudioCodeCredential provider plugin in the browser. This environment is not supported by VisualStudioCodeCredential.\"\n    );\n  },\n};\n\n/**\n * Connects to Azure using the credential provided by the VSCode extension 'Azure Account'.\n */\nexport class VisualStudioCodeCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst credentialName = \"OnBehalfOfCredential\";\nconst BrowserNotSupportedError = new Error(`${credentialName}: Not supported in the browser.`);\nconst logger = credentialLogger(credentialName);\n\n/**\n * Enables authentication to Azure Active Directory using the [On Behalf Of flow](https://docs.microsoft.com/azure/active-directory/develop/v2-oauth2-on-behalf-of-flow).\n */\nexport class OnBehalfOfCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { AccessToken, TokenCredential } from \"@azure/core-auth\";\nimport { credentialLogger, formatError } from \"../util/logging\";\n\nconst BrowserNotSupportedError = new Error(\n  \"WorkloadIdentityCredential is not supported in the browser.\"\n);\nconst logger = credentialLogger(\"WorkloadIdentityCredential\");\n\n/**\n * WorkloadIdentityCredential supports Azure workload identity authentication on Kubernetes.\n * Refer to <a href=\"https://learn.microsoft.com/azure/aks/workload-identity-overview\">Azure Active Directory Workload Identity</a>\n * for more information.\n */\nexport class WorkloadIdentityCredential implements TokenCredential {\n  /**\n   * Only available in Node.js\n   */\n  constructor() {\n    logger.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n\n  /**\n   * Only available in Node.js\n   */\n  public getToken(): Promise<AccessToken | null> {\n    logger.getToken.info(formatError(\"\", BrowserNotSupportedError));\n    throw BrowserNotSupportedError;\n  }\n}\n", "// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport * from \"./plugins/consumer\";\n\nexport { IdentityPlugin } from \"./plugins/provider\";\n\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { DefaultAzureCredential } from \"./credentials/defaultAzureCredential\";\n\nexport {\n  AuthenticationError,\n  ErrorResponse,\n  AggregateAuthenticationError,\n  AuthenticationErrorName,\n  AggregateAuthenticationErrorName,\n  CredentialUnavailableError,\n  CredentialUnavailableErrorName,\n  AuthenticationRequiredError,\n  AuthenticationRequiredErrorOptions,\n} from \"./errors\";\n\nexport { AuthenticationRecord } from \"./msal/types\";\nexport { serializeAuthenticationRecord, deserializeAuthenticationRecord } from \"./msal/utils\";\nexport { TokenCredentialOptions } from \"./tokenCredentialOptions\";\nexport { MultiTenantTokenCredentialOptions } from \"./credentials/multiTenantTokenCredentialOptions\";\nexport { AuthorityValidationOptions } from \"./credentials/authorityValidationOptions\";\n// TODO: Export again once we're ready to release this feature.\n// export { RegionalAuthority } from \"./regionalAuthority\";\n\nexport { InteractiveCredentialOptions } from \"./credentials/interactiveCredentialOptions\";\n\nexport { ChainedTokenCredential } from \"./credentials/chainedTokenCredential\";\n\nexport { ClientSecretCredential } from \"./credentials/clientSecretCredential\";\nexport { ClientSecretCredentialOptions } from \"./credentials/clientSecretCredentialOptions\";\n\nexport { DefaultAzureCredential } from \"./credentials/defaultAzureCredential\";\nexport {\n  DefaultAzureCredentialOptions,\n  DefaultAzureCredentialClientIdOptions,\n  DefaultAzureCredentialResourceIdOptions,\n} from \"./credentials/defaultAzureCredentialOptions\";\n\nexport { EnvironmentCredential } from \"./credentials/environmentCredential\";\nexport { EnvironmentCredentialOptions } from \"./credentials/environmentCredentialOptions\";\n\nexport {\n  ClientCertificateCredential,\n  ClientCertificateCredentialPEMConfiguration,\n  ClientCertificatePEMCertificatePath,\n  ClientCertificatePEMCertificate,\n} from \"./credentials/clientCertificateCredential\";\nexport { ClientCertificateCredentialOptions } from \"./credentials/clientCertificateCredentialOptions\";\nexport { ClientAssertionCredential } from \"./credentials/clientAssertionCredential\";\nexport { ClientAssertionCredentialOptions } from \"./credentials/clientAssertionCredentialOptions\";\nexport { CredentialPersistenceOptions } from \"./credentials/credentialPersistenceOptions\";\nexport { AzureCliCredential } from \"./credentials/azureCliCredential\";\nexport { AzureCliCredentialOptions } from \"./credentials/azureCliCredentialOptions\";\nexport { AzureDeveloperCliCredential } from \"./credentials/azureDeveloperCliCredential\";\nexport { AzureDeveloperCliCredentialOptions } from \"./credentials/azureDeveloperCliCredentialOptions\";\nexport { InteractiveBrowserCredential } from \"./credentials/interactiveBrowserCredential\";\nexport {\n  InteractiveBrowserCredentialNodeOptions,\n  InteractiveBrowserCredentialInBrowserOptions,\n  BrowserLoginStyle,\n} from \"./credentials/interactiveBrowserCredentialOptions\";\nexport {\n  ManagedIdentityCredential,\n  ManagedIdentityCredentialClientIdOptions,\n  ManagedIdentityCredentialResourceIdOptions,\n} from \"./credentials/managedIdentityCredential\";\nexport { DeviceCodeCredential } from \"./credentials/deviceCodeCredential\";\nexport {\n  DeviceCodePromptCallback,\n  DeviceCodeInfo,\n} from \"./credentials/deviceCodeCredentialOptions\";\nexport { DeviceCodeCredentialOptions } from \"./credentials/deviceCodeCredentialOptions\";\n\nexport { AuthorizationCodeCredential } from \"./credentials/authorizationCodeCredential\";\nexport { AuthorizationCodeCredentialOptions } from \"./credentials/authorizationCodeCredentialOptions\";\nexport { AzurePowerShellCredential } from \"./credentials/azurePowerShellCredential\";\nexport { AzurePowerShellCredentialOptions } from \"./credentials/azurePowerShellCredentialOptions\";\nexport {\n  OnBehalfOfCredentialOptions,\n  OnBehalfOfCredentialSecretOptions,\n  OnBehalfOfCredentialCertificateOptions,\n} from \"./credentials/onBehalfOfCredentialOptions\";\nexport { UsernamePasswordCredential } from \"./credentials/usernamePasswordCredential\";\nexport { UsernamePasswordCredentialOptions } from \"./credentials/usernamePasswordCredentialOptions\";\nexport { VisualStudioCodeCredential } from \"./credentials/visualStudioCodeCredential\";\nexport { VisualStudioCodeCredentialOptions } from \"./credentials/visualStudioCodeCredentialOptions\";\nexport { OnBehalfOfCredential } from \"./credentials/onBehalfOfCredential\";\nexport { WorkloadIdentityCredential } from \"./credentials/workloadIdentityCredential\";\nexport { WorkloadIdentityCredentialOptions } from \"./credentials/workloadIdentityCredentialOptions\";\n\nexport { TokenCachePersistenceOptions } from \"./msal/nodeFlows/tokenCachePersistenceOptions\";\n\nexport { TokenCredential, GetTokenOptions, AccessToken } from \"@azure/core-auth\";\nexport { logger } from \"./util/logging\";\n\nexport { AzureAuthorityHosts } from \"./constants\";\n\n/**\n * Returns a new instance of the {@link DefaultAzureCredential}.\n */\nexport function getDefaultAzureCredential(): TokenCredential {\n  return new DefaultAzureCredential();\n}\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"util\" has been externalized for browser compatibility. Cannot access \"util.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import { EventEmitter } from 'events';\nimport * as util from 'util';\nimport { Packet } from './packet';\n\nclass Debug extends EventEmitter {\n  declare options: {\n    data: boolean;\n    payload: boolean;\n    packet: boolean;\n    token: boolean;\n  };\n\n  declare indent: string;\n\n  /*\n    @options    Which debug details should be sent.\n                data    - dump of packet data\n                payload - details of decoded payload\n  */\n  constructor({ data = false, payload = false, packet = false, token = false } = {}) {\n    super();\n\n    this.options = { data, payload, packet, token };\n    this.indent = '  ';\n  }\n\n  packet(direction: 'Received' | 'Sent', packet: Packet) {\n    if (this.haveListeners() && this.options.packet) {\n      this.log('');\n      this.log(direction);\n      this.log(packet.headerToString(this.indent));\n    }\n  }\n\n  data(packet: Packet) {\n    if (this.haveListeners() && this.options.data) {\n      this.log(packet.dataToString(this.indent));\n    }\n  }\n\n  payload(generatePayloadText: () => string) {\n    if (this.haveListeners() && this.options.payload) {\n      this.log(generatePayloadText());\n    }\n  }\n\n  token(token: any) {\n    if (this.haveListeners() && this.options.token) {\n      this.log(util.inspect(token, { showHidden: false, depth: 5, colors: true }));\n    }\n  }\n\n  haveListeners() {\n    return this.listeners('debug').length > 0;\n  }\n\n  log(text: string) {\n    this.emit('debug', text);\n  }\n}\n\nexport default Debug;\nmodule.exports = Debug;\n", "export default class AbortError extends Error {\n  declare code: string;\n\n  constructor() {\n    super('The operation was aborted');\n\n    this.code = 'ABORT_ERR';\n    this.name = 'AbortError';\n  }\n}\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"dgram\" has been externalized for browser compatibility. Cannot access \"dgram.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"node:url\" has been externalized for browser compatibility. Cannot access \"node:url.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import dgram from 'dgram';\nimport dns from 'dns';\nimport net from 'net';\nimport url from 'node:url';\n\nimport AbortError from './errors/abort-error';\n\ntype LookupFunction = (hostname: string, options: dns.LookupAllOptions, callback: (err: NodeJS.ErrnoException | null, addresses: dns.LookupAddress[]) => void) => void;\n\nexport async function sendInParallel(addresses: dns.LookupAddress[], port: number, request: Buffer, signal: AbortSignal) {\n  if (signal.aborted) {\n    throw new AbortError();\n  }\n\n  return await new Promise<Buffer>((resolve, reject) => {\n    const sockets: dgram.Socket[] = [];\n\n    let errorCount = 0;\n\n    const onError = (err: Error) => {\n      errorCount++;\n\n      if (errorCount === addresses.length) {\n        signal.removeEventListener('abort', onAbort);\n        clearSockets();\n\n        reject(err);\n      }\n    };\n\n    const onMessage = (message: Buffer) => {\n      signal.removeEventListener('abort', onAbort);\n      clearSockets();\n\n      resolve(message);\n    };\n\n    const onAbort = () => {\n      clearSockets();\n\n      reject(new AbortError());\n    };\n\n    const clearSockets = () => {\n      for (const socket of sockets) {\n        socket.removeListener('error', onError);\n        socket.removeListener('message', onMessage);\n        socket.close();\n      }\n    };\n\n    signal.addEventListener('abort', onAbort, { once: true });\n\n    for (let j = 0; j < addresses.length; j++) {\n      const udpType = addresses[j].family === 6 ? 'udp6' : 'udp4';\n\n      const socket = dgram.createSocket(udpType);\n      sockets.push(socket);\n      socket.on('error', onError);\n      socket.on('message', onMessage);\n      socket.send(request, 0, request.length, port, addresses[j].address);\n    }\n  });\n}\n\nexport async function sendMessage(host: string, port: number, lookup: LookupFunction, signal: AbortSignal, request: Buffer) {\n  if (signal.aborted) {\n    throw new AbortError();\n  }\n\n  let addresses: dns.LookupAddress[];\n\n  if (net.isIP(host)) {\n    addresses = [\n      { address: host, family: net.isIPv6(host) ? 6 : 4 }\n    ];\n  } else {\n    addresses = await new Promise<dns.LookupAddress[]>((resolve, reject) => {\n      const onAbort = () => {\n        reject(new AbortError());\n      };\n\n      signal.addEventListener('abort', onAbort);\n\n      lookup(url.domainToASCII(host), { all: true }, (err, addresses) => {\n        signal.removeEventListener('abort', onAbort);\n\n        err ? reject(err) : resolve(addresses);\n      });\n    });\n  }\n\n  return await sendInParallel(addresses, port, request, signal);\n}\n", "export default class TimeoutError extends Error {\n  declare code: string;\n\n  constructor() {\n    super('The operation was aborted due to timeout');\n\n    this.code = 'TIMEOUT_ERR';\n    this.name = 'TimeoutError';\n  }\n}\n", "import TimeoutError from '../errors/timeout-error';\n\n/**\n * Run the function `func` with an `AbortSignal` that will automatically abort after the time specified\n * by `timeout` or when the given `signal` is aborted.\n *\n * On timeout, the `timeoutSignal` will be aborted and a `TimeoutError` will be thrown.\n */\nexport async function withTimeout<T>(timeout: number, func: (timeoutSignal: AbortSignal) => Promise<T>, signal?: AbortSignal): Promise<T> {\n  const timeoutController = new AbortController();\n  const abortCurrentAttempt = () => { timeoutController.abort(); };\n\n  const timer = setTimeout(abortCurrentAttempt, timeout);\n  signal?.addEventListener('abort', abortCurrentAttempt, { once: true });\n\n  try {\n    return await func(timeoutController.signal);\n  } catch (err) {\n    if (err instanceof Error && err.name === 'AbortError' && !(signal && signal.aborted)) {\n      throw new TimeoutError();\n    }\n\n    throw err;\n  } finally {\n    signal?.removeEventListener('abort', abortCurrentAttempt);\n    clearTimeout(timer);\n  }\n}\n", "import dns from 'dns';\n\nimport AbortError from './errors/abort-error';\nimport { sendMessage } from './sender';\nimport { withTimeout } from './utils/with-timeout';\n\nconst SQL_SERVER_BROWSER_PORT = 1434;\nconst TIMEOUT = 2 * 1000;\nconst RETRIES = 3;\n// There are three bytes at the start of the response, whose purpose is unknown.\nconst MYSTERY_HEADER_LENGTH = 3;\n\ntype LookupFunction = (hostname: string, options: dns.LookupAllOptions, callback: (err: NodeJS.ErrnoException | null, addresses: dns.LookupAddress[]) => void) => void;\n\n// Most of the functionality has been determined from from jTDS's MSSqlServerInfo class.\nexport async function instanceLookup(options: { server: string, instanceName: string, timeout?: number, retries?: number, port?: number, lookup?: LookupFunction, signal: AbortSignal }) {\n  const server = options.server;\n  if (typeof server !== 'string') {\n    throw new TypeError('Invalid arguments: \"server\" must be a string');\n  }\n\n  const instanceName = options.instanceName;\n  if (typeof instanceName !== 'string') {\n    throw new TypeError('Invalid arguments: \"instanceName\" must be a string');\n  }\n\n  const timeout = options.timeout === undefined ? TIMEOUT : options.timeout;\n  if (typeof timeout !== 'number') {\n    throw new TypeError('Invalid arguments: \"timeout\" must be a number');\n  }\n\n  const retries = options.retries === undefined ? RETRIES : options.retries;\n  if (typeof retries !== 'number') {\n    throw new TypeError('Invalid arguments: \"retries\" must be a number');\n  }\n\n  if (options.lookup !== undefined && typeof options.lookup !== 'function') {\n    throw new TypeError('Invalid arguments: \"lookup\" must be a function');\n  }\n  const lookup = options.lookup ?? dns.lookup;\n\n  if (options.port !== undefined && typeof options.port !== 'number') {\n    throw new TypeError('Invalid arguments: \"port\" must be a number');\n  }\n  const port = options.port ?? SQL_SERVER_BROWSER_PORT;\n\n  const signal = options.signal;\n\n  if (signal.aborted) {\n    throw new AbortError();\n  }\n\n  let response;\n\n  for (let i = 0; i <= retries; i++) {\n    try {\n      response = await withTimeout(timeout, async (signal) => {\n        const request = Buffer.from([0x02]);\n        return await sendMessage(options.server, port, lookup, signal, request);\n      }, signal);\n    } catch (err) {\n      // If the current attempt timed out, continue with the next\n      if (!signal.aborted && err instanceof Error && err.name === 'TimeoutError') {\n        continue;\n      }\n\n      throw err;\n    }\n  }\n\n  if (!response) {\n    throw new Error('Failed to get response from SQL Server Browser on ' + server);\n  }\n\n  const message = response.toString('ascii', MYSTERY_HEADER_LENGTH);\n  const foundPort = parseBrowserResponse(message, instanceName);\n\n  if (!foundPort) {\n    throw new Error('Port for ' + instanceName + ' not found in ' + options.server);\n  }\n\n  return foundPort;\n}\n\nexport function parseBrowserResponse(response: string, instanceName: string) {\n  let getPort;\n\n  const instances = response.split(';;');\n  for (let i = 0, len = instances.length; i < len; i++) {\n    const instance = instances[i];\n    const parts = instance.split(';');\n\n    for (let p = 0, partsLen = parts.length; p < partsLen; p += 2) {\n      const name = parts[p];\n      const value = parts[p + 1];\n\n      if (name === 'tcp' && getPort) {\n        const port = parseInt(value, 10);\n        return port;\n      }\n\n      if (name === 'InstanceName') {\n        if (value.toUpperCase() === instanceName.toUpperCase()) {\n          getPort = true;\n        } else {\n          getPort = false;\n        }\n      }\n    }\n  }\n}\n", "// This simple piece of code is factored out into a separate class to make it\n// easy to stub it out in tests. It's hard, if not impossible, to cause a\n// transient error on demand in tests.\nexport class TransientErrorLookup {\n  isTransientError(error: number) {\n    // This list of transient errors comes from Microsoft implementation of SqlClient:\n    //  - https://github.com/dotnet/corefx/blob/master/src/System.Data.SqlClient/src/System/Data/SqlClient/SqlInternalConnectionTds.cs#L115\n    const transientErrors = [4060, 10928, 10929, 40197, 40501, 40613];\n    return transientErrors.indexOf(error) !== -1;\n  }\n}\n", "/* global window, exports, define */\n\n!function() {\n    'use strict'\n\n    var re = {\n        not_string: /[^s]/,\n        not_bool: /[^t]/,\n        not_type: /[^T]/,\n        not_primitive: /[^v]/,\n        number: /[diefg]/,\n        numeric_arg: /[bcdiefguxX]/,\n        json: /[j]/,\n        not_json: /[^j]/,\n        text: /^[^\\x25]+/,\n        modulo: /^\\x25{2}/,\n        placeholder: /^\\x25(?:([1-9]\\d*)\\$|\\(([^)]+)\\))?(\\+)?(0|'[^$])?(-)?(\\d+)?(?:\\.(\\d+))?([b-gijostTuvxX])/,\n        key: /^([a-z_][a-z_\\d]*)/i,\n        key_access: /^\\.([a-z_][a-z_\\d]*)/i,\n        index_access: /^\\[(\\d+)\\]/,\n        sign: /^[+-]/\n    }\n\n    function sprintf(key) {\n        // `arguments` is not an array, but should be fine for this call\n        return sprintf_format(sprintf_parse(key), arguments)\n    }\n\n    function vsprintf(fmt, argv) {\n        return sprintf.apply(null, [fmt].concat(argv || []))\n    }\n\n    function sprintf_format(parse_tree, argv) {\n        var cursor = 1, tree_length = parse_tree.length, arg, output = '', i, k, ph, pad, pad_character, pad_length, is_positive, sign\n        for (i = 0; i < tree_length; i++) {\n            if (typeof parse_tree[i] === 'string') {\n                output += parse_tree[i]\n            }\n            else if (typeof parse_tree[i] === 'object') {\n                ph = parse_tree[i] // convenience purposes only\n                if (ph.keys) { // keyword argument\n                    arg = argv[cursor]\n                    for (k = 0; k < ph.keys.length; k++) {\n                        if (arg == undefined) {\n                            throw new Error(sprintf('[sprintf] Cannot access property \"%s\" of undefined value \"%s\"', ph.keys[k], ph.keys[k-1]))\n                        }\n                        arg = arg[ph.keys[k]]\n                    }\n                }\n                else if (ph.param_no) { // positional argument (explicit)\n                    arg = argv[ph.param_no]\n                }\n                else { // positional argument (implicit)\n                    arg = argv[cursor++]\n                }\n\n                if (re.not_type.test(ph.type) && re.not_primitive.test(ph.type) && arg instanceof Function) {\n                    arg = arg()\n                }\n\n                if (re.numeric_arg.test(ph.type) && (typeof arg !== 'number' && isNaN(arg))) {\n                    throw new TypeError(sprintf('[sprintf] expecting number but found %T', arg))\n                }\n\n                if (re.number.test(ph.type)) {\n                    is_positive = arg >= 0\n                }\n\n                switch (ph.type) {\n                    case 'b':\n                        arg = parseInt(arg, 10).toString(2)\n                        break\n                    case 'c':\n                        arg = String.fromCharCode(parseInt(arg, 10))\n                        break\n                    case 'd':\n                    case 'i':\n                        arg = parseInt(arg, 10)\n                        break\n                    case 'j':\n                        arg = JSON.stringify(arg, null, ph.width ? parseInt(ph.width) : 0)\n                        break\n                    case 'e':\n                        arg = ph.precision ? parseFloat(arg).toExponential(ph.precision) : parseFloat(arg).toExponential()\n                        break\n                    case 'f':\n                        arg = ph.precision ? parseFloat(arg).toFixed(ph.precision) : parseFloat(arg)\n                        break\n                    case 'g':\n                        arg = ph.precision ? String(Number(arg.toPrecision(ph.precision))) : parseFloat(arg)\n                        break\n                    case 'o':\n                        arg = (parseInt(arg, 10) >>> 0).toString(8)\n                        break\n                    case 's':\n                        arg = String(arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 't':\n                        arg = String(!!arg)\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'T':\n                        arg = Object.prototype.toString.call(arg).slice(8, -1).toLowerCase()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'u':\n                        arg = parseInt(arg, 10) >>> 0\n                        break\n                    case 'v':\n                        arg = arg.valueOf()\n                        arg = (ph.precision ? arg.substring(0, ph.precision) : arg)\n                        break\n                    case 'x':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16)\n                        break\n                    case 'X':\n                        arg = (parseInt(arg, 10) >>> 0).toString(16).toUpperCase()\n                        break\n                }\n                if (re.json.test(ph.type)) {\n                    output += arg\n                }\n                else {\n                    if (re.number.test(ph.type) && (!is_positive || ph.sign)) {\n                        sign = is_positive ? '+' : '-'\n                        arg = arg.toString().replace(re.sign, '')\n                    }\n                    else {\n                        sign = ''\n                    }\n                    pad_character = ph.pad_char ? ph.pad_char === '0' ? '0' : ph.pad_char.charAt(1) : ' '\n                    pad_length = ph.width - (sign + arg).length\n                    pad = ph.width ? (pad_length > 0 ? pad_character.repeat(pad_length) : '') : ''\n                    output += ph.align ? sign + arg + pad : (pad_character === '0' ? sign + pad + arg : pad + sign + arg)\n                }\n            }\n        }\n        return output\n    }\n\n    var sprintf_cache = Object.create(null)\n\n    function sprintf_parse(fmt) {\n        if (sprintf_cache[fmt]) {\n            return sprintf_cache[fmt]\n        }\n\n        var _fmt = fmt, match, parse_tree = [], arg_names = 0\n        while (_fmt) {\n            if ((match = re.text.exec(_fmt)) !== null) {\n                parse_tree.push(match[0])\n            }\n            else if ((match = re.modulo.exec(_fmt)) !== null) {\n                parse_tree.push('%')\n            }\n            else if ((match = re.placeholder.exec(_fmt)) !== null) {\n                if (match[2]) {\n                    arg_names |= 1\n                    var field_list = [], replacement_field = match[2], field_match = []\n                    if ((field_match = re.key.exec(replacement_field)) !== null) {\n                        field_list.push(field_match[1])\n                        while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {\n                            if ((field_match = re.key_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else if ((field_match = re.index_access.exec(replacement_field)) !== null) {\n                                field_list.push(field_match[1])\n                            }\n                            else {\n                                throw new SyntaxError('[sprintf] failed to parse named argument key')\n                            }\n                        }\n                    }\n                    else {\n                        throw new SyntaxError('[sprintf] failed to parse named argument key')\n                    }\n                    match[2] = field_list\n                }\n                else {\n                    arg_names |= 2\n                }\n                if (arg_names === 3) {\n                    throw new Error('[sprintf] mixing positional and named placeholders is not (yet) supported')\n                }\n\n                parse_tree.push(\n                    {\n                        placeholder: match[0],\n                        param_no:    match[1],\n                        keys:        match[2],\n                        sign:        match[3],\n                        pad_char:    match[4],\n                        align:       match[5],\n                        width:       match[6],\n                        precision:   match[7],\n                        type:        match[8]\n                    }\n                )\n            }\n            else {\n                throw new SyntaxError('[sprintf] unexpected placeholder')\n            }\n            _fmt = _fmt.substring(match[0].length)\n        }\n        return sprintf_cache[fmt] = parse_tree\n    }\n\n    /**\n     * export to either browser or node.js\n     */\n    /* eslint-disable quote-props */\n    if (typeof exports !== 'undefined') {\n        exports['sprintf'] = sprintf\n        exports['vsprintf'] = vsprintf\n    }\n    if (typeof window !== 'undefined') {\n        window['sprintf'] = sprintf\n        window['vsprintf'] = vsprintf\n\n        if (typeof define === 'function' && define['amd']) {\n            define(function() {\n                return {\n                    'sprintf': sprintf,\n                    'vsprintf': vsprintf\n                }\n            })\n        }\n    }\n    /* eslint-enable quote-props */\n}(); // eslint-disable-line\n", "import { sprintf } from 'sprintf-js';\n\nexport const HEADER_LENGTH = 8;\n\nexport const TYPE: { [key: string]: number } = {\n  SQL_BATCH: 0x01,\n  RPC_REQUEST: 0x03,\n  TABULAR_RESULT: 0x04,\n  ATTENTION: 0x06,\n  BULK_LOAD: 0x07,\n  TRANSACTION_MANAGER: 0x0E,\n  LOGIN7: 0x10,\n  NTLMAUTH_PKT: 0x11,\n  PRELOGIN: 0x12,\n  FEDAUTH_TOKEN: 0x08\n};\n\nconst typeByValue: { [key: number]: string } = {};\n\nfor (const name in TYPE) {\n  typeByValue[TYPE[name]] = name;\n}\n\nconst STATUS: { [key: string]: number } = {\n  NORMAL: 0x00,\n  EOM: 0x01,\n  IGNORE: 0x02,\n  RESETCONNECTION: 0x08,\n  RESETCONNECTIONSKIPTRAN: 0x10\n};\n\nexport const OFFSET = {\n  Type: 0,\n  Status: 1,\n  Length: 2,\n  SPID: 4,\n  PacketID: 6,\n  Window: 7\n};\n\nconst DEFAULT_SPID = 0;\n\nconst DEFAULT_PACKETID = 1;\n\nconst DEFAULT_WINDOW = 0;\n\nconst NL = '\\n';\n\nexport class Packet {\n  declare buffer: Buffer;\n\n  constructor(typeOrBuffer: Buffer | number) {\n    if (typeOrBuffer instanceof Buffer) {\n      this.buffer = typeOrBuffer;\n    } else {\n      const type = typeOrBuffer;\n      this.buffer = Buffer.alloc(HEADER_LENGTH, 0);\n      this.buffer.writeUInt8(type, OFFSET.Type);\n      this.buffer.writeUInt8(STATUS.NORMAL, OFFSET.Status);\n      this.buffer.writeUInt16BE(DEFAULT_SPID, OFFSET.SPID);\n      this.buffer.writeUInt8(DEFAULT_PACKETID, OFFSET.PacketID);\n      this.buffer.writeUInt8(DEFAULT_WINDOW, OFFSET.Window);\n      this.setLength();\n    }\n  }\n\n  setLength() {\n    this.buffer.writeUInt16BE(this.buffer.length, OFFSET.Length);\n  }\n\n  length() {\n    return this.buffer.readUInt16BE(OFFSET.Length);\n  }\n\n  resetConnection(reset: boolean) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (reset) {\n      status |= STATUS.RESETCONNECTION;\n    } else {\n      status &= 0xFF - STATUS.RESETCONNECTION;\n    }\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n\n  last(last?: boolean) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (arguments.length > 0) {\n      if (last) {\n        status |= STATUS.EOM;\n      } else {\n        status &= 0xFF - STATUS.EOM;\n      }\n      this.buffer.writeUInt8(status, OFFSET.Status);\n    }\n    return this.isLast();\n  }\n\n  ignore(last: boolean) {\n    let status = this.buffer.readUInt8(OFFSET.Status);\n    if (last) {\n      status |= STATUS.IGNORE;\n    } else {\n      status &= 0xFF - STATUS.IGNORE;\n    }\n    this.buffer.writeUInt8(status, OFFSET.Status);\n  }\n\n  isLast() {\n    return !!(this.buffer.readUInt8(OFFSET.Status) & STATUS.EOM);\n  }\n\n  packetId(packetId?: number) {\n    if (packetId) {\n      this.buffer.writeUInt8(packetId % 256, OFFSET.PacketID);\n    }\n    return this.buffer.readUInt8(OFFSET.PacketID);\n  }\n\n  addData(data: Buffer) {\n    this.buffer = Buffer.concat([this.buffer, data]);\n    this.setLength();\n    return this;\n  }\n\n  data() {\n    return this.buffer.slice(HEADER_LENGTH);\n  }\n\n  type() {\n    return this.buffer.readUInt8(OFFSET.Type);\n  }\n\n  statusAsString() {\n    const status = this.buffer.readUInt8(OFFSET.Status);\n    const statuses = [];\n\n    for (const name in STATUS) {\n      const value = STATUS[name];\n\n      if (status & value) {\n        statuses.push(name);\n      } else {\n        statuses.push(undefined);\n      }\n    }\n\n    return statuses.join(' ').trim();\n  }\n\n  headerToString(indent = '') {\n    const text = sprintf('type:0x%02X(%s), status:0x%02X(%s), length:0x%04X, spid:0x%04X, packetId:0x%02X, window:0x%02X', this.buffer.readUInt8(OFFSET.Type), typeByValue[this.buffer.readUInt8(OFFSET.Type)], this.buffer.readUInt8(OFFSET.Status), this.statusAsString(), this.buffer.readUInt16BE(OFFSET.Length), this.buffer.readUInt16BE(OFFSET.SPID), this.buffer.readUInt8(OFFSET.PacketID), this.buffer.readUInt8(OFFSET.Window));\n    return indent + text;\n  }\n\n  dataToString(indent = '') {\n    const BYTES_PER_GROUP = 0x04;\n    const CHARS_PER_GROUP = 0x08;\n    const BYTES_PER_LINE = 0x20;\n    const data = this.data();\n\n    let dataDump = '';\n    let chars = '';\n\n\n    for (let offset = 0; offset < data.length; offset++) {\n      if (offset % BYTES_PER_LINE === 0) {\n        dataDump += indent;\n        dataDump += sprintf('%04X  ', offset);\n      }\n\n      if (data[offset] < 0x20 || data[offset] > 0x7E) {\n        chars += '.';\n        if (((offset + 1) % CHARS_PER_GROUP === 0) && !((offset + 1) % BYTES_PER_LINE === 0)) {\n          chars += ' ';\n        }\n      } else {\n        chars += String.fromCharCode(data[offset]);\n      }\n\n      if (data[offset] != null) {\n        dataDump += sprintf('%02X', data[offset]);\n      }\n\n      if (((offset + 1) % BYTES_PER_GROUP === 0) && !((offset + 1) % BYTES_PER_LINE === 0)) {\n        dataDump += ' ';\n      }\n\n      if ((offset + 1) % BYTES_PER_LINE === 0) {\n        dataDump += '  ' + chars;\n        chars = '';\n        if (offset < data.length - 1) {\n          dataDump += NL;\n        }\n      }\n    }\n\n    if (chars.length) {\n      dataDump += '  ' + chars;\n    }\n\n    return dataDump;\n  }\n\n  toString(indent = '') {\n    return this.headerToString(indent) + '\\n' + this.dataToString(indent + indent);\n  }\n\n  payloadString() {\n    return '';\n  }\n}\n\nexport function isPacketComplete(potentialPacketBuffer: Buffer) {\n  if (potentialPacketBuffer.length < HEADER_LENGTH) {\n    return false;\n  } else {\n    return potentialPacketBuffer.length >= potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n  }\n}\n\nexport function packetLength(potentialPacketBuffer: Buffer) {\n  return potentialPacketBuffer.readUInt16BE(OFFSET.Length);\n}\n", "import { sprintf } from 'sprintf-js';\n\nimport WritableTrackingBuffer from './tracking-buffer/writable-tracking-buffer';\n\nconst optionBufferSize = 20;\n\nconst TOKEN = {\n  VERSION: 0x00,\n  ENCRYPTION: 0x01,\n  INSTOPT: 0x02,\n  THREADID: 0x03,\n  MARS: 0x04,\n  FEDAUTHREQUIRED: 0x06,\n  TERMINATOR: 0xFF\n};\n\nconst ENCRYPT: { [key: string]: number } = {\n  OFF: 0x00,\n  ON: 0x01,\n  NOT_SUP: 0x02,\n  REQ: 0x03\n};\n\nconst encryptByValue: { [key: number]: string } = {};\n\nfor (const name in ENCRYPT) {\n  const value = ENCRYPT[name];\n  encryptByValue[value] = name;\n}\n\nconst MARS: { [key: string]: number } = {\n  OFF: 0x00,\n  ON: 0x01\n};\n\nconst marsByValue: { [key: number]: string } = {};\n\nfor (const name in MARS) {\n  const value = MARS[name];\n  marsByValue[value] = name;\n}\n\ninterface Options {\n  encrypt: boolean;\n  version: {\n    major: number;\n    minor: number;\n    build: number;\n    subbuild: number;\n  };\n}\n\n/*\n  s2.2.6.4\n */\nclass PreloginPayload {\n  declare data: Buffer;\n  declare options: Options;\n\n  declare version: {\n    major: number;\n    minor: number;\n    build: number;\n    subbuild: number;\n  };\n\n  declare encryption: number;\n  declare encryptionString: string;\n\n  declare instance: number;\n\n  declare threadId: number;\n\n  declare mars: number;\n  declare marsString: string;\n  declare fedAuthRequired: number;\n\n  constructor(bufferOrOptions: Buffer | Options = { encrypt: false, version: { major: 0, minor: 0, build: 0, subbuild: 0 } }) {\n    if (bufferOrOptions instanceof Buffer) {\n      this.data = bufferOrOptions;\n      this.options = { encrypt: false, version: { major: 0, minor: 0, build: 0, subbuild: 0 } };\n    } else {\n      this.options = bufferOrOptions;\n      this.createOptions();\n    }\n    this.extractOptions();\n  }\n\n  createOptions() {\n    const options = [\n      this.createVersionOption(),\n      this.createEncryptionOption(),\n      this.createInstanceOption(),\n      this.createThreadIdOption(),\n      this.createMarsOption(),\n      this.createFedAuthOption()\n    ];\n\n    let length = 0;\n    for (let i = 0, len = options.length; i < len; i++) {\n      const option = options[i];\n      length += 5 + option.data.length;\n    }\n    length++; // terminator\n    this.data = Buffer.alloc(length, 0);\n    let optionOffset = 0;\n    let optionDataOffset = 5 * options.length + 1;\n\n    for (let j = 0, len = options.length; j < len; j++) {\n      const option = options[j];\n      this.data.writeUInt8(option.token, optionOffset + 0);\n      this.data.writeUInt16BE(optionDataOffset, optionOffset + 1);\n      this.data.writeUInt16BE(option.data.length, optionOffset + 3);\n      optionOffset += 5;\n      option.data.copy(this.data, optionDataOffset);\n      optionDataOffset += option.data.length;\n    }\n\n    this.data.writeUInt8(TOKEN.TERMINATOR, optionOffset);\n  }\n\n  createVersionOption() {\n    const buffer = new WritableTrackingBuffer(optionBufferSize);\n    buffer.writeUInt8(this.options.version.major);\n    buffer.writeUInt8(this.options.version.minor);\n    buffer.writeUInt16BE(this.options.version.build);\n    buffer.writeUInt16BE(this.options.version.subbuild);\n    return {\n      token: TOKEN.VERSION,\n      data: buffer.data\n    };\n  }\n\n  createEncryptionOption() {\n    const buffer = new WritableTrackingBuffer(optionBufferSize);\n    if (this.options.encrypt) {\n      buffer.writeUInt8(ENCRYPT.ON);\n    } else {\n      buffer.writeUInt8(ENCRYPT.NOT_SUP);\n    }\n    return {\n      token: TOKEN.ENCRYPTION,\n      data: buffer.data\n    };\n  }\n\n  createInstanceOption() {\n    const buffer = new WritableTrackingBuffer(optionBufferSize);\n    buffer.writeUInt8(0x00);\n    return {\n      token: TOKEN.INSTOPT,\n      data: buffer.data\n    };\n  }\n\n  createThreadIdOption() {\n    const buffer = new WritableTrackingBuffer(optionBufferSize);\n    buffer.writeUInt32BE(0x00);\n    return {\n      token: TOKEN.THREADID,\n      data: buffer.data\n    };\n  }\n\n  createMarsOption() {\n    const buffer = new WritableTrackingBuffer(optionBufferSize);\n    buffer.writeUInt8(MARS.OFF);\n    return {\n      token: TOKEN.MARS,\n      data: buffer.data\n    };\n  }\n\n  createFedAuthOption() {\n    const buffer = new WritableTrackingBuffer(optionBufferSize);\n    buffer.writeUInt8(0x01);\n    return {\n      token: TOKEN.FEDAUTHREQUIRED,\n      data: buffer.data\n    };\n  }\n\n  extractOptions() {\n    let offset = 0;\n    while (this.data[offset] !== TOKEN.TERMINATOR) {\n      let dataOffset = this.data.readUInt16BE(offset + 1);\n      const dataLength = this.data.readUInt16BE(offset + 3);\n      switch (this.data[offset]) {\n        case TOKEN.VERSION:\n          this.extractVersion(dataOffset);\n          break;\n        case TOKEN.ENCRYPTION:\n          this.extractEncryption(dataOffset);\n          break;\n        case TOKEN.INSTOPT:\n          this.extractInstance(dataOffset);\n          break;\n        case TOKEN.THREADID:\n          if (dataLength > 0) {\n            this.extractThreadId(dataOffset);\n          }\n          break;\n        case TOKEN.MARS:\n          this.extractMars(dataOffset);\n          break;\n        case TOKEN.FEDAUTHREQUIRED:\n          this.extractFedAuth(dataOffset);\n          break;\n      }\n      offset += 5;\n      dataOffset += dataLength;\n    }\n  }\n\n  extractVersion(offset: number) {\n    this.version = {\n      major: this.data.readUInt8(offset + 0),\n      minor: this.data.readUInt8(offset + 1),\n      build: this.data.readUInt16BE(offset + 2),\n      subbuild: this.data.readUInt16BE(offset + 4)\n    };\n  }\n\n  extractEncryption(offset: number) {\n    this.encryption = this.data.readUInt8(offset);\n    this.encryptionString = encryptByValue[this.encryption];\n  }\n\n  extractInstance(offset: number) {\n    this.instance = this.data.readUInt8(offset);\n  }\n\n  extractThreadId(offset: number) {\n    this.threadId = this.data.readUInt32BE(offset);\n  }\n\n  extractMars(offset: number) {\n    this.mars = this.data.readUInt8(offset);\n    this.marsString = marsByValue[this.mars];\n  }\n\n  extractFedAuth(offset: number) {\n    this.fedAuthRequired = this.data.readUInt8(offset);\n  }\n\n  toString(indent = '') {\n    return indent + 'PreLogin - ' + sprintf(\n      'version:%d.%d.%d.%d, encryption:0x%02X(%s), instopt:0x%02X, threadId:0x%08X, mars:0x%02X(%s)',\n      this.version.major, this.version.minor, this.version.build, this.version.subbuild,\n      this.encryption ? this.encryption : 0,\n      this.encryptionString ? this.encryptionString : '',\n      this.instance ? this.instance : 0,\n      this.threadId ? this.threadId : 0,\n      this.mars ? this.mars : 0,\n      this.marsString ? this.marsString : ''\n    );\n  }\n}\n\nexport default PreloginPayload;\nmodule.exports = PreloginPayload;\n", "export const versions: { [key: string]: number } = {\n  '7_1': 0x71000001,\n  '7_2': 0x72090002,\n  '7_3_A': 0x730A0003,\n  '7_3_B': 0x730B0003,\n  '7_4': 0x74000004,\n  '8_0': 0x08000000\n};\n\nexport const versionsByValue: { [key: number]: string } = {};\n\nfor (const name in versions) {\n  versionsByValue[versions[name]] = name;\n}\n", "import { sprintf } from 'sprintf-js';\nimport { versions } from './tds-versions';\n\nconst FLAGS_1 = {\n  ENDIAN_LITTLE: 0x00,\n  ENDIAN_BIG: 0x01,\n  CHARSET_ASCII: 0x00,\n  CHARSET_EBCDIC: 0x02,\n  FLOAT_IEEE_754: 0x00,\n  FLOAT_VAX: 0x04,\n  FLOAT_ND5000: 0x08,\n  BCP_DUMPLOAD_ON: 0x00,\n  BCP_DUMPLOAD_OFF: 0x10,\n  USE_DB_ON: 0x00,\n  USE_DB_OFF: 0x20,\n  INIT_DB_WARN: 0x00,\n  INIT_DB_FATAL: 0x40,\n  SET_LANG_WARN_OFF: 0x00,\n  SET_LANG_WARN_ON: 0x80\n};\n\nconst FLAGS_2 = {\n  INIT_LANG_WARN: 0x00,\n  INIT_LANG_FATAL: 0x01,\n  ODBC_OFF: 0x00,\n  ODBC_ON: 0x02,\n  F_TRAN_BOUNDARY: 0x04,\n  F_CACHE_CONNECT: 0x08,\n  USER_NORMAL: 0x00,\n  USER_SERVER: 0x10,\n  USER_REMUSER: 0x20,\n  USER_SQLREPL: 0x40,\n  INTEGRATED_SECURITY_OFF: 0x00,\n  INTEGRATED_SECURITY_ON: 0x80\n};\n\nconst TYPE_FLAGS = {\n  SQL_DFLT: 0x00,\n  SQL_TSQL: 0x08,\n  OLEDB_OFF: 0x00,\n  OLEDB_ON: 0x10,\n  READ_WRITE_INTENT: 0x00,\n  READ_ONLY_INTENT: 0x20\n};\n\nconst FLAGS_3 = {\n  CHANGE_PASSWORD_NO: 0x00,\n  CHANGE_PASSWORD_YES: 0x01,\n  BINARY_XML: 0x02,\n  SPAWN_USER_INSTANCE: 0x04,\n  UNKNOWN_COLLATION_HANDLING: 0x08,\n  EXTENSION_USED: 0x10\n};\n\nconst FEDAUTH_OPTIONS = {\n  FEATURE_ID: 0x02,\n  LIBRARY_SECURITYTOKEN: 0x01,\n  LIBRARY_ADAL: 0x02,\n  FEDAUTH_YES_ECHO: 0x01,\n  FEDAUTH_NO_ECHO: 0x00,\n  ADAL_WORKFLOW_USER_PASS: 0x01,\n  ADAL_WORKFLOW_INTEGRATED: 0x02\n};\n\nconst FEATURE_EXT_TERMINATOR = 0xFF;\n\ninterface Options {\n  tdsVersion: number;\n  packetSize: number;\n  clientProgVer: number;\n  clientPid: number;\n  connectionId: number;\n  clientTimeZone: number;\n  clientLcid: number;\n}\n\n/*\n  s2.2.6.3\n */\nclass Login7Payload {\n  declare tdsVersion: number;\n  declare packetSize: number;\n  declare clientProgVer: number;\n  declare clientPid: number;\n  declare connectionId: number;\n  declare clientTimeZone: number;\n  declare clientLcid: number;\n\n  declare readOnlyIntent: boolean;\n  declare initDbFatal: boolean;\n\n  declare userName: string | undefined;\n  declare password: string | undefined;\n  declare serverName: string | undefined;\n  declare appName: string | undefined;\n  declare hostname: string | undefined;\n  declare libraryName: string | undefined;\n  declare language: string | undefined;\n  declare database: string | undefined;\n  declare clientId: Buffer | undefined;\n  declare sspi: Buffer | undefined;\n  declare attachDbFile: string | undefined;\n  declare changePassword: string | undefined;\n\n  declare fedAuth: { type: 'ADAL', echo: boolean, workflow: 'default' | 'integrated' } | { type: 'SECURITYTOKEN', echo: boolean, fedAuthToken: string } | undefined;\n\n  constructor({ tdsVersion, packetSize, clientProgVer, clientPid, connectionId, clientTimeZone, clientLcid }: Options) {\n    this.tdsVersion = tdsVersion;\n    this.packetSize = packetSize;\n    this.clientProgVer = clientProgVer;\n    this.clientPid = clientPid;\n    this.connectionId = connectionId;\n    this.clientTimeZone = clientTimeZone;\n    this.clientLcid = clientLcid;\n\n    this.readOnlyIntent = false;\n    this.initDbFatal = false;\n\n    this.fedAuth = undefined;\n\n    this.userName = undefined;\n    this.password = undefined;\n    this.serverName = undefined;\n    this.appName = undefined;\n    this.hostname = undefined;\n    this.libraryName = undefined;\n    this.language = undefined;\n    this.database = undefined;\n    this.clientId = undefined;\n    this.sspi = undefined;\n    this.attachDbFile = undefined;\n    this.changePassword = undefined;\n  }\n\n  toBuffer() {\n    const fixedData = Buffer.alloc(94);\n    const buffers = [fixedData];\n\n    let offset = 0;\n    let dataOffset = fixedData.length;\n\n    // Length: 4-byte\n    offset = fixedData.writeUInt32LE(0, offset);\n\n    // TDSVersion: 4-byte\n    offset = fixedData.writeUInt32LE(this.tdsVersion, offset);\n\n    // PacketSize: 4-byte\n    offset = fixedData.writeUInt32LE(this.packetSize, offset);\n\n    // ClientProgVer: 4-byte\n    offset = fixedData.writeUInt32LE(this.clientProgVer, offset);\n\n    // ClientPID: 4-byte\n    offset = fixedData.writeUInt32LE(this.clientPid, offset);\n\n    // ConnectionID: 4-byte\n    offset = fixedData.writeUInt32LE(this.connectionId, offset);\n\n    // OptionFlags1: 1-byte\n    offset = fixedData.writeUInt8(this.buildOptionFlags1(), offset);\n\n    // OptionFlags2: 1-byte\n    offset = fixedData.writeUInt8(this.buildOptionFlags2(), offset);\n\n    // TypeFlags: 1-byte\n    offset = fixedData.writeUInt8(this.buildTypeFlags(), offset);\n\n    // OptionFlags3: 1-byte\n    offset = fixedData.writeUInt8(this.buildOptionFlags3(), offset);\n\n    // ClientTimZone: 4-byte\n    offset = fixedData.writeInt32LE(this.clientTimeZone, offset);\n\n    // ClientLCID: 4-byte\n    offset = fixedData.writeUInt32LE(this.clientLcid, offset);\n\n    // ibHostName: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cchHostName: 2-byte\n    if (this.hostname) {\n      const buffer = Buffer.from(this.hostname, 'ucs2');\n\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(dataOffset, offset);\n    }\n\n    // ibUserName: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cchUserName: 2-byte\n    if (this.userName) {\n      const buffer = Buffer.from(this.userName, 'ucs2');\n\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    }\n\n    // ibPassword: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cchPassword: 2-byte\n    if (this.password) {\n      const buffer = Buffer.from(this.password, 'ucs2');\n\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n\n      buffers.push(this.scramblePassword(buffer));\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    }\n\n    // ibAppName: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cchAppName: 2-byte\n    if (this.appName) {\n      const buffer = Buffer.from(this.appName, 'ucs2');\n\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    }\n\n    // ibServerName: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cchServerName: 2-byte\n    if (this.serverName) {\n      const buffer = Buffer.from(this.serverName, 'ucs2');\n\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    }\n\n    // (ibUnused / ibExtension): 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // (cchUnused / cbExtension): 2-byte\n    const extensions = this.buildFeatureExt();\n    offset = fixedData.writeUInt16LE(4, offset);\n    const extensionOffset = Buffer.alloc(4);\n    extensionOffset.writeUInt32LE(dataOffset += 4, 0);\n    dataOffset += extensions.length;\n    buffers.push(extensionOffset, extensions);\n\n    // ibCltIntName: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cchCltIntName: 2-byte\n    if (this.libraryName) {\n      const buffer = Buffer.from(this.libraryName, 'ucs2');\n\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    }\n\n    // ibLanguage: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cchLanguage: 2-byte\n    if (this.language) {\n      const buffer = Buffer.from(this.language, 'ucs2');\n\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    }\n\n    // ibDatabase: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cchDatabase: 2-byte\n    if (this.database) {\n      const buffer = Buffer.from(this.database, 'ucs2');\n\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    }\n\n    // ClientID: 6-byte\n    if (this.clientId) {\n      this.clientId.copy(fixedData, offset, 0, 6);\n    }\n    offset += 6;\n\n    // ibSSPI: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cbSSPI: 2-byte\n    if (this.sspi) {\n      if (this.sspi.length > 65535) {\n        offset = fixedData.writeUInt16LE(65535, offset);\n      } else {\n        offset = fixedData.writeUInt16LE(this.sspi.length, offset);\n      }\n\n      buffers.push(this.sspi);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    }\n\n    // ibAtchDBFile: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cchAtchDBFile: 2-byte\n    if (this.attachDbFile) {\n      const buffer = Buffer.from(this.attachDbFile, 'ucs2');\n\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    }\n\n    // ibChangePassword: 2-byte\n    offset = fixedData.writeUInt16LE(dataOffset, offset);\n\n    // cchChangePassword: 2-byte\n    if (this.changePassword) {\n      const buffer = Buffer.from(this.changePassword, 'ucs2');\n\n      offset = fixedData.writeUInt16LE(buffer.length / 2, offset);\n      dataOffset += buffer.length;\n\n      buffers.push(buffer);\n    } else {\n      offset = fixedData.writeUInt16LE(0, offset);\n    }\n\n    // cbSSPILong: 4-byte\n    if (this.sspi && this.sspi.length > 65535) {\n      fixedData.writeUInt32LE(this.sspi.length, offset);\n    } else {\n      fixedData.writeUInt32LE(0, offset);\n    }\n\n    const data = Buffer.concat(buffers);\n    data.writeUInt32LE(data.length, 0);\n    return data;\n  }\n\n  buildOptionFlags1() {\n    let flags1 = FLAGS_1.ENDIAN_LITTLE | FLAGS_1.CHARSET_ASCII | FLAGS_1.FLOAT_IEEE_754 | FLAGS_1.BCP_DUMPLOAD_OFF | FLAGS_1.USE_DB_OFF | FLAGS_1.SET_LANG_WARN_ON;\n    if (this.initDbFatal) {\n      flags1 |= FLAGS_1.INIT_DB_FATAL;\n    } else {\n      flags1 |= FLAGS_1.INIT_DB_WARN;\n    }\n    return flags1;\n  }\n\n  buildFeatureExt() {\n    const buffers = [];\n\n    const fedAuth = this.fedAuth;\n    if (fedAuth) {\n      switch (fedAuth.type) {\n        case 'ADAL':\n          const buffer = Buffer.alloc(7);\n          buffer.writeUInt8(FEDAUTH_OPTIONS.FEATURE_ID, 0);\n          buffer.writeUInt32LE(2, 1);\n          buffer.writeUInt8((FEDAUTH_OPTIONS.LIBRARY_ADAL << 1) | (fedAuth.echo ? FEDAUTH_OPTIONS.FEDAUTH_YES_ECHO : FEDAUTH_OPTIONS.FEDAUTH_NO_ECHO), 5);\n          buffer.writeUInt8(fedAuth.workflow === 'integrated' ? 0x02 : FEDAUTH_OPTIONS.ADAL_WORKFLOW_USER_PASS, 6);\n          buffers.push(buffer);\n          break;\n\n        case 'SECURITYTOKEN':\n          const token = Buffer.from(fedAuth.fedAuthToken, 'ucs2');\n          const buf = Buffer.alloc(10);\n\n          let offset = 0;\n          offset = buf.writeUInt8(FEDAUTH_OPTIONS.FEATURE_ID, offset);\n          offset = buf.writeUInt32LE(token.length + 4 + 1, offset);\n          offset = buf.writeUInt8((FEDAUTH_OPTIONS.LIBRARY_SECURITYTOKEN << 1) | (fedAuth.echo ? FEDAUTH_OPTIONS.FEDAUTH_YES_ECHO : FEDAUTH_OPTIONS.FEDAUTH_NO_ECHO), offset);\n          buf.writeInt32LE(token.length, offset);\n\n          buffers.push(buf);\n          buffers.push(token);\n\n          break;\n      }\n    }\n\n    if (this.tdsVersion >= versions['7_4']) {\n      // Signal UTF-8 support: Value 0x0A, bit 0 must be set to 1. Added in TDS 7.4.\n      const UTF8_SUPPORT_FEATURE_ID = 0x0a;\n      const UTF8_SUPPORT_CLIENT_SUPPORTS_UTF8 = 0x01;\n      const buf = Buffer.alloc(6);\n      buf.writeUInt8(UTF8_SUPPORT_FEATURE_ID, 0);\n      buf.writeUInt32LE(1, 1);\n      buf.writeUInt8(UTF8_SUPPORT_CLIENT_SUPPORTS_UTF8, 5);\n      buffers.push(buf);\n    }\n\n    buffers.push(Buffer.from([FEATURE_EXT_TERMINATOR]));\n\n    return Buffer.concat(buffers);\n  }\n\n  buildOptionFlags2() {\n    let flags2 = FLAGS_2.INIT_LANG_WARN | FLAGS_2.ODBC_OFF | FLAGS_2.USER_NORMAL;\n    if (this.sspi) {\n      flags2 |= FLAGS_2.INTEGRATED_SECURITY_ON;\n    } else {\n      flags2 |= FLAGS_2.INTEGRATED_SECURITY_OFF;\n    }\n    return flags2;\n  }\n\n  buildTypeFlags() {\n    let typeFlags = TYPE_FLAGS.SQL_DFLT | TYPE_FLAGS.OLEDB_OFF;\n    if (this.readOnlyIntent) {\n      typeFlags |= TYPE_FLAGS.READ_ONLY_INTENT;\n    } else {\n      typeFlags |= TYPE_FLAGS.READ_WRITE_INTENT;\n    }\n    return typeFlags;\n  }\n\n  buildOptionFlags3() {\n    return FLAGS_3.CHANGE_PASSWORD_NO | FLAGS_3.UNKNOWN_COLLATION_HANDLING | FLAGS_3.EXTENSION_USED;\n  }\n\n  scramblePassword(password: Buffer) {\n    for (let b = 0, len = password.length; b < len; b++) {\n      let byte = password[b];\n      const lowNibble = byte & 0x0f;\n      const highNibble = byte >> 4;\n      byte = (lowNibble << 4) | highNibble;\n      byte = byte ^ 0xa5;\n      password[b] = byte;\n    }\n    return password;\n  }\n\n  toString(indent = '') {\n    return indent + 'Login7 - ' +\n      sprintf('TDS:0x%08X, PacketSize:0x%08X, ClientProgVer:0x%08X, ClientPID:0x%08X, ConnectionID:0x%08X',\n              this.tdsVersion, this.packetSize, this.clientProgVer, this.clientPid, this.connectionId\n      ) + '\\n' + indent + '         ' +\n      sprintf('Flags1:0x%02X, Flags2:0x%02X, TypeFlags:0x%02X, Flags3:0x%02X, ClientTimezone:%d, ClientLCID:0x%08X',\n              this.buildOptionFlags1(), this.buildOptionFlags2(), this.buildTypeFlags(), this.buildOptionFlags3(), this.clientTimeZone, this.clientLcid\n      ) + '\\n' + indent + '         ' +\n      sprintf(\"Hostname:'%s', Username:'%s', Password:'%s', AppName:'%s', ServerName:'%s', LibraryName:'%s'\",\n              this.hostname, this.userName, this.password, this.appName, this.serverName, this.libraryName\n      ) + '\\n' + indent + '         ' +\n      sprintf(\"Language:'%s', Database:'%s', SSPI:'%s', AttachDbFile:'%s', ChangePassword:'%s'\",\n              this.language, this.database, this.sspi, this.attachDbFile, this.changePassword\n      );\n  }\n}\n\nexport default Login7Payload;\nmodule.exports = Login7Payload;\n", "/**\r\n * [js-md4]{@link https://github.com/emn178/js-md4}\r\n *\r\n * @namespace md4\r\n * @version 0.3.2\r\n * @author Yi-Cyuan Chen [emn178@gmail.com]\r\n * @copyright Yi-Cyuan Chen 2015-2027\r\n * @license MIT\r\n */\r\n/*jslint bitwise: true */\r\n(function () {\r\n  'use strict';\r\n\r\n  var root = typeof window === 'object' ? window : {};\r\n  var NODE_JS = !root.JS_MD4_NO_NODE_JS && typeof process === 'object' && process.versions && process.versions.node;\r\n  if (NODE_JS) {\r\n    root = global;\r\n  }\r\n  var COMMON_JS = !root.JS_MD4_NO_COMMON_JS && typeof module === 'object' && module.exports;\r\n  var AMD = typeof define === 'function' && define.amd;\r\n  var ARRAY_BUFFER = !root.JS_MD4_NO_ARRAY_BUFFER && typeof ArrayBuffer !== 'undefined';\r\n  var HEX_CHARS = '0123456789abcdef'.split('');\r\n  var EXTRA = [128, 32768, 8388608, -2147483648];\r\n  var SHIFT = [0, 8, 16, 24];\r\n  var OUTPUT_TYPES = ['hex', 'array', 'digest', 'buffer', 'arrayBuffer'];\r\n\r\n  var blocks = [], buffer8;\r\n  if (ARRAY_BUFFER) {\r\n    var buffer = new ArrayBuffer(68);\r\n    buffer8 = new Uint8Array(buffer);\r\n    blocks = new Uint32Array(buffer);\r\n  }\r\n\r\n  /**\r\n   * @method hex\r\n   * @memberof md4\r\n   * @description Output hash as hex string\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {String} Hex string\r\n   * @example\r\n   * md4.hex('The quick brown fox jumps over the lazy dog');\r\n   * // equal to\r\n   * md4('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method digest\r\n   * @memberof md4\r\n   * @description Output hash as bytes array\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Array} Bytes array\r\n   * @example\r\n   * md4.digest('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method array\r\n   * @memberof md4\r\n   * @description Output hash as bytes array\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Array} Bytes array\r\n   * @example\r\n   * md4.array('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  /**\r\n   * @method buffer\r\n   * @memberof md4\r\n   * @description Output hash as ArrayBuffer\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @example\r\n   * md4.buffer('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  var createOutputMethod = function (outputType) {\r\n    return function(message) {\r\n      return new Md4(true).update(message)[outputType]();\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @method create\r\n   * @memberof md4\r\n   * @description Create Md4 object\r\n   * @returns {Md4} MD4 object.\r\n   * @example\r\n   * var hash = md4.create();\r\n   */\r\n  /**\r\n   * @method update\r\n   * @memberof md4\r\n   * @description Create and update Md4 object\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Md4} MD4 object.\r\n   * @example\r\n   * var hash = md4.update('The quick brown fox jumps over the lazy dog');\r\n   * // equal to\r\n   * var hash = md4.create();\r\n   * hash.update('The quick brown fox jumps over the lazy dog');\r\n   */\r\n  var createMethod = function () {\r\n    var method = createOutputMethod('hex');\r\n    if (NODE_JS) {\r\n      method = nodeWrap(method);\r\n    }\r\n    method.create = function () {\r\n      return new Md4();\r\n    };\r\n    method.update = function (message) {\r\n      return method.create().update(message);\r\n    };\r\n    for (var i = 0; i < OUTPUT_TYPES.length; ++i) {\r\n      var type = OUTPUT_TYPES[i];\r\n      method[type] = createOutputMethod(type);\r\n    }\r\n    return method;\r\n  };\r\n\r\n  var nodeWrap = function (method) {\r\n    var crypto = require('crypto');\r\n    var Buffer = require('buffer').Buffer;\r\n    var nodeMethod = function (message) {\r\n      if (typeof message === 'string') {\r\n        return crypto.createHash('md4').update(message, 'utf8').digest('hex');\r\n      } else if (ARRAY_BUFFER && message instanceof ArrayBuffer) {\r\n        message = new Uint8Array(message);\r\n      } else if (message.length === undefined) {\r\n        return method(message);\r\n      }\r\n      return crypto.createHash('md4').update(new Buffer(message)).digest('hex');\r\n    };\r\n    return nodeMethod;\r\n  };\r\n\r\n  /**\r\n   * Md4 class\r\n   * @class Md4\r\n   * @description This is internal class.\r\n   * @see {@link md4.create}\r\n   */\r\n  function Md4(sharedMemory) {\r\n    if (sharedMemory) {\r\n      blocks[0] = blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      this.blocks = blocks;\r\n      this.buffer8 = buffer8;\r\n    } else {\r\n      if (ARRAY_BUFFER) {\r\n        var buffer = new ArrayBuffer(68);\r\n        this.buffer8 = new Uint8Array(buffer);\r\n        this.blocks = new Uint32Array(buffer);\r\n      } else {\r\n        this.blocks = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n      }\r\n    }\r\n    this.h0 = this.h1 = this.h2 = this.h3 = this.start = this.bytes = 0;\r\n    this.finalized = this.hashed = false;\r\n    this.first = true;\r\n  }\r\n\r\n  /**\r\n   * @method update\r\n   * @memberof Md4\r\n   * @instance\r\n   * @description Update hash\r\n   * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n   * @returns {Md4} MD4 object.\r\n   * @see {@link md4.update}\r\n   */\r\n  Md4.prototype.update = function (message) {\r\n    if (this.finalized) {\r\n      return;\r\n    }\r\n    var notString = typeof message !== 'string';\r\n    if (notString && ARRAY_BUFFER && message instanceof ArrayBuffer) {\r\n      message = new Uint8Array(message);\r\n    }\r\n    var code, index = 0, i, length = message.length || 0, blocks = this.blocks;\r\n    var buffer8 = this.buffer8;\r\n\r\n    while (index < length) {\r\n      if (this.hashed) {\r\n        this.hashed = false;\r\n        blocks[0] = blocks[16];\r\n        blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n        blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n        blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n        blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n      }\r\n\r\n      if (notString) {\r\n        if (ARRAY_BUFFER) {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            buffer8[i++] = message[index];\r\n          }\r\n        } else {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            blocks[i >> 2] |= message[index] << SHIFT[i++ & 3];\r\n          }\r\n        }\r\n      } else {\r\n        if (ARRAY_BUFFER) {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            code = message.charCodeAt(index);\r\n            if (code < 0x80) {\r\n              buffer8[i++] = code;\r\n            } else if (code < 0x800) {\r\n              buffer8[i++] = 0xc0 | (code >> 6);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            } else if (code < 0xd800 || code >= 0xe000) {\r\n              buffer8[i++] = 0xe0 | (code >> 12);\r\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            } else {\r\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n              buffer8[i++] = 0xf0 | (code >> 18);\r\n              buffer8[i++] = 0x80 | ((code >> 12) & 0x3f);\r\n              buffer8[i++] = 0x80 | ((code >> 6) & 0x3f);\r\n              buffer8[i++] = 0x80 | (code & 0x3f);\r\n            }\r\n          }\r\n        } else {\r\n          for (i = this.start; index < length && i < 64; ++index) {\r\n            code = message.charCodeAt(index);\r\n            if (code < 0x80) {\r\n              blocks[i >> 2] |= code << SHIFT[i++ & 3];\r\n            } else if (code < 0x800) {\r\n              blocks[i >> 2] |= (0xc0 | (code >> 6)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            } else if (code < 0xd800 || code >= 0xe000) {\r\n              blocks[i >> 2] |= (0xe0 | (code >> 12)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            } else {\r\n              code = 0x10000 + (((code & 0x3ff) << 10) | (message.charCodeAt(++index) & 0x3ff));\r\n              blocks[i >> 2] |= (0xf0 | (code >> 18)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 12) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | ((code >> 6) & 0x3f)) << SHIFT[i++ & 3];\r\n              blocks[i >> 2] |= (0x80 | (code & 0x3f)) << SHIFT[i++ & 3];\r\n            }\r\n          }\r\n        }\r\n      }\r\n      this.lastByteIndex = i;\r\n      this.bytes += i - this.start;\r\n      if (i >= 64) {\r\n        this.start = i - 64;\r\n        this.hash();\r\n        this.hashed = true;\r\n      } else {\r\n        this.start = i;\r\n      }\r\n    }\r\n    return this;\r\n  };\r\n\r\n  Md4.prototype.finalize = function () {\r\n    if (this.finalized) {\r\n      return;\r\n    }\r\n    this.finalized = true;\r\n    var blocks = this.blocks, i = this.lastByteIndex;\r\n    blocks[i >> 2] |= EXTRA[i & 3];\r\n    if (i >= 56) {\r\n      if (!this.hashed) {\r\n        this.hash();\r\n      }\r\n      blocks[0] = blocks[16];\r\n      blocks[16] = blocks[1] = blocks[2] = blocks[3] =\r\n      blocks[4] = blocks[5] = blocks[6] = blocks[7] =\r\n      blocks[8] = blocks[9] = blocks[10] = blocks[11] =\r\n      blocks[12] = blocks[13] = blocks[14] = blocks[15] = 0;\r\n    }\r\n    blocks[14] = this.bytes << 3;\r\n    this.hash();\r\n  };\r\n\r\n  Md4.prototype.hash = function () {\r\n    var a, b, c, d, ab, bc, cd, da, blocks = this.blocks;\r\n\r\n    if (this.first) {\r\n      a = blocks[0] - 1;\r\n      a = (a << 3) | (a >>> 29);\r\n      d = ((a & 0xefcdab89) | (~a & 0x98badcfe)) + blocks[1] + 271733878;\r\n      d = (d << 7) | (d >>> 25);\r\n      c = ((d & a) | (~d & 0xefcdab89)) + blocks[2] - 1732584194;\r\n      c = (c << 11) | (c >>> 21);\r\n      b = ((c & d) | (~c & a)) + blocks[3] - 271733879;\r\n      b = (b << 19) | (b >>> 13);\r\n    } else {\r\n      a = this.h0;\r\n      b = this.h1;\r\n      c = this.h2;\r\n      d = this.h3;\r\n      a += ((b & c) | (~b & d)) + blocks[0];\r\n      a = (a << 3) | (a >>> 29);\r\n      d += ((a & b) | (~a & c)) + blocks[1];\r\n      d = (d << 7) | (d >>> 25);\r\n      c += ((d & a) | (~d & b)) + blocks[2];\r\n      c = (c << 11) | (c >>> 21);\r\n      b += ((c & d) | (~c & a)) + blocks[3];\r\n      b = (b << 19) | (b >>> 13);\r\n    }\r\n    a += ((b & c) | (~b & d)) + blocks[4];\r\n    a = (a << 3) | (a >>> 29);\r\n    d += ((a & b) | (~a & c)) + blocks[5];\r\n    d = (d << 7) | (d >>> 25);\r\n    c += ((d & a) | (~d & b)) + blocks[6];\r\n    c = (c << 11) | (c >>> 21);\r\n    b += ((c & d) | (~c & a)) + blocks[7];\r\n    b = (b << 19) | (b >>> 13);\r\n    a += ((b & c) | (~b & d)) + blocks[8];\r\n    a = (a << 3) | (a >>> 29);\r\n    d += ((a & b) | (~a & c)) + blocks[9];\r\n    d = (d << 7) | (d >>> 25);\r\n    c += ((d & a) | (~d & b)) + blocks[10];\r\n    c = (c << 11) | (c >>> 21);\r\n    b += ((c & d) | (~c & a)) + blocks[11];\r\n    b = (b << 19) | (b >>> 13);\r\n    a += ((b & c) | (~b & d)) + blocks[12];\r\n    a = (a << 3) | (a >>> 29);\r\n    d += ((a & b) | (~a & c)) + blocks[13];\r\n    d = (d << 7) | (d >>> 25);\r\n    c += ((d & a) | (~d & b)) + blocks[14];\r\n    c = (c << 11) | (c >>> 21);\r\n    b += ((c & d) | (~c & a)) + blocks[15];\r\n    b = (b << 19) | (b >>> 13);\r\n\r\n    bc = b & c;\r\n    a += (bc | (b & d) | (c & d)) + blocks[0] + 1518500249;\r\n    a = (a << 3) | (a >>> 29);\r\n    ab = a & b;\r\n    d += (ab | (a & c) | bc) + blocks[4] + 1518500249;\r\n    d = (d << 5) | (d >>> 27);\r\n    da = d & a;\r\n    c += (da | (d & b) | ab) + blocks[8] + 1518500249;\r\n    c = (c << 9) | (c >>> 23);\r\n    cd = c & d;\r\n    b += (cd | (c & a) | da) + blocks[12] + 1518500249;\r\n    b = (b << 13) | (b >>> 19);\r\n    bc = b & c;\r\n    a += (bc | (b & d) | cd) + blocks[1] + 1518500249;\r\n    a = (a << 3) | (a >>> 29);\r\n    ab = a & b;\r\n    d += (ab | (a & c) | bc) + blocks[5] + 1518500249;\r\n    d = (d << 5) | (d >>> 27);\r\n    da = d & a;\r\n    c += (da | (d & b) | ab) + blocks[9] + 1518500249;\r\n    c = (c << 9) | (c >>> 23);\r\n    cd = c & d;\r\n    b += (cd | (c & a) | da) + blocks[13] + 1518500249;\r\n    b = (b << 13) | (b >>> 19);\r\n    bc = b & c;\r\n    a += (bc | (b & d) | cd) + blocks[2] + 1518500249;\r\n    a = (a << 3) | (a >>> 29);\r\n    ab = a & b;\r\n    d += (ab | (a & c) | bc) + blocks[6] + 1518500249;\r\n    d = (d << 5) | (d >>> 27);\r\n    da = d & a;\r\n    c += (da | (d & b) | ab) + blocks[10] + 1518500249;\r\n    c = (c << 9) | (c >>> 23);\r\n    cd = c & d;\r\n    b += (cd | (c & a) | da) + blocks[14] + 1518500249;\r\n    b = (b << 13) | (b >>> 19);\r\n    bc = b & c;\r\n    a += (bc | (b & d) | cd) + blocks[3] + 1518500249;\r\n    a = (a << 3) | (a >>> 29);\r\n    ab = a & b;\r\n    d += (ab | (a & c) | bc) + blocks[7] + 1518500249;\r\n    d = (d << 5) | (d >>> 27);\r\n    da = d & a;\r\n    c += (da | (d & b) | ab) + blocks[11] + 1518500249;\r\n    c = (c << 9) | (c >>> 23);\r\n    b += ((c & d) | (c & a) | da) + blocks[15] + 1518500249;\r\n    b = (b << 13) | (b >>> 19);\r\n\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[0] + 1859775393;\r\n    a = (a << 3) | (a >>> 29);\r\n    d += (bc ^ a) + blocks[8] + 1859775393;\r\n    d = (d << 9) | (d >>> 23);\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[4] + 1859775393;\r\n    c = (c << 11) | (c >>> 21);\r\n    b += (da ^ c) + blocks[12] + 1859775393;\r\n    b = (b << 15) | (b >>> 17);\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[2] + 1859775393;\r\n    a = (a << 3) | (a >>> 29);\r\n    d += (bc ^ a) + blocks[10] + 1859775393;\r\n    d = (d << 9) | (d >>> 23);\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[6] + 1859775393;\r\n    c = (c << 11) | (c >>> 21);\r\n    b += (da ^ c) + blocks[14] + 1859775393;\r\n    b = (b << 15) | (b >>> 17);\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[1] + 1859775393;\r\n    a = (a << 3) | (a >>> 29);\r\n    d += (bc ^ a) + blocks[9] + 1859775393;\r\n    d = (d << 9) | (d >>> 23);\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[5] + 1859775393;\r\n    c = (c << 11) | (c >>> 21);\r\n    b += (da ^ c) + blocks[13] + 1859775393;\r\n    b = (b << 15) | (b >>> 17);\r\n    bc = b ^ c;\r\n    a += (bc ^ d) + blocks[3] + 1859775393;\r\n    a = (a << 3) | (a >>> 29);\r\n    d += (bc ^ a) + blocks[11] + 1859775393;\r\n    d = (d << 9) | (d >>> 23);\r\n    da = d ^ a;\r\n    c += (da ^ b) + blocks[7] + 1859775393;\r\n    c = (c << 11) | (c >>> 21);\r\n    b += (da ^ c) + blocks[15] + 1859775393;\r\n    b = (b << 15) | (b >>> 17);\r\n\r\n    if (this.first) {\r\n      this.h0 = a + 1732584193 << 0;\r\n      this.h1 = b - 271733879 << 0;\r\n      this.h2 = c - 1732584194 << 0;\r\n      this.h3 = d + 271733878 << 0;\r\n      this.first = false;\r\n    } else {\r\n      this.h0 = this.h0 + a << 0;\r\n      this.h1 = this.h1 + b << 0;\r\n      this.h2 = this.h2 + c << 0;\r\n      this.h3 = this.h3 + d << 0;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * @method hex\r\n   * @memberof Md4\r\n   * @instance\r\n   * @description Output hash as hex string\r\n   * @returns {String} Hex string\r\n   * @see {@link md4.hex}\r\n   * @example\r\n   * hash.hex();\r\n   */\r\n  Md4.prototype.hex = function () {\r\n    this.finalize();\r\n\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\r\n\r\n    return HEX_CHARS[(h0 >> 4) & 0x0F] + HEX_CHARS[h0 & 0x0F] +\r\n      HEX_CHARS[(h0 >> 12) & 0x0F] + HEX_CHARS[(h0 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 20) & 0x0F] + HEX_CHARS[(h0 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h0 >> 28) & 0x0F] + HEX_CHARS[(h0 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 4) & 0x0F] + HEX_CHARS[h1 & 0x0F] +\r\n      HEX_CHARS[(h1 >> 12) & 0x0F] + HEX_CHARS[(h1 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 20) & 0x0F] + HEX_CHARS[(h1 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h1 >> 28) & 0x0F] + HEX_CHARS[(h1 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 4) & 0x0F] + HEX_CHARS[h2 & 0x0F] +\r\n      HEX_CHARS[(h2 >> 12) & 0x0F] + HEX_CHARS[(h2 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 20) & 0x0F] + HEX_CHARS[(h2 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h2 >> 28) & 0x0F] + HEX_CHARS[(h2 >> 24) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 4) & 0x0F] + HEX_CHARS[h3 & 0x0F] +\r\n      HEX_CHARS[(h3 >> 12) & 0x0F] + HEX_CHARS[(h3 >> 8) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 20) & 0x0F] + HEX_CHARS[(h3 >> 16) & 0x0F] +\r\n      HEX_CHARS[(h3 >> 28) & 0x0F] + HEX_CHARS[(h3 >> 24) & 0x0F];\r\n  };\r\n\r\n  /**\r\n   * @method toString\r\n   * @memberof Md4\r\n   * @instance\r\n   * @description Output hash as hex string\r\n   * @returns {String} Hex string\r\n   * @see {@link md4.hex}\r\n   * @example\r\n   * hash.toString();\r\n   */\r\n  Md4.prototype.toString = Md4.prototype.hex;\r\n\r\n  /**\r\n   * @method digest\r\n   * @memberof Md4\r\n   * @instance\r\n   * @description Output hash as bytes array\r\n   * @returns {Array} Bytes array\r\n   * @see {@link md4.digest}\r\n   * @example\r\n   * hash.digest();\r\n   */\r\n  Md4.prototype.digest = function() {\r\n    this.finalize();\r\n\r\n    var h0 = this.h0, h1 = this.h1, h2 = this.h2, h3 = this.h3;\r\n    return [\r\n      h0 & 0xFF, (h0 >> 8) & 0xFF, (h0 >> 16) & 0xFF, (h0 >> 24) & 0xFF,\r\n      h1 & 0xFF, (h1 >> 8) & 0xFF, (h1 >> 16) & 0xFF, (h1 >> 24) & 0xFF,\r\n      h2 & 0xFF, (h2 >> 8) & 0xFF, (h2 >> 16) & 0xFF, (h2 >> 24) & 0xFF,\r\n      h3 & 0xFF, (h3 >> 8) & 0xFF, (h3 >> 16) & 0xFF, (h3 >> 24) & 0xFF\r\n    ];\r\n  };\r\n\r\n  /**\r\n   * @method array\r\n   * @memberof Md4\r\n   * @instance\r\n   * @description Output hash as bytes array\r\n   * @returns {Array} Bytes array\r\n   * @see {@link md4.array}\r\n   * @example\r\n   * hash.array();\r\n   */\r\n  Md4.prototype.array = Md4.prototype.digest;\r\n\r\n  /**\r\n   * @method arrayBuffer\r\n   * @memberof Md4\r\n   * @instance\r\n   * @description Output hash as ArrayBuffer\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @see {@link md4.arrayBuffer}\r\n   * @example\r\n   * hash.arrayBuffer();\r\n   */\r\n  Md4.prototype.arrayBuffer = function() {\r\n    this.finalize();\r\n\r\n    var buffer = new ArrayBuffer(16);\r\n    var blocks = new Uint32Array(buffer);\r\n    blocks[0] = this.h0;\r\n    blocks[1] = this.h1;\r\n    blocks[2] = this.h2;\r\n    blocks[3] = this.h3;\r\n    return buffer;\r\n  };\r\n\r\n  /**\r\n   * @method buffer\r\n   * @deprecated This maybe confuse with Buffer in node.js. Please use arrayBuffer instead.\r\n   * @memberof Md4\r\n   * @instance\r\n   * @description Output hash as ArrayBuffer\r\n   * @returns {ArrayBuffer} ArrayBuffer\r\n   * @see {@link md4.buffer}\r\n   * @example\r\n   * hash.buffer();\r\n   */\r\n  Md4.prototype.buffer = Md4.prototype.arrayBuffer;\r\n\r\n  var exports = createMethod();\r\n\r\n  if (COMMON_JS) {\r\n    module.exports = exports;\r\n  } else {\r\n    /**\r\n     * @method md4\b\r\n     * @description MD4 hash function, export to global in browsers.\r\n     * @param {String|Array|Uint8Array|ArrayBuffer} message message to hash\r\n     * @returns {String} md4 hashes\r\n     * @example\r\n     * md4(''); // 31d6cfe0d16ae931b73c59d7e0c089c0\r\n     * md4('The quick brown fox jumps over the lazy dog'); // 1bee69a46ba811185c194762abaeae90\r\n     * md4('The quick brown fox jumps over the lazy dog.'); // 2812c6c7136898c51f6f6739ad08750e\r\n     *\r\n     * // It also supports UTF-8 encoding\r\n     * md4('中文'); // 223088bf7bd45a16436b15360c5fc5a0\r\n     *\r\n     * // It also supports byte `Array`, `Uint8Array`, `ArrayBuffer`\r\n     * md4([]); // 31d6cfe0d16ae931b73c59d7e0c089c0\r\n     * md4(new Uint8Array([])); // 31d6cfe0d16ae931b73c59d7e0c089c0\r\n     */\r\n    root.md4 = exports;\r\n    if (AMD) {\r\n      define(function () {\r\n        return exports;\r\n      });\r\n    }\r\n  }\r\n})();\r\n", "import WritableTrackingBuffer from './tracking-buffer/writable-tracking-buffer';\nimport * as crypto from 'crypto';\nimport md4 from 'js-md4';\n\ninterface Options {\n  domain: string;\n  userName: string;\n  password: string;\n  ntlmpacket: {\n    target: Buffer;\n    nonce: Buffer;\n  };\n}\n\nclass NTLMResponsePayload {\n  declare data: Buffer;\n\n  constructor(loginData: Options) {\n    this.data = this.createResponse(loginData);\n  }\n\n  toString(indent = '') {\n    return indent + 'NTLM Auth';\n  }\n\n  createResponse(challenge: Options) {\n    const client_nonce = this.createClientNonce();\n    const lmv2len = 24;\n    const ntlmv2len = 16;\n    const domain = challenge.domain;\n    const username = challenge.userName;\n    const password = challenge.password;\n    const ntlmData = challenge.ntlmpacket;\n    const server_data = ntlmData.target;\n    const server_nonce = ntlmData.nonce;\n    const bufferLength = 64 + (domain.length * 2) + (username.length * 2) + lmv2len + ntlmv2len + 8 + 8 + 8 + 4 + server_data.length + 4;\n    const data = new WritableTrackingBuffer(bufferLength);\n    data.position = 0;\n    data.writeString('NTLMSSP\\u0000', 'utf8');\n    data.writeUInt32LE(0x03);\n    const baseIdx = 64;\n    const dnIdx = baseIdx;\n    const unIdx = dnIdx + domain.length * 2;\n    const l2Idx = unIdx + username.length * 2;\n    const ntIdx = l2Idx + lmv2len;\n    data.writeUInt16LE(lmv2len);\n    data.writeUInt16LE(lmv2len);\n    data.writeUInt32LE(l2Idx);\n    data.writeUInt16LE(ntlmv2len);\n    data.writeUInt16LE(ntlmv2len);\n    data.writeUInt32LE(ntIdx);\n    data.writeUInt16LE(domain.length * 2);\n    data.writeUInt16LE(domain.length * 2);\n    data.writeUInt32LE(dnIdx);\n    data.writeUInt16LE(username.length * 2);\n    data.writeUInt16LE(username.length * 2);\n    data.writeUInt32LE(unIdx);\n    data.writeUInt16LE(0);\n    data.writeUInt16LE(0);\n    data.writeUInt32LE(baseIdx);\n    data.writeUInt16LE(0);\n    data.writeUInt16LE(0);\n    data.writeUInt32LE(baseIdx);\n    data.writeUInt16LE(0x8201);\n    data.writeUInt16LE(0x08);\n    data.writeString(domain, 'ucs2');\n    data.writeString(username, 'ucs2');\n    const lmv2Data = this.lmv2Response(domain, username, password, server_nonce, client_nonce);\n    data.copyFrom(lmv2Data);\n    const genTime = new Date().getTime();\n    const ntlmDataBuffer = this.ntlmv2Response(domain, username, password, server_nonce, server_data, client_nonce, genTime);\n    data.copyFrom(ntlmDataBuffer);\n    data.writeUInt32LE(0x0101);\n    data.writeUInt32LE(0x0000);\n    const timestamp = this.createTimestamp(genTime);\n    data.copyFrom(timestamp);\n    data.copyFrom(client_nonce);\n    data.writeUInt32LE(0x0000);\n    data.copyFrom(server_data);\n    data.writeUInt32LE(0x0000);\n    return data.data;\n  }\n\n  createClientNonce() {\n    const client_nonce = Buffer.alloc(8, 0);\n    let nidx = 0;\n    while (nidx < 8) {\n      client_nonce.writeUInt8(Math.ceil(Math.random() * 255), nidx);\n      nidx++;\n    }\n    return client_nonce;\n  }\n\n  ntlmv2Response(domain: string, user: string, password: string, serverNonce: Buffer, targetInfo: Buffer, clientNonce: Buffer, mytime: number) {\n    const timestamp = this.createTimestamp(mytime);\n    const hash = this.ntv2Hash(domain, user, password);\n    const dataLength = 40 + targetInfo.length;\n    const data = Buffer.alloc(dataLength, 0);\n    serverNonce.copy(data, 0, 0, 8);\n    data.writeUInt32LE(0x101, 8);\n    data.writeUInt32LE(0x0, 12);\n    timestamp.copy(data, 16, 0, 8);\n    clientNonce.copy(data, 24, 0, 8);\n    data.writeUInt32LE(0x0, 32);\n    targetInfo.copy(data, 36, 0, targetInfo.length);\n    data.writeUInt32LE(0x0, 36 + targetInfo.length);\n    return this.hmacMD5(data, hash);\n  }\n\n  createTimestamp(time: number) {\n    const tenthsOfAMicrosecond = (BigInt(time) + BigInt(11644473600)) * BigInt(10000000);\n\n    const lo = Number(tenthsOfAMicrosecond & BigInt(0xffffffff));\n    const hi = Number((tenthsOfAMicrosecond >> BigInt(32)) & BigInt(0xffffffff));\n\n    const result = Buffer.alloc(8);\n    result.writeUInt32LE(lo, 0);\n    result.writeUInt32LE(hi, 4);\n    return result;\n  }\n\n  lmv2Response(domain: string, user: string, password: string, serverNonce: Buffer, clientNonce: Buffer) {\n    const hash = this.ntv2Hash(domain, user, password);\n    const data = Buffer.alloc(serverNonce.length + clientNonce.length, 0);\n\n    serverNonce.copy(data);\n    clientNonce.copy(data, serverNonce.length, 0, clientNonce.length);\n\n    const newhash = this.hmacMD5(data, hash);\n    const response = Buffer.alloc(newhash.length + clientNonce.length, 0);\n\n    newhash.copy(response);\n    clientNonce.copy(response, newhash.length, 0, clientNonce.length);\n\n    return response;\n  }\n\n  ntv2Hash(domain: string, user: string, password: string) {\n    const hash = this.ntHash(password);\n    const identity = Buffer.from(user.toUpperCase() + domain.toUpperCase(), 'ucs2');\n    return this.hmacMD5(identity, hash);\n  }\n\n  ntHash(text: string) {\n    const unicodeString = Buffer.from(text, 'ucs2');\n    return Buffer.from(md4.arrayBuffer(unicodeString));\n  }\n\n  hmacMD5(data: Buffer, key: Buffer) {\n    return crypto.createHmac('MD5', key).update(data).digest();\n  }\n}\n\nexport default NTLMResponsePayload;\nmodule.exports = NTLMResponsePayload;\n", "export class ConnectionError extends Error {\n  declare code: string | undefined;\n\n  declare isTransient: boolean | undefined;\n\n  constructor(message: string, code?: string) {\n    super(message);\n\n    this.code = code;\n  }\n}\n\nexport class RequestError extends Error {\n  declare code: string | undefined;\n\n  declare number: number | undefined;\n  declare state: number | undefined;\n  declare class: number | undefined;\n  declare serverName: string | undefined;\n  declare procName: string | undefined;\n  declare lineNumber: number | undefined;\n\n  constructor(message: string, code?: string) {\n    super(message);\n\n    this.code = code;\n  }\n}\n", "// This code is based on the `mssql-jdbc` library published under the conditions of MIT license.\n// Copyright (c) 2019 Microsoft Corporation\n\nimport { CEKEntry } from './cek-entry';\nimport { type BaseMetadata } from '../metadata-parser';\n\nexport interface EncryptionKeyInfo {\n  encryptedKey: Buffer;\n  dbId: number;\n  keyId: number;\n  keyVersion: number;\n  mdVersion: Buffer;\n  keyPath: string;\n  keyStoreName: string;\n  algorithmName: string;\n}\n\nexport enum SQLServerEncryptionType {\n  Deterministic = 1,\n  Randomized = 2,\n  PlainText = 0,\n}\n\nexport interface EncryptionAlgorithm {\n  encryptData: (plainText: Buffer) => Buffer;\n  decryptData: (cipherText: Buffer) => Buffer;\n}\n\nexport interface CryptoMetadata {\n  cekEntry?: CEKEntry;\n  cipherAlgorithmId: number;\n  cipherAlgorithmName?: string;\n  normalizationRuleVersion: Buffer;\n  encryptionKeyInfo?: EncryptionKeyInfo;\n  ordinal: number;\n  encryptionType: SQLServerEncryptionType;\n  cipherAlgorithm?: EncryptionAlgorithm;\n  baseTypeInfo?: BaseMetadata;\n}\n\nexport interface HashMap<T> {\n  [hash: string]: T;\n}\n\n\n// Fields in the first resultset of \"sp_describe_parameter_encryption\"\n// We expect the server to return the fields in the resultset in the same order as mentioned below.\n// If the server changes the below order, then transparent parameter encryption will break.\nexport enum DescribeParameterEncryptionResultSet1 {\n  KeyOrdinal,\n  DbId,\n  KeyId,\n  KeyVersion,\n  KeyMdVersion,\n  EncryptedKey,\n  ProviderName,\n  KeyPath,\n  KeyEncryptionAlgorithm\n}\n\n\n// Fields in the second resultset of \"sp_describe_parameter_encryption\"\n// We expect the server to return the fields in the resultset in the same order as mentioned below.\n// If the server changes the below order, then transparent parameter encryption will break.\nexport enum DescribeParameterEncryptionResultSet2 {\n  ParameterOrdinal,\n  ParameterName,\n  ColumnEncryptionAlgorithm,\n  ColumnEncrytionType,\n  ColumnEncryptionKeyOrdinal,\n  NormalizationRuleVersion\n}\n\nexport enum SQLServerStatementColumnEncryptionSetting {\n  /**\n   * if \"Column Encryption Setting=Enabled\" in the connection string, use Enabled. Otherwise, maps to Disabled.\n   */\n  UseConnectionSetting,\n  /**\n   * Enables TCE for the command. Overrides the connection level setting for this command.\n   */\n  Enabled,\n  /**\n   * Parameters will not be encrypted, only the ResultSet will be decrypted. This is an optimization for queries that\n   * do not pass any encrypted input parameters. Overrides the connection level setting for this command.\n   */\n  ResultSetOnly,\n  /**\n   * Disables TCE for the command.Overrides the connection level setting for this command.\n   */\n  Disabled,\n}\n", "import { EventEmitter } from 'events';\nimport { type Parameter, type DataType } from './data-type';\nimport { RequestError } from './errors';\n\nimport Connection from './connection';\nimport { type Metadata } from './metadata-parser';\nimport { SQLServerStatementColumnEncryptionSetting } from './always-encrypted/types';\nimport { type ColumnMetadata } from './token/colmetadata-token-parser';\nimport { Collation } from './collation';\n\n/**\n * The callback is called when the request has completed, either successfully or with an error.\n * If an error occurs during execution of the statement(s), then `err` will describe the error.\n *\n * As only one request at a time may be executed on a connection, another request should not\n * be initiated until this callback is called.\n *\n * This callback is called before `requestCompleted` is emitted.\n */\ntype CompletionCallback =\n  /**\n   * @param error\n   *   If an error occurred, an error object.\n   *\n   * @param rowCount\n   *   The number of rows emitted as result of executing the SQL statement.\n   *\n   * @param rows\n   *   Rows as a result of executing the SQL statement.\n   *   Will only be available if [[ConnectionOptions.rowCollectionOnRequestCompletion]] is `true`.\n   */\n  // TODO: Figure out how to type the `rows` parameter here.\n  (error: Error | null | undefined, rowCount?: number, rows?: any) => void;\n\nexport interface ParameterOptions {\n  output?: boolean;\n  length?: number;\n  precision?: number;\n  scale?: number;\n}\n\ninterface RequestOptions {\n  statementColumnEncryptionSetting?: SQLServerStatementColumnEncryptionSetting;\n}\n\n/**\n * ```js\n * const { Request } = require('tedious');\n * const request = new Request(\"select 42, 'hello world'\", (err, rowCount) {\n *   // Request completion callback...\n * });\n * connection.execSql(request);\n * ```\n */\nclass Request extends EventEmitter {\n  /**\n   * @private\n   */\n  declare sqlTextOrProcedure: string | undefined;\n  /**\n   * @private\n   */\n  declare parameters: Parameter[];\n  /**\n   * @private\n   */\n  declare parametersByName: { [key: string]: Parameter };\n  /**\n   * @private\n   */\n  declare preparing: boolean;\n  /**\n   * @private\n   */\n  declare canceled: boolean;\n  /**\n   * @private\n   */\n  declare paused: boolean;\n  /**\n   * @private\n   */\n  declare userCallback: CompletionCallback;\n  /**\n   * @private\n   */\n  declare handle: number | undefined;\n  /**\n   * @private\n   */\n  declare error: Error | undefined;\n  /**\n   * @private\n   */\n  declare connection: Connection | undefined;\n  /**\n   * @private\n   */\n  declare timeout: number | undefined;\n\n  /**\n   * @private\n   */\n  declare rows?: Array<any>;\n  /**\n   * @private\n   */\n  declare rst?: Array<any>;\n  /**\n   * @private\n   */\n  declare rowCount?: number;\n\n  /**\n   * @private\n   */\n  declare callback: CompletionCallback;\n\n\n  declare shouldHonorAE?: boolean;\n  declare statementColumnEncryptionSetting: SQLServerStatementColumnEncryptionSetting;\n  declare cryptoMetadataLoaded: boolean;\n\n  /**\n   * This event, describing result set columns, will be emitted before row\n   * events are emitted. This event may be emitted multiple times when more\n   * than one recordset is produced by the statement.\n   *\n   * An array like object, where the columns can be accessed either by index\n   * or name. Columns with a name that is an integer are not accessible by name,\n   * as it would be interpreted as an array index.\n   */\n  on(\n    event: 'columnMetadata',\n    listener:\n    (columns: ColumnMetadata[] | { [key: string]: ColumnMetadata }) => void\n  ): this\n\n  /**\n   * The request has been prepared and can be used in subsequent calls to execute and unprepare.\n   */\n  on(event: 'prepared', listener: () => void): this\n\n  /**\n   * The request encountered an error and has not been prepared.\n   */\n  on(event: 'error', listener: (err: Error) => void): this\n\n  /**\n   * A row resulting from execution of the SQL statement.\n   */\n  on(\n    event: 'row',\n    listener:\n      /**\n       * An array or object (depends on [[ConnectionOptions.useColumnNames]]), where the columns can be accessed by index/name.\n       * Each column has two properties, `metadata` and `value`：\n       *\n       * * `metadata`\n       *\n       *    The same data that is exposed in the `columnMetadata` event.\n       *\n       * * `value`\n       *\n       *    The column's value. It will be `null` for a `NULL`.\n       *    If there are multiple columns with the same name, then this will be an array of the values.\n       */\n      (columns: any) => void\n  ): this\n\n  /**\n   * All rows from a result set have been provided (through `row` events).\n   *\n   * This token is used to indicate the completion of a SQL statement.\n   * As multiple SQL statements can be sent to the server in a single SQL batch, multiple `done` can be generated.\n   * An `done` event is emitted for each SQL statement in the SQL batch except variable declarations.\n   * For execution of SQL statements within stored procedures, `doneProc` and `doneInProc` events are used in place of `done`.\n   *\n   * If you are using [[Connection.execSql]] then SQL server may treat the multiple calls with the same query as a stored procedure.\n   * When this occurs, the `doneProc` and `doneInProc` events may be emitted instead. You must handle both events to ensure complete coverage.\n   */\n  on(\n    event: 'done',\n    listener:\n      /**\n       * @param rowCount\n       *   The number of result rows. May be `undefined` if not available.\n       *\n       * @param more\n       *   If there are more results to come (probably because multiple statements are being executed), then `true`.\n       *\n       * @param rst\n       *   Rows as a result of executing the SQL statement.\n       *   Will only be available if Connection's [[ConnectionOptions.rowCollectionOnDone]] is `true`.\n       */\n      (rowCount: number | undefined, more: boolean, rst?: any[]) => void\n  ): this\n\n  /**\n   * `request.on('doneInProc', function (rowCount, more, rows) { });`\n   *\n   * Indicates the completion status of a SQL statement within a stored procedure. All rows from a statement\n   * in a stored procedure have been provided (through `row` events).\n   *\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n  on(\n    event: 'doneInProc',\n    listener:\n      /**\n       * @param rowCount\n       *   The number of result rows. May be `undefined` if not available.\n       *\n       * @param more\n       *   If there are more results to come (probably because multiple statements are being executed), then `true`.\n       *\n       * @param rst\n       *   Rows as a result of executing the SQL statement.\n       *   Will only be available if Connection's [[ConnectionOptions.rowCollectionOnDone]] is `true`.\n       */\n      (rowCount: number | undefined, more: boolean, rst?: any[]) => void\n  ): this\n\n  /**\n   * Indicates the completion status of a stored procedure. This is also generated for stored procedures\n   * executed through SQL statements.\\\n   * This event may also occur when executing multiple calls with the same query using [[execSql]].\n   */\n  on(\n    event: 'doneProc',\n    listener:\n      /**\n       * @param rowCount\n       *   The number of result rows. May be `undefined` if not available.\n       *\n       * @param more\n       *   If there are more results to come (probably because multiple statements are being executed), then `true`.\n       *\n       * @param rst\n       *   Rows as a result of executing the SQL statement.\n       *   Will only be available if Connection's [[ConnectionOptions.rowCollectionOnDone]] is `true`.\n       */\n      (rowCount: number | undefined, more: boolean, procReturnStatusValue: number, rst?: any[]) => void\n  ): this\n\n  /**\n   * A value for an output parameter (that was added to the request with [[addOutputParameter]]).\n   * See also `Using Parameters`.\n   */\n  on(\n    event: 'returnValue',\n    listener:\n      /**\n       * @param parameterName\n       *   The parameter name. (Does not start with '@'.)\n       *\n       * @param value\n       *   The parameter's output value.\n       *\n       * @param metadata\n       *   The same data that is exposed in the `columnMetaData` event.\n       */\n      (parameterName: string, value: unknown, metadata: Metadata) => void\n  ): this\n\n  /**\n   * This event gives the columns by which data is ordered, if `ORDER BY` clause is executed in SQL Server.\n   */\n  on(\n    event: 'order',\n    listener:\n      /**\n       * @param orderColumns\n       *   An array of column numbers in the result set by which data is ordered.\n       */\n      (orderColumns: number[]) => void\n  ): this\n\n  on(event: 'requestCompleted', listener: () => void): this\n\n  on(event: 'cancel', listener: () => void): this\n\n  on(event: 'pause', listener: () => void): this\n\n  on(event: 'resume', listener: () => void): this\n\n  on(event: string | symbol, listener: (...args: any[]) => void) {\n    return super.on(event, listener);\n  }\n\n  /**\n   * @private\n   */\n  emit(event: 'columnMetadata', columns: ColumnMetadata[] | { [key: string]: ColumnMetadata }): boolean\n  /**\n   * @private\n   */\n  emit(event: 'prepared'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'error', err: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'row', columns: any): boolean\n  /**\n   * @private\n   */\n  emit(event: 'done', rowCount: number | undefined, more: boolean, rst?: any[]): boolean\n  /**\n   * @private\n   */\n  emit(event: 'doneInProc', rowCount: number | undefined, more: boolean, rst?: any[]): boolean\n  /**\n   * @private\n   */\n  emit(event: 'doneProc', rowCount: number | undefined, more: boolean, procReturnStatusValue: number, rst?: any[]): boolean\n  /**\n   * @private\n   */\n  emit(event: 'returnValue', parameterName: string, value: unknown, metadata: Metadata): boolean\n  /**\n   * @private\n   */\n  emit(event: 'requestCompleted'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'cancel'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'pause'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'resume'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'order', orderColumns: number[]): boolean\n  emit(event: string | symbol, ...args: any[]) {\n    return super.emit(event, ...args);\n  }\n\n  /**\n   * @param sqlTextOrProcedure\n   *   The SQL statement to be executed\n   *\n   * @param callback\n   *   The callback to execute once the request has been fully completed.\n   */\n  constructor(sqlTextOrProcedure: string | undefined, callback: CompletionCallback, options?: RequestOptions) {\n    super();\n\n    this.sqlTextOrProcedure = sqlTextOrProcedure;\n    this.parameters = [];\n    this.parametersByName = {};\n    this.preparing = false;\n    this.handle = undefined;\n    this.canceled = false;\n    this.paused = false;\n    this.error = undefined;\n    this.connection = undefined;\n    this.timeout = undefined;\n    this.userCallback = callback;\n    this.statementColumnEncryptionSetting = (options && options.statementColumnEncryptionSetting) || SQLServerStatementColumnEncryptionSetting.UseConnectionSetting;\n    this.cryptoMetadataLoaded = false;\n    this.callback = function(err: Error | undefined | null, rowCount?: number, rows?: any) {\n      if (this.preparing) {\n        this.preparing = false;\n        if (err) {\n          this.emit('error', err);\n        } else {\n          this.emit('prepared');\n        }\n      } else {\n        this.userCallback(err, rowCount, rows);\n        this.emit('requestCompleted');\n      }\n    };\n  }\n\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects. The name should not start with `@`.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types.\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  // TODO: `type` must be a valid TDS value type\n  addParameter(name: string, type: DataType, value?: unknown, options?: Readonly<ParameterOptions> | null) {\n    const { output = false, length, precision, scale } = options ?? {};\n\n    const parameter: Parameter = {\n      type: type,\n      name: name,\n      value: value,\n      output: output,\n      length: length,\n      precision: precision,\n      scale: scale\n    };\n\n    this.parameters.push(parameter);\n    this.parametersByName[name] = parameter;\n  }\n\n  /**\n   * @param name\n   *   The parameter name. This should correspond to a parameter in the SQL,\n   *   or a parameter that a called procedure expects.\n   *\n   * @param type\n   *   One of the supported data types.\n   *\n   * @param value\n   *   The value that the parameter is to be given. The Javascript type of the\n   *   argument should match that documented for data types\n   *\n   * @param options\n   *   Additional type options. Optional.\n   */\n  addOutputParameter(name: string, type: DataType, value?: unknown, options?: Readonly<ParameterOptions> | null) {\n    this.addParameter(name, type, value, { ...options, output: true });\n  }\n\n  /**\n   * @private\n   */\n  makeParamsParameter(parameters: Parameter[]) {\n    let paramsParameter = '';\n    for (let i = 0, len = parameters.length; i < len; i++) {\n      const parameter = parameters[i];\n      if (paramsParameter.length > 0) {\n        paramsParameter += ', ';\n      }\n      paramsParameter += '@' + parameter.name + ' ';\n      paramsParameter += parameter.type.declaration(parameter);\n      if (parameter.output) {\n        paramsParameter += ' OUTPUT';\n      }\n    }\n    return paramsParameter;\n  }\n\n  /**\n   * @private\n   */\n  validateParameters(collation: Collation | undefined) {\n    for (let i = 0, len = this.parameters.length; i < len; i++) {\n      const parameter = this.parameters[i];\n\n      try {\n        parameter.value = parameter.type.validate(parameter.value, collation);\n      } catch (error: any) {\n        throw new RequestError('Validation failed for parameter \\'' + parameter.name + '\\'. ' + error.message, 'EPARAM');\n      }\n    }\n  }\n\n  /**\n   * Temporarily suspends the flow of data from the database. No more `row` events will be emitted until [[resume] is called.\n   * If this request is already in a paused state, calling [[pause]] has no effect.\n   */\n  pause() {\n    if (this.paused) {\n      return;\n    }\n    this.emit('pause');\n    this.paused = true;\n  }\n\n  /**\n   * Resumes the flow of data from the database.\n   * If this request is not in a paused state, calling [[resume]] has no effect.\n   */\n  resume() {\n    if (!this.paused) {\n      return;\n    }\n    this.paused = false;\n    this.emit('resume');\n  }\n\n  /**\n   * Cancels a request while waiting for a server response.\n   */\n  cancel() {\n    if (this.canceled) {\n      return;\n    }\n\n    this.canceled = true;\n    this.emit('cancel');\n  }\n\n  /**\n   * Sets a timeout for this request.\n   *\n   * @param timeout\n   *   The number of milliseconds before the request is considered failed,\n   *   or `0` for no timeout. When no timeout is set for the request,\n   *   the [[ConnectionOptions.requestTimeout]] of the [[Connection]] is used.\n   */\n  setTimeout(timeout?: number) {\n    this.timeout = timeout;\n  }\n}\n\nexport default Request;\nmodule.exports = Request;\n", "import WritableTrackingBuffer from './tracking-buffer/writable-tracking-buffer';\n\nconst TYPE = {\n  QUERY_NOTIFICATIONS: 1,\n  TXN_DESCRIPTOR: 2,\n  TRACE_ACTIVITY: 3\n};\n\nconst TXNDESCRIPTOR_HEADER_DATA_LEN = 4 + 8;\n\nconst TXNDESCRIPTOR_HEADER_LEN = 4 + 2 + TXNDESCRIPTOR_HEADER_DATA_LEN;\n\nexport function writeToTrackingBuffer(buffer: WritableTrackingBuffer, txnDescriptor: Buffer, outstandingRequestCount: number) {\n  buffer.writeUInt32LE(0);\n  buffer.writeUInt32LE(TXNDESCRIPTOR_HEADER_LEN);\n  buffer.writeUInt16LE(TYPE.TXN_DESCRIPTOR);\n  buffer.writeBuffer(txnDescriptor);\n  buffer.writeUInt32LE(outstandingRequestCount);\n\n  const data = buffer.data;\n  data.writeUInt32LE(data.length, 0);\n  return buffer;\n}\n", "import WritableTrackingBuffer from './tracking-buffer/writable-tracking-buffer';\nimport { writeToTrackingBuffer } from './all-headers';\nimport { type Parameter, type ParameterData } from './data-type';\nimport { type InternalConnectionOptions } from './connection';\nimport { Collation } from './collation';\n\n// const OPTION = {\n//   WITH_RECOMPILE: 0x01,\n//   NO_METADATA: 0x02,\n//   REUSE_METADATA: 0x04\n// };\n\nconst STATUS = {\n  BY_REF_VALUE: 0x01,\n  DEFAULT_VALUE: 0x02\n};\n\n/*\n  s2.2.6.5\n */\nclass RpcRequestPayload implements Iterable<Buffer> {\n  declare procedure: string | number;\n  declare parameters: Parameter[];\n\n  declare options: InternalConnectionOptions;\n  declare txnDescriptor: Buffer;\n  declare collation: Collation | undefined;\n\n  constructor(procedure: string | number, parameters: Parameter[], txnDescriptor: Buffer, options: InternalConnectionOptions, collation: Collation | undefined) {\n    this.procedure = procedure;\n    this.parameters = parameters;\n    this.options = options;\n    this.txnDescriptor = txnDescriptor;\n    this.collation = collation;\n  }\n\n  [Symbol.iterator]() {\n    return this.generateData();\n  }\n\n  * generateData() {\n    const buffer = new WritableTrackingBuffer(500);\n    if (this.options.tdsVersion >= '7_2') {\n      const outstandingRequestCount = 1;\n      writeToTrackingBuffer(buffer, this.txnDescriptor, outstandingRequestCount);\n    }\n\n    if (typeof this.procedure === 'string') {\n      buffer.writeUsVarchar(this.procedure);\n    } else {\n      buffer.writeUShort(0xFFFF);\n      buffer.writeUShort(this.procedure);\n    }\n\n    const optionFlags = 0;\n    buffer.writeUInt16LE(optionFlags);\n    yield buffer.data;\n\n    const parametersLength = this.parameters.length;\n    for (let i = 0; i < parametersLength; i++) {\n      yield * this.generateParameterData(this.parameters[i]);\n    }\n  }\n\n  toString(indent = '') {\n    return indent + ('RPC Request - ' + this.procedure);\n  }\n\n  * generateParameterData(parameter: Parameter) {\n    const buffer = new WritableTrackingBuffer(1 + 2 + Buffer.byteLength(parameter.name, 'ucs-2') + 1);\n\n    if (parameter.name) {\n      buffer.writeBVarchar('@' + parameter.name);\n    } else {\n      buffer.writeBVarchar('');\n    }\n\n    let statusFlags = 0;\n    if (parameter.output) {\n      statusFlags |= STATUS.BY_REF_VALUE;\n    }\n    buffer.writeUInt8(statusFlags);\n\n    yield buffer.data;\n\n    const param: ParameterData = { value: parameter.value };\n\n    const type = parameter.type;\n\n    if ((type.id & 0x30) === 0x20) {\n      if (parameter.length) {\n        param.length = parameter.length;\n      } else if (type.resolveLength) {\n        param.length = type.resolveLength(parameter);\n      }\n    }\n\n    if (parameter.precision) {\n      param.precision = parameter.precision;\n    } else if (type.resolvePrecision) {\n      param.precision = type.resolvePrecision(parameter);\n    }\n\n    if (parameter.scale) {\n      param.scale = parameter.scale;\n    } else if (type.resolveScale) {\n      param.scale = type.resolveScale(parameter);\n    }\n\n    if (this.collation) {\n      param.collation = this.collation;\n    }\n\n    yield type.generateTypeInfo(param, this.options);\n    yield type.generateParameterLength(param, this.options);\n    yield * type.generateParameterData(param, this.options);\n  }\n}\n\nexport default RpcRequestPayload;\nmodule.exports = RpcRequestPayload;\n", "import WritableTrackingBuffer from './tracking-buffer/writable-tracking-buffer';\nimport { writeToTrackingBuffer } from './all-headers';\n\n/*\n  s2.2.6.6\n */\nclass SqlBatchPayload implements Iterable<Buffer> {\n  declare sqlText: string;\n  declare txnDescriptor: Buffer;\n  declare options: { tdsVersion: string };\n\n  constructor(sqlText: string, txnDescriptor: Buffer, options: { tdsVersion: string }) {\n    this.sqlText = sqlText;\n    this.txnDescriptor = txnDescriptor;\n    this.options = options;\n  }\n\n  *[Symbol.iterator]() {\n    if (this.options.tdsVersion >= '7_2') {\n      const buffer = new WritableTrackingBuffer(18, 'ucs2');\n      const outstandingRequestCount = 1;\n\n      writeToTrackingBuffer(buffer, this.txnDescriptor, outstandingRequestCount);\n\n      yield buffer.data;\n    }\n\n    yield Buffer.from(this.sqlText, 'ucs2');\n  }\n\n  toString(indent = '') {\n    return indent + ('SQL Batch - ' + this.sqlText);\n  }\n}\n\nexport default SqlBatchPayload;\nmodule.exports = SqlBatchPayload;\n", "'use strict';\nconst Duplex = require('stream').Duplex;\n\nconst kCallback = Symbol('Callback');\nconst kOtherSide = Symbol('Other');\n\nclass DuplexSocket extends Duplex {\n  constructor(options) {\n    super(options);\n    this[kCallback] = null;\n    this[kOtherSide] = null;\n  }\n\n  _read() {\n    const callback = this[kCallback];\n    if (callback) {\n      this[kCallback] = null;\n      callback();\n    }\n  }\n\n  _write(chunk, encoding, callback) {\n    this[kOtherSide][kCallback] = callback;\n    this[kOtherSide].push(chunk);\n  }\n\n  _final(callback) {\n    this[kOtherSide].on('end', callback);\n    this[kOtherSide].push(null);\n  }\n}\n\nclass DuplexPair {\n  constructor(options) {\n    this.socket1 = new DuplexSocket(options);\n    this.socket2 = new DuplexSocket(options);\n    this.socket1[kOtherSide] = this.socket2;\n    this.socket2[kOtherSide] = this.socket1;\n  }\n}\n\nmodule.exports = DuplexPair;\n", "import { PassThrough } from 'stream';\n\nclass Message extends PassThrough {\n  declare type: number;\n  declare resetConnection: boolean;\n  declare ignore: boolean;\n\n  constructor({ type, resetConnection = false }: { type: number, resetConnection?: boolean | undefined }) {\n    super();\n\n    this.type = type;\n    this.resetConnection = resetConnection;\n    this.ignore = false;\n  }\n}\n\nexport default Message;\nmodule.exports = Message;\n", "'use strict'\n\n/*\n  This file is a reduced and adapted version of the main lib/internal/per_context/primordials.js file defined at\n\n  https://github.com/nodejs/node/blob/master/lib/internal/per_context/primordials.js\n\n  Don't try to replace with the original file and keep it up to date with the upstream file.\n*/\nmodule.exports = {\n  ArrayIsArray(self) {\n    return Array.isArray(self)\n  },\n  ArrayPrototypeIncludes(self, el) {\n    return self.includes(el)\n  },\n  ArrayPrototypeIndexOf(self, el) {\n    return self.indexOf(el)\n  },\n  ArrayPrototypeJoin(self, sep) {\n    return self.join(sep)\n  },\n  ArrayPrototypeMap(self, fn) {\n    return self.map(fn)\n  },\n  ArrayPrototypePop(self, el) {\n    return self.pop(el)\n  },\n  ArrayPrototypePush(self, el) {\n    return self.push(el)\n  },\n  ArrayPrototypeSlice(self, start, end) {\n    return self.slice(start, end)\n  },\n  Error,\n  FunctionPrototypeCall(fn, thisArgs, ...args) {\n    return fn.call(thisArgs, ...args)\n  },\n  FunctionPrototypeSymbolHasInstance(self, instance) {\n    return Function.prototype[Symbol.hasInstance].call(self, instance)\n  },\n  MathFloor: Math.floor,\n  Number,\n  NumberIsInteger: Number.isInteger,\n  NumberIsNaN: Number.isNaN,\n  NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER,\n  NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER,\n  NumberParseInt: Number.parseInt,\n  ObjectDefineProperties(self, props) {\n    return Object.defineProperties(self, props)\n  },\n  ObjectDefineProperty(self, name, prop) {\n    return Object.defineProperty(self, name, prop)\n  },\n  ObjectGetOwnPropertyDescriptor(self, name) {\n    return Object.getOwnPropertyDescriptor(self, name)\n  },\n  ObjectKeys(obj) {\n    return Object.keys(obj)\n  },\n  ObjectSetPrototypeOf(target, proto) {\n    return Object.setPrototypeOf(target, proto)\n  },\n  Promise,\n  PromisePrototypeCatch(self, fn) {\n    return self.catch(fn)\n  },\n  PromisePrototypeThen(self, thenFn, catchFn) {\n    return self.then(thenFn, catchFn)\n  },\n  PromiseReject(err) {\n    return Promise.reject(err)\n  },\n  PromiseResolve(val) {\n    return Promise.resolve(val)\n  },\n  ReflectApply: Reflect.apply,\n  RegExpPrototypeTest(self, value) {\n    return self.test(value)\n  },\n  SafeSet: Set,\n  String,\n  StringPrototypeSlice(self, start, end) {\n    return self.slice(start, end)\n  },\n  StringPrototypeToLowerCase(self) {\n    return self.toLowerCase()\n  },\n  StringPrototypeToUpperCase(self) {\n    return self.toUpperCase()\n  },\n  StringPrototypeTrim(self) {\n    return self.trim()\n  },\n  Symbol,\n  SymbolFor: Symbol.for,\n  SymbolAsyncIterator: Symbol.asyncIterator,\n  SymbolHasInstance: Symbol.hasInstance,\n  SymbolIterator: Symbol.iterator,\n  SymbolDispose: Symbol.dispose || Symbol('Symbol.dispose'),\n  SymbolAsyncDispose: Symbol.asyncDispose || Symbol('Symbol.asyncDispose'),\n  TypedArrayPrototypeSet(self, buf, len) {\n    return self.set(buf, len)\n  },\n  Boolean: Boolean,\n  Uint8Array\n}\n", "/*globals self, window */\n\"use strict\"\n\n/*eslint-disable @mysticatea/prettier */\nconst { AbortController, AbortSignal } =\n    typeof self !== \"undefined\" ? self :\n    typeof window !== \"undefined\" ? window :\n    /* otherwise */ undefined\n/*eslint-enable @mysticatea/prettier */\n\nmodule.exports = AbortController\nmodule.exports.AbortSignal = AbortSignal\nmodule.exports.default = AbortController\n", "'use strict'\n\nconst bufferModule = require('buffer')\nconst { kResistStopPropagation, SymbolDispose } = require('./primordials')\nconst AbortSignal = globalThis.AbortSignal || require('abort-controller').AbortSignal\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController\nconst AsyncFunction = Object.getPrototypeOf(async function () {}).constructor\nconst Blob = globalThis.Blob || bufferModule.Blob\n/* eslint-disable indent */\nconst isBlob =\n  typeof Blob !== 'undefined'\n    ? function isBlob(b) {\n        // eslint-disable-next-line indent\n        return b instanceof Blob\n      }\n    : function isBlob(b) {\n        return false\n      }\n/* eslint-enable indent */\n\nconst validateAbortSignal = (signal, name) => {\n  if (signal !== undefined && (signal === null || typeof signal !== 'object' || !('aborted' in signal))) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal)\n  }\n}\nconst validateFunction = (value, name) => {\n  if (typeof value !== 'function') throw new ERR_INVALID_ARG_TYPE(name, 'Function', value)\n}\n\n// This is a simplified version of AggregateError\nclass AggregateError extends Error {\n  constructor(errors) {\n    if (!Array.isArray(errors)) {\n      throw new TypeError(`Expected input to be an Array, got ${typeof errors}`)\n    }\n    let message = ''\n    for (let i = 0; i < errors.length; i++) {\n      message += `    ${errors[i].stack}\\n`\n    }\n    super(message)\n    this.name = 'AggregateError'\n    this.errors = errors\n  }\n}\nmodule.exports = {\n  AggregateError,\n  kEmptyObject: Object.freeze({}),\n  once(callback) {\n    let called = false\n    return function (...args) {\n      if (called) {\n        return\n      }\n      called = true\n      callback.apply(this, args)\n    }\n  },\n  createDeferredPromise: function () {\n    let resolve\n    let reject\n\n    // eslint-disable-next-line promise/param-names\n    const promise = new Promise((res, rej) => {\n      resolve = res\n      reject = rej\n    })\n    return {\n      promise,\n      resolve,\n      reject\n    }\n  },\n  promisify(fn) {\n    return new Promise((resolve, reject) => {\n      fn((err, ...args) => {\n        if (err) {\n          return reject(err)\n        }\n        return resolve(...args)\n      })\n    })\n  },\n  debuglog() {\n    return function () {}\n  },\n  format(format, ...args) {\n    // Simplified version of https://nodejs.org/api/util.html#utilformatformat-args\n    return format.replace(/%([sdifj])/g, function (...[_unused, type]) {\n      const replacement = args.shift()\n      if (type === 'f') {\n        return replacement.toFixed(6)\n      } else if (type === 'j') {\n        return JSON.stringify(replacement)\n      } else if (type === 's' && typeof replacement === 'object') {\n        const ctor = replacement.constructor !== Object ? replacement.constructor.name : ''\n        return `${ctor} {}`.trim()\n      } else {\n        return replacement.toString()\n      }\n    })\n  },\n  inspect(value) {\n    // Vastly simplified version of https://nodejs.org/api/util.html#utilinspectobject-options\n    switch (typeof value) {\n      case 'string':\n        if (value.includes(\"'\")) {\n          if (!value.includes('\"')) {\n            return `\"${value}\"`\n          } else if (!value.includes('`') && !value.includes('${')) {\n            return `\\`${value}\\``\n          }\n        }\n        return `'${value}'`\n      case 'number':\n        if (isNaN(value)) {\n          return 'NaN'\n        } else if (Object.is(value, -0)) {\n          return String(value)\n        }\n        return value\n      case 'bigint':\n        return `${String(value)}n`\n      case 'boolean':\n      case 'undefined':\n        return String(value)\n      case 'object':\n        return '{}'\n    }\n  },\n  types: {\n    isAsyncFunction(fn) {\n      return fn instanceof AsyncFunction\n    },\n    isArrayBufferView(arr) {\n      return ArrayBuffer.isView(arr)\n    }\n  },\n  isBlob,\n  deprecate(fn, message) {\n    return fn\n  },\n  addAbortListener:\n    require('events').addAbortListener ||\n    function addAbortListener(signal, listener) {\n      if (signal === undefined) {\n        throw new ERR_INVALID_ARG_TYPE('signal', 'AbortSignal', signal)\n      }\n      validateAbortSignal(signal, 'signal')\n      validateFunction(listener, 'listener')\n      let removeEventListener\n      if (signal.aborted) {\n        queueMicrotask(() => listener())\n      } else {\n        signal.addEventListener('abort', listener, {\n          __proto__: null,\n          once: true,\n          [kResistStopPropagation]: true\n        })\n        removeEventListener = () => {\n          signal.removeEventListener('abort', listener)\n        }\n      }\n      return {\n        __proto__: null,\n        [SymbolDispose]() {\n          var _removeEventListener\n          ;(_removeEventListener = removeEventListener) === null || _removeEventListener === undefined\n            ? undefined\n            : _removeEventListener()\n        }\n      }\n    },\n  AbortSignalAny:\n    AbortSignal.any ||\n    function AbortSignalAny(signals) {\n      // Fast path if there is only one signal.\n      if (signals.length === 1) {\n        return signals[0]\n      }\n      const ac = new AbortController()\n      const abort = () => ac.abort()\n      signals.forEach((signal) => {\n        validateAbortSignal(signal, 'signals')\n        signal.addEventListener('abort', abort, {\n          once: true\n        })\n      })\n      ac.signal.addEventListener(\n        'abort',\n        () => {\n          signals.forEach((signal) => signal.removeEventListener('abort', abort))\n        },\n        {\n          once: true\n        }\n      )\n      return ac.signal\n    }\n}\nmodule.exports.promisify.custom = Symbol.for('nodejs.util.promisify.custom')\n", "'use strict'\n\nconst { format, inspect, AggregateError: CustomAggregateError } = require('./util')\n\n/*\n  This file is a reduced and adapted version of the main lib/internal/errors.js file defined at\n\n  https://github.com/nodejs/node/blob/master/lib/internal/errors.js\n\n  Don't try to replace with the original file and keep it up to date (starting from E(...) definitions)\n  with the upstream file.\n*/\n\nconst AggregateError = globalThis.AggregateError || CustomAggregateError\nconst kIsNodeError = Symbol('kIsNodeError')\nconst kTypes = [\n  'string',\n  'function',\n  'number',\n  'object',\n  // Accept 'Function' and 'Object' as alternative to the lower cased version.\n  'Function',\n  'Object',\n  'boolean',\n  'bigint',\n  'symbol'\n]\nconst classRegExp = /^([A-Z][a-z0-9]*)+$/\nconst nodeInternalPrefix = '__node_internal_'\nconst codes = {}\nfunction assert(value, message) {\n  if (!value) {\n    throw new codes.ERR_INTERNAL_ASSERTION(message)\n  }\n}\n\n// Only use this for integers! Decimal numbers do not work with this function.\nfunction addNumericalSeparator(val) {\n  let res = ''\n  let i = val.length\n  const start = val[0] === '-' ? 1 : 0\n  for (; i >= start + 4; i -= 3) {\n    res = `_${val.slice(i - 3, i)}${res}`\n  }\n  return `${val.slice(0, i)}${res}`\n}\nfunction getMessage(key, msg, args) {\n  if (typeof msg === 'function') {\n    assert(\n      msg.length <= args.length,\n      // Default options do not count.\n      `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`\n    )\n    return msg(...args)\n  }\n  const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length\n  assert(\n    expectedLength === args.length,\n    `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`\n  )\n  if (args.length === 0) {\n    return msg\n  }\n  return format(msg, ...args)\n}\nfunction E(code, message, Base) {\n  if (!Base) {\n    Base = Error\n  }\n  class NodeError extends Base {\n    constructor(...args) {\n      super(getMessage(code, message, args))\n    }\n    toString() {\n      return `${this.name} [${code}]: ${this.message}`\n    }\n  }\n  Object.defineProperties(NodeError.prototype, {\n    name: {\n      value: Base.name,\n      writable: true,\n      enumerable: false,\n      configurable: true\n    },\n    toString: {\n      value() {\n        return `${this.name} [${code}]: ${this.message}`\n      },\n      writable: true,\n      enumerable: false,\n      configurable: true\n    }\n  })\n  NodeError.prototype.code = code\n  NodeError.prototype[kIsNodeError] = true\n  codes[code] = NodeError\n}\nfunction hideStackFrames(fn) {\n  // We rename the functions that will be hidden to cut off the stacktrace\n  // at the outermost one\n  const hidden = nodeInternalPrefix + fn.name\n  Object.defineProperty(fn, 'name', {\n    value: hidden\n  })\n  return fn\n}\nfunction aggregateTwoErrors(innerError, outerError) {\n  if (innerError && outerError && innerError !== outerError) {\n    if (Array.isArray(outerError.errors)) {\n      // If `outerError` is already an `AggregateError`.\n      outerError.errors.push(innerError)\n      return outerError\n    }\n    const err = new AggregateError([outerError, innerError], outerError.message)\n    err.code = outerError.code\n    return err\n  }\n  return innerError || outerError\n}\nclass AbortError extends Error {\n  constructor(message = 'The operation was aborted', options = undefined) {\n    if (options !== undefined && typeof options !== 'object') {\n      throw new codes.ERR_INVALID_ARG_TYPE('options', 'Object', options)\n    }\n    super(message, options)\n    this.code = 'ABORT_ERR'\n    this.name = 'AbortError'\n  }\n}\nE('ERR_ASSERTION', '%s', Error)\nE(\n  'ERR_INVALID_ARG_TYPE',\n  (name, expected, actual) => {\n    assert(typeof name === 'string', \"'name' must be a string\")\n    if (!Array.isArray(expected)) {\n      expected = [expected]\n    }\n    let msg = 'The '\n    if (name.endsWith(' argument')) {\n      // For cases like 'first argument'\n      msg += `${name} `\n    } else {\n      msg += `\"${name}\" ${name.includes('.') ? 'property' : 'argument'} `\n    }\n    msg += 'must be '\n    const types = []\n    const instances = []\n    const other = []\n    for (const value of expected) {\n      assert(typeof value === 'string', 'All expected entries have to be of type string')\n      if (kTypes.includes(value)) {\n        types.push(value.toLowerCase())\n      } else if (classRegExp.test(value)) {\n        instances.push(value)\n      } else {\n        assert(value !== 'object', 'The value \"object\" should be written as \"Object\"')\n        other.push(value)\n      }\n    }\n\n    // Special handle `object` in case other instances are allowed to outline\n    // the differences between each other.\n    if (instances.length > 0) {\n      const pos = types.indexOf('object')\n      if (pos !== -1) {\n        types.splice(types, pos, 1)\n        instances.push('Object')\n      }\n    }\n    if (types.length > 0) {\n      switch (types.length) {\n        case 1:\n          msg += `of type ${types[0]}`\n          break\n        case 2:\n          msg += `one of type ${types[0]} or ${types[1]}`\n          break\n        default: {\n          const last = types.pop()\n          msg += `one of type ${types.join(', ')}, or ${last}`\n        }\n      }\n      if (instances.length > 0 || other.length > 0) {\n        msg += ' or '\n      }\n    }\n    if (instances.length > 0) {\n      switch (instances.length) {\n        case 1:\n          msg += `an instance of ${instances[0]}`\n          break\n        case 2:\n          msg += `an instance of ${instances[0]} or ${instances[1]}`\n          break\n        default: {\n          const last = instances.pop()\n          msg += `an instance of ${instances.join(', ')}, or ${last}`\n        }\n      }\n      if (other.length > 0) {\n        msg += ' or '\n      }\n    }\n    switch (other.length) {\n      case 0:\n        break\n      case 1:\n        if (other[0].toLowerCase() !== other[0]) {\n          msg += 'an '\n        }\n        msg += `${other[0]}`\n        break\n      case 2:\n        msg += `one of ${other[0]} or ${other[1]}`\n        break\n      default: {\n        const last = other.pop()\n        msg += `one of ${other.join(', ')}, or ${last}`\n      }\n    }\n    if (actual == null) {\n      msg += `. Received ${actual}`\n    } else if (typeof actual === 'function' && actual.name) {\n      msg += `. Received function ${actual.name}`\n    } else if (typeof actual === 'object') {\n      var _actual$constructor\n      if (\n        (_actual$constructor = actual.constructor) !== null &&\n        _actual$constructor !== undefined &&\n        _actual$constructor.name\n      ) {\n        msg += `. Received an instance of ${actual.constructor.name}`\n      } else {\n        const inspected = inspect(actual, {\n          depth: -1\n        })\n        msg += `. Received ${inspected}`\n      }\n    } else {\n      let inspected = inspect(actual, {\n        colors: false\n      })\n      if (inspected.length > 25) {\n        inspected = `${inspected.slice(0, 25)}...`\n      }\n      msg += `. Received type ${typeof actual} (${inspected})`\n    }\n    return msg\n  },\n  TypeError\n)\nE(\n  'ERR_INVALID_ARG_VALUE',\n  (name, value, reason = 'is invalid') => {\n    let inspected = inspect(value)\n    if (inspected.length > 128) {\n      inspected = inspected.slice(0, 128) + '...'\n    }\n    const type = name.includes('.') ? 'property' : 'argument'\n    return `The ${type} '${name}' ${reason}. Received ${inspected}`\n  },\n  TypeError\n)\nE(\n  'ERR_INVALID_RETURN_VALUE',\n  (input, name, value) => {\n    var _value$constructor\n    const type =\n      value !== null &&\n      value !== undefined &&\n      (_value$constructor = value.constructor) !== null &&\n      _value$constructor !== undefined &&\n      _value$constructor.name\n        ? `instance of ${value.constructor.name}`\n        : `type ${typeof value}`\n    return `Expected ${input} to be returned from the \"${name}\"` + ` function but got ${type}.`\n  },\n  TypeError\n)\nE(\n  'ERR_MISSING_ARGS',\n  (...args) => {\n    assert(args.length > 0, 'At least one arg needs to be specified')\n    let msg\n    const len = args.length\n    args = (Array.isArray(args) ? args : [args]).map((a) => `\"${a}\"`).join(' or ')\n    switch (len) {\n      case 1:\n        msg += `The ${args[0]} argument`\n        break\n      case 2:\n        msg += `The ${args[0]} and ${args[1]} arguments`\n        break\n      default:\n        {\n          const last = args.pop()\n          msg += `The ${args.join(', ')}, and ${last} arguments`\n        }\n        break\n    }\n    return `${msg} must be specified`\n  },\n  TypeError\n)\nE(\n  'ERR_OUT_OF_RANGE',\n  (str, range, input) => {\n    assert(range, 'Missing \"range\" argument')\n    let received\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n      received = addNumericalSeparator(String(input))\n    } else if (typeof input === 'bigint') {\n      received = String(input)\n      if (input > 2n ** 32n || input < -(2n ** 32n)) {\n        received = addNumericalSeparator(received)\n      }\n      received += 'n'\n    } else {\n      received = inspect(input)\n    }\n    return `The value of \"${str}\" is out of range. It must be ${range}. Received ${received}`\n  },\n  RangeError\n)\nE('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times', Error)\nE('ERR_METHOD_NOT_IMPLEMENTED', 'The %s method is not implemented', Error)\nE('ERR_STREAM_ALREADY_FINISHED', 'Cannot call %s after a stream was finished', Error)\nE('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable', Error)\nE('ERR_STREAM_DESTROYED', 'Cannot call %s after a stream was destroyed', Error)\nE('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError)\nE('ERR_STREAM_PREMATURE_CLOSE', 'Premature close', Error)\nE('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF', Error)\nE('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event', Error)\nE('ERR_STREAM_WRITE_AFTER_END', 'write after end', Error)\nE('ERR_UNKNOWN_ENCODING', 'Unknown encoding: %s', TypeError)\nmodule.exports = {\n  AbortError,\n  aggregateTwoErrors: hideStackFrames(aggregateTwoErrors),\n  hideStackFrames,\n  codes\n}\n", "/* eslint jsdoc/require-jsdoc: \"error\" */\n\n'use strict'\n\nconst {\n  ArrayIsArray,\n  ArrayPrototypeIncludes,\n  ArrayPrototypeJoin,\n  ArrayPrototypeMap,\n  NumberIsInteger,\n  NumberIsNaN,\n  NumberMAX_SAFE_INTEGER,\n  NumberMIN_SAFE_INTEGER,\n  NumberParseInt,\n  ObjectPrototypeHasOwnProperty,\n  RegExpPrototypeExec,\n  String,\n  StringPrototypeToUpperCase,\n  StringPrototypeTrim\n} = require('../ours/primordials')\nconst {\n  hideStackFrames,\n  codes: { ERR_SOCKET_BAD_PORT, ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE, ERR_OUT_OF_RANGE, ERR_UNKNOWN_SIGNAL }\n} = require('../ours/errors')\nconst { normalizeEncoding } = require('../ours/util')\nconst { isAsyncFunction, isArrayBufferView } = require('../ours/util').types\nconst signals = {}\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nfunction isInt32(value) {\n  return value === (value | 0)\n}\n\n/**\n * @param {*} value\n * @returns {boolean}\n */\nfunction isUint32(value) {\n  return value === value >>> 0\n}\nconst octalReg = /^[0-7]+$/\nconst modeDesc = 'must be a 32-bit unsigned integer or an octal string'\n\n/**\n * Parse and validate values that will be converted into mode_t (the S_*\n * constants). Only valid numbers and octal strings are allowed. They could be\n * converted to 32-bit unsigned integers or non-negative signed integers in the\n * C++ land, but any value higher than 0o777 will result in platform-specific\n * behaviors.\n * @param {*} value Values to be validated\n * @param {string} name Name of the argument\n * @param {number} [def] If specified, will be returned for invalid values\n * @returns {number}\n */\nfunction parseFileMode(value, name, def) {\n  if (typeof value === 'undefined') {\n    value = def\n  }\n  if (typeof value === 'string') {\n    if (RegExpPrototypeExec(octalReg, value) === null) {\n      throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc)\n    }\n    value = NumberParseInt(value, 8)\n  }\n  validateUint32(value, name)\n  return value\n}\n\n/**\n * @callback validateInteger\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */\n\n/** @type {validateInteger} */\nconst validateInteger = hideStackFrames((value, name, min = NumberMIN_SAFE_INTEGER, max = NumberMAX_SAFE_INTEGER) => {\n  if (typeof value !== 'number') throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  if (!NumberIsInteger(value)) throw new ERR_OUT_OF_RANGE(name, 'an integer', value)\n  if (value < min || value > max) throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value)\n})\n\n/**\n * @callback validateInt32\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */\n\n/** @type {validateInt32} */\nconst validateInt32 = hideStackFrames((value, name, min = -2147483648, max = 2147483647) => {\n  // The defaults for min and max correspond to the limits of 32-bit integers.\n  if (typeof value !== 'number') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n  if (!NumberIsInteger(value)) {\n    throw new ERR_OUT_OF_RANGE(name, 'an integer', value)\n  }\n  if (value < min || value > max) {\n    throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value)\n  }\n})\n\n/**\n * @callback validateUint32\n * @param {*} value\n * @param {string} name\n * @param {number|boolean} [positive=false]\n * @returns {asserts value is number}\n */\n\n/** @type {validateUint32} */\nconst validateUint32 = hideStackFrames((value, name, positive = false) => {\n  if (typeof value !== 'number') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  }\n  if (!NumberIsInteger(value)) {\n    throw new ERR_OUT_OF_RANGE(name, 'an integer', value)\n  }\n  const min = positive ? 1 : 0\n  // 2 ** 32 === 4294967296\n  const max = 4294967295\n  if (value < min || value > max) {\n    throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value)\n  }\n})\n\n/**\n * @callback validateString\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is string}\n */\n\n/** @type {validateString} */\nfunction validateString(value, name) {\n  if (typeof value !== 'string') throw new ERR_INVALID_ARG_TYPE(name, 'string', value)\n}\n\n/**\n * @callback validateNumber\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */\n\n/** @type {validateNumber} */\nfunction validateNumber(value, name, min = undefined, max) {\n  if (typeof value !== 'number') throw new ERR_INVALID_ARG_TYPE(name, 'number', value)\n  if (\n    (min != null && value < min) ||\n    (max != null && value > max) ||\n    ((min != null || max != null) && NumberIsNaN(value))\n  ) {\n    throw new ERR_OUT_OF_RANGE(\n      name,\n      `${min != null ? `>= ${min}` : ''}${min != null && max != null ? ' && ' : ''}${max != null ? `<= ${max}` : ''}`,\n      value\n    )\n  }\n}\n\n/**\n * @callback validateOneOf\n * @template T\n * @param {T} value\n * @param {string} name\n * @param {T[]} oneOf\n */\n\n/** @type {validateOneOf} */\nconst validateOneOf = hideStackFrames((value, name, oneOf) => {\n  if (!ArrayPrototypeIncludes(oneOf, value)) {\n    const allowed = ArrayPrototypeJoin(\n      ArrayPrototypeMap(oneOf, (v) => (typeof v === 'string' ? `'${v}'` : String(v))),\n      ', '\n    )\n    const reason = 'must be one of: ' + allowed\n    throw new ERR_INVALID_ARG_VALUE(name, value, reason)\n  }\n})\n\n/**\n * @callback validateBoolean\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is boolean}\n */\n\n/** @type {validateBoolean} */\nfunction validateBoolean(value, name) {\n  if (typeof value !== 'boolean') throw new ERR_INVALID_ARG_TYPE(name, 'boolean', value)\n}\n\n/**\n * @param {any} options\n * @param {string} key\n * @param {boolean} defaultValue\n * @returns {boolean}\n */\nfunction getOwnPropertyValueOrDefault(options, key, defaultValue) {\n  return options == null || !ObjectPrototypeHasOwnProperty(options, key) ? defaultValue : options[key]\n}\n\n/**\n * @callback validateObject\n * @param {*} value\n * @param {string} name\n * @param {{\n *   allowArray?: boolean,\n *   allowFunction?: boolean,\n *   nullable?: boolean\n * }} [options]\n */\n\n/** @type {validateObject} */\nconst validateObject = hideStackFrames((value, name, options = null) => {\n  const allowArray = getOwnPropertyValueOrDefault(options, 'allowArray', false)\n  const allowFunction = getOwnPropertyValueOrDefault(options, 'allowFunction', false)\n  const nullable = getOwnPropertyValueOrDefault(options, 'nullable', false)\n  if (\n    (!nullable && value === null) ||\n    (!allowArray && ArrayIsArray(value)) ||\n    (typeof value !== 'object' && (!allowFunction || typeof value !== 'function'))\n  ) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'Object', value)\n  }\n})\n\n/**\n * @callback validateDictionary - We are using the Web IDL Standard definition\n *                                of \"dictionary\" here, which means any value\n *                                whose Type is either Undefined, Null, or\n *                                Object (which includes functions).\n * @param {*} value\n * @param {string} name\n * @see https://webidl.spec.whatwg.org/#es-dictionary\n * @see https://tc39.es/ecma262/#table-typeof-operator-results\n */\n\n/** @type {validateDictionary} */\nconst validateDictionary = hideStackFrames((value, name) => {\n  if (value != null && typeof value !== 'object' && typeof value !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE(name, 'a dictionary', value)\n  }\n})\n\n/**\n * @callback validateArray\n * @param {*} value\n * @param {string} name\n * @param {number} [minLength]\n * @returns {asserts value is any[]}\n */\n\n/** @type {validateArray} */\nconst validateArray = hideStackFrames((value, name, minLength = 0) => {\n  if (!ArrayIsArray(value)) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'Array', value)\n  }\n  if (value.length < minLength) {\n    const reason = `must be longer than ${minLength}`\n    throw new ERR_INVALID_ARG_VALUE(name, value, reason)\n  }\n})\n\n/**\n * @callback validateStringArray\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is string[]}\n */\n\n/** @type {validateStringArray} */\nfunction validateStringArray(value, name) {\n  validateArray(value, name)\n  for (let i = 0; i < value.length; i++) {\n    validateString(value[i], `${name}[${i}]`)\n  }\n}\n\n/**\n * @callback validateBooleanArray\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is boolean[]}\n */\n\n/** @type {validateBooleanArray} */\nfunction validateBooleanArray(value, name) {\n  validateArray(value, name)\n  for (let i = 0; i < value.length; i++) {\n    validateBoolean(value[i], `${name}[${i}]`)\n  }\n}\n\n/**\n * @callback validateAbortSignalArray\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is AbortSignal[]}\n */\n\n/** @type {validateAbortSignalArray} */\nfunction validateAbortSignalArray(value, name) {\n  validateArray(value, name)\n  for (let i = 0; i < value.length; i++) {\n    const signal = value[i]\n    const indexedName = `${name}[${i}]`\n    if (signal == null) {\n      throw new ERR_INVALID_ARG_TYPE(indexedName, 'AbortSignal', signal)\n    }\n    validateAbortSignal(signal, indexedName)\n  }\n}\n\n/**\n * @param {*} signal\n * @param {string} [name='signal']\n * @returns {asserts signal is keyof signals}\n */\nfunction validateSignalName(signal, name = 'signal') {\n  validateString(signal, name)\n  if (signals[signal] === undefined) {\n    if (signals[StringPrototypeToUpperCase(signal)] !== undefined) {\n      throw new ERR_UNKNOWN_SIGNAL(signal + ' (signals must use all capital letters)')\n    }\n    throw new ERR_UNKNOWN_SIGNAL(signal)\n  }\n}\n\n/**\n * @callback validateBuffer\n * @param {*} buffer\n * @param {string} [name='buffer']\n * @returns {asserts buffer is ArrayBufferView}\n */\n\n/** @type {validateBuffer} */\nconst validateBuffer = hideStackFrames((buffer, name = 'buffer') => {\n  if (!isArrayBufferView(buffer)) {\n    throw new ERR_INVALID_ARG_TYPE(name, ['Buffer', 'TypedArray', 'DataView'], buffer)\n  }\n})\n\n/**\n * @param {string} data\n * @param {string} encoding\n */\nfunction validateEncoding(data, encoding) {\n  const normalizedEncoding = normalizeEncoding(encoding)\n  const length = data.length\n  if (normalizedEncoding === 'hex' && length % 2 !== 0) {\n    throw new ERR_INVALID_ARG_VALUE('encoding', encoding, `is invalid for data of length ${length}`)\n  }\n}\n\n/**\n * Check that the port number is not NaN when coerced to a number,\n * is an integer and that it falls within the legal range of port numbers.\n * @param {*} port\n * @param {string} [name='Port']\n * @param {boolean} [allowZero=true]\n * @returns {number}\n */\nfunction validatePort(port, name = 'Port', allowZero = true) {\n  if (\n    (typeof port !== 'number' && typeof port !== 'string') ||\n    (typeof port === 'string' && StringPrototypeTrim(port).length === 0) ||\n    +port !== +port >>> 0 ||\n    port > 0xffff ||\n    (port === 0 && !allowZero)\n  ) {\n    throw new ERR_SOCKET_BAD_PORT(name, port, allowZero)\n  }\n  return port | 0\n}\n\n/**\n * @callback validateAbortSignal\n * @param {*} signal\n * @param {string} name\n */\n\n/** @type {validateAbortSignal} */\nconst validateAbortSignal = hideStackFrames((signal, name) => {\n  if (signal !== undefined && (signal === null || typeof signal !== 'object' || !('aborted' in signal))) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal)\n  }\n})\n\n/**\n * @callback validateFunction\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is Function}\n */\n\n/** @type {validateFunction} */\nconst validateFunction = hideStackFrames((value, name) => {\n  if (typeof value !== 'function') throw new ERR_INVALID_ARG_TYPE(name, 'Function', value)\n})\n\n/**\n * @callback validatePlainFunction\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is Function}\n */\n\n/** @type {validatePlainFunction} */\nconst validatePlainFunction = hideStackFrames((value, name) => {\n  if (typeof value !== 'function' || isAsyncFunction(value)) throw new ERR_INVALID_ARG_TYPE(name, 'Function', value)\n})\n\n/**\n * @callback validateUndefined\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is undefined}\n */\n\n/** @type {validateUndefined} */\nconst validateUndefined = hideStackFrames((value, name) => {\n  if (value !== undefined) throw new ERR_INVALID_ARG_TYPE(name, 'undefined', value)\n})\n\n/**\n * @template T\n * @param {T} value\n * @param {string} name\n * @param {T[]} union\n */\nfunction validateUnion(value, name, union) {\n  if (!ArrayPrototypeIncludes(union, value)) {\n    throw new ERR_INVALID_ARG_TYPE(name, `('${ArrayPrototypeJoin(union, '|')}')`, value)\n  }\n}\n\n/*\n  The rules for the Link header field are described here:\n  https://www.rfc-editor.org/rfc/rfc8288.html#section-3\n\n  This regex validates any string surrounded by angle brackets\n  (not necessarily a valid URI reference) followed by zero or more\n  link-params separated by semicolons.\n*/\nconst linkValueRegExp = /^(?:<[^>]*>)(?:\\s*;\\s*[^;\"\\s]+(?:=(\")?[^;\"\\s]*\\1)?)*$/\n\n/**\n * @param {any} value\n * @param {string} name\n */\nfunction validateLinkHeaderFormat(value, name) {\n  if (typeof value === 'undefined' || !RegExpPrototypeExec(linkValueRegExp, value)) {\n    throw new ERR_INVALID_ARG_VALUE(\n      name,\n      value,\n      'must be an array or string of format \"</styles.css>; rel=preload; as=style\"'\n    )\n  }\n}\n\n/**\n * @param {any} hints\n * @return {string}\n */\nfunction validateLinkHeaderValue(hints) {\n  if (typeof hints === 'string') {\n    validateLinkHeaderFormat(hints, 'hints')\n    return hints\n  } else if (ArrayIsArray(hints)) {\n    const hintsLength = hints.length\n    let result = ''\n    if (hintsLength === 0) {\n      return result\n    }\n    for (let i = 0; i < hintsLength; i++) {\n      const link = hints[i]\n      validateLinkHeaderFormat(link, 'hints')\n      result += link\n      if (i !== hintsLength - 1) {\n        result += ', '\n      }\n    }\n    return result\n  }\n  throw new ERR_INVALID_ARG_VALUE(\n    'hints',\n    hints,\n    'must be an array or string of format \"</styles.css>; rel=preload; as=style\"'\n  )\n}\nmodule.exports = {\n  isInt32,\n  isUint32,\n  parseFileMode,\n  validateArray,\n  validateStringArray,\n  validateBooleanArray,\n  validateAbortSignalArray,\n  validateBoolean,\n  validateBuffer,\n  validateDictionary,\n  validateEncoding,\n  validateFunction,\n  validateInt32,\n  validateInteger,\n  validateNumber,\n  validateObject,\n  validateOneOf,\n  validatePlainFunction,\n  validatePort,\n  validateSignalName,\n  validateString,\n  validateUint32,\n  validateUndefined,\n  validateUnion,\n  validateAbortSignal,\n  validateLinkHeaderValue\n}\n", "'use strict'\n\nconst { SymbolAsyncIterator, SymbolIterator, SymbolFor } = require('../../ours/primordials')\n\n// We need to use SymbolFor to make these globally available\n// for interopt with readable-stream, i.e. readable-stream\n// and node core needs to be able to read/write private state\n// from each other for proper interoperability.\nconst kIsDestroyed = SymbolFor('nodejs.stream.destroyed')\nconst kIsErrored = SymbolFor('nodejs.stream.errored')\nconst kIsReadable = SymbolFor('nodejs.stream.readable')\nconst kIsWritable = SymbolFor('nodejs.stream.writable')\nconst kIsDisturbed = SymbolFor('nodejs.stream.disturbed')\nconst kIsClosedPromise = SymbolFor('nodejs.webstream.isClosedPromise')\nconst kControllerErrorFunction = SymbolFor('nodejs.webstream.controllerErrorFunction')\nfunction isReadableNodeStream(obj, strict = false) {\n  var _obj$_readableState\n  return !!(\n    (\n      obj &&\n      typeof obj.pipe === 'function' &&\n      typeof obj.on === 'function' &&\n      (!strict || (typeof obj.pause === 'function' && typeof obj.resume === 'function')) &&\n      (!obj._writableState ||\n        ((_obj$_readableState = obj._readableState) === null || _obj$_readableState === undefined\n          ? undefined\n          : _obj$_readableState.readable) !== false) &&\n      // Duplex\n      (!obj._writableState || obj._readableState)\n    ) // Writable has .pipe.\n  )\n}\n\nfunction isWritableNodeStream(obj) {\n  var _obj$_writableState\n  return !!(\n    (\n      obj &&\n      typeof obj.write === 'function' &&\n      typeof obj.on === 'function' &&\n      (!obj._readableState ||\n        ((_obj$_writableState = obj._writableState) === null || _obj$_writableState === undefined\n          ? undefined\n          : _obj$_writableState.writable) !== false)\n    ) // Duplex\n  )\n}\n\nfunction isDuplexNodeStream(obj) {\n  return !!(\n    obj &&\n    typeof obj.pipe === 'function' &&\n    obj._readableState &&\n    typeof obj.on === 'function' &&\n    typeof obj.write === 'function'\n  )\n}\nfunction isNodeStream(obj) {\n  return (\n    obj &&\n    (obj._readableState ||\n      obj._writableState ||\n      (typeof obj.write === 'function' && typeof obj.on === 'function') ||\n      (typeof obj.pipe === 'function' && typeof obj.on === 'function'))\n  )\n}\nfunction isReadableStream(obj) {\n  return !!(\n    obj &&\n    !isNodeStream(obj) &&\n    typeof obj.pipeThrough === 'function' &&\n    typeof obj.getReader === 'function' &&\n    typeof obj.cancel === 'function'\n  )\n}\nfunction isWritableStream(obj) {\n  return !!(obj && !isNodeStream(obj) && typeof obj.getWriter === 'function' && typeof obj.abort === 'function')\n}\nfunction isTransformStream(obj) {\n  return !!(obj && !isNodeStream(obj) && typeof obj.readable === 'object' && typeof obj.writable === 'object')\n}\nfunction isWebStream(obj) {\n  return isReadableStream(obj) || isWritableStream(obj) || isTransformStream(obj)\n}\nfunction isIterable(obj, isAsync) {\n  if (obj == null) return false\n  if (isAsync === true) return typeof obj[SymbolAsyncIterator] === 'function'\n  if (isAsync === false) return typeof obj[SymbolIterator] === 'function'\n  return typeof obj[SymbolAsyncIterator] === 'function' || typeof obj[SymbolIterator] === 'function'\n}\nfunction isDestroyed(stream) {\n  if (!isNodeStream(stream)) return null\n  const wState = stream._writableState\n  const rState = stream._readableState\n  const state = wState || rState\n  return !!(stream.destroyed || stream[kIsDestroyed] || (state !== null && state !== undefined && state.destroyed))\n}\n\n// Have been end():d.\nfunction isWritableEnded(stream) {\n  if (!isWritableNodeStream(stream)) return null\n  if (stream.writableEnded === true) return true\n  const wState = stream._writableState\n  if (wState !== null && wState !== undefined && wState.errored) return false\n  if (typeof (wState === null || wState === undefined ? undefined : wState.ended) !== 'boolean') return null\n  return wState.ended\n}\n\n// Have emitted 'finish'.\nfunction isWritableFinished(stream, strict) {\n  if (!isWritableNodeStream(stream)) return null\n  if (stream.writableFinished === true) return true\n  const wState = stream._writableState\n  if (wState !== null && wState !== undefined && wState.errored) return false\n  if (typeof (wState === null || wState === undefined ? undefined : wState.finished) !== 'boolean') return null\n  return !!(wState.finished || (strict === false && wState.ended === true && wState.length === 0))\n}\n\n// Have been push(null):d.\nfunction isReadableEnded(stream) {\n  if (!isReadableNodeStream(stream)) return null\n  if (stream.readableEnded === true) return true\n  const rState = stream._readableState\n  if (!rState || rState.errored) return false\n  if (typeof (rState === null || rState === undefined ? undefined : rState.ended) !== 'boolean') return null\n  return rState.ended\n}\n\n// Have emitted 'end'.\nfunction isReadableFinished(stream, strict) {\n  if (!isReadableNodeStream(stream)) return null\n  const rState = stream._readableState\n  if (rState !== null && rState !== undefined && rState.errored) return false\n  if (typeof (rState === null || rState === undefined ? undefined : rState.endEmitted) !== 'boolean') return null\n  return !!(rState.endEmitted || (strict === false && rState.ended === true && rState.length === 0))\n}\nfunction isReadable(stream) {\n  if (stream && stream[kIsReadable] != null) return stream[kIsReadable]\n  if (typeof (stream === null || stream === undefined ? undefined : stream.readable) !== 'boolean') return null\n  if (isDestroyed(stream)) return false\n  return isReadableNodeStream(stream) && stream.readable && !isReadableFinished(stream)\n}\nfunction isWritable(stream) {\n  if (stream && stream[kIsWritable] != null) return stream[kIsWritable]\n  if (typeof (stream === null || stream === undefined ? undefined : stream.writable) !== 'boolean') return null\n  if (isDestroyed(stream)) return false\n  return isWritableNodeStream(stream) && stream.writable && !isWritableEnded(stream)\n}\nfunction isFinished(stream, opts) {\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (isDestroyed(stream)) {\n    return true\n  }\n  if ((opts === null || opts === undefined ? undefined : opts.readable) !== false && isReadable(stream)) {\n    return false\n  }\n  if ((opts === null || opts === undefined ? undefined : opts.writable) !== false && isWritable(stream)) {\n    return false\n  }\n  return true\n}\nfunction isWritableErrored(stream) {\n  var _stream$_writableStat, _stream$_writableStat2\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (stream.writableErrored) {\n    return stream.writableErrored\n  }\n  return (_stream$_writableStat =\n    (_stream$_writableStat2 = stream._writableState) === null || _stream$_writableStat2 === undefined\n      ? undefined\n      : _stream$_writableStat2.errored) !== null && _stream$_writableStat !== undefined\n    ? _stream$_writableStat\n    : null\n}\nfunction isReadableErrored(stream) {\n  var _stream$_readableStat, _stream$_readableStat2\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (stream.readableErrored) {\n    return stream.readableErrored\n  }\n  return (_stream$_readableStat =\n    (_stream$_readableStat2 = stream._readableState) === null || _stream$_readableStat2 === undefined\n      ? undefined\n      : _stream$_readableStat2.errored) !== null && _stream$_readableStat !== undefined\n    ? _stream$_readableStat\n    : null\n}\nfunction isClosed(stream) {\n  if (!isNodeStream(stream)) {\n    return null\n  }\n  if (typeof stream.closed === 'boolean') {\n    return stream.closed\n  }\n  const wState = stream._writableState\n  const rState = stream._readableState\n  if (\n    typeof (wState === null || wState === undefined ? undefined : wState.closed) === 'boolean' ||\n    typeof (rState === null || rState === undefined ? undefined : rState.closed) === 'boolean'\n  ) {\n    return (\n      (wState === null || wState === undefined ? undefined : wState.closed) ||\n      (rState === null || rState === undefined ? undefined : rState.closed)\n    )\n  }\n  if (typeof stream._closed === 'boolean' && isOutgoingMessage(stream)) {\n    return stream._closed\n  }\n  return null\n}\nfunction isOutgoingMessage(stream) {\n  return (\n    typeof stream._closed === 'boolean' &&\n    typeof stream._defaultKeepAlive === 'boolean' &&\n    typeof stream._removedConnection === 'boolean' &&\n    typeof stream._removedContLen === 'boolean'\n  )\n}\nfunction isServerResponse(stream) {\n  return typeof stream._sent100 === 'boolean' && isOutgoingMessage(stream)\n}\nfunction isServerRequest(stream) {\n  var _stream$req\n  return (\n    typeof stream._consuming === 'boolean' &&\n    typeof stream._dumped === 'boolean' &&\n    ((_stream$req = stream.req) === null || _stream$req === undefined ? undefined : _stream$req.upgradeOrConnect) ===\n      undefined\n  )\n}\nfunction willEmitClose(stream) {\n  if (!isNodeStream(stream)) return null\n  const wState = stream._writableState\n  const rState = stream._readableState\n  const state = wState || rState\n  return (\n    (!state && isServerResponse(stream)) || !!(state && state.autoDestroy && state.emitClose && state.closed === false)\n  )\n}\nfunction isDisturbed(stream) {\n  var _stream$kIsDisturbed\n  return !!(\n    stream &&\n    ((_stream$kIsDisturbed = stream[kIsDisturbed]) !== null && _stream$kIsDisturbed !== undefined\n      ? _stream$kIsDisturbed\n      : stream.readableDidRead || stream.readableAborted)\n  )\n}\nfunction isErrored(stream) {\n  var _ref,\n    _ref2,\n    _ref3,\n    _ref4,\n    _ref5,\n    _stream$kIsErrored,\n    _stream$_readableStat3,\n    _stream$_writableStat3,\n    _stream$_readableStat4,\n    _stream$_writableStat4\n  return !!(\n    stream &&\n    ((_ref =\n      (_ref2 =\n        (_ref3 =\n          (_ref4 =\n            (_ref5 =\n              (_stream$kIsErrored = stream[kIsErrored]) !== null && _stream$kIsErrored !== undefined\n                ? _stream$kIsErrored\n                : stream.readableErrored) !== null && _ref5 !== undefined\n              ? _ref5\n              : stream.writableErrored) !== null && _ref4 !== undefined\n            ? _ref4\n            : (_stream$_readableStat3 = stream._readableState) === null || _stream$_readableStat3 === undefined\n            ? undefined\n            : _stream$_readableStat3.errorEmitted) !== null && _ref3 !== undefined\n          ? _ref3\n          : (_stream$_writableStat3 = stream._writableState) === null || _stream$_writableStat3 === undefined\n          ? undefined\n          : _stream$_writableStat3.errorEmitted) !== null && _ref2 !== undefined\n        ? _ref2\n        : (_stream$_readableStat4 = stream._readableState) === null || _stream$_readableStat4 === undefined\n        ? undefined\n        : _stream$_readableStat4.errored) !== null && _ref !== undefined\n      ? _ref\n      : (_stream$_writableStat4 = stream._writableState) === null || _stream$_writableStat4 === undefined\n      ? undefined\n      : _stream$_writableStat4.errored)\n  )\n}\nmodule.exports = {\n  isDestroyed,\n  kIsDestroyed,\n  isDisturbed,\n  kIsDisturbed,\n  isErrored,\n  kIsErrored,\n  isReadable,\n  kIsReadable,\n  kIsClosedPromise,\n  kControllerErrorFunction,\n  kIsWritable,\n  isClosed,\n  isDuplexNodeStream,\n  isFinished,\n  isIterable,\n  isReadableNodeStream,\n  isReadableStream,\n  isReadableEnded,\n  isReadableFinished,\n  isReadableErrored,\n  isNodeStream,\n  isWebStream,\n  isWritable,\n  isWritableNodeStream,\n  isWritableStream,\n  isWritableEnded,\n  isWritableFinished,\n  isWritableErrored,\n  isServerRequest,\n  isServerResponse,\n  willEmitClose,\n  isTransformStream\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Ported from https://github.com/mafintosh/end-of-stream with\n// permission from the author, Mathias Buus (@mafintosh).\n\n;('use strict')\nconst { AbortError, codes } = require('../../ours/errors')\nconst { ERR_INVALID_ARG_TYPE, ERR_STREAM_PREMATURE_CLOSE } = codes\nconst { kEmptyObject, once } = require('../../ours/util')\nconst { validateAbortSignal, validateFunction, validateObject, validateBoolean } = require('../validators')\nconst { Promise, PromisePrototypeThen, SymbolDispose } = require('../../ours/primordials')\nconst {\n  isClosed,\n  isReadable,\n  isReadableNodeStream,\n  isReadableStream,\n  isReadableFinished,\n  isReadableErrored,\n  isWritable,\n  isWritableNodeStream,\n  isWritableStream,\n  isWritableFinished,\n  isWritableErrored,\n  isNodeStream,\n  willEmitClose: _willEmitClose,\n  kIsClosedPromise\n} = require('./utils')\nlet addAbortListener\nfunction isRequest(stream) {\n  return stream.setHeader && typeof stream.abort === 'function'\n}\nconst nop = () => {}\nfunction eos(stream, options, callback) {\n  var _options$readable, _options$writable\n  if (arguments.length === 2) {\n    callback = options\n    options = kEmptyObject\n  } else if (options == null) {\n    options = kEmptyObject\n  } else {\n    validateObject(options, 'options')\n  }\n  validateFunction(callback, 'callback')\n  validateAbortSignal(options.signal, 'options.signal')\n  callback = once(callback)\n  if (isReadableStream(stream) || isWritableStream(stream)) {\n    return eosWeb(stream, options, callback)\n  }\n  if (!isNodeStream(stream)) {\n    throw new ERR_INVALID_ARG_TYPE('stream', ['ReadableStream', 'WritableStream', 'Stream'], stream)\n  }\n  const readable =\n    (_options$readable = options.readable) !== null && _options$readable !== undefined\n      ? _options$readable\n      : isReadableNodeStream(stream)\n  const writable =\n    (_options$writable = options.writable) !== null && _options$writable !== undefined\n      ? _options$writable\n      : isWritableNodeStream(stream)\n  const wState = stream._writableState\n  const rState = stream._readableState\n  const onlegacyfinish = () => {\n    if (!stream.writable) {\n      onfinish()\n    }\n  }\n\n  // TODO (ronag): Improve soft detection to include core modules and\n  // common ecosystem modules that do properly emit 'close' but fail\n  // this generic check.\n  let willEmitClose =\n    _willEmitClose(stream) && isReadableNodeStream(stream) === readable && isWritableNodeStream(stream) === writable\n  let writableFinished = isWritableFinished(stream, false)\n  const onfinish = () => {\n    writableFinished = true\n    // Stream should not be destroyed here. If it is that\n    // means that user space is doing something differently and\n    // we cannot trust willEmitClose.\n    if (stream.destroyed) {\n      willEmitClose = false\n    }\n    if (willEmitClose && (!stream.readable || readable)) {\n      return\n    }\n    if (!readable || readableFinished) {\n      callback.call(stream)\n    }\n  }\n  let readableFinished = isReadableFinished(stream, false)\n  const onend = () => {\n    readableFinished = true\n    // Stream should not be destroyed here. If it is that\n    // means that user space is doing something differently and\n    // we cannot trust willEmitClose.\n    if (stream.destroyed) {\n      willEmitClose = false\n    }\n    if (willEmitClose && (!stream.writable || writable)) {\n      return\n    }\n    if (!writable || writableFinished) {\n      callback.call(stream)\n    }\n  }\n  const onerror = (err) => {\n    callback.call(stream, err)\n  }\n  let closed = isClosed(stream)\n  const onclose = () => {\n    closed = true\n    const errored = isWritableErrored(stream) || isReadableErrored(stream)\n    if (errored && typeof errored !== 'boolean') {\n      return callback.call(stream, errored)\n    }\n    if (readable && !readableFinished && isReadableNodeStream(stream, true)) {\n      if (!isReadableFinished(stream, false)) return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE())\n    }\n    if (writable && !writableFinished) {\n      if (!isWritableFinished(stream, false)) return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE())\n    }\n    callback.call(stream)\n  }\n  const onclosed = () => {\n    closed = true\n    const errored = isWritableErrored(stream) || isReadableErrored(stream)\n    if (errored && typeof errored !== 'boolean') {\n      return callback.call(stream, errored)\n    }\n    callback.call(stream)\n  }\n  const onrequest = () => {\n    stream.req.on('finish', onfinish)\n  }\n  if (isRequest(stream)) {\n    stream.on('complete', onfinish)\n    if (!willEmitClose) {\n      stream.on('abort', onclose)\n    }\n    if (stream.req) {\n      onrequest()\n    } else {\n      stream.on('request', onrequest)\n    }\n  } else if (writable && !wState) {\n    // legacy streams\n    stream.on('end', onlegacyfinish)\n    stream.on('close', onlegacyfinish)\n  }\n\n  // Not all streams will emit 'close' after 'aborted'.\n  if (!willEmitClose && typeof stream.aborted === 'boolean') {\n    stream.on('aborted', onclose)\n  }\n  stream.on('end', onend)\n  stream.on('finish', onfinish)\n  if (options.error !== false) {\n    stream.on('error', onerror)\n  }\n  stream.on('close', onclose)\n  if (closed) {\n    process.nextTick(onclose)\n  } else if (\n    (wState !== null && wState !== undefined && wState.errorEmitted) ||\n    (rState !== null && rState !== undefined && rState.errorEmitted)\n  ) {\n    if (!willEmitClose) {\n      process.nextTick(onclosed)\n    }\n  } else if (\n    !readable &&\n    (!willEmitClose || isReadable(stream)) &&\n    (writableFinished || isWritable(stream) === false)\n  ) {\n    process.nextTick(onclosed)\n  } else if (\n    !writable &&\n    (!willEmitClose || isWritable(stream)) &&\n    (readableFinished || isReadable(stream) === false)\n  ) {\n    process.nextTick(onclosed)\n  } else if (rState && stream.req && stream.aborted) {\n    process.nextTick(onclosed)\n  }\n  const cleanup = () => {\n    callback = nop\n    stream.removeListener('aborted', onclose)\n    stream.removeListener('complete', onfinish)\n    stream.removeListener('abort', onclose)\n    stream.removeListener('request', onrequest)\n    if (stream.req) stream.req.removeListener('finish', onfinish)\n    stream.removeListener('end', onlegacyfinish)\n    stream.removeListener('close', onlegacyfinish)\n    stream.removeListener('finish', onfinish)\n    stream.removeListener('end', onend)\n    stream.removeListener('error', onerror)\n    stream.removeListener('close', onclose)\n  }\n  if (options.signal && !closed) {\n    const abort = () => {\n      // Keep it because cleanup removes it.\n      const endCallback = callback\n      cleanup()\n      endCallback.call(\n        stream,\n        new AbortError(undefined, {\n          cause: options.signal.reason\n        })\n      )\n    }\n    if (options.signal.aborted) {\n      process.nextTick(abort)\n    } else {\n      addAbortListener = addAbortListener || require('../../ours/util').addAbortListener\n      const disposable = addAbortListener(options.signal, abort)\n      const originalCallback = callback\n      callback = once((...args) => {\n        disposable[SymbolDispose]()\n        originalCallback.apply(stream, args)\n      })\n    }\n  }\n  return cleanup\n}\nfunction eosWeb(stream, options, callback) {\n  let isAborted = false\n  let abort = nop\n  if (options.signal) {\n    abort = () => {\n      isAborted = true\n      callback.call(\n        stream,\n        new AbortError(undefined, {\n          cause: options.signal.reason\n        })\n      )\n    }\n    if (options.signal.aborted) {\n      process.nextTick(abort)\n    } else {\n      addAbortListener = addAbortListener || require('../../ours/util').addAbortListener\n      const disposable = addAbortListener(options.signal, abort)\n      const originalCallback = callback\n      callback = once((...args) => {\n        disposable[SymbolDispose]()\n        originalCallback.apply(stream, args)\n      })\n    }\n  }\n  const resolverFn = (...args) => {\n    if (!isAborted) {\n      process.nextTick(() => callback.apply(stream, args))\n    }\n  }\n  PromisePrototypeThen(stream[kIsClosedPromise].promise, resolverFn, resolverFn)\n  return nop\n}\nfunction finished(stream, opts) {\n  var _opts\n  let autoCleanup = false\n  if (opts === null) {\n    opts = kEmptyObject\n  }\n  if ((_opts = opts) !== null && _opts !== undefined && _opts.cleanup) {\n    validateBoolean(opts.cleanup, 'cleanup')\n    autoCleanup = opts.cleanup\n  }\n  return new Promise((resolve, reject) => {\n    const cleanup = eos(stream, opts, (err) => {\n      if (autoCleanup) {\n        cleanup()\n      }\n      if (err) {\n        reject(err)\n      } else {\n        resolve()\n      }\n    })\n  })\n}\nmodule.exports = eos\nmodule.exports.finished = finished\n", "'use strict'\n\n/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n\nconst {\n  aggregateTwoErrors,\n  codes: { ERR_MULTIPLE_CALLBACK },\n  AbortError\n} = require('../../ours/errors')\nconst { Symbol } = require('../../ours/primordials')\nconst { kIsDestroyed, isDestroyed, isFinished, isServerRequest } = require('./utils')\nconst kDestroy = Symbol('kDestroy')\nconst kConstruct = Symbol('kConstruct')\nfunction checkError(err, w, r) {\n  if (err) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    err.stack // eslint-disable-line no-unused-expressions\n\n    if (w && !w.errored) {\n      w.errored = err\n    }\n    if (r && !r.errored) {\n      r.errored = err\n    }\n  }\n}\n\n// Backwards compat. cb() is undocumented and unused in core but\n// unfortunately might be used by modules.\nfunction destroy(err, cb) {\n  const r = this._readableState\n  const w = this._writableState\n  // With duplex streams we use the writable side for state.\n  const s = w || r\n  if ((w !== null && w !== undefined && w.destroyed) || (r !== null && r !== undefined && r.destroyed)) {\n    if (typeof cb === 'function') {\n      cb()\n    }\n    return this\n  }\n\n  // We set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n  checkError(err, w, r)\n  if (w) {\n    w.destroyed = true\n  }\n  if (r) {\n    r.destroyed = true\n  }\n\n  // If still constructing then defer calling _destroy.\n  if (!s.constructed) {\n    this.once(kDestroy, function (er) {\n      _destroy(this, aggregateTwoErrors(er, err), cb)\n    })\n  } else {\n    _destroy(this, err, cb)\n  }\n  return this\n}\nfunction _destroy(self, err, cb) {\n  let called = false\n  function onDestroy(err) {\n    if (called) {\n      return\n    }\n    called = true\n    const r = self._readableState\n    const w = self._writableState\n    checkError(err, w, r)\n    if (w) {\n      w.closed = true\n    }\n    if (r) {\n      r.closed = true\n    }\n    if (typeof cb === 'function') {\n      cb(err)\n    }\n    if (err) {\n      process.nextTick(emitErrorCloseNT, self, err)\n    } else {\n      process.nextTick(emitCloseNT, self)\n    }\n  }\n  try {\n    self._destroy(err || null, onDestroy)\n  } catch (err) {\n    onDestroy(err)\n  }\n}\nfunction emitErrorCloseNT(self, err) {\n  emitErrorNT(self, err)\n  emitCloseNT(self)\n}\nfunction emitCloseNT(self) {\n  const r = self._readableState\n  const w = self._writableState\n  if (w) {\n    w.closeEmitted = true\n  }\n  if (r) {\n    r.closeEmitted = true\n  }\n  if ((w !== null && w !== undefined && w.emitClose) || (r !== null && r !== undefined && r.emitClose)) {\n    self.emit('close')\n  }\n}\nfunction emitErrorNT(self, err) {\n  const r = self._readableState\n  const w = self._writableState\n  if ((w !== null && w !== undefined && w.errorEmitted) || (r !== null && r !== undefined && r.errorEmitted)) {\n    return\n  }\n  if (w) {\n    w.errorEmitted = true\n  }\n  if (r) {\n    r.errorEmitted = true\n  }\n  self.emit('error', err)\n}\nfunction undestroy() {\n  const r = this._readableState\n  const w = this._writableState\n  if (r) {\n    r.constructed = true\n    r.closed = false\n    r.closeEmitted = false\n    r.destroyed = false\n    r.errored = null\n    r.errorEmitted = false\n    r.reading = false\n    r.ended = r.readable === false\n    r.endEmitted = r.readable === false\n  }\n  if (w) {\n    w.constructed = true\n    w.destroyed = false\n    w.closed = false\n    w.closeEmitted = false\n    w.errored = null\n    w.errorEmitted = false\n    w.finalCalled = false\n    w.prefinished = false\n    w.ended = w.writable === false\n    w.ending = w.writable === false\n    w.finished = w.writable === false\n  }\n}\nfunction errorOrDestroy(stream, err, sync) {\n  // We have tests that rely on errors being emitted\n  // in the same tick, so changing this is semver major.\n  // For now when you opt-in to autoDestroy we allow\n  // the error to be emitted nextTick. In a future\n  // semver major update we should change the default to this.\n\n  const r = stream._readableState\n  const w = stream._writableState\n  if ((w !== null && w !== undefined && w.destroyed) || (r !== null && r !== undefined && r.destroyed)) {\n    return this\n  }\n  if ((r !== null && r !== undefined && r.autoDestroy) || (w !== null && w !== undefined && w.autoDestroy))\n    stream.destroy(err)\n  else if (err) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    err.stack // eslint-disable-line no-unused-expressions\n\n    if (w && !w.errored) {\n      w.errored = err\n    }\n    if (r && !r.errored) {\n      r.errored = err\n    }\n    if (sync) {\n      process.nextTick(emitErrorNT, stream, err)\n    } else {\n      emitErrorNT(stream, err)\n    }\n  }\n}\nfunction construct(stream, cb) {\n  if (typeof stream._construct !== 'function') {\n    return\n  }\n  const r = stream._readableState\n  const w = stream._writableState\n  if (r) {\n    r.constructed = false\n  }\n  if (w) {\n    w.constructed = false\n  }\n  stream.once(kConstruct, cb)\n  if (stream.listenerCount(kConstruct) > 1) {\n    // Duplex\n    return\n  }\n  process.nextTick(constructNT, stream)\n}\nfunction constructNT(stream) {\n  let called = false\n  function onConstruct(err) {\n    if (called) {\n      errorOrDestroy(stream, err !== null && err !== undefined ? err : new ERR_MULTIPLE_CALLBACK())\n      return\n    }\n    called = true\n    const r = stream._readableState\n    const w = stream._writableState\n    const s = w || r\n    if (r) {\n      r.constructed = true\n    }\n    if (w) {\n      w.constructed = true\n    }\n    if (s.destroyed) {\n      stream.emit(kDestroy, err)\n    } else if (err) {\n      errorOrDestroy(stream, err, true)\n    } else {\n      process.nextTick(emitConstructNT, stream)\n    }\n  }\n  try {\n    stream._construct((err) => {\n      process.nextTick(onConstruct, err)\n    })\n  } catch (err) {\n    process.nextTick(onConstruct, err)\n  }\n}\nfunction emitConstructNT(stream) {\n  stream.emit(kConstruct)\n}\nfunction isRequest(stream) {\n  return (stream === null || stream === undefined ? undefined : stream.setHeader) && typeof stream.abort === 'function'\n}\nfunction emitCloseLegacy(stream) {\n  stream.emit('close')\n}\nfunction emitErrorCloseLegacy(stream, err) {\n  stream.emit('error', err)\n  process.nextTick(emitCloseLegacy, stream)\n}\n\n// Normalize destroy for legacy.\nfunction destroyer(stream, err) {\n  if (!stream || isDestroyed(stream)) {\n    return\n  }\n  if (!err && !isFinished(stream)) {\n    err = new AbortError()\n  }\n\n  // TODO: Remove isRequest branches.\n  if (isServerRequest(stream)) {\n    stream.socket = null\n    stream.destroy(err)\n  } else if (isRequest(stream)) {\n    stream.abort()\n  } else if (isRequest(stream.req)) {\n    stream.req.abort()\n  } else if (typeof stream.destroy === 'function') {\n    stream.destroy(err)\n  } else if (typeof stream.close === 'function') {\n    // TODO: Don't lose err?\n    stream.close()\n  } else if (err) {\n    process.nextTick(emitErrorCloseLegacy, stream, err)\n  } else {\n    process.nextTick(emitCloseLegacy, stream)\n  }\n  if (!stream.destroyed) {\n    stream[kIsDestroyed] = true\n  }\n}\nmodule.exports = {\n  construct,\n  destroyer,\n  destroy,\n  undestroy,\n  errorOrDestroy\n}\n", "'use strict'\n\nconst { ArrayIsArray, ObjectSetPrototypeOf } = require('../../ours/primordials')\nconst { EventEmitter: EE } = require('events')\nfunction Stream(opts) {\n  EE.call(this, opts)\n}\nObjectSetPrototypeOf(Stream.prototype, EE.prototype)\nObjectSetPrototypeOf(Stream, EE)\nStream.prototype.pipe = function (dest, options) {\n  const source = this\n  function ondata(chunk) {\n    if (dest.writable && dest.write(chunk) === false && source.pause) {\n      source.pause()\n    }\n  }\n  source.on('data', ondata)\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume()\n    }\n  }\n  dest.on('drain', ondrain)\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend)\n    source.on('close', onclose)\n  }\n  let didOnEnd = false\n  function onend() {\n    if (didOnEnd) return\n    didOnEnd = true\n    dest.end()\n  }\n  function onclose() {\n    if (didOnEnd) return\n    didOnEnd = true\n    if (typeof dest.destroy === 'function') dest.destroy()\n  }\n\n  // Don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup()\n    if (EE.listenerCount(this, 'error') === 0) {\n      this.emit('error', er)\n    }\n  }\n  prependListener(source, 'error', onerror)\n  prependListener(dest, 'error', onerror)\n\n  // Remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata)\n    dest.removeListener('drain', ondrain)\n    source.removeListener('end', onend)\n    source.removeListener('close', onclose)\n    source.removeListener('error', onerror)\n    dest.removeListener('error', onerror)\n    source.removeListener('end', cleanup)\n    source.removeListener('close', cleanup)\n    dest.removeListener('close', cleanup)\n  }\n  source.on('end', cleanup)\n  source.on('close', cleanup)\n  dest.on('close', cleanup)\n  dest.emit('pipe', source)\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest\n}\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn)\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn)\n  else if (ArrayIsArray(emitter._events[event])) emitter._events[event].unshift(fn)\n  else emitter._events[event] = [fn, emitter._events[event]]\n}\nmodule.exports = {\n  Stream,\n  prependListener\n}\n", "'use strict'\n\nconst { SymbolDispose } = require('../../ours/primordials')\nconst { AbortError, codes } = require('../../ours/errors')\nconst { isNodeStream, isWebStream, kControllerErrorFunction } = require('./utils')\nconst eos = require('./end-of-stream')\nconst { ERR_INVALID_ARG_TYPE } = codes\nlet addAbortListener\n\n// This method is inlined here for readable-stream\n// It also does not allow for signal to not exist on the stream\n// https://github.com/nodejs/node/pull/36061#discussion_r533718029\nconst validateAbortSignal = (signal, name) => {\n  if (typeof signal !== 'object' || !('aborted' in signal)) {\n    throw new ERR_INVALID_ARG_TYPE(name, 'AbortSignal', signal)\n  }\n}\nmodule.exports.addAbortSignal = function addAbortSignal(signal, stream) {\n  validateAbortSignal(signal, 'signal')\n  if (!isNodeStream(stream) && !isWebStream(stream)) {\n    throw new ERR_INVALID_ARG_TYPE('stream', ['ReadableStream', 'WritableStream', 'Stream'], stream)\n  }\n  return module.exports.addAbortSignalNoValidate(signal, stream)\n}\nmodule.exports.addAbortSignalNoValidate = function (signal, stream) {\n  if (typeof signal !== 'object' || !('aborted' in signal)) {\n    return stream\n  }\n  const onAbort = isNodeStream(stream)\n    ? () => {\n        stream.destroy(\n          new AbortError(undefined, {\n            cause: signal.reason\n          })\n        )\n      }\n    : () => {\n        stream[kControllerErrorFunction](\n          new AbortError(undefined, {\n            cause: signal.reason\n          })\n        )\n      }\n  if (signal.aborted) {\n    onAbort()\n  } else {\n    addAbortListener = addAbortListener || require('../../ours/util').addAbortListener\n    const disposable = addAbortListener(signal, onAbort)\n    eos(stream, disposable[SymbolDispose])\n  }\n  return stream\n}\n", "'use strict'\n\nconst { StringPrototypeSlice, SymbolIterator, TypedArrayPrototypeSet, Uint8Array } = require('../../ours/primordials')\nconst { Buffer } = require('buffer')\nconst { inspect } = require('../../ours/util')\nmodule.exports = class BufferList {\n  constructor() {\n    this.head = null\n    this.tail = null\n    this.length = 0\n  }\n  push(v) {\n    const entry = {\n      data: v,\n      next: null\n    }\n    if (this.length > 0) this.tail.next = entry\n    else this.head = entry\n    this.tail = entry\n    ++this.length\n  }\n  unshift(v) {\n    const entry = {\n      data: v,\n      next: this.head\n    }\n    if (this.length === 0) this.tail = entry\n    this.head = entry\n    ++this.length\n  }\n  shift() {\n    if (this.length === 0) return\n    const ret = this.head.data\n    if (this.length === 1) this.head = this.tail = null\n    else this.head = this.head.next\n    --this.length\n    return ret\n  }\n  clear() {\n    this.head = this.tail = null\n    this.length = 0\n  }\n  join(s) {\n    if (this.length === 0) return ''\n    let p = this.head\n    let ret = '' + p.data\n    while ((p = p.next) !== null) ret += s + p.data\n    return ret\n  }\n  concat(n) {\n    if (this.length === 0) return Buffer.alloc(0)\n    const ret = Buffer.allocUnsafe(n >>> 0)\n    let p = this.head\n    let i = 0\n    while (p) {\n      TypedArrayPrototypeSet(ret, p.data, i)\n      i += p.data.length\n      p = p.next\n    }\n    return ret\n  }\n\n  // Consumes a specified amount of bytes or characters from the buffered data.\n  consume(n, hasStrings) {\n    const data = this.head.data\n    if (n < data.length) {\n      // `slice` is the same for buffers and strings.\n      const slice = data.slice(0, n)\n      this.head.data = data.slice(n)\n      return slice\n    }\n    if (n === data.length) {\n      // First chunk is a perfect match.\n      return this.shift()\n    }\n    // Result spans more than one buffer.\n    return hasStrings ? this._getString(n) : this._getBuffer(n)\n  }\n  first() {\n    return this.head.data\n  }\n  *[SymbolIterator]() {\n    for (let p = this.head; p; p = p.next) {\n      yield p.data\n    }\n  }\n\n  // Consumes a specified amount of characters from the buffered data.\n  _getString(n) {\n    let ret = ''\n    let p = this.head\n    let c = 0\n    do {\n      const str = p.data\n      if (n > str.length) {\n        ret += str\n        n -= str.length\n      } else {\n        if (n === str.length) {\n          ret += str\n          ++c\n          if (p.next) this.head = p.next\n          else this.head = this.tail = null\n        } else {\n          ret += StringPrototypeSlice(str, 0, n)\n          this.head = p\n          p.data = StringPrototypeSlice(str, n)\n        }\n        break\n      }\n      ++c\n    } while ((p = p.next) !== null)\n    this.length -= c\n    return ret\n  }\n\n  // Consumes a specified amount of bytes from the buffered data.\n  _getBuffer(n) {\n    const ret = Buffer.allocUnsafe(n)\n    const retLen = n\n    let p = this.head\n    let c = 0\n    do {\n      const buf = p.data\n      if (n > buf.length) {\n        TypedArrayPrototypeSet(ret, buf, retLen - n)\n        n -= buf.length\n      } else {\n        if (n === buf.length) {\n          TypedArrayPrototypeSet(ret, buf, retLen - n)\n          ++c\n          if (p.next) this.head = p.next\n          else this.head = this.tail = null\n        } else {\n          TypedArrayPrototypeSet(ret, new Uint8Array(buf.buffer, buf.byteOffset, n), retLen - n)\n          this.head = p\n          p.data = buf.slice(n)\n        }\n        break\n      }\n      ++c\n    } while ((p = p.next) !== null)\n    this.length -= c\n    return ret\n  }\n\n  // Make sure the linked list only shows the minimal necessary information.\n  [Symbol.for('nodejs.util.inspect.custom')](_, options) {\n    return inspect(this, {\n      ...options,\n      // Only inspect one level.\n      depth: 0,\n      // It should not recurse.\n      customInspect: false\n    })\n  }\n}\n", "'use strict'\n\nconst { MathFloor, NumberIsInteger } = require('../../ours/primordials')\nconst { validateInteger } = require('../validators')\nconst { ERR_INVALID_ARG_VALUE } = require('../../ours/errors').codes\nlet defaultHighWaterMarkBytes = 16 * 1024\nlet defaultHighWaterMarkObjectMode = 16\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n  return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null\n}\nfunction getDefaultHighWaterMark(objectMode) {\n  return objectMode ? defaultHighWaterMarkObjectMode : defaultHighWaterMarkBytes\n}\nfunction setDefaultHighWaterMark(objectMode, value) {\n  validateInteger(value, 'value', 0)\n  if (objectMode) {\n    defaultHighWaterMarkObjectMode = value\n  } else {\n    defaultHighWaterMarkBytes = value\n  }\n}\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n  const hwm = highWaterMarkFrom(options, isDuplex, duplexKey)\n  if (hwm != null) {\n    if (!NumberIsInteger(hwm) || hwm < 0) {\n      const name = isDuplex ? `options.${duplexKey}` : 'options.highWaterMark'\n      throw new ERR_INVALID_ARG_VALUE(name, hwm)\n    }\n    return MathFloor(hwm)\n  }\n\n  // Default value\n  return getDefaultHighWaterMark(state.objectMode)\n}\nmodule.exports = {\n  getHighWaterMark,\n  getDefaultHighWaterMark,\n  setDefaultHighWaterMark\n}\n", "/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */\n/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.prototype = Object.create(Buffer.prototype)\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}", "'use strict'\n\n/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n\nconst { PromisePrototypeThen, SymbolAsyncIterator, SymbolIterator } = require('../../ours/primordials')\nconst { Buffer } = require('buffer')\nconst { ERR_INVALID_ARG_TYPE, ERR_STREAM_NULL_VALUES } = require('../../ours/errors').codes\nfunction from(Readable, iterable, opts) {\n  let iterator\n  if (typeof iterable === 'string' || iterable instanceof Buffer) {\n    return new Readable({\n      objectMode: true,\n      ...opts,\n      read() {\n        this.push(iterable)\n        this.push(null)\n      }\n    })\n  }\n  let isAsync\n  if (iterable && iterable[SymbolAsyncIterator]) {\n    isAsync = true\n    iterator = iterable[SymbolAsyncIterator]()\n  } else if (iterable && iterable[SymbolIterator]) {\n    isAsync = false\n    iterator = iterable[SymbolIterator]()\n  } else {\n    throw new ERR_INVALID_ARG_TYPE('iterable', ['Iterable'], iterable)\n  }\n  const readable = new Readable({\n    objectMode: true,\n    highWaterMark: 1,\n    // TODO(ronag): What options should be allowed?\n    ...opts\n  })\n\n  // Flag to protect against _read\n  // being called before last iteration completion.\n  let reading = false\n  readable._read = function () {\n    if (!reading) {\n      reading = true\n      next()\n    }\n  }\n  readable._destroy = function (error, cb) {\n    PromisePrototypeThen(\n      close(error),\n      () => process.nextTick(cb, error),\n      // nextTick is here in case cb throws\n      (e) => process.nextTick(cb, e || error)\n    )\n  }\n  async function close(error) {\n    const hadError = error !== undefined && error !== null\n    const hasThrow = typeof iterator.throw === 'function'\n    if (hadError && hasThrow) {\n      const { value, done } = await iterator.throw(error)\n      await value\n      if (done) {\n        return\n      }\n    }\n    if (typeof iterator.return === 'function') {\n      const { value } = await iterator.return()\n      await value\n    }\n  }\n  async function next() {\n    for (;;) {\n      try {\n        const { value, done } = isAsync ? await iterator.next() : iterator.next()\n        if (done) {\n          readable.push(null)\n        } else {\n          const res = value && typeof value.then === 'function' ? await value : value\n          if (res === null) {\n            reading = false\n            throw new ERR_STREAM_NULL_VALUES()\n          } else if (readable.push(res)) {\n            continue\n          } else {\n            reading = false\n          }\n        }\n      } catch (err) {\n        readable.destroy(err)\n      }\n      break\n    }\n  }\n  return readable\n}\nmodule.exports = from\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n;('use strict')\nconst {\n  ArrayPrototypeIndexOf,\n  NumberIsInteger,\n  NumberIsNaN,\n  NumberParseInt,\n  ObjectDefineProperties,\n  ObjectKeys,\n  ObjectSetPrototypeOf,\n  Promise,\n  SafeSet,\n  SymbolAsyncDispose,\n  SymbolAsyncIterator,\n  Symbol\n} = require('../../ours/primordials')\nmodule.exports = Readable\nReadable.ReadableState = ReadableState\nconst { EventEmitter: EE } = require('events')\nconst { Stream, prependListener } = require('./legacy')\nconst { Buffer } = require('buffer')\nconst { addAbortSignal } = require('./add-abort-signal')\nconst eos = require('./end-of-stream')\nlet debug = require('../../ours/util').debuglog('stream', (fn) => {\n  debug = fn\n})\nconst BufferList = require('./buffer_list')\nconst destroyImpl = require('./destroy')\nconst { getHighWaterMark, getDefaultHighWaterMark } = require('./state')\nconst {\n  aggregateTwoErrors,\n  codes: {\n    ERR_INVALID_ARG_TYPE,\n    ERR_METHOD_NOT_IMPLEMENTED,\n    ERR_OUT_OF_RANGE,\n    ERR_STREAM_PUSH_AFTER_EOF,\n    ERR_STREAM_UNSHIFT_AFTER_END_EVENT\n  },\n  AbortError\n} = require('../../ours/errors')\nconst { validateObject } = require('../validators')\nconst kPaused = Symbol('kPaused')\nconst { StringDecoder } = require('string_decoder')\nconst from = require('./from')\nObjectSetPrototypeOf(Readable.prototype, Stream.prototype)\nObjectSetPrototypeOf(Readable, Stream)\nconst nop = () => {}\nconst { errorOrDestroy } = destroyImpl\nconst kObjectMode = 1 << 0\nconst kEnded = 1 << 1\nconst kEndEmitted = 1 << 2\nconst kReading = 1 << 3\nconst kConstructed = 1 << 4\nconst kSync = 1 << 5\nconst kNeedReadable = 1 << 6\nconst kEmittedReadable = 1 << 7\nconst kReadableListening = 1 << 8\nconst kResumeScheduled = 1 << 9\nconst kErrorEmitted = 1 << 10\nconst kEmitClose = 1 << 11\nconst kAutoDestroy = 1 << 12\nconst kDestroyed = 1 << 13\nconst kClosed = 1 << 14\nconst kCloseEmitted = 1 << 15\nconst kMultiAwaitDrain = 1 << 16\nconst kReadingMore = 1 << 17\nconst kDataEmitted = 1 << 18\n\n// TODO(benjamingr) it is likely slower to do it this way than with free functions\nfunction makeBitMapDescriptor(bit) {\n  return {\n    enumerable: false,\n    get() {\n      return (this.state & bit) !== 0\n    },\n    set(value) {\n      if (value) this.state |= bit\n      else this.state &= ~bit\n    }\n  }\n}\nObjectDefineProperties(ReadableState.prototype, {\n  objectMode: makeBitMapDescriptor(kObjectMode),\n  ended: makeBitMapDescriptor(kEnded),\n  endEmitted: makeBitMapDescriptor(kEndEmitted),\n  reading: makeBitMapDescriptor(kReading),\n  // Stream is still being constructed and cannot be\n  // destroyed until construction finished or failed.\n  // Async construction is opt in, therefore we start as\n  // constructed.\n  constructed: makeBitMapDescriptor(kConstructed),\n  // A flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  sync: makeBitMapDescriptor(kSync),\n  // Whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  needReadable: makeBitMapDescriptor(kNeedReadable),\n  emittedReadable: makeBitMapDescriptor(kEmittedReadable),\n  readableListening: makeBitMapDescriptor(kReadableListening),\n  resumeScheduled: makeBitMapDescriptor(kResumeScheduled),\n  // True if the error was already emitted and should not be thrown again.\n  errorEmitted: makeBitMapDescriptor(kErrorEmitted),\n  emitClose: makeBitMapDescriptor(kEmitClose),\n  autoDestroy: makeBitMapDescriptor(kAutoDestroy),\n  // Has it been destroyed.\n  destroyed: makeBitMapDescriptor(kDestroyed),\n  // Indicates whether the stream has finished destroying.\n  closed: makeBitMapDescriptor(kClosed),\n  // True if close has been emitted or would have been emitted\n  // depending on emitClose.\n  closeEmitted: makeBitMapDescriptor(kCloseEmitted),\n  multiAwaitDrain: makeBitMapDescriptor(kMultiAwaitDrain),\n  // If true, a maybeReadMore has been scheduled.\n  readingMore: makeBitMapDescriptor(kReadingMore),\n  dataEmitted: makeBitMapDescriptor(kDataEmitted)\n})\nfunction ReadableState(options, stream, isDuplex) {\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof require('./duplex')\n\n  // Bit map field to store ReadableState more effciently with 1 bit per field\n  // instead of a V8 slot per field.\n  this.state = kEmitClose | kAutoDestroy | kConstructed | kSync\n  // Object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away.\n  if (options && options.objectMode) this.state |= kObjectMode\n  if (isDuplex && options && options.readableObjectMode) this.state |= kObjectMode\n\n  // The point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  this.highWaterMark = options\n    ? getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex)\n    : getDefaultHighWaterMark(false)\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift().\n  this.buffer = new BufferList()\n  this.length = 0\n  this.pipes = []\n  this.flowing = null\n  this[kPaused] = null\n\n  // Should close be emitted on destroy. Defaults to true.\n  if (options && options.emitClose === false) this.state &= ~kEmitClose\n\n  // Should .destroy() be called after 'end' (and potentially 'finish').\n  if (options && options.autoDestroy === false) this.state &= ~kAutoDestroy\n\n  // Indicates whether the stream has errored. When true no further\n  // _read calls, 'data' or 'readable' events should occur. This is needed\n  // since when autoDestroy is disabled we need a way to tell whether the\n  // stream has failed.\n  this.errored = null\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8'\n\n  // Ref the piped dest which we need a drain event on it\n  // type: null | Writable | Set<Writable>.\n  this.awaitDrainWriters = null\n  this.decoder = null\n  this.encoding = null\n  if (options && options.encoding) {\n    this.decoder = new StringDecoder(options.encoding)\n    this.encoding = options.encoding\n  }\n}\nfunction Readable(options) {\n  if (!(this instanceof Readable)) return new Readable(options)\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the ReadableState constructor, at least with V8 6.5.\n  const isDuplex = this instanceof require('./duplex')\n  this._readableState = new ReadableState(options, this, isDuplex)\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read\n    if (typeof options.destroy === 'function') this._destroy = options.destroy\n    if (typeof options.construct === 'function') this._construct = options.construct\n    if (options.signal && !isDuplex) addAbortSignal(options.signal, this)\n  }\n  Stream.call(this, options)\n  destroyImpl.construct(this, () => {\n    if (this._readableState.needReadable) {\n      maybeReadMore(this, this._readableState)\n    }\n  })\n}\nReadable.prototype.destroy = destroyImpl.destroy\nReadable.prototype._undestroy = destroyImpl.undestroy\nReadable.prototype._destroy = function (err, cb) {\n  cb(err)\n}\nReadable.prototype[EE.captureRejectionSymbol] = function (err) {\n  this.destroy(err)\n}\nReadable.prototype[SymbolAsyncDispose] = function () {\n  let error\n  if (!this.destroyed) {\n    error = this.readableEnded ? null : new AbortError()\n    this.destroy(error)\n  }\n  return new Promise((resolve, reject) => eos(this, (err) => (err && err !== error ? reject(err) : resolve(null))))\n}\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  return readableAddChunk(this, chunk, encoding, false)\n}\n\n// Unshift should *always* be something directly out of read().\nReadable.prototype.unshift = function (chunk, encoding) {\n  return readableAddChunk(this, chunk, encoding, true)\n}\nfunction readableAddChunk(stream, chunk, encoding, addToFront) {\n  debug('readableAddChunk', chunk)\n  const state = stream._readableState\n  let err\n  if ((state.state & kObjectMode) === 0) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding\n      if (state.encoding !== encoding) {\n        if (addToFront && state.encoding) {\n          // When unshifting, if state.encoding is set, we have to save\n          // the string in the BufferList with the state encoding.\n          chunk = Buffer.from(chunk, encoding).toString(state.encoding)\n        } else {\n          chunk = Buffer.from(chunk, encoding)\n          encoding = ''\n        }\n      }\n    } else if (chunk instanceof Buffer) {\n      encoding = ''\n    } else if (Stream._isUint8Array(chunk)) {\n      chunk = Stream._uint8ArrayToBuffer(chunk)\n      encoding = ''\n    } else if (chunk != null) {\n      err = new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk)\n    }\n  }\n  if (err) {\n    errorOrDestroy(stream, err)\n  } else if (chunk === null) {\n    state.state &= ~kReading\n    onEofChunk(stream, state)\n  } else if ((state.state & kObjectMode) !== 0 || (chunk && chunk.length > 0)) {\n    if (addToFront) {\n      if ((state.state & kEndEmitted) !== 0) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT())\n      else if (state.destroyed || state.errored) return false\n      else addChunk(stream, state, chunk, true)\n    } else if (state.ended) {\n      errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF())\n    } else if (state.destroyed || state.errored) {\n      return false\n    } else {\n      state.state &= ~kReading\n      if (state.decoder && !encoding) {\n        chunk = state.decoder.write(chunk)\n        if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false)\n        else maybeReadMore(stream, state)\n      } else {\n        addChunk(stream, state, chunk, false)\n      }\n    }\n  } else if (!addToFront) {\n    state.state &= ~kReading\n    maybeReadMore(stream, state)\n  }\n\n  // We can push more data if we are below the highWaterMark.\n  // Also, if we have no data yet, we can stand some more bytes.\n  // This is to work around cases where hwm=0, such as the repl.\n  return !state.ended && (state.length < state.highWaterMark || state.length === 0)\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync && stream.listenerCount('data') > 0) {\n    // Use the guard to avoid creating `Set()` repeatedly\n    // when we have multiple pipes.\n    if ((state.state & kMultiAwaitDrain) !== 0) {\n      state.awaitDrainWriters.clear()\n    } else {\n      state.awaitDrainWriters = null\n    }\n    state.dataEmitted = true\n    stream.emit('data', chunk)\n  } else {\n    // Update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length\n    if (addToFront) state.buffer.unshift(chunk)\n    else state.buffer.push(chunk)\n    if ((state.state & kNeedReadable) !== 0) emitReadable(stream)\n  }\n  maybeReadMore(stream, state)\n}\nReadable.prototype.isPaused = function () {\n  const state = this._readableState\n  return state[kPaused] === true || state.flowing === false\n}\n\n// Backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  const decoder = new StringDecoder(enc)\n  this._readableState.decoder = decoder\n  // If setEncoding(null), decoder.encoding equals utf8.\n  this._readableState.encoding = this._readableState.decoder.encoding\n  const buffer = this._readableState.buffer\n  // Iterate over current buffer to convert already stored Buffers:\n  let content = ''\n  for (const data of buffer) {\n    content += decoder.write(data)\n  }\n  buffer.clear()\n  if (content !== '') buffer.push(content)\n  this._readableState.length = content.length\n  return this\n}\n\n// Don't raise the hwm > 1GB.\nconst MAX_HWM = 0x40000000\nfunction computeNewHighWaterMark(n) {\n  if (n > MAX_HWM) {\n    throw new ERR_OUT_OF_RANGE('size', '<= 1GiB', n)\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts.\n    n--\n    n |= n >>> 1\n    n |= n >>> 2\n    n |= n >>> 4\n    n |= n >>> 8\n    n |= n >>> 16\n    n++\n  }\n  return n\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || (state.length === 0 && state.ended)) return 0\n  if ((state.state & kObjectMode) !== 0) return 1\n  if (NumberIsNaN(n)) {\n    // Only flow one buffer at a time.\n    if (state.flowing && state.length) return state.buffer.first().length\n    return state.length\n  }\n  if (n <= state.length) return n\n  return state.ended ? state.length : 0\n}\n\n// You can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n)\n  // Same as parseInt(undefined, 10), however V8 7.3 performance regressed\n  // in this scenario, so we are doing it manually.\n  if (n === undefined) {\n    n = NaN\n  } else if (!NumberIsInteger(n)) {\n    n = NumberParseInt(n, 10)\n  }\n  const state = this._readableState\n  const nOrig = n\n\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n)\n  if (n !== 0) state.state &= ~kEmittedReadable\n\n  // If we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (\n    n === 0 &&\n    state.needReadable &&\n    ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)\n  ) {\n    debug('read: emitReadable', state.length, state.ended)\n    if (state.length === 0 && state.ended) endReadable(this)\n    else emitReadable(this)\n    return null\n  }\n  n = howMuchToRead(n, state)\n\n  // If we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this)\n    return null\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  let doRead = (state.state & kNeedReadable) !== 0\n  debug('need readable', doRead)\n\n  // If we currently have less than the highWaterMark, then also read some.\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true\n    debug('length less than watermark', doRead)\n  }\n\n  // However, if we've ended, then there's no point, if we're already\n  // reading, then it's unnecessary, if we're constructing we have to wait,\n  // and if we're destroyed or errored, then it's not allowed,\n  if (state.ended || state.reading || state.destroyed || state.errored || !state.constructed) {\n    doRead = false\n    debug('reading, ended or constructing', doRead)\n  } else if (doRead) {\n    debug('do read')\n    state.state |= kReading | kSync\n    // If the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.state |= kNeedReadable\n\n    // Call internal read method\n    try {\n      this._read(state.highWaterMark)\n    } catch (err) {\n      errorOrDestroy(this, err)\n    }\n    state.state &= ~kSync\n\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state)\n  }\n  let ret\n  if (n > 0) ret = fromList(n, state)\n  else ret = null\n  if (ret === null) {\n    state.needReadable = state.length <= state.highWaterMark\n    n = 0\n  } else {\n    state.length -= n\n    if (state.multiAwaitDrain) {\n      state.awaitDrainWriters.clear()\n    } else {\n      state.awaitDrainWriters = null\n    }\n  }\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this)\n  }\n  if (ret !== null && !state.errorEmitted && !state.closeEmitted) {\n    state.dataEmitted = true\n    this.emit('data', ret)\n  }\n  return ret\n}\nfunction onEofChunk(stream, state) {\n  debug('onEofChunk')\n  if (state.ended) return\n  if (state.decoder) {\n    const chunk = state.decoder.end()\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk)\n      state.length += state.objectMode ? 1 : chunk.length\n    }\n  }\n  state.ended = true\n  if (state.sync) {\n    // If we are sync, wait until next tick to emit the data.\n    // Otherwise we risk emitting data in the flow()\n    // the readable code triggers during a read() call.\n    emitReadable(stream)\n  } else {\n    // Emit 'readable' now to make sure it gets picked up.\n    state.needReadable = false\n    state.emittedReadable = true\n    // We have to emit readable now that we are EOF. Modules\n    // in the ecosystem (e.g. dicer) rely on this event being sync.\n    emitReadable_(stream)\n  }\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  const state = stream._readableState\n  debug('emitReadable', state.needReadable, state.emittedReadable)\n  state.needReadable = false\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing)\n    state.emittedReadable = true\n    process.nextTick(emitReadable_, stream)\n  }\n}\nfunction emitReadable_(stream) {\n  const state = stream._readableState\n  debug('emitReadable_', state.destroyed, state.length, state.ended)\n  if (!state.destroyed && !state.errored && (state.length || state.ended)) {\n    stream.emit('readable')\n    state.emittedReadable = false\n  }\n\n  // The stream needs another readable event if:\n  // 1. It is not flowing, as the flow mechanism will take\n  //    care of it.\n  // 2. It is not ended.\n  // 3. It is below the highWaterMark, so we can schedule\n  //    another readable later.\n  state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark\n  flow(stream)\n}\n\n// At this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore && state.constructed) {\n    state.readingMore = true\n    process.nextTick(maybeReadMore_, stream, state)\n  }\n}\nfunction maybeReadMore_(stream, state) {\n  // Attempt to read more data if we should.\n  //\n  // The conditions for reading more data are (one of):\n  // - Not enough data buffered (state.length < state.highWaterMark). The loop\n  //   is responsible for filling the buffer with enough data if such data\n  //   is available. If highWaterMark is 0 and we are not in the flowing mode\n  //   we should _not_ attempt to buffer any extra data. We'll get more data\n  //   when the stream consumer calls read() instead.\n  // - No data in the buffer, and the stream is in flowing mode. In this mode\n  //   the loop below is responsible for ensuring read() is called. Failing to\n  //   call read here would abort the flow and there's no other mechanism for\n  //   continuing the flow if the stream consumer has just subscribed to the\n  //   'data' event.\n  //\n  // In addition to the above conditions to keep reading data, the following\n  // conditions prevent the data from being read:\n  // - The stream has ended (state.ended).\n  // - There is already a pending 'read' operation (state.reading). This is a\n  //   case where the stream has called the implementation defined _read()\n  //   method, but they are processing the call asynchronously and have _not_\n  //   called push() with new data. In this case we skip performing more\n  //   read()s. The execution ends in this method again after the _read() ends\n  //   up calling push() with more data.\n  while (\n    !state.reading &&\n    !state.ended &&\n    (state.length < state.highWaterMark || (state.flowing && state.length === 0))\n  ) {\n    const len = state.length\n    debug('maybeReadMore read 0')\n    stream.read(0)\n    if (len === state.length)\n      // Didn't get any data, stop spinning.\n      break\n  }\n  state.readingMore = false\n}\n\n// Abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_read()')\n}\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  const src = this\n  const state = this._readableState\n  if (state.pipes.length === 1) {\n    if (!state.multiAwaitDrain) {\n      state.multiAwaitDrain = true\n      state.awaitDrainWriters = new SafeSet(state.awaitDrainWriters ? [state.awaitDrainWriters] : [])\n    }\n  }\n  state.pipes.push(dest)\n  debug('pipe count=%d opts=%j', state.pipes.length, pipeOpts)\n  const doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr\n  const endFn = doEnd ? onend : unpipe\n  if (state.endEmitted) process.nextTick(endFn)\n  else src.once('end', endFn)\n  dest.on('unpipe', onunpipe)\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe')\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true\n        cleanup()\n      }\n    }\n  }\n  function onend() {\n    debug('onend')\n    dest.end()\n  }\n  let ondrain\n  let cleanedUp = false\n  function cleanup() {\n    debug('cleanup')\n    // Cleanup event handlers once the pipe is broken.\n    dest.removeListener('close', onclose)\n    dest.removeListener('finish', onfinish)\n    if (ondrain) {\n      dest.removeListener('drain', ondrain)\n    }\n    dest.removeListener('error', onerror)\n    dest.removeListener('unpipe', onunpipe)\n    src.removeListener('end', onend)\n    src.removeListener('end', unpipe)\n    src.removeListener('data', ondata)\n    cleanedUp = true\n\n    // If the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (ondrain && state.awaitDrainWriters && (!dest._writableState || dest._writableState.needDrain)) ondrain()\n  }\n  function pause() {\n    // If the user unpiped during `dest.write()`, it is possible\n    // to get stuck in a permanently paused state if that write\n    // also returned false.\n    // => Check whether `dest` is still a piping destination.\n    if (!cleanedUp) {\n      if (state.pipes.length === 1 && state.pipes[0] === dest) {\n        debug('false write response, pause', 0)\n        state.awaitDrainWriters = dest\n        state.multiAwaitDrain = false\n      } else if (state.pipes.length > 1 && state.pipes.includes(dest)) {\n        debug('false write response, pause', state.awaitDrainWriters.size)\n        state.awaitDrainWriters.add(dest)\n      }\n      src.pause()\n    }\n    if (!ondrain) {\n      // When the dest drains, it reduces the awaitDrain counter\n      // on the source.  This would be more elegant with a .once()\n      // handler in flow(), but adding and removing repeatedly is\n      // too slow.\n      ondrain = pipeOnDrain(src, dest)\n      dest.on('drain', ondrain)\n    }\n  }\n  src.on('data', ondata)\n  function ondata(chunk) {\n    debug('ondata')\n    const ret = dest.write(chunk)\n    debug('dest.write', ret)\n    if (ret === false) {\n      pause()\n    }\n  }\n\n  // If the dest has an error, then stop piping into it.\n  // However, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er)\n    unpipe()\n    dest.removeListener('error', onerror)\n    if (dest.listenerCount('error') === 0) {\n      const s = dest._writableState || dest._readableState\n      if (s && !s.errorEmitted) {\n        // User incorrectly emitted 'error' directly on the stream.\n        errorOrDestroy(dest, er)\n      } else {\n        dest.emit('error', er)\n      }\n    }\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror)\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish)\n    unpipe()\n  }\n  dest.once('close', onclose)\n  function onfinish() {\n    debug('onfinish')\n    dest.removeListener('close', onclose)\n    unpipe()\n  }\n  dest.once('finish', onfinish)\n  function unpipe() {\n    debug('unpipe')\n    src.unpipe(dest)\n  }\n\n  // Tell the dest that it's being piped to.\n  dest.emit('pipe', src)\n\n  // Start the flow if it hasn't been started already.\n\n  if (dest.writableNeedDrain === true) {\n    pause()\n  } else if (!state.flowing) {\n    debug('pipe resume')\n    src.resume()\n  }\n  return dest\n}\nfunction pipeOnDrain(src, dest) {\n  return function pipeOnDrainFunctionResult() {\n    const state = src._readableState\n\n    // `ondrain` will call directly,\n    // `this` maybe not a reference to dest,\n    // so we use the real dest here.\n    if (state.awaitDrainWriters === dest) {\n      debug('pipeOnDrain', 1)\n      state.awaitDrainWriters = null\n    } else if (state.multiAwaitDrain) {\n      debug('pipeOnDrain', state.awaitDrainWriters.size)\n      state.awaitDrainWriters.delete(dest)\n    }\n    if ((!state.awaitDrainWriters || state.awaitDrainWriters.size === 0) && src.listenerCount('data')) {\n      src.resume()\n    }\n  }\n}\nReadable.prototype.unpipe = function (dest) {\n  const state = this._readableState\n  const unpipeInfo = {\n    hasUnpiped: false\n  }\n\n  // If we're not piping anywhere, then do nothing.\n  if (state.pipes.length === 0) return this\n  if (!dest) {\n    // remove all.\n    const dests = state.pipes\n    state.pipes = []\n    this.pause()\n    for (let i = 0; i < dests.length; i++)\n      dests[i].emit('unpipe', this, {\n        hasUnpiped: false\n      })\n    return this\n  }\n\n  // Try to find the right one.\n  const index = ArrayPrototypeIndexOf(state.pipes, dest)\n  if (index === -1) return this\n  state.pipes.splice(index, 1)\n  if (state.pipes.length === 0) this.pause()\n  dest.emit('unpipe', this, unpipeInfo)\n  return this\n}\n\n// Set up data events if they are asked for\n// Ensure readable listeners eventually get something.\nReadable.prototype.on = function (ev, fn) {\n  const res = Stream.prototype.on.call(this, ev, fn)\n  const state = this._readableState\n  if (ev === 'data') {\n    // Update readableListening so that resume() may be a no-op\n    // a few lines down. This is needed to support once('readable').\n    state.readableListening = this.listenerCount('readable') > 0\n\n    // Try start flowing on next tick if stream isn't explicitly paused.\n    if (state.flowing !== false) this.resume()\n  } else if (ev === 'readable') {\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true\n      state.flowing = false\n      state.emittedReadable = false\n      debug('on readable', state.length, state.reading)\n      if (state.length) {\n        emitReadable(this)\n      } else if (!state.reading) {\n        process.nextTick(nReadingNextTick, this)\n      }\n    }\n  }\n  return res\n}\nReadable.prototype.addListener = Readable.prototype.on\nReadable.prototype.removeListener = function (ev, fn) {\n  const res = Stream.prototype.removeListener.call(this, ev, fn)\n  if (ev === 'readable') {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this)\n  }\n  return res\n}\nReadable.prototype.off = Readable.prototype.removeListener\nReadable.prototype.removeAllListeners = function (ev) {\n  const res = Stream.prototype.removeAllListeners.apply(this, arguments)\n  if (ev === 'readable' || ev === undefined) {\n    // We need to check if there is someone still listening to\n    // readable and reset the state. However this needs to happen\n    // after readable has been emitted but before I/O (nextTick) to\n    // support once('readable', fn) cycles. This means that calling\n    // resume within the same tick will have no\n    // effect.\n    process.nextTick(updateReadableListening, this)\n  }\n  return res\n}\nfunction updateReadableListening(self) {\n  const state = self._readableState\n  state.readableListening = self.listenerCount('readable') > 0\n  if (state.resumeScheduled && state[kPaused] === false) {\n    // Flowing needs to be set to true now, otherwise\n    // the upcoming resume will not flow.\n    state.flowing = true\n\n    // Crude way to check if we should resume.\n  } else if (self.listenerCount('data') > 0) {\n    self.resume()\n  } else if (!state.readableListening) {\n    state.flowing = null\n  }\n}\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0')\n  self.read(0)\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  const state = this._readableState\n  if (!state.flowing) {\n    debug('resume')\n    // We flow only if there is no one listening\n    // for readable, but we still have to call\n    // resume().\n    state.flowing = !state.readableListening\n    resume(this, state)\n  }\n  state[kPaused] = false\n  return this\n}\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true\n    process.nextTick(resume_, stream, state)\n  }\n}\nfunction resume_(stream, state) {\n  debug('resume', state.reading)\n  if (!state.reading) {\n    stream.read(0)\n  }\n  state.resumeScheduled = false\n  stream.emit('resume')\n  flow(stream)\n  if (state.flowing && !state.reading) stream.read(0)\n}\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing)\n  if (this._readableState.flowing !== false) {\n    debug('pause')\n    this._readableState.flowing = false\n    this.emit('pause')\n  }\n  this._readableState[kPaused] = true\n  return this\n}\nfunction flow(stream) {\n  const state = stream._readableState\n  debug('flow', state.flowing)\n  while (state.flowing && stream.read() !== null);\n}\n\n// Wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  let paused = false\n\n  // TODO (ronag): Should this.destroy(err) emit\n  // 'error' on the wrapped stream? Would require\n  // a static factory method, e.g. Readable.wrap(stream).\n\n  stream.on('data', (chunk) => {\n    if (!this.push(chunk) && stream.pause) {\n      paused = true\n      stream.pause()\n    }\n  })\n  stream.on('end', () => {\n    this.push(null)\n  })\n  stream.on('error', (err) => {\n    errorOrDestroy(this, err)\n  })\n  stream.on('close', () => {\n    this.destroy()\n  })\n  stream.on('destroy', () => {\n    this.destroy()\n  })\n  this._read = () => {\n    if (paused && stream.resume) {\n      paused = false\n      stream.resume()\n    }\n  }\n\n  // Proxy all the other methods. Important when wrapping filters and duplexes.\n  const streamKeys = ObjectKeys(stream)\n  for (let j = 1; j < streamKeys.length; j++) {\n    const i = streamKeys[j]\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = stream[i].bind(stream)\n    }\n  }\n  return this\n}\nReadable.prototype[SymbolAsyncIterator] = function () {\n  return streamToAsyncIterator(this)\n}\nReadable.prototype.iterator = function (options) {\n  if (options !== undefined) {\n    validateObject(options, 'options')\n  }\n  return streamToAsyncIterator(this, options)\n}\nfunction streamToAsyncIterator(stream, options) {\n  if (typeof stream.read !== 'function') {\n    stream = Readable.wrap(stream, {\n      objectMode: true\n    })\n  }\n  const iter = createAsyncIterator(stream, options)\n  iter.stream = stream\n  return iter\n}\nasync function* createAsyncIterator(stream, options) {\n  let callback = nop\n  function next(resolve) {\n    if (this === stream) {\n      callback()\n      callback = nop\n    } else {\n      callback = resolve\n    }\n  }\n  stream.on('readable', next)\n  let error\n  const cleanup = eos(\n    stream,\n    {\n      writable: false\n    },\n    (err) => {\n      error = err ? aggregateTwoErrors(error, err) : null\n      callback()\n      callback = nop\n    }\n  )\n  try {\n    while (true) {\n      const chunk = stream.destroyed ? null : stream.read()\n      if (chunk !== null) {\n        yield chunk\n      } else if (error) {\n        throw error\n      } else if (error === null) {\n        return\n      } else {\n        await new Promise(next)\n      }\n    }\n  } catch (err) {\n    error = aggregateTwoErrors(error, err)\n    throw error\n  } finally {\n    if (\n      (error || (options === null || options === undefined ? undefined : options.destroyOnReturn) !== false) &&\n      (error === undefined || stream._readableState.autoDestroy)\n    ) {\n      destroyImpl.destroyer(stream, null)\n    } else {\n      stream.off('readable', next)\n      cleanup()\n    }\n  }\n}\n\n// Making it explicit these properties are not enumerable\n// because otherwise some prototype manipulation in\n// userland will fail.\nObjectDefineProperties(Readable.prototype, {\n  readable: {\n    __proto__: null,\n    get() {\n      const r = this._readableState\n      // r.readable === false means that this is part of a Duplex stream\n      // where the readable side was disabled upon construction.\n      // Compat. The user might manually disable readable side through\n      // deprecated setter.\n      return !!r && r.readable !== false && !r.destroyed && !r.errorEmitted && !r.endEmitted\n    },\n    set(val) {\n      // Backwards compat.\n      if (this._readableState) {\n        this._readableState.readable = !!val\n      }\n    }\n  },\n  readableDidRead: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState.dataEmitted\n    }\n  },\n  readableAborted: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return !!(\n        this._readableState.readable !== false &&\n        (this._readableState.destroyed || this._readableState.errored) &&\n        !this._readableState.endEmitted\n      )\n    }\n  },\n  readableHighWaterMark: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState.highWaterMark\n    }\n  },\n  readableBuffer: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState && this._readableState.buffer\n    }\n  },\n  readableFlowing: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return this._readableState.flowing\n    },\n    set: function (state) {\n      if (this._readableState) {\n        this._readableState.flowing = state\n      }\n    }\n  },\n  readableLength: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState.length\n    }\n  },\n  readableObjectMode: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.objectMode : false\n    }\n  },\n  readableEncoding: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.encoding : null\n    }\n  },\n  errored: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.errored : null\n    }\n  },\n  closed: {\n    __proto__: null,\n    get() {\n      return this._readableState ? this._readableState.closed : false\n    }\n  },\n  destroyed: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.destroyed : false\n    },\n    set(value) {\n      // We ignore the value if the stream\n      // has not been initialized yet.\n      if (!this._readableState) {\n        return\n      }\n\n      // Backward compatibility, the user is explicitly\n      // managing destroyed.\n      this._readableState.destroyed = value\n    }\n  },\n  readableEnded: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._readableState ? this._readableState.endEmitted : false\n    }\n  }\n})\nObjectDefineProperties(ReadableState.prototype, {\n  // Legacy getter for `pipesCount`.\n  pipesCount: {\n    __proto__: null,\n    get() {\n      return this.pipes.length\n    }\n  },\n  // Legacy property for `paused`.\n  paused: {\n    __proto__: null,\n    get() {\n      return this[kPaused] !== false\n    },\n    set(value) {\n      this[kPaused] = !!value\n    }\n  }\n})\n\n// Exposed for testing purposes only.\nReadable._fromList = fromList\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered.\n  if (state.length === 0) return null\n  let ret\n  if (state.objectMode) ret = state.buffer.shift()\n  else if (!n || n >= state.length) {\n    // Read it all, truncate the list.\n    if (state.decoder) ret = state.buffer.join('')\n    else if (state.buffer.length === 1) ret = state.buffer.first()\n    else ret = state.buffer.concat(state.length)\n    state.buffer.clear()\n  } else {\n    // read part of list.\n    ret = state.buffer.consume(n, state.decoder)\n  }\n  return ret\n}\nfunction endReadable(stream) {\n  const state = stream._readableState\n  debug('endReadable', state.endEmitted)\n  if (!state.endEmitted) {\n    state.ended = true\n    process.nextTick(endReadableNT, state, stream)\n  }\n}\nfunction endReadableNT(state, stream) {\n  debug('endReadableNT', state.endEmitted, state.length)\n\n  // Check that we didn't get one last unshift.\n  if (!state.errored && !state.closeEmitted && !state.endEmitted && state.length === 0) {\n    state.endEmitted = true\n    stream.emit('end')\n    if (stream.writable && stream.allowHalfOpen === false) {\n      process.nextTick(endWritableNT, stream)\n    } else if (state.autoDestroy) {\n      // In case of duplex streams we need a way to detect\n      // if the writable side is ready for autoDestroy as well.\n      const wState = stream._writableState\n      const autoDestroy =\n        !wState ||\n        (wState.autoDestroy &&\n          // We don't expect the writable to ever 'finish'\n          // if writable is explicitly set to false.\n          (wState.finished || wState.writable === false))\n      if (autoDestroy) {\n        stream.destroy()\n      }\n    }\n  }\n}\nfunction endWritableNT(stream) {\n  const writable = stream.writable && !stream.writableEnded && !stream.destroyed\n  if (writable) {\n    stream.end()\n  }\n}\nReadable.from = function (iterable, opts) {\n  return from(Readable, iterable, opts)\n}\nlet webStreamsAdapters\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {}\n  return webStreamsAdapters\n}\nReadable.fromWeb = function (readableStream, options) {\n  return lazyWebStreams().newStreamReadableFromReadableStream(readableStream, options)\n}\nReadable.toWeb = function (streamReadable, options) {\n  return lazyWebStreams().newReadableStreamFromStreamReadable(streamReadable, options)\n}\nReadable.wrap = function (src, options) {\n  var _ref, _src$readableObjectMo\n  return new Readable({\n    objectMode:\n      (_ref =\n        (_src$readableObjectMo = src.readableObjectMode) !== null && _src$readableObjectMo !== undefined\n          ? _src$readableObjectMo\n          : src.objectMode) !== null && _ref !== undefined\n        ? _ref\n        : true,\n    ...options,\n    destroy(err, callback) {\n      destroyImpl.destroyer(src, err)\n      callback(err)\n    }\n  }).wrap(src)\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n;('use strict')\nconst {\n  ArrayPrototypeSlice,\n  Error,\n  FunctionPrototypeSymbolHasInstance,\n  ObjectDefineProperty,\n  ObjectDefineProperties,\n  ObjectSetPrototypeOf,\n  StringPrototypeToLowerCase,\n  Symbol,\n  SymbolHasInstance\n} = require('../../ours/primordials')\nmodule.exports = Writable\nWritable.WritableState = WritableState\nconst { EventEmitter: EE } = require('events')\nconst Stream = require('./legacy').Stream\nconst { Buffer } = require('buffer')\nconst destroyImpl = require('./destroy')\nconst { addAbortSignal } = require('./add-abort-signal')\nconst { getHighWaterMark, getDefaultHighWaterMark } = require('./state')\nconst {\n  ERR_INVALID_ARG_TYPE,\n  ERR_METHOD_NOT_IMPLEMENTED,\n  ERR_MULTIPLE_CALLBACK,\n  ERR_STREAM_CANNOT_PIPE,\n  ERR_STREAM_DESTROYED,\n  ERR_STREAM_ALREADY_FINISHED,\n  ERR_STREAM_NULL_VALUES,\n  ERR_STREAM_WRITE_AFTER_END,\n  ERR_UNKNOWN_ENCODING\n} = require('../../ours/errors').codes\nconst { errorOrDestroy } = destroyImpl\nObjectSetPrototypeOf(Writable.prototype, Stream.prototype)\nObjectSetPrototypeOf(Writable, Stream)\nfunction nop() {}\nconst kOnFinished = Symbol('kOnFinished')\nfunction WritableState(options, stream, isDuplex) {\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream,\n  // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n  if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof require('./duplex')\n\n  // Object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!(options && options.objectMode)\n  if (isDuplex) this.objectMode = this.objectMode || !!(options && options.writableObjectMode)\n\n  // The point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write().\n  this.highWaterMark = options\n    ? getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex)\n    : getDefaultHighWaterMark(false)\n\n  // if _final has been called.\n  this.finalCalled = false\n\n  // drain event flag.\n  this.needDrain = false\n  // At the start of calling end()\n  this.ending = false\n  // When end() has been called, and returned.\n  this.ended = false\n  // When 'finish' is emitted.\n  this.finished = false\n\n  // Has it been destroyed\n  this.destroyed = false\n\n  // Should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  const noDecode = !!(options && options.decodeStrings === false)\n  this.decodeStrings = !noDecode\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = (options && options.defaultEncoding) || 'utf8'\n\n  // Not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0\n\n  // A flag to see when we're in the middle of a write.\n  this.writing = false\n\n  // When true all writes will be buffered until .uncork() call.\n  this.corked = 0\n\n  // A flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true\n\n  // A flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false\n\n  // The callback that's passed to _write(chunk, cb).\n  this.onwrite = onwrite.bind(undefined, stream)\n\n  // The callback that the user supplies to write(chunk, encoding, cb).\n  this.writecb = null\n\n  // The amount that is being written when _write is called.\n  this.writelen = 0\n\n  // Storage for data passed to the afterWrite() callback in case of\n  // synchronous _write() completion.\n  this.afterWriteTickInfo = null\n  resetBuffer(this)\n\n  // Number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted.\n  this.pendingcb = 0\n\n  // Stream is still being constructed and cannot be\n  // destroyed until construction finished or failed.\n  // Async construction is opt in, therefore we start as\n  // constructed.\n  this.constructed = true\n\n  // Emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams.\n  this.prefinished = false\n\n  // True if the error was already emitted and should not be thrown again.\n  this.errorEmitted = false\n\n  // Should close be emitted on destroy. Defaults to true.\n  this.emitClose = !options || options.emitClose !== false\n\n  // Should .destroy() be called after 'finish' (and potentially 'end').\n  this.autoDestroy = !options || options.autoDestroy !== false\n\n  // Indicates whether the stream has errored. When true all write() calls\n  // should return false. This is needed since when autoDestroy\n  // is disabled we need a way to tell whether the stream has failed.\n  this.errored = null\n\n  // Indicates whether the stream has finished destroying.\n  this.closed = false\n\n  // True if close has been emitted or would have been emitted\n  // depending on emitClose.\n  this.closeEmitted = false\n  this[kOnFinished] = []\n}\nfunction resetBuffer(state) {\n  state.buffered = []\n  state.bufferedIndex = 0\n  state.allBuffers = true\n  state.allNoop = true\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n  return ArrayPrototypeSlice(this.buffered, this.bufferedIndex)\n}\nObjectDefineProperty(WritableState.prototype, 'bufferedRequestCount', {\n  __proto__: null,\n  get() {\n    return this.buffered.length - this.bufferedIndex\n  }\n})\nfunction Writable(options) {\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n\n  // Checking for a Stream.Duplex instance is faster here instead of inside\n  // the WritableState constructor, at least with V8 6.5.\n  const isDuplex = this instanceof require('./duplex')\n  if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable, this)) return new Writable(options)\n  this._writableState = new WritableState(options, this, isDuplex)\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write\n    if (typeof options.writev === 'function') this._writev = options.writev\n    if (typeof options.destroy === 'function') this._destroy = options.destroy\n    if (typeof options.final === 'function') this._final = options.final\n    if (typeof options.construct === 'function') this._construct = options.construct\n    if (options.signal) addAbortSignal(options.signal, this)\n  }\n  Stream.call(this, options)\n  destroyImpl.construct(this, () => {\n    const state = this._writableState\n    if (!state.writing) {\n      clearBuffer(this, state)\n    }\n    finishMaybe(this, state)\n  })\n}\nObjectDefineProperty(Writable, SymbolHasInstance, {\n  __proto__: null,\n  value: function (object) {\n    if (FunctionPrototypeSymbolHasInstance(this, object)) return true\n    if (this !== Writable) return false\n    return object && object._writableState instanceof WritableState\n  }\n})\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE())\n}\nfunction _write(stream, chunk, encoding, cb) {\n  const state = stream._writableState\n  if (typeof encoding === 'function') {\n    cb = encoding\n    encoding = state.defaultEncoding\n  } else {\n    if (!encoding) encoding = state.defaultEncoding\n    else if (encoding !== 'buffer' && !Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding)\n    if (typeof cb !== 'function') cb = nop\n  }\n  if (chunk === null) {\n    throw new ERR_STREAM_NULL_VALUES()\n  } else if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      if (state.decodeStrings !== false) {\n        chunk = Buffer.from(chunk, encoding)\n        encoding = 'buffer'\n      }\n    } else if (chunk instanceof Buffer) {\n      encoding = 'buffer'\n    } else if (Stream._isUint8Array(chunk)) {\n      chunk = Stream._uint8ArrayToBuffer(chunk)\n      encoding = 'buffer'\n    } else {\n      throw new ERR_INVALID_ARG_TYPE('chunk', ['string', 'Buffer', 'Uint8Array'], chunk)\n    }\n  }\n  let err\n  if (state.ending) {\n    err = new ERR_STREAM_WRITE_AFTER_END()\n  } else if (state.destroyed) {\n    err = new ERR_STREAM_DESTROYED('write')\n  }\n  if (err) {\n    process.nextTick(cb, err)\n    errorOrDestroy(stream, err, true)\n    return err\n  }\n  state.pendingcb++\n  return writeOrBuffer(stream, state, chunk, encoding, cb)\n}\nWritable.prototype.write = function (chunk, encoding, cb) {\n  return _write(this, chunk, encoding, cb) === true\n}\nWritable.prototype.cork = function () {\n  this._writableState.corked++\n}\nWritable.prototype.uncork = function () {\n  const state = this._writableState\n  if (state.corked) {\n    state.corked--\n    if (!state.writing) clearBuffer(this, state)\n  }\n}\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = StringPrototypeToLowerCase(encoding)\n  if (!Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding)\n  this._writableState.defaultEncoding = encoding\n  return this\n}\n\n// If we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, callback) {\n  const len = state.objectMode ? 1 : chunk.length\n  state.length += len\n\n  // stream._write resets state.length\n  const ret = state.length < state.highWaterMark\n  // We must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true\n  if (state.writing || state.corked || state.errored || !state.constructed) {\n    state.buffered.push({\n      chunk,\n      encoding,\n      callback\n    })\n    if (state.allBuffers && encoding !== 'buffer') {\n      state.allBuffers = false\n    }\n    if (state.allNoop && callback !== nop) {\n      state.allNoop = false\n    }\n  } else {\n    state.writelen = len\n    state.writecb = callback\n    state.writing = true\n    state.sync = true\n    stream._write(chunk, encoding, state.onwrite)\n    state.sync = false\n  }\n\n  // Return false if errored or destroyed in order to break\n  // any synchronous while(stream.write(data)) loops.\n  return ret && !state.errored && !state.destroyed\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len\n  state.writecb = cb\n  state.writing = true\n  state.sync = true\n  if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'))\n  else if (writev) stream._writev(chunk, state.onwrite)\n  else stream._write(chunk, encoding, state.onwrite)\n  state.sync = false\n}\nfunction onwriteError(stream, state, er, cb) {\n  --state.pendingcb\n  cb(er)\n  // Ensure callbacks are invoked even when autoDestroy is\n  // not enabled. Passing `er` here doesn't make sense since\n  // it's related to one specific write, not to the buffered\n  // writes.\n  errorBuffer(state)\n  // This can emit error, but error must always follow cb.\n  errorOrDestroy(stream, er)\n}\nfunction onwrite(stream, er) {\n  const state = stream._writableState\n  const sync = state.sync\n  const cb = state.writecb\n  if (typeof cb !== 'function') {\n    errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK())\n    return\n  }\n  state.writing = false\n  state.writecb = null\n  state.length -= state.writelen\n  state.writelen = 0\n  if (er) {\n    // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n    er.stack // eslint-disable-line no-unused-expressions\n\n    if (!state.errored) {\n      state.errored = er\n    }\n\n    // In case of duplex streams we need to notify the readable side of the\n    // error.\n    if (stream._readableState && !stream._readableState.errored) {\n      stream._readableState.errored = er\n    }\n    if (sync) {\n      process.nextTick(onwriteError, stream, state, er, cb)\n    } else {\n      onwriteError(stream, state, er, cb)\n    }\n  } else {\n    if (state.buffered.length > state.bufferedIndex) {\n      clearBuffer(stream, state)\n    }\n    if (sync) {\n      // It is a common case that the callback passed to .write() is always\n      // the same. In that case, we do not schedule a new nextTick(), but\n      // rather just increase a counter, to improve performance and avoid\n      // memory allocations.\n      if (state.afterWriteTickInfo !== null && state.afterWriteTickInfo.cb === cb) {\n        state.afterWriteTickInfo.count++\n      } else {\n        state.afterWriteTickInfo = {\n          count: 1,\n          cb,\n          stream,\n          state\n        }\n        process.nextTick(afterWriteTick, state.afterWriteTickInfo)\n      }\n    } else {\n      afterWrite(stream, state, 1, cb)\n    }\n  }\n}\nfunction afterWriteTick({ stream, state, count, cb }) {\n  state.afterWriteTickInfo = null\n  return afterWrite(stream, state, count, cb)\n}\nfunction afterWrite(stream, state, count, cb) {\n  const needDrain = !state.ending && !stream.destroyed && state.length === 0 && state.needDrain\n  if (needDrain) {\n    state.needDrain = false\n    stream.emit('drain')\n  }\n  while (count-- > 0) {\n    state.pendingcb--\n    cb()\n  }\n  if (state.destroyed) {\n    errorBuffer(state)\n  }\n  finishMaybe(stream, state)\n}\n\n// If there's something in the buffer waiting, then invoke callbacks.\nfunction errorBuffer(state) {\n  if (state.writing) {\n    return\n  }\n  for (let n = state.bufferedIndex; n < state.buffered.length; ++n) {\n    var _state$errored\n    const { chunk, callback } = state.buffered[n]\n    const len = state.objectMode ? 1 : chunk.length\n    state.length -= len\n    callback(\n      (_state$errored = state.errored) !== null && _state$errored !== undefined\n        ? _state$errored\n        : new ERR_STREAM_DESTROYED('write')\n    )\n  }\n  const onfinishCallbacks = state[kOnFinished].splice(0)\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\n    var _state$errored2\n    onfinishCallbacks[i](\n      (_state$errored2 = state.errored) !== null && _state$errored2 !== undefined\n        ? _state$errored2\n        : new ERR_STREAM_DESTROYED('end')\n    )\n  }\n  resetBuffer(state)\n}\n\n// If there's something in the buffer waiting, then process it.\nfunction clearBuffer(stream, state) {\n  if (state.corked || state.bufferProcessing || state.destroyed || !state.constructed) {\n    return\n  }\n  const { buffered, bufferedIndex, objectMode } = state\n  const bufferedLength = buffered.length - bufferedIndex\n  if (!bufferedLength) {\n    return\n  }\n  let i = bufferedIndex\n  state.bufferProcessing = true\n  if (bufferedLength > 1 && stream._writev) {\n    state.pendingcb -= bufferedLength - 1\n    const callback = state.allNoop\n      ? nop\n      : (err) => {\n          for (let n = i; n < buffered.length; ++n) {\n            buffered[n].callback(err)\n          }\n        }\n    // Make a copy of `buffered` if it's going to be used by `callback` above,\n    // since `doWrite` will mutate the array.\n    const chunks = state.allNoop && i === 0 ? buffered : ArrayPrototypeSlice(buffered, i)\n    chunks.allBuffers = state.allBuffers\n    doWrite(stream, state, true, state.length, chunks, '', callback)\n    resetBuffer(state)\n  } else {\n    do {\n      const { chunk, encoding, callback } = buffered[i]\n      buffered[i++] = null\n      const len = objectMode ? 1 : chunk.length\n      doWrite(stream, state, false, len, chunk, encoding, callback)\n    } while (i < buffered.length && !state.writing)\n    if (i === buffered.length) {\n      resetBuffer(state)\n    } else if (i > 256) {\n      buffered.splice(0, i)\n      state.bufferedIndex = 0\n    } else {\n      state.bufferedIndex = i\n    }\n  }\n  state.bufferProcessing = false\n}\nWritable.prototype._write = function (chunk, encoding, cb) {\n  if (this._writev) {\n    this._writev(\n      [\n        {\n          chunk,\n          encoding\n        }\n      ],\n      cb\n    )\n  } else {\n    throw new ERR_METHOD_NOT_IMPLEMENTED('_write()')\n  }\n}\nWritable.prototype._writev = null\nWritable.prototype.end = function (chunk, encoding, cb) {\n  const state = this._writableState\n  if (typeof chunk === 'function') {\n    cb = chunk\n    chunk = null\n    encoding = null\n  } else if (typeof encoding === 'function') {\n    cb = encoding\n    encoding = null\n  }\n  let err\n  if (chunk !== null && chunk !== undefined) {\n    const ret = _write(this, chunk, encoding)\n    if (ret instanceof Error) {\n      err = ret\n    }\n  }\n\n  // .end() fully uncorks.\n  if (state.corked) {\n    state.corked = 1\n    this.uncork()\n  }\n  if (err) {\n    // Do nothing...\n  } else if (!state.errored && !state.ending) {\n    // This is forgiving in terms of unnecessary calls to end() and can hide\n    // logic errors. However, usually such errors are harmless and causing a\n    // hard error can be disproportionately destructive. It is not always\n    // trivial for the user to determine whether end() needs to be called\n    // or not.\n\n    state.ending = true\n    finishMaybe(this, state, true)\n    state.ended = true\n  } else if (state.finished) {\n    err = new ERR_STREAM_ALREADY_FINISHED('end')\n  } else if (state.destroyed) {\n    err = new ERR_STREAM_DESTROYED('end')\n  }\n  if (typeof cb === 'function') {\n    if (err || state.finished) {\n      process.nextTick(cb, err)\n    } else {\n      state[kOnFinished].push(cb)\n    }\n  }\n  return this\n}\nfunction needFinish(state) {\n  return (\n    state.ending &&\n    !state.destroyed &&\n    state.constructed &&\n    state.length === 0 &&\n    !state.errored &&\n    state.buffered.length === 0 &&\n    !state.finished &&\n    !state.writing &&\n    !state.errorEmitted &&\n    !state.closeEmitted\n  )\n}\nfunction callFinal(stream, state) {\n  let called = false\n  function onFinish(err) {\n    if (called) {\n      errorOrDestroy(stream, err !== null && err !== undefined ? err : ERR_MULTIPLE_CALLBACK())\n      return\n    }\n    called = true\n    state.pendingcb--\n    if (err) {\n      const onfinishCallbacks = state[kOnFinished].splice(0)\n      for (let i = 0; i < onfinishCallbacks.length; i++) {\n        onfinishCallbacks[i](err)\n      }\n      errorOrDestroy(stream, err, state.sync)\n    } else if (needFinish(state)) {\n      state.prefinished = true\n      stream.emit('prefinish')\n      // Backwards compat. Don't check state.sync here.\n      // Some streams assume 'finish' will be emitted\n      // asynchronously relative to _final callback.\n      state.pendingcb++\n      process.nextTick(finish, stream, state)\n    }\n  }\n  state.sync = true\n  state.pendingcb++\n  try {\n    stream._final(onFinish)\n  } catch (err) {\n    onFinish(err)\n  }\n  state.sync = false\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function' && !state.destroyed) {\n      state.finalCalled = true\n      callFinal(stream, state)\n    } else {\n      state.prefinished = true\n      stream.emit('prefinish')\n    }\n  }\n}\nfunction finishMaybe(stream, state, sync) {\n  if (needFinish(state)) {\n    prefinish(stream, state)\n    if (state.pendingcb === 0) {\n      if (sync) {\n        state.pendingcb++\n        process.nextTick(\n          (stream, state) => {\n            if (needFinish(state)) {\n              finish(stream, state)\n            } else {\n              state.pendingcb--\n            }\n          },\n          stream,\n          state\n        )\n      } else if (needFinish(state)) {\n        state.pendingcb++\n        finish(stream, state)\n      }\n    }\n  }\n}\nfunction finish(stream, state) {\n  state.pendingcb--\n  state.finished = true\n  const onfinishCallbacks = state[kOnFinished].splice(0)\n  for (let i = 0; i < onfinishCallbacks.length; i++) {\n    onfinishCallbacks[i]()\n  }\n  stream.emit('finish')\n  if (state.autoDestroy) {\n    // In case of duplex streams we need a way to detect\n    // if the readable side is ready for autoDestroy as well.\n    const rState = stream._readableState\n    const autoDestroy =\n      !rState ||\n      (rState.autoDestroy &&\n        // We don't expect the readable to ever 'end'\n        // if readable is explicitly set to false.\n        (rState.endEmitted || rState.readable === false))\n    if (autoDestroy) {\n      stream.destroy()\n    }\n  }\n}\nObjectDefineProperties(Writable.prototype, {\n  closed: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.closed : false\n    }\n  },\n  destroyed: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.destroyed : false\n    },\n    set(value) {\n      // Backward compatibility, the user is explicitly managing destroyed.\n      if (this._writableState) {\n        this._writableState.destroyed = value\n      }\n    }\n  },\n  writable: {\n    __proto__: null,\n    get() {\n      const w = this._writableState\n      // w.writable === false means that this is part of a Duplex stream\n      // where the writable side was disabled upon construction.\n      // Compat. The user might manually disable writable side through\n      // deprecated setter.\n      return !!w && w.writable !== false && !w.destroyed && !w.errored && !w.ending && !w.ended\n    },\n    set(val) {\n      // Backwards compatible.\n      if (this._writableState) {\n        this._writableState.writable = !!val\n      }\n    }\n  },\n  writableFinished: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.finished : false\n    }\n  },\n  writableObjectMode: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.objectMode : false\n    }\n  },\n  writableBuffer: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.getBuffer()\n    }\n  },\n  writableEnded: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.ending : false\n    }\n  },\n  writableNeedDrain: {\n    __proto__: null,\n    get() {\n      const wState = this._writableState\n      if (!wState) return false\n      return !wState.destroyed && !wState.ending && wState.needDrain\n    }\n  },\n  writableHighWaterMark: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.highWaterMark\n    }\n  },\n  writableCorked: {\n    __proto__: null,\n    get() {\n      return this._writableState ? this._writableState.corked : 0\n    }\n  },\n  writableLength: {\n    __proto__: null,\n    get() {\n      return this._writableState && this._writableState.length\n    }\n  },\n  errored: {\n    __proto__: null,\n    enumerable: false,\n    get() {\n      return this._writableState ? this._writableState.errored : null\n    }\n  },\n  writableAborted: {\n    __proto__: null,\n    enumerable: false,\n    get: function () {\n      return !!(\n        this._writableState.writable !== false &&\n        (this._writableState.destroyed || this._writableState.errored) &&\n        !this._writableState.finished\n      )\n    }\n  }\n})\nconst destroy = destroyImpl.destroy\nWritable.prototype.destroy = function (err, cb) {\n  const state = this._writableState\n\n  // Invoke pending callbacks.\n  if (!state.destroyed && (state.bufferedIndex < state.buffered.length || state[kOnFinished].length)) {\n    process.nextTick(errorBuffer, state)\n  }\n  destroy.call(this, err, cb)\n  return this\n}\nWritable.prototype._undestroy = destroyImpl.undestroy\nWritable.prototype._destroy = function (err, cb) {\n  cb(err)\n}\nWritable.prototype[EE.captureRejectionSymbol] = function (err) {\n  this.destroy(err)\n}\nlet webStreamsAdapters\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {}\n  return webStreamsAdapters\n}\nWritable.fromWeb = function (writableStream, options) {\n  return lazyWebStreams().newStreamWritableFromWritableStream(writableStream, options)\n}\nWritable.toWeb = function (streamWritable) {\n  return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable)\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n\n;('use strict')\nconst bufferModule = require('buffer')\nconst {\n  isReadable,\n  isWritable,\n  isIterable,\n  isNodeStream,\n  isReadableNodeStream,\n  isWritableNodeStream,\n  isDuplexNodeStream,\n  isReadableStream,\n  isWritableStream\n} = require('./utils')\nconst eos = require('./end-of-stream')\nconst {\n  AbortError,\n  codes: { ERR_INVALID_ARG_TYPE, ERR_INVALID_RETURN_VALUE }\n} = require('../../ours/errors')\nconst { destroyer } = require('./destroy')\nconst Duplex = require('./duplex')\nconst Readable = require('./readable')\nconst Writable = require('./writable')\nconst { createDeferredPromise } = require('../../ours/util')\nconst from = require('./from')\nconst Blob = globalThis.Blob || bufferModule.Blob\nconst isBlob =\n  typeof Blob !== 'undefined'\n    ? function isBlob(b) {\n        return b instanceof Blob\n      }\n    : function isBlob(b) {\n        return false\n      }\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController\nconst { FunctionPrototypeCall } = require('../../ours/primordials')\n\n// This is needed for pre node 17.\nclass Duplexify extends Duplex {\n  constructor(options) {\n    super(options)\n\n    // https://github.com/nodejs/node/pull/34385\n\n    if ((options === null || options === undefined ? undefined : options.readable) === false) {\n      this._readableState.readable = false\n      this._readableState.ended = true\n      this._readableState.endEmitted = true\n    }\n    if ((options === null || options === undefined ? undefined : options.writable) === false) {\n      this._writableState.writable = false\n      this._writableState.ending = true\n      this._writableState.ended = true\n      this._writableState.finished = true\n    }\n  }\n}\nmodule.exports = function duplexify(body, name) {\n  if (isDuplexNodeStream(body)) {\n    return body\n  }\n  if (isReadableNodeStream(body)) {\n    return _duplexify({\n      readable: body\n    })\n  }\n  if (isWritableNodeStream(body)) {\n    return _duplexify({\n      writable: body\n    })\n  }\n  if (isNodeStream(body)) {\n    return _duplexify({\n      writable: false,\n      readable: false\n    })\n  }\n  if (isReadableStream(body)) {\n    return _duplexify({\n      readable: Readable.fromWeb(body)\n    })\n  }\n  if (isWritableStream(body)) {\n    return _duplexify({\n      writable: Writable.fromWeb(body)\n    })\n  }\n  if (typeof body === 'function') {\n    const { value, write, final, destroy } = fromAsyncGen(body)\n    if (isIterable(value)) {\n      return from(Duplexify, value, {\n        // TODO (ronag): highWaterMark?\n        objectMode: true,\n        write,\n        final,\n        destroy\n      })\n    }\n    const then = value === null || value === undefined ? undefined : value.then\n    if (typeof then === 'function') {\n      let d\n      const promise = FunctionPrototypeCall(\n        then,\n        value,\n        (val) => {\n          if (val != null) {\n            throw new ERR_INVALID_RETURN_VALUE('nully', 'body', val)\n          }\n        },\n        (err) => {\n          destroyer(d, err)\n        }\n      )\n      return (d = new Duplexify({\n        // TODO (ronag): highWaterMark?\n        objectMode: true,\n        readable: false,\n        write,\n        final(cb) {\n          final(async () => {\n            try {\n              await promise\n              process.nextTick(cb, null)\n            } catch (err) {\n              process.nextTick(cb, err)\n            }\n          })\n        },\n        destroy\n      }))\n    }\n    throw new ERR_INVALID_RETURN_VALUE('Iterable, AsyncIterable or AsyncFunction', name, value)\n  }\n  if (isBlob(body)) {\n    return duplexify(body.arrayBuffer())\n  }\n  if (isIterable(body)) {\n    return from(Duplexify, body, {\n      // TODO (ronag): highWaterMark?\n      objectMode: true,\n      writable: false\n    })\n  }\n  if (\n    isReadableStream(body === null || body === undefined ? undefined : body.readable) &&\n    isWritableStream(body === null || body === undefined ? undefined : body.writable)\n  ) {\n    return Duplexify.fromWeb(body)\n  }\n  if (\n    typeof (body === null || body === undefined ? undefined : body.writable) === 'object' ||\n    typeof (body === null || body === undefined ? undefined : body.readable) === 'object'\n  ) {\n    const readable =\n      body !== null && body !== undefined && body.readable\n        ? isReadableNodeStream(body === null || body === undefined ? undefined : body.readable)\n          ? body === null || body === undefined\n            ? undefined\n            : body.readable\n          : duplexify(body.readable)\n        : undefined\n    const writable =\n      body !== null && body !== undefined && body.writable\n        ? isWritableNodeStream(body === null || body === undefined ? undefined : body.writable)\n          ? body === null || body === undefined\n            ? undefined\n            : body.writable\n          : duplexify(body.writable)\n        : undefined\n    return _duplexify({\n      readable,\n      writable\n    })\n  }\n  const then = body === null || body === undefined ? undefined : body.then\n  if (typeof then === 'function') {\n    let d\n    FunctionPrototypeCall(\n      then,\n      body,\n      (val) => {\n        if (val != null) {\n          d.push(val)\n        }\n        d.push(null)\n      },\n      (err) => {\n        destroyer(d, err)\n      }\n    )\n    return (d = new Duplexify({\n      objectMode: true,\n      writable: false,\n      read() {}\n    }))\n  }\n  throw new ERR_INVALID_ARG_TYPE(\n    name,\n    [\n      'Blob',\n      'ReadableStream',\n      'WritableStream',\n      'Stream',\n      'Iterable',\n      'AsyncIterable',\n      'Function',\n      '{ readable, writable } pair',\n      'Promise'\n    ],\n    body\n  )\n}\nfunction fromAsyncGen(fn) {\n  let { promise, resolve } = createDeferredPromise()\n  const ac = new AbortController()\n  const signal = ac.signal\n  const value = fn(\n    (async function* () {\n      while (true) {\n        const _promise = promise\n        promise = null\n        const { chunk, done, cb } = await _promise\n        process.nextTick(cb)\n        if (done) return\n        if (signal.aborted)\n          throw new AbortError(undefined, {\n            cause: signal.reason\n          })\n        ;({ promise, resolve } = createDeferredPromise())\n        yield chunk\n      }\n    })(),\n    {\n      signal\n    }\n  )\n  return {\n    value,\n    write(chunk, encoding, cb) {\n      const _resolve = resolve\n      resolve = null\n      _resolve({\n        chunk,\n        done: false,\n        cb\n      })\n    },\n    final(cb) {\n      const _resolve = resolve\n      resolve = null\n      _resolve({\n        done: true,\n        cb\n      })\n    },\n    destroy(err, cb) {\n      ac.abort()\n      cb(err)\n    }\n  }\n}\nfunction _duplexify(pair) {\n  const r = pair.readable && typeof pair.readable.read !== 'function' ? Readable.wrap(pair.readable) : pair.readable\n  const w = pair.writable\n  let readable = !!isReadable(r)\n  let writable = !!isWritable(w)\n  let ondrain\n  let onfinish\n  let onreadable\n  let onclose\n  let d\n  function onfinished(err) {\n    const cb = onclose\n    onclose = null\n    if (cb) {\n      cb(err)\n    } else if (err) {\n      d.destroy(err)\n    }\n  }\n\n  // TODO(ronag): Avoid double buffering.\n  // Implement Writable/Readable/Duplex traits.\n  // See, https://github.com/nodejs/node/pull/33515.\n  d = new Duplexify({\n    // TODO (ronag): highWaterMark?\n    readableObjectMode: !!(r !== null && r !== undefined && r.readableObjectMode),\n    writableObjectMode: !!(w !== null && w !== undefined && w.writableObjectMode),\n    readable,\n    writable\n  })\n  if (writable) {\n    eos(w, (err) => {\n      writable = false\n      if (err) {\n        destroyer(r, err)\n      }\n      onfinished(err)\n    })\n    d._write = function (chunk, encoding, callback) {\n      if (w.write(chunk, encoding)) {\n        callback()\n      } else {\n        ondrain = callback\n      }\n    }\n    d._final = function (callback) {\n      w.end()\n      onfinish = callback\n    }\n    w.on('drain', function () {\n      if (ondrain) {\n        const cb = ondrain\n        ondrain = null\n        cb()\n      }\n    })\n    w.on('finish', function () {\n      if (onfinish) {\n        const cb = onfinish\n        onfinish = null\n        cb()\n      }\n    })\n  }\n  if (readable) {\n    eos(r, (err) => {\n      readable = false\n      if (err) {\n        destroyer(r, err)\n      }\n      onfinished(err)\n    })\n    r.on('readable', function () {\n      if (onreadable) {\n        const cb = onreadable\n        onreadable = null\n        cb()\n      }\n    })\n    r.on('end', function () {\n      d.push(null)\n    })\n    d._read = function () {\n      while (true) {\n        const buf = r.read()\n        if (buf === null) {\n          onreadable = d._read\n          return\n        }\n        if (!d.push(buf)) {\n          return\n        }\n      }\n    }\n  }\n  d._destroy = function (err, callback) {\n    if (!err && onclose !== null) {\n      err = new AbortError()\n    }\n    onreadable = null\n    ondrain = null\n    onfinish = null\n    if (onclose === null) {\n      callback(err)\n    } else {\n      onclose = callback\n      destroyer(w, err)\n      destroyer(r, err)\n    }\n  }\n  return d\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototype inheritance, this class\n// prototypically inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict'\n\nconst {\n  ObjectDefineProperties,\n  ObjectGetOwnPropertyDescriptor,\n  ObjectKeys,\n  ObjectSetPrototypeOf\n} = require('../../ours/primordials')\nmodule.exports = Duplex\nconst Readable = require('./readable')\nconst Writable = require('./writable')\nObjectSetPrototypeOf(Duplex.prototype, Readable.prototype)\nObjectSetPrototypeOf(Duplex, Readable)\n{\n  const keys = ObjectKeys(Writable.prototype)\n  // Allow the keys array to be GC'ed.\n  for (let i = 0; i < keys.length; i++) {\n    const method = keys[i]\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method]\n  }\n}\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options)\n  Readable.call(this, options)\n  Writable.call(this, options)\n  if (options) {\n    this.allowHalfOpen = options.allowHalfOpen !== false\n    if (options.readable === false) {\n      this._readableState.readable = false\n      this._readableState.ended = true\n      this._readableState.endEmitted = true\n    }\n    if (options.writable === false) {\n      this._writableState.writable = false\n      this._writableState.ending = true\n      this._writableState.ended = true\n      this._writableState.finished = true\n    }\n  } else {\n    this.allowHalfOpen = true\n  }\n}\nObjectDefineProperties(Duplex.prototype, {\n  writable: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writable')\n  },\n  writableHighWaterMark: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableHighWaterMark')\n  },\n  writableObjectMode: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableObjectMode')\n  },\n  writableBuffer: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableBuffer')\n  },\n  writableLength: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableLength')\n  },\n  writableFinished: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableFinished')\n  },\n  writableCorked: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableCorked')\n  },\n  writableEnded: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableEnded')\n  },\n  writableNeedDrain: {\n    __proto__: null,\n    ...ObjectGetOwnPropertyDescriptor(Writable.prototype, 'writableNeedDrain')\n  },\n  destroyed: {\n    __proto__: null,\n    get() {\n      if (this._readableState === undefined || this._writableState === undefined) {\n        return false\n      }\n      return this._readableState.destroyed && this._writableState.destroyed\n    },\n    set(value) {\n      // Backward compatibility, the user is explicitly\n      // managing destroyed.\n      if (this._readableState && this._writableState) {\n        this._readableState.destroyed = value\n        this._writableState.destroyed = value\n      }\n    }\n  }\n})\nlet webStreamsAdapters\n\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n  if (webStreamsAdapters === undefined) webStreamsAdapters = {}\n  return webStreamsAdapters\n}\nDuplex.fromWeb = function (pair, options) {\n  return lazyWebStreams().newStreamDuplexFromReadableWritablePair(pair, options)\n}\nDuplex.toWeb = function (duplex) {\n  return lazyWebStreams().newReadableWritablePairFromDuplex(duplex)\n}\nlet duplexify\nDuplex.from = function (body) {\n  if (!duplexify) {\n    duplexify = require('./duplexify')\n  }\n  return duplexify(body, 'body')\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict'\n\nconst { ObjectSetPrototypeOf, Symbol } = require('../../ours/primordials')\nmodule.exports = Transform\nconst { ERR_METHOD_NOT_IMPLEMENTED } = require('../../ours/errors').codes\nconst Duplex = require('./duplex')\nconst { getHighWaterMark } = require('./state')\nObjectSetPrototypeOf(Transform.prototype, Duplex.prototype)\nObjectSetPrototypeOf(Transform, Duplex)\nconst kCallback = Symbol('kCallback')\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options)\n\n  // TODO (ronag): This should preferably always be\n  // applied but would be semver-major. Or even better;\n  // make Transform a Readable with the Writable interface.\n  const readableHighWaterMark = options ? getHighWaterMark(this, options, 'readableHighWaterMark', true) : null\n  if (readableHighWaterMark === 0) {\n    // A Duplex will buffer both on the writable and readable side while\n    // a Transform just wants to buffer hwm number of elements. To avoid\n    // buffering twice we disable buffering on the writable side.\n    options = {\n      ...options,\n      highWaterMark: null,\n      readableHighWaterMark,\n      // TODO (ronag): 0 is not optimal since we have\n      // a \"bug\" where we check needDrain before calling _write and not after.\n      // Refs: https://github.com/nodejs/node/pull/32887\n      // Refs: https://github.com/nodejs/node/pull/35941\n      writableHighWaterMark: options.writableHighWaterMark || 0\n    }\n  }\n  Duplex.call(this, options)\n\n  // We have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false\n  this[kCallback] = null\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform\n    if (typeof options.flush === 'function') this._flush = options.flush\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  // Backwards compat. Some Transform streams incorrectly implement _final\n  // instead of or in addition to _flush. By using 'prefinish' instead of\n  // implementing _final we continue supporting this unfortunate use case.\n  this.on('prefinish', prefinish)\n}\nfunction final(cb) {\n  if (typeof this._flush === 'function' && !this.destroyed) {\n    this._flush((er, data) => {\n      if (er) {\n        if (cb) {\n          cb(er)\n        } else {\n          this.destroy(er)\n        }\n        return\n      }\n      if (data != null) {\n        this.push(data)\n      }\n      this.push(null)\n      if (cb) {\n        cb()\n      }\n    })\n  } else {\n    this.push(null)\n    if (cb) {\n      cb()\n    }\n  }\n}\nfunction prefinish() {\n  if (this._final !== final) {\n    final.call(this)\n  }\n}\nTransform.prototype._final = final\nTransform.prototype._transform = function (chunk, encoding, callback) {\n  throw new ERR_METHOD_NOT_IMPLEMENTED('_transform()')\n}\nTransform.prototype._write = function (chunk, encoding, callback) {\n  const rState = this._readableState\n  const wState = this._writableState\n  const length = rState.length\n  this._transform(chunk, encoding, (err, val) => {\n    if (err) {\n      callback(err)\n      return\n    }\n    if (val != null) {\n      this.push(val)\n    }\n    if (\n      wState.ended ||\n      // Backwards compat.\n      length === rState.length ||\n      // Backwards compat.\n      rState.length < rState.highWaterMark\n    ) {\n      callback()\n    } else {\n      this[kCallback] = callback\n    }\n  })\n}\nTransform.prototype._read = function () {\n  if (this[kCallback]) {\n    const callback = this[kCallback]\n    this[kCallback] = null\n    callback()\n  }\n}\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict'\n\nconst { ObjectSetPrototypeOf } = require('../../ours/primordials')\nmodule.exports = PassThrough\nconst Transform = require('./transform')\nObjectSetPrototypeOf(PassThrough.prototype, Transform.prototype)\nObjectSetPrototypeOf(PassThrough, Transform)\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options)\n  Transform.call(this, options)\n}\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk)\n}\n", "/* replacement start */\n\nconst process = require('process/')\n\n/* replacement end */\n// Ported from https://github.com/mafintosh/pump with\n// permission from the author, Mathias Buus (@mafintosh).\n\n;('use strict')\nconst { ArrayIsArray, Promise, SymbolAsyncIterator, SymbolDispose } = require('../../ours/primordials')\nconst eos = require('./end-of-stream')\nconst { once } = require('../../ours/util')\nconst destroyImpl = require('./destroy')\nconst Duplex = require('./duplex')\nconst {\n  aggregateTwoErrors,\n  codes: {\n    ERR_INVALID_ARG_TYPE,\n    ERR_INVALID_RETURN_VALUE,\n    ERR_MISSING_ARGS,\n    ERR_STREAM_DESTROYED,\n    ERR_STREAM_PREMATURE_CLOSE\n  },\n  AbortError\n} = require('../../ours/errors')\nconst { validateFunction, validateAbortSignal } = require('../validators')\nconst {\n  isIterable,\n  isReadable,\n  isReadableNodeStream,\n  isNodeStream,\n  isTransformStream,\n  isWebStream,\n  isReadableStream,\n  isReadableFinished\n} = require('./utils')\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController\nlet PassThrough\nlet Readable\nlet addAbortListener\nfunction destroyer(stream, reading, writing) {\n  let finished = false\n  stream.on('close', () => {\n    finished = true\n  })\n  const cleanup = eos(\n    stream,\n    {\n      readable: reading,\n      writable: writing\n    },\n    (err) => {\n      finished = !err\n    }\n  )\n  return {\n    destroy: (err) => {\n      if (finished) return\n      finished = true\n      destroyImpl.destroyer(stream, err || new ERR_STREAM_DESTROYED('pipe'))\n    },\n    cleanup\n  }\n}\nfunction popCallback(streams) {\n  // Streams should never be an empty array. It should always contain at least\n  // a single stream. Therefore optimize for the average case instead of\n  // checking for length === 0 as well.\n  validateFunction(streams[streams.length - 1], 'streams[stream.length - 1]')\n  return streams.pop()\n}\nfunction makeAsyncIterable(val) {\n  if (isIterable(val)) {\n    return val\n  } else if (isReadableNodeStream(val)) {\n    // Legacy streams are not Iterable.\n    return fromReadable(val)\n  }\n  throw new ERR_INVALID_ARG_TYPE('val', ['Readable', 'Iterable', 'AsyncIterable'], val)\n}\nasync function* fromReadable(val) {\n  if (!Readable) {\n    Readable = require('./readable')\n  }\n  yield* Readable.prototype[SymbolAsyncIterator].call(val)\n}\nasync function pumpToNode(iterable, writable, finish, { end }) {\n  let error\n  let onresolve = null\n  const resume = (err) => {\n    if (err) {\n      error = err\n    }\n    if (onresolve) {\n      const callback = onresolve\n      onresolve = null\n      callback()\n    }\n  }\n  const wait = () =>\n    new Promise((resolve, reject) => {\n      if (error) {\n        reject(error)\n      } else {\n        onresolve = () => {\n          if (error) {\n            reject(error)\n          } else {\n            resolve()\n          }\n        }\n      }\n    })\n  writable.on('drain', resume)\n  const cleanup = eos(\n    writable,\n    {\n      readable: false\n    },\n    resume\n  )\n  try {\n    if (writable.writableNeedDrain) {\n      await wait()\n    }\n    for await (const chunk of iterable) {\n      if (!writable.write(chunk)) {\n        await wait()\n      }\n    }\n    if (end) {\n      writable.end()\n      await wait()\n    }\n    finish()\n  } catch (err) {\n    finish(error !== err ? aggregateTwoErrors(error, err) : err)\n  } finally {\n    cleanup()\n    writable.off('drain', resume)\n  }\n}\nasync function pumpToWeb(readable, writable, finish, { end }) {\n  if (isTransformStream(writable)) {\n    writable = writable.writable\n  }\n  // https://streams.spec.whatwg.org/#example-manual-write-with-backpressure\n  const writer = writable.getWriter()\n  try {\n    for await (const chunk of readable) {\n      await writer.ready\n      writer.write(chunk).catch(() => {})\n    }\n    await writer.ready\n    if (end) {\n      await writer.close()\n    }\n    finish()\n  } catch (err) {\n    try {\n      await writer.abort(err)\n      finish(err)\n    } catch (err) {\n      finish(err)\n    }\n  }\n}\nfunction pipeline(...streams) {\n  return pipelineImpl(streams, once(popCallback(streams)))\n}\nfunction pipelineImpl(streams, callback, opts) {\n  if (streams.length === 1 && ArrayIsArray(streams[0])) {\n    streams = streams[0]\n  }\n  if (streams.length < 2) {\n    throw new ERR_MISSING_ARGS('streams')\n  }\n  const ac = new AbortController()\n  const signal = ac.signal\n  const outerSignal = opts === null || opts === undefined ? undefined : opts.signal\n\n  // Need to cleanup event listeners if last stream is readable\n  // https://github.com/nodejs/node/issues/35452\n  const lastStreamCleanup = []\n  validateAbortSignal(outerSignal, 'options.signal')\n  function abort() {\n    finishImpl(new AbortError())\n  }\n  addAbortListener = addAbortListener || require('../../ours/util').addAbortListener\n  let disposable\n  if (outerSignal) {\n    disposable = addAbortListener(outerSignal, abort)\n  }\n  let error\n  let value\n  const destroys = []\n  let finishCount = 0\n  function finish(err) {\n    finishImpl(err, --finishCount === 0)\n  }\n  function finishImpl(err, final) {\n    var _disposable\n    if (err && (!error || error.code === 'ERR_STREAM_PREMATURE_CLOSE')) {\n      error = err\n    }\n    if (!error && !final) {\n      return\n    }\n    while (destroys.length) {\n      destroys.shift()(error)\n    }\n    ;(_disposable = disposable) === null || _disposable === undefined ? undefined : _disposable[SymbolDispose]()\n    ac.abort()\n    if (final) {\n      if (!error) {\n        lastStreamCleanup.forEach((fn) => fn())\n      }\n      process.nextTick(callback, error, value)\n    }\n  }\n  let ret\n  for (let i = 0; i < streams.length; i++) {\n    const stream = streams[i]\n    const reading = i < streams.length - 1\n    const writing = i > 0\n    const end = reading || (opts === null || opts === undefined ? undefined : opts.end) !== false\n    const isLastStream = i === streams.length - 1\n    if (isNodeStream(stream)) {\n      if (end) {\n        const { destroy, cleanup } = destroyer(stream, reading, writing)\n        destroys.push(destroy)\n        if (isReadable(stream) && isLastStream) {\n          lastStreamCleanup.push(cleanup)\n        }\n      }\n\n      // Catch stream errors that occur after pipe/pump has completed.\n      function onError(err) {\n        if (err && err.name !== 'AbortError' && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {\n          finish(err)\n        }\n      }\n      stream.on('error', onError)\n      if (isReadable(stream) && isLastStream) {\n        lastStreamCleanup.push(() => {\n          stream.removeListener('error', onError)\n        })\n      }\n    }\n    if (i === 0) {\n      if (typeof stream === 'function') {\n        ret = stream({\n          signal\n        })\n        if (!isIterable(ret)) {\n          throw new ERR_INVALID_RETURN_VALUE('Iterable, AsyncIterable or Stream', 'source', ret)\n        }\n      } else if (isIterable(stream) || isReadableNodeStream(stream) || isTransformStream(stream)) {\n        ret = stream\n      } else {\n        ret = Duplex.from(stream)\n      }\n    } else if (typeof stream === 'function') {\n      if (isTransformStream(ret)) {\n        var _ret\n        ret = makeAsyncIterable((_ret = ret) === null || _ret === undefined ? undefined : _ret.readable)\n      } else {\n        ret = makeAsyncIterable(ret)\n      }\n      ret = stream(ret, {\n        signal\n      })\n      if (reading) {\n        if (!isIterable(ret, true)) {\n          throw new ERR_INVALID_RETURN_VALUE('AsyncIterable', `transform[${i - 1}]`, ret)\n        }\n      } else {\n        var _ret2\n        if (!PassThrough) {\n          PassThrough = require('./passthrough')\n        }\n\n        // If the last argument to pipeline is not a stream\n        // we must create a proxy stream so that pipeline(...)\n        // always returns a stream which can be further\n        // composed through `.pipe(stream)`.\n\n        const pt = new PassThrough({\n          objectMode: true\n        })\n\n        // Handle Promises/A+ spec, `then` could be a getter that throws on\n        // second use.\n        const then = (_ret2 = ret) === null || _ret2 === undefined ? undefined : _ret2.then\n        if (typeof then === 'function') {\n          finishCount++\n          then.call(\n            ret,\n            (val) => {\n              value = val\n              if (val != null) {\n                pt.write(val)\n              }\n              if (end) {\n                pt.end()\n              }\n              process.nextTick(finish)\n            },\n            (err) => {\n              pt.destroy(err)\n              process.nextTick(finish, err)\n            }\n          )\n        } else if (isIterable(ret, true)) {\n          finishCount++\n          pumpToNode(ret, pt, finish, {\n            end\n          })\n        } else if (isReadableStream(ret) || isTransformStream(ret)) {\n          const toRead = ret.readable || ret\n          finishCount++\n          pumpToNode(toRead, pt, finish, {\n            end\n          })\n        } else {\n          throw new ERR_INVALID_RETURN_VALUE('AsyncIterable or Promise', 'destination', ret)\n        }\n        ret = pt\n        const { destroy, cleanup } = destroyer(ret, false, true)\n        destroys.push(destroy)\n        if (isLastStream) {\n          lastStreamCleanup.push(cleanup)\n        }\n      }\n    } else if (isNodeStream(stream)) {\n      if (isReadableNodeStream(ret)) {\n        finishCount += 2\n        const cleanup = pipe(ret, stream, finish, {\n          end\n        })\n        if (isReadable(stream) && isLastStream) {\n          lastStreamCleanup.push(cleanup)\n        }\n      } else if (isTransformStream(ret) || isReadableStream(ret)) {\n        const toRead = ret.readable || ret\n        finishCount++\n        pumpToNode(toRead, stream, finish, {\n          end\n        })\n      } else if (isIterable(ret)) {\n        finishCount++\n        pumpToNode(ret, stream, finish, {\n          end\n        })\n      } else {\n        throw new ERR_INVALID_ARG_TYPE(\n          'val',\n          ['Readable', 'Iterable', 'AsyncIterable', 'ReadableStream', 'TransformStream'],\n          ret\n        )\n      }\n      ret = stream\n    } else if (isWebStream(stream)) {\n      if (isReadableNodeStream(ret)) {\n        finishCount++\n        pumpToWeb(makeAsyncIterable(ret), stream, finish, {\n          end\n        })\n      } else if (isReadableStream(ret) || isIterable(ret)) {\n        finishCount++\n        pumpToWeb(ret, stream, finish, {\n          end\n        })\n      } else if (isTransformStream(ret)) {\n        finishCount++\n        pumpToWeb(ret.readable, stream, finish, {\n          end\n        })\n      } else {\n        throw new ERR_INVALID_ARG_TYPE(\n          'val',\n          ['Readable', 'Iterable', 'AsyncIterable', 'ReadableStream', 'TransformStream'],\n          ret\n        )\n      }\n      ret = stream\n    } else {\n      ret = Duplex.from(stream)\n    }\n  }\n  if (\n    (signal !== null && signal !== undefined && signal.aborted) ||\n    (outerSignal !== null && outerSignal !== undefined && outerSignal.aborted)\n  ) {\n    process.nextTick(abort)\n  }\n  return ret\n}\nfunction pipe(src, dst, finish, { end }) {\n  let ended = false\n  dst.on('close', () => {\n    if (!ended) {\n      // Finish if the destination closes before the source has completed.\n      finish(new ERR_STREAM_PREMATURE_CLOSE())\n    }\n  })\n  src.pipe(dst, {\n    end: false\n  }) // If end is true we already will have a listener to end dst.\n\n  if (end) {\n    // Compat. Before node v10.12.0 stdio used to throw an error so\n    // pipe() did/does not end() stdio destinations.\n    // Now they allow it but \"secretly\" don't close the underlying fd.\n\n    function endFn() {\n      ended = true\n      dst.end()\n    }\n    if (isReadableFinished(src)) {\n      // End the destination if the source has already ended.\n      process.nextTick(endFn)\n    } else {\n      src.once('end', endFn)\n    }\n  } else {\n    finish()\n  }\n  eos(\n    src,\n    {\n      readable: true,\n      writable: false\n    },\n    (err) => {\n      const rState = src._readableState\n      if (\n        err &&\n        err.code === 'ERR_STREAM_PREMATURE_CLOSE' &&\n        rState &&\n        rState.ended &&\n        !rState.errored &&\n        !rState.errorEmitted\n      ) {\n        // Some readable streams will emit 'close' before 'end'. However, since\n        // this is on the readable side 'end' should still be emitted if the\n        // stream has been ended and no error emitted. This should be allowed in\n        // favor of backwards compatibility. Since the stream is piped to a\n        // destination this should not result in any observable difference.\n        // We don't need to check if this is a writable premature close since\n        // eos will only fail with premature close on the reading side for\n        // duplex streams.\n        src.once('end', finish).once('error', finish)\n      } else {\n        finish(err)\n      }\n    }\n  )\n  return eos(\n    dst,\n    {\n      readable: false,\n      writable: true\n    },\n    finish\n  )\n}\nmodule.exports = {\n  pipelineImpl,\n  pipeline\n}\n", "'use strict'\n\nconst { pipeline } = require('./pipeline')\nconst Duplex = require('./duplex')\nconst { destroyer } = require('./destroy')\nconst {\n  isNodeStream,\n  isReadable,\n  isWritable,\n  isWebStream,\n  isTransformStream,\n  isWritableStream,\n  isReadableStream\n} = require('./utils')\nconst {\n  AbortError,\n  codes: { ERR_INVALID_ARG_VALUE, ERR_MISSING_ARGS }\n} = require('../../ours/errors')\nconst eos = require('./end-of-stream')\nmodule.exports = function compose(...streams) {\n  if (streams.length === 0) {\n    throw new ERR_MISSING_ARGS('streams')\n  }\n  if (streams.length === 1) {\n    return Duplex.from(streams[0])\n  }\n  const orgStreams = [...streams]\n  if (typeof streams[0] === 'function') {\n    streams[0] = Duplex.from(streams[0])\n  }\n  if (typeof streams[streams.length - 1] === 'function') {\n    const idx = streams.length - 1\n    streams[idx] = Duplex.from(streams[idx])\n  }\n  for (let n = 0; n < streams.length; ++n) {\n    if (!isNodeStream(streams[n]) && !isWebStream(streams[n])) {\n      // TODO(ronag): Add checks for non streams.\n      continue\n    }\n    if (\n      n < streams.length - 1 &&\n      !(isReadable(streams[n]) || isReadableStream(streams[n]) || isTransformStream(streams[n]))\n    ) {\n      throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], 'must be readable')\n    }\n    if (n > 0 && !(isWritable(streams[n]) || isWritableStream(streams[n]) || isTransformStream(streams[n]))) {\n      throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], 'must be writable')\n    }\n  }\n  let ondrain\n  let onfinish\n  let onreadable\n  let onclose\n  let d\n  function onfinished(err) {\n    const cb = onclose\n    onclose = null\n    if (cb) {\n      cb(err)\n    } else if (err) {\n      d.destroy(err)\n    } else if (!readable && !writable) {\n      d.destroy()\n    }\n  }\n  const head = streams[0]\n  const tail = pipeline(streams, onfinished)\n  const writable = !!(isWritable(head) || isWritableStream(head) || isTransformStream(head))\n  const readable = !!(isReadable(tail) || isReadableStream(tail) || isTransformStream(tail))\n\n  // TODO(ronag): Avoid double buffering.\n  // Implement Writable/Readable/Duplex traits.\n  // See, https://github.com/nodejs/node/pull/33515.\n  d = new Duplex({\n    // TODO (ronag): highWaterMark?\n    writableObjectMode: !!(head !== null && head !== undefined && head.writableObjectMode),\n    readableObjectMode: !!(tail !== null && tail !== undefined && tail.readableObjectMode),\n    writable,\n    readable\n  })\n  if (writable) {\n    if (isNodeStream(head)) {\n      d._write = function (chunk, encoding, callback) {\n        if (head.write(chunk, encoding)) {\n          callback()\n        } else {\n          ondrain = callback\n        }\n      }\n      d._final = function (callback) {\n        head.end()\n        onfinish = callback\n      }\n      head.on('drain', function () {\n        if (ondrain) {\n          const cb = ondrain\n          ondrain = null\n          cb()\n        }\n      })\n    } else if (isWebStream(head)) {\n      const writable = isTransformStream(head) ? head.writable : head\n      const writer = writable.getWriter()\n      d._write = async function (chunk, encoding, callback) {\n        try {\n          await writer.ready\n          writer.write(chunk).catch(() => {})\n          callback()\n        } catch (err) {\n          callback(err)\n        }\n      }\n      d._final = async function (callback) {\n        try {\n          await writer.ready\n          writer.close().catch(() => {})\n          onfinish = callback\n        } catch (err) {\n          callback(err)\n        }\n      }\n    }\n    const toRead = isTransformStream(tail) ? tail.readable : tail\n    eos(toRead, () => {\n      if (onfinish) {\n        const cb = onfinish\n        onfinish = null\n        cb()\n      }\n    })\n  }\n  if (readable) {\n    if (isNodeStream(tail)) {\n      tail.on('readable', function () {\n        if (onreadable) {\n          const cb = onreadable\n          onreadable = null\n          cb()\n        }\n      })\n      tail.on('end', function () {\n        d.push(null)\n      })\n      d._read = function () {\n        while (true) {\n          const buf = tail.read()\n          if (buf === null) {\n            onreadable = d._read\n            return\n          }\n          if (!d.push(buf)) {\n            return\n          }\n        }\n      }\n    } else if (isWebStream(tail)) {\n      const readable = isTransformStream(tail) ? tail.readable : tail\n      const reader = readable.getReader()\n      d._read = async function () {\n        while (true) {\n          try {\n            const { value, done } = await reader.read()\n            if (!d.push(value)) {\n              return\n            }\n            if (done) {\n              d.push(null)\n              return\n            }\n          } catch {\n            return\n          }\n        }\n      }\n    }\n  }\n  d._destroy = function (err, callback) {\n    if (!err && onclose !== null) {\n      err = new AbortError()\n    }\n    onreadable = null\n    ondrain = null\n    onfinish = null\n    if (onclose === null) {\n      callback(err)\n    } else {\n      onclose = callback\n      if (isNodeStream(tail)) {\n        destroyer(tail, err)\n      }\n    }\n  }\n  return d\n}\n", "'use strict'\n\nconst AbortController = globalThis.AbortController || require('abort-controller').AbortController\nconst {\n  codes: { ERR_INVALID_ARG_VALUE, ERR_INVALID_ARG_TYPE, ERR_MISSING_ARGS, ERR_OUT_OF_RANGE },\n  AbortError\n} = require('../../ours/errors')\nconst { validateAbortSignal, validateInteger, validateObject } = require('../validators')\nconst kWeakHandler = require('../../ours/primordials').Symbol('kWeak')\nconst kResistStopPropagation = require('../../ours/primordials').Symbol('kResistStopPropagation')\nconst { finished } = require('./end-of-stream')\nconst staticCompose = require('./compose')\nconst { addAbortSignalNoValidate } = require('./add-abort-signal')\nconst { isWritable, isNodeStream } = require('./utils')\nconst { deprecate } = require('../../ours/util')\nconst {\n  ArrayPrototypePush,\n  Boolean,\n  MathFloor,\n  Number,\n  NumberIsNaN,\n  Promise,\n  PromiseReject,\n  PromiseResolve,\n  PromisePrototypeThen,\n  Symbol\n} = require('../../ours/primordials')\nconst kEmpty = Symbol('kEmpty')\nconst kEof = Symbol('kEof')\nfunction compose(stream, options) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  if (isNodeStream(stream) && !isWritable(stream)) {\n    throw new ERR_INVALID_ARG_VALUE('stream', stream, 'must be writable')\n  }\n  const composedStream = staticCompose(this, stream)\n  if (options !== null && options !== undefined && options.signal) {\n    // Not validating as we already validated before\n    addAbortSignalNoValidate(options.signal, composedStream)\n  }\n  return composedStream\n}\nfunction map(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  let concurrency = 1\n  if ((options === null || options === undefined ? undefined : options.concurrency) != null) {\n    concurrency = MathFloor(options.concurrency)\n  }\n  let highWaterMark = concurrency - 1\n  if ((options === null || options === undefined ? undefined : options.highWaterMark) != null) {\n    highWaterMark = MathFloor(options.highWaterMark)\n  }\n  validateInteger(concurrency, 'options.concurrency', 1)\n  validateInteger(highWaterMark, 'options.highWaterMark', 0)\n  highWaterMark += concurrency\n  return async function* map() {\n    const signal = require('../../ours/util').AbortSignalAny(\n      [options === null || options === undefined ? undefined : options.signal].filter(Boolean)\n    )\n    const stream = this\n    const queue = []\n    const signalOpt = {\n      signal\n    }\n    let next\n    let resume\n    let done = false\n    let cnt = 0\n    function onCatch() {\n      done = true\n      afterItemProcessed()\n    }\n    function afterItemProcessed() {\n      cnt -= 1\n      maybeResume()\n    }\n    function maybeResume() {\n      if (resume && !done && cnt < concurrency && queue.length < highWaterMark) {\n        resume()\n        resume = null\n      }\n    }\n    async function pump() {\n      try {\n        for await (let val of stream) {\n          if (done) {\n            return\n          }\n          if (signal.aborted) {\n            throw new AbortError()\n          }\n          try {\n            val = fn(val, signalOpt)\n            if (val === kEmpty) {\n              continue\n            }\n            val = PromiseResolve(val)\n          } catch (err) {\n            val = PromiseReject(err)\n          }\n          cnt += 1\n          PromisePrototypeThen(val, afterItemProcessed, onCatch)\n          queue.push(val)\n          if (next) {\n            next()\n            next = null\n          }\n          if (!done && (queue.length >= highWaterMark || cnt >= concurrency)) {\n            await new Promise((resolve) => {\n              resume = resolve\n            })\n          }\n        }\n        queue.push(kEof)\n      } catch (err) {\n        const val = PromiseReject(err)\n        PromisePrototypeThen(val, afterItemProcessed, onCatch)\n        queue.push(val)\n      } finally {\n        done = true\n        if (next) {\n          next()\n          next = null\n        }\n      }\n    }\n    pump()\n    try {\n      while (true) {\n        while (queue.length > 0) {\n          const val = await queue[0]\n          if (val === kEof) {\n            return\n          }\n          if (signal.aborted) {\n            throw new AbortError()\n          }\n          if (val !== kEmpty) {\n            yield val\n          }\n          queue.shift()\n          maybeResume()\n        }\n        await new Promise((resolve) => {\n          next = resolve\n        })\n      }\n    } finally {\n      done = true\n      if (resume) {\n        resume()\n        resume = null\n      }\n    }\n  }.call(this)\n}\nfunction asIndexedPairs(options = undefined) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  return async function* asIndexedPairs() {\n    let index = 0\n    for await (const val of this) {\n      var _options$signal\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal = options.signal) !== null &&\n        _options$signal !== undefined &&\n        _options$signal.aborted\n      ) {\n        throw new AbortError({\n          cause: options.signal.reason\n        })\n      }\n      yield [index++, val]\n    }\n  }.call(this)\n}\nasync function some(fn, options = undefined) {\n  for await (const unused of filter.call(this, fn, options)) {\n    return true\n  }\n  return false\n}\nasync function every(fn, options = undefined) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  // https://en.wikipedia.org/wiki/De_Morgan%27s_laws\n  return !(await some.call(\n    this,\n    async (...args) => {\n      return !(await fn(...args))\n    },\n    options\n  ))\n}\nasync function find(fn, options) {\n  for await (const result of filter.call(this, fn, options)) {\n    return result\n  }\n  return undefined\n}\nasync function forEach(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  async function forEachFn(value, options) {\n    await fn(value, options)\n    return kEmpty\n  }\n  // eslint-disable-next-line no-unused-vars\n  for await (const unused of map.call(this, forEachFn, options));\n}\nfunction filter(fn, options) {\n  if (typeof fn !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('fn', ['Function', 'AsyncFunction'], fn)\n  }\n  async function filterFn(value, options) {\n    if (await fn(value, options)) {\n      return value\n    }\n    return kEmpty\n  }\n  return map.call(this, filterFn, options)\n}\n\n// Specific to provide better error to reduce since the argument is only\n// missing if the stream has no items in it - but the code is still appropriate\nclass ReduceAwareErrMissingArgs extends ERR_MISSING_ARGS {\n  constructor() {\n    super('reduce')\n    this.message = 'Reduce of an empty stream requires an initial value'\n  }\n}\nasync function reduce(reducer, initialValue, options) {\n  var _options$signal2\n  if (typeof reducer !== 'function') {\n    throw new ERR_INVALID_ARG_TYPE('reducer', ['Function', 'AsyncFunction'], reducer)\n  }\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  let hasInitialValue = arguments.length > 1\n  if (\n    options !== null &&\n    options !== undefined &&\n    (_options$signal2 = options.signal) !== null &&\n    _options$signal2 !== undefined &&\n    _options$signal2.aborted\n  ) {\n    const err = new AbortError(undefined, {\n      cause: options.signal.reason\n    })\n    this.once('error', () => {}) // The error is already propagated\n    await finished(this.destroy(err))\n    throw err\n  }\n  const ac = new AbortController()\n  const signal = ac.signal\n  if (options !== null && options !== undefined && options.signal) {\n    const opts = {\n      once: true,\n      [kWeakHandler]: this,\n      [kResistStopPropagation]: true\n    }\n    options.signal.addEventListener('abort', () => ac.abort(), opts)\n  }\n  let gotAnyItemFromStream = false\n  try {\n    for await (const value of this) {\n      var _options$signal3\n      gotAnyItemFromStream = true\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal3 = options.signal) !== null &&\n        _options$signal3 !== undefined &&\n        _options$signal3.aborted\n      ) {\n        throw new AbortError()\n      }\n      if (!hasInitialValue) {\n        initialValue = value\n        hasInitialValue = true\n      } else {\n        initialValue = await reducer(initialValue, value, {\n          signal\n        })\n      }\n    }\n    if (!gotAnyItemFromStream && !hasInitialValue) {\n      throw new ReduceAwareErrMissingArgs()\n    }\n  } finally {\n    ac.abort()\n  }\n  return initialValue\n}\nasync function toArray(options) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  const result = []\n  for await (const val of this) {\n    var _options$signal4\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal4 = options.signal) !== null &&\n      _options$signal4 !== undefined &&\n      _options$signal4.aborted\n    ) {\n      throw new AbortError(undefined, {\n        cause: options.signal.reason\n      })\n    }\n    ArrayPrototypePush(result, val)\n  }\n  return result\n}\nfunction flatMap(fn, options) {\n  const values = map.call(this, fn, options)\n  return async function* flatMap() {\n    for await (const val of values) {\n      yield* val\n    }\n  }.call(this)\n}\nfunction toIntegerOrInfinity(number) {\n  // We coerce here to align with the spec\n  // https://github.com/tc39/proposal-iterator-helpers/issues/169\n  number = Number(number)\n  if (NumberIsNaN(number)) {\n    return 0\n  }\n  if (number < 0) {\n    throw new ERR_OUT_OF_RANGE('number', '>= 0', number)\n  }\n  return number\n}\nfunction drop(number, options = undefined) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  number = toIntegerOrInfinity(number)\n  return async function* drop() {\n    var _options$signal5\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal5 = options.signal) !== null &&\n      _options$signal5 !== undefined &&\n      _options$signal5.aborted\n    ) {\n      throw new AbortError()\n    }\n    for await (const val of this) {\n      var _options$signal6\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal6 = options.signal) !== null &&\n        _options$signal6 !== undefined &&\n        _options$signal6.aborted\n      ) {\n        throw new AbortError()\n      }\n      if (number-- <= 0) {\n        yield val\n      }\n    }\n  }.call(this)\n}\nfunction take(number, options = undefined) {\n  if (options != null) {\n    validateObject(options, 'options')\n  }\n  if ((options === null || options === undefined ? undefined : options.signal) != null) {\n    validateAbortSignal(options.signal, 'options.signal')\n  }\n  number = toIntegerOrInfinity(number)\n  return async function* take() {\n    var _options$signal7\n    if (\n      options !== null &&\n      options !== undefined &&\n      (_options$signal7 = options.signal) !== null &&\n      _options$signal7 !== undefined &&\n      _options$signal7.aborted\n    ) {\n      throw new AbortError()\n    }\n    for await (const val of this) {\n      var _options$signal8\n      if (\n        options !== null &&\n        options !== undefined &&\n        (_options$signal8 = options.signal) !== null &&\n        _options$signal8 !== undefined &&\n        _options$signal8.aborted\n      ) {\n        throw new AbortError()\n      }\n      if (number-- > 0) {\n        yield val\n      }\n\n      // Don't get another item from iterator in case we reached the end\n      if (number <= 0) {\n        return\n      }\n    }\n  }.call(this)\n}\nmodule.exports.streamReturningOperators = {\n  asIndexedPairs: deprecate(asIndexedPairs, 'readable.asIndexedPairs will be removed in a future version.'),\n  drop,\n  filter,\n  flatMap,\n  map,\n  take,\n  compose\n}\nmodule.exports.promiseReturningOperators = {\n  every,\n  forEach,\n  reduce,\n  toArray,\n  some,\n  find\n}\n", "'use strict'\n\nconst { ArrayPrototypePop, Promise } = require('../ours/primordials')\nconst { isIterable, isNodeStream, isWebStream } = require('../internal/streams/utils')\nconst { pipelineImpl: pl } = require('../internal/streams/pipeline')\nconst { finished } = require('../internal/streams/end-of-stream')\nrequire('../../lib/stream.js')\nfunction pipeline(...streams) {\n  return new Promise((resolve, reject) => {\n    let signal\n    let end\n    const lastArg = streams[streams.length - 1]\n    if (\n      lastArg &&\n      typeof lastArg === 'object' &&\n      !isNodeStream(lastArg) &&\n      !isIterable(lastArg) &&\n      !isWebStream(lastArg)\n    ) {\n      const options = ArrayPrototypePop(streams)\n      signal = options.signal\n      end = options.end\n    }\n    pl(\n      streams,\n      (err, value) => {\n        if (err) {\n          reject(err)\n        } else {\n          resolve(value)\n        }\n      },\n      {\n        signal,\n        end\n      }\n    )\n  })\n}\nmodule.exports = {\n  finished,\n  pipeline\n}\n", "/* replacement start */\n\nconst { Buffer } = require('buffer')\n\n/* replacement end */\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n;('use strict')\nconst { ObjectDefineProperty, ObjectKeys, ReflectApply } = require('./ours/primordials')\nconst {\n  promisify: { custom: customPromisify }\n} = require('./ours/util')\nconst { streamReturningOperators, promiseReturningOperators } = require('./internal/streams/operators')\nconst {\n  codes: { ERR_ILLEGAL_CONSTRUCTOR }\n} = require('./ours/errors')\nconst compose = require('./internal/streams/compose')\nconst { setDefaultHighWaterMark, getDefaultHighWaterMark } = require('./internal/streams/state')\nconst { pipeline } = require('./internal/streams/pipeline')\nconst { destroyer } = require('./internal/streams/destroy')\nconst eos = require('./internal/streams/end-of-stream')\nconst internalBuffer = {}\nconst promises = require('./stream/promises')\nconst utils = require('./internal/streams/utils')\nconst Stream = (module.exports = require('./internal/streams/legacy').Stream)\nStream.isDestroyed = utils.isDestroyed\nStream.isDisturbed = utils.isDisturbed\nStream.isErrored = utils.isErrored\nStream.isReadable = utils.isReadable\nStream.isWritable = utils.isWritable\nStream.Readable = require('./internal/streams/readable')\nfor (const key of ObjectKeys(streamReturningOperators)) {\n  const op = streamReturningOperators[key]\n  function fn(...args) {\n    if (new.target) {\n      throw ERR_ILLEGAL_CONSTRUCTOR()\n    }\n    return Stream.Readable.from(ReflectApply(op, this, args))\n  }\n  ObjectDefineProperty(fn, 'name', {\n    __proto__: null,\n    value: op.name\n  })\n  ObjectDefineProperty(fn, 'length', {\n    __proto__: null,\n    value: op.length\n  })\n  ObjectDefineProperty(Stream.Readable.prototype, key, {\n    __proto__: null,\n    value: fn,\n    enumerable: false,\n    configurable: true,\n    writable: true\n  })\n}\nfor (const key of ObjectKeys(promiseReturningOperators)) {\n  const op = promiseReturningOperators[key]\n  function fn(...args) {\n    if (new.target) {\n      throw ERR_ILLEGAL_CONSTRUCTOR()\n    }\n    return ReflectApply(op, this, args)\n  }\n  ObjectDefineProperty(fn, 'name', {\n    __proto__: null,\n    value: op.name\n  })\n  ObjectDefineProperty(fn, 'length', {\n    __proto__: null,\n    value: op.length\n  })\n  ObjectDefineProperty(Stream.Readable.prototype, key, {\n    __proto__: null,\n    value: fn,\n    enumerable: false,\n    configurable: true,\n    writable: true\n  })\n}\nStream.Writable = require('./internal/streams/writable')\nStream.Duplex = require('./internal/streams/duplex')\nStream.Transform = require('./internal/streams/transform')\nStream.PassThrough = require('./internal/streams/passthrough')\nStream.pipeline = pipeline\nconst { addAbortSignal } = require('./internal/streams/add-abort-signal')\nStream.addAbortSignal = addAbortSignal\nStream.finished = eos\nStream.destroy = destroyer\nStream.compose = compose\nStream.setDefaultHighWaterMark = setDefaultHighWaterMark\nStream.getDefaultHighWaterMark = getDefaultHighWaterMark\nObjectDefineProperty(Stream, 'promises', {\n  __proto__: null,\n  configurable: true,\n  enumerable: true,\n  get() {\n    return promises\n  }\n})\nObjectDefineProperty(pipeline, customPromisify, {\n  __proto__: null,\n  enumerable: true,\n  get() {\n    return promises.pipeline\n  }\n})\nObjectDefineProperty(eos, customPromisify, {\n  __proto__: null,\n  enumerable: true,\n  get() {\n    return promises.finished\n  }\n})\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream\nStream._isUint8Array = function isUint8Array(value) {\n  return value instanceof Uint8Array\n}\nStream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength)\n}\n", "'use strict'\n\nconst CustomStream = require('../stream')\nconst promises = require('../stream/promises')\nconst originalDestroy = CustomStream.Readable.destroy\nmodule.exports = CustomStream.Readable\n\n// Explicit export naming is needed for ESM\nmodule.exports._uint8ArrayToBuffer = CustomStream._uint8ArrayToBuffer\nmodule.exports._isUint8Array = CustomStream._isUint8Array\nmodule.exports.isDisturbed = CustomStream.isDisturbed\nmodule.exports.isErrored = CustomStream.isErrored\nmodule.exports.isReadable = CustomStream.isReadable\nmodule.exports.Readable = CustomStream.Readable\nmodule.exports.Writable = CustomStream.Writable\nmodule.exports.Duplex = CustomStream.Duplex\nmodule.exports.Transform = CustomStream.Transform\nmodule.exports.PassThrough = CustomStream.PassThrough\nmodule.exports.addAbortSignal = CustomStream.addAbortSignal\nmodule.exports.finished = CustomStream.finished\nmodule.exports.destroy = CustomStream.destroy\nmodule.exports.destroy = originalDestroy\nmodule.exports.pipeline = CustomStream.pipeline\nmodule.exports.compose = CustomStream.compose\nObject.defineProperty(CustomStream, 'promises', {\n  configurable: true,\n  enumerable: true,\n  get() {\n    return promises\n  }\n})\nmodule.exports.Stream = CustomStream.Stream\n\n// Allow default importing\nmodule.exports.default = module.exports\n", "if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      ctor.prototype = Object.create(superCtor.prototype, {\n        constructor: {\n          value: ctor,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        }\n      })\n    }\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    if (superCtor) {\n      ctor.super_ = superCtor\n      var TempCtor = function () {}\n      TempCtor.prototype = superCtor.prototype\n      ctor.prototype = new TempCtor()\n      ctor.prototype.constructor = ctor\n    }\n  }\n}\n", "'use strict'\n\nconst { Buffer } = require('buffer')\nconst symbol = Symbol.for('BufferList')\n\nfunction BufferList (buf) {\n  if (!(this instanceof BufferList)) {\n    return new BufferList(buf)\n  }\n\n  BufferList._init.call(this, buf)\n}\n\nBufferList._init = function _init (buf) {\n  Object.defineProperty(this, symbol, { value: true })\n\n  this._bufs = []\n  this.length = 0\n\n  if (buf) {\n    this.append(buf)\n  }\n}\n\nBufferList.prototype._new = function _new (buf) {\n  return new BufferList(buf)\n}\n\nBufferList.prototype._offset = function _offset (offset) {\n  if (offset === 0) {\n    return [0, 0]\n  }\n\n  let tot = 0\n\n  for (let i = 0; i < this._bufs.length; i++) {\n    const _t = tot + this._bufs[i].length\n    if (offset < _t || i === this._bufs.length - 1) {\n      return [i, offset - tot]\n    }\n    tot = _t\n  }\n}\n\nBufferList.prototype._reverseOffset = function (blOffset) {\n  const bufferId = blOffset[0]\n  let offset = blOffset[1]\n\n  for (let i = 0; i < bufferId; i++) {\n    offset += this._bufs[i].length\n  }\n\n  return offset\n}\n\nBufferList.prototype.get = function get (index) {\n  if (index > this.length || index < 0) {\n    return undefined\n  }\n\n  const offset = this._offset(index)\n\n  return this._bufs[offset[0]][offset[1]]\n}\n\nBufferList.prototype.slice = function slice (start, end) {\n  if (typeof start === 'number' && start < 0) {\n    start += this.length\n  }\n\n  if (typeof end === 'number' && end < 0) {\n    end += this.length\n  }\n\n  return this.copy(null, 0, start, end)\n}\n\nBufferList.prototype.copy = function copy (dst, dstStart, srcStart, srcEnd) {\n  if (typeof srcStart !== 'number' || srcStart < 0) {\n    srcStart = 0\n  }\n\n  if (typeof srcEnd !== 'number' || srcEnd > this.length) {\n    srcEnd = this.length\n  }\n\n  if (srcStart >= this.length) {\n    return dst || Buffer.alloc(0)\n  }\n\n  if (srcEnd <= 0) {\n    return dst || Buffer.alloc(0)\n  }\n\n  const copy = !!dst\n  const off = this._offset(srcStart)\n  const len = srcEnd - srcStart\n  let bytes = len\n  let bufoff = (copy && dstStart) || 0\n  let start = off[1]\n\n  // copy/slice everything\n  if (srcStart === 0 && srcEnd === this.length) {\n    if (!copy) {\n      // slice, but full concat if multiple buffers\n      return this._bufs.length === 1\n        ? this._bufs[0]\n        : Buffer.concat(this._bufs, this.length)\n    }\n\n    // copy, need to copy individual buffers\n    for (let i = 0; i < this._bufs.length; i++) {\n      this._bufs[i].copy(dst, bufoff)\n      bufoff += this._bufs[i].length\n    }\n\n    return dst\n  }\n\n  // easy, cheap case where it's a subset of one of the buffers\n  if (bytes <= this._bufs[off[0]].length - start) {\n    return copy\n      ? this._bufs[off[0]].copy(dst, dstStart, start, start + bytes)\n      : this._bufs[off[0]].slice(start, start + bytes)\n  }\n\n  if (!copy) {\n    // a slice, we need something to copy in to\n    dst = Buffer.allocUnsafe(len)\n  }\n\n  for (let i = off[0]; i < this._bufs.length; i++) {\n    const l = this._bufs[i].length - start\n\n    if (bytes > l) {\n      this._bufs[i].copy(dst, bufoff, start)\n      bufoff += l\n    } else {\n      this._bufs[i].copy(dst, bufoff, start, start + bytes)\n      bufoff += l\n      break\n    }\n\n    bytes -= l\n\n    if (start) {\n      start = 0\n    }\n  }\n\n  // safeguard so that we don't return uninitialized memory\n  if (dst.length > bufoff) return dst.slice(0, bufoff)\n\n  return dst\n}\n\nBufferList.prototype.shallowSlice = function shallowSlice (start, end) {\n  start = start || 0\n  end = typeof end !== 'number' ? this.length : end\n\n  if (start < 0) {\n    start += this.length\n  }\n\n  if (end < 0) {\n    end += this.length\n  }\n\n  if (start === end) {\n    return this._new()\n  }\n\n  const startOffset = this._offset(start)\n  const endOffset = this._offset(end)\n  const buffers = this._bufs.slice(startOffset[0], endOffset[0] + 1)\n\n  if (endOffset[1] === 0) {\n    buffers.pop()\n  } else {\n    buffers[buffers.length - 1] = buffers[buffers.length - 1].slice(0, endOffset[1])\n  }\n\n  if (startOffset[1] !== 0) {\n    buffers[0] = buffers[0].slice(startOffset[1])\n  }\n\n  return this._new(buffers)\n}\n\nBufferList.prototype.toString = function toString (encoding, start, end) {\n  return this.slice(start, end).toString(encoding)\n}\n\nBufferList.prototype.consume = function consume (bytes) {\n  // first, normalize the argument, in accordance with how Buffer does it\n  bytes = Math.trunc(bytes)\n  // do nothing if not a positive number\n  if (Number.isNaN(bytes) || bytes <= 0) return this\n\n  while (this._bufs.length) {\n    if (bytes >= this._bufs[0].length) {\n      bytes -= this._bufs[0].length\n      this.length -= this._bufs[0].length\n      this._bufs.shift()\n    } else {\n      this._bufs[0] = this._bufs[0].slice(bytes)\n      this.length -= bytes\n      break\n    }\n  }\n\n  return this\n}\n\nBufferList.prototype.duplicate = function duplicate () {\n  const copy = this._new()\n\n  for (let i = 0; i < this._bufs.length; i++) {\n    copy.append(this._bufs[i])\n  }\n\n  return copy\n}\n\nBufferList.prototype.append = function append (buf) {\n  if (buf == null) {\n    return this\n  }\n\n  if (buf.buffer) {\n    // append a view of the underlying ArrayBuffer\n    this._appendBuffer(Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength))\n  } else if (Array.isArray(buf)) {\n    for (let i = 0; i < buf.length; i++) {\n      this.append(buf[i])\n    }\n  } else if (this._isBufferList(buf)) {\n    // unwrap argument into individual BufferLists\n    for (let i = 0; i < buf._bufs.length; i++) {\n      this.append(buf._bufs[i])\n    }\n  } else {\n    // coerce number arguments to strings, since Buffer(number) does\n    // uninitialized memory allocation\n    if (typeof buf === 'number') {\n      buf = buf.toString()\n    }\n\n    this._appendBuffer(Buffer.from(buf))\n  }\n\n  return this\n}\n\nBufferList.prototype._appendBuffer = function appendBuffer (buf) {\n  this._bufs.push(buf)\n  this.length += buf.length\n}\n\nBufferList.prototype.indexOf = function (search, offset, encoding) {\n  if (encoding === undefined && typeof offset === 'string') {\n    encoding = offset\n    offset = undefined\n  }\n\n  if (typeof search === 'function' || Array.isArray(search)) {\n    throw new TypeError('The \"value\" argument must be one of type string, Buffer, BufferList, or Uint8Array.')\n  } else if (typeof search === 'number') {\n    search = Buffer.from([search])\n  } else if (typeof search === 'string') {\n    search = Buffer.from(search, encoding)\n  } else if (this._isBufferList(search)) {\n    search = search.slice()\n  } else if (Array.isArray(search.buffer)) {\n    search = Buffer.from(search.buffer, search.byteOffset, search.byteLength)\n  } else if (!Buffer.isBuffer(search)) {\n    search = Buffer.from(search)\n  }\n\n  offset = Number(offset || 0)\n\n  if (isNaN(offset)) {\n    offset = 0\n  }\n\n  if (offset < 0) {\n    offset = this.length + offset\n  }\n\n  if (offset < 0) {\n    offset = 0\n  }\n\n  if (search.length === 0) {\n    return offset > this.length ? this.length : offset\n  }\n\n  const blOffset = this._offset(offset)\n  let blIndex = blOffset[0] // index of which internal buffer we're working on\n  let buffOffset = blOffset[1] // offset of the internal buffer we're working on\n\n  // scan over each buffer\n  for (; blIndex < this._bufs.length; blIndex++) {\n    const buff = this._bufs[blIndex]\n\n    while (buffOffset < buff.length) {\n      const availableWindow = buff.length - buffOffset\n\n      if (availableWindow >= search.length) {\n        const nativeSearchResult = buff.indexOf(search, buffOffset)\n\n        if (nativeSearchResult !== -1) {\n          return this._reverseOffset([blIndex, nativeSearchResult])\n        }\n\n        buffOffset = buff.length - search.length + 1 // end of native search window\n      } else {\n        const revOffset = this._reverseOffset([blIndex, buffOffset])\n\n        if (this._match(revOffset, search)) {\n          return revOffset\n        }\n\n        buffOffset++\n      }\n    }\n\n    buffOffset = 0\n  }\n\n  return -1\n}\n\nBufferList.prototype._match = function (offset, search) {\n  if (this.length - offset < search.length) {\n    return false\n  }\n\n  for (let searchOffset = 0; searchOffset < search.length; searchOffset++) {\n    if (this.get(offset + searchOffset) !== search[searchOffset]) {\n      return false\n    }\n  }\n  return true\n}\n\n;(function () {\n  const methods = {\n    readDoubleBE: 8,\n    readDoubleLE: 8,\n    readFloatBE: 4,\n    readFloatLE: 4,\n    readBigInt64BE: 8,\n    readBigInt64LE: 8,\n    readBigUInt64BE: 8,\n    readBigUInt64LE: 8,\n    readInt32BE: 4,\n    readInt32LE: 4,\n    readUInt32BE: 4,\n    readUInt32LE: 4,\n    readInt16BE: 2,\n    readInt16LE: 2,\n    readUInt16BE: 2,\n    readUInt16LE: 2,\n    readInt8: 1,\n    readUInt8: 1,\n    readIntBE: null,\n    readIntLE: null,\n    readUIntBE: null,\n    readUIntLE: null\n  }\n\n  for (const m in methods) {\n    (function (m) {\n      if (methods[m] === null) {\n        BufferList.prototype[m] = function (offset, byteLength) {\n          return this.slice(offset, offset + byteLength)[m](0, byteLength)\n        }\n      } else {\n        BufferList.prototype[m] = function (offset = 0) {\n          return this.slice(offset, offset + methods[m])[m](0)\n        }\n      }\n    }(m))\n  }\n}())\n\n// Used internally by the class and also as an indicator of this object being\n// a `BufferList`. It's not possible to use `instanceof BufferList` in a browser\n// environment because there could be multiple different copies of the\n// BufferList class and some `BufferList`s might be `BufferList`s.\nBufferList.prototype._isBufferList = function _isBufferList (b) {\n  return b instanceof BufferList || BufferList.isBufferList(b)\n}\n\nBufferList.isBufferList = function isBufferList (b) {\n  return b != null && b[symbol]\n}\n\nmodule.exports = BufferList\n", "'use strict'\n\nconst DuplexStream = require('readable-stream').Duplex\nconst inherits = require('inherits')\nconst BufferList = require('./BufferList')\n\nfunction BufferListStream (callback) {\n  if (!(this instanceof BufferListStream)) {\n    return new BufferListStream(callback)\n  }\n\n  if (typeof callback === 'function') {\n    this._callback = callback\n\n    const piper = function piper (err) {\n      if (this._callback) {\n        this._callback(err)\n        this._callback = null\n      }\n    }.bind(this)\n\n    this.on('pipe', function onPipe (src) {\n      src.on('error', piper)\n    })\n    this.on('unpipe', function onUnpipe (src) {\n      src.removeListener('error', piper)\n    })\n\n    callback = null\n  }\n\n  BufferList._init.call(this, callback)\n  DuplexStream.call(this)\n}\n\ninherits(BufferListStream, DuplexStream)\nObject.assign(BufferListStream.prototype, BufferList.prototype)\n\nBufferListStream.prototype._new = function _new (callback) {\n  return new BufferListStream(callback)\n}\n\nBufferListStream.prototype._write = function _write (buf, encoding, callback) {\n  this._appendBuffer(buf)\n\n  if (typeof callback === 'function') {\n    callback()\n  }\n}\n\nBufferListStream.prototype._read = function _read (size) {\n  if (!this.length) {\n    return this.push(null)\n  }\n\n  size = Math.min(size, this.length)\n  this.push(this.slice(0, size))\n  this.consume(size)\n}\n\nBufferListStream.prototype.end = function end (chunk) {\n  DuplexStream.prototype.end.call(this, chunk)\n\n  if (this._callback) {\n    this._callback(null, this.slice())\n    this._callback = null\n  }\n}\n\nBufferListStream.prototype._destroy = function _destroy (err, cb) {\n  this._bufs.length = 0\n  this.length = 0\n  cb(err)\n}\n\nBufferListStream.prototype._isBufferList = function _isBufferList (b) {\n  return b instanceof BufferListStream || b instanceof BufferList || BufferListStream.isBufferList(b)\n}\n\nBufferListStream.isBufferList = BufferList.isBufferList\n\nmodule.exports = BufferListStream\nmodule.exports.BufferListStream = BufferListStream\nmodule.exports.BufferList = BufferList\n", "import BufferList from 'bl';\nimport { Transform } from 'stream';\n\nimport Debug from './debug';\nimport Message from './message';\nimport { Packet, HEADER_LENGTH } from './packet';\nimport { ConnectionError } from './errors';\n\n/**\n  IncomingMessageStream\n  Transform received TDS data into individual IncomingMessage streams.\n*/\nclass IncomingMessageStream extends Transform {\n  declare debug: Debug;\n  declare bl: any;\n  declare currentMessage: Message | undefined;\n\n  constructor(debug: Debug) {\n    super({ readableObjectMode: true });\n\n    this.debug = debug;\n\n    this.currentMessage = undefined;\n    this.bl = new BufferList();\n  }\n\n  pause() {\n    super.pause();\n\n    if (this.currentMessage) {\n      this.currentMessage.pause();\n    }\n\n    return this;\n  }\n\n  resume() {\n    super.resume();\n\n    if (this.currentMessage) {\n      this.currentMessage.resume();\n    }\n\n    return this;\n  }\n\n  processBufferedData(callback: (err?: ConnectionError) => void) {\n    // The packet header is always 8 bytes of length.\n    while (this.bl.length >= HEADER_LENGTH) {\n      // Get the full packet length\n      const length = this.bl.readUInt16BE(2);\n      if (length < HEADER_LENGTH) {\n        return callback(new ConnectionError('Unable to process incoming packet'));\n      }\n\n      if (this.bl.length >= length) {\n        const data = this.bl.slice(0, length);\n        this.bl.consume(length);\n\n        // TODO: Get rid of creating `Packet` instances here.\n        const packet = new Packet(data);\n        this.debug.packet('Received', packet);\n        this.debug.data(packet);\n\n        let message = this.currentMessage;\n        if (message === undefined) {\n          this.currentMessage = message = new Message({ type: packet.type(), resetConnection: false });\n          this.push(message);\n        }\n\n        if (packet.isLast()) {\n          // Wait until the current message was fully processed before we\n          // continue processing any remaining messages.\n          message.once('end', () => {\n            this.currentMessage = undefined;\n            this.processBufferedData(callback);\n          });\n          message.end(packet.data());\n          return;\n        } else if (!message.write(packet.data())) {\n          // If too much data is buffering up in the\n          // current message, wait for it to drain.\n          message.once('drain', () => {\n            this.processBufferedData(callback);\n          });\n          return;\n        }\n      } else {\n        break;\n      }\n    }\n\n    // Not enough data to read the next packet. Stop here and wait for\n    // the next call to `_transform`.\n    callback();\n  }\n\n  _transform(chunk: Buffer, _encoding: string, callback: () => void) {\n    this.bl.append(chunk);\n    this.processBufferedData(callback);\n  }\n}\n\nexport default IncomingMessageStream;\nmodule.exports = IncomingMessageStream;\n", "import BufferList from 'bl';\nimport { Duplex } from 'stream';\n\nimport Debug from './debug';\nimport Message from './message';\nimport { Packet, HEADER_LENGTH } from './packet';\n\nclass OutgoingMessageStream extends Duplex {\n  declare packetSize: number;\n  declare debug: Debug;\n  declare bl: any;\n\n  declare currentMessage: Message | undefined;\n\n  constructor(debug: Debug, { packetSize }: { packetSize: number }) {\n    super({ writableObjectMode: true });\n\n    this.packetSize = packetSize;\n    this.debug = debug;\n    this.bl = new BufferList();\n\n    // When the writable side is ended, push `null`\n    // to also end the readable side.\n    this.on('finish', () => {\n      this.push(null);\n    });\n  }\n\n  _write(message: Message, _encoding: string, callback: (err?: Error | null) => void) {\n    const length = this.packetSize - HEADER_LENGTH;\n    let packetNumber = 0;\n\n    this.currentMessage = message;\n    this.currentMessage.on('data', (data: Buffer) => {\n      if (message.ignore) {\n        return;\n      }\n\n      this.bl.append(data);\n\n      while (this.bl.length > length) {\n        const data = this.bl.slice(0, length);\n        this.bl.consume(length);\n\n        // TODO: Get rid of creating `Packet` instances here.\n        const packet = new Packet(message.type);\n        packet.packetId(packetNumber += 1);\n        packet.resetConnection(message.resetConnection);\n        packet.addData(data);\n\n        this.debug.packet('Sent', packet);\n        this.debug.data(packet);\n\n        if (this.push(packet.buffer) === false) {\n          message.pause();\n        }\n      }\n    });\n\n    this.currentMessage.on('end', () => {\n      const data = this.bl.slice();\n      this.bl.consume(data.length);\n\n      // TODO: Get rid of creating `Packet` instances here.\n      const packet = new Packet(message.type);\n      packet.packetId(packetNumber += 1);\n      packet.resetConnection(message.resetConnection);\n      packet.last(true);\n      packet.ignore(message.ignore);\n      packet.addData(data);\n\n      this.debug.packet('Sent', packet);\n      this.debug.data(packet);\n\n      this.push(packet.buffer);\n\n      this.currentMessage = undefined;\n\n      callback();\n    });\n  }\n\n  _read(_size: number) {\n    // If we do have a message, resume it and get data flowing.\n    // Otherwise, there is nothing to do.\n    if (this.currentMessage) {\n      this.currentMessage.resume();\n    }\n  }\n}\n\nexport default OutgoingMessageStream;\nmodule.exports = OutgoingMessageStream;\n", "import DuplexPair from 'native-duplexpair';\n\nimport { Duplex } from 'stream';\nimport * as tls from 'tls';\nimport { Socket } from 'net';\nimport { EventEmitter } from 'events';\n\nimport Debug from './debug';\n\nimport Message from './message';\nimport { TYPE } from './packet';\n\nimport IncomingMessageStream from './incoming-message-stream';\nimport OutgoingMessageStream from './outgoing-message-stream';\n\nclass MessageIO extends EventEmitter {\n  declare socket: Socket;\n  declare debug: Debug;\n\n  declare tlsNegotiationComplete: boolean;\n\n  declare private incomingMessageStream: IncomingMessageStream;\n  declare outgoingMessageStream: OutgoingMessageStream;\n\n  declare securePair?: {\n    cleartext: tls.TLSSocket;\n    encrypted: Duplex;\n  };\n\n  declare incomingMessageIterator: AsyncIterableIterator<Message>;\n\n  constructor(socket: Socket, packetSize: number, debug: Debug) {\n    super();\n\n    this.socket = socket;\n    this.debug = debug;\n\n    this.tlsNegotiationComplete = false;\n\n    this.incomingMessageStream = new IncomingMessageStream(this.debug);\n    this.incomingMessageIterator = this.incomingMessageStream[Symbol.asyncIterator]();\n\n    this.outgoingMessageStream = new OutgoingMessageStream(this.debug, { packetSize: packetSize });\n\n    this.socket.pipe(this.incomingMessageStream);\n    this.outgoingMessageStream.pipe(this.socket);\n  }\n\n  packetSize(...args: [number]) {\n    if (args.length > 0) {\n      const packetSize = args[0];\n      this.debug.log('Packet size changed from ' + this.outgoingMessageStream.packetSize + ' to ' + packetSize);\n      this.outgoingMessageStream.packetSize = packetSize;\n    }\n\n    if (this.securePair) {\n      this.securePair.cleartext.setMaxSendFragment(this.outgoingMessageStream.packetSize);\n    }\n\n    return this.outgoingMessageStream.packetSize;\n  }\n\n  // Negotiate TLS encryption.\n  startTls(credentialsDetails: tls.SecureContextOptions, hostname: string, trustServerCertificate: boolean) {\n    if (!credentialsDetails.maxVersion || !['TLSv1.2', 'TLSv1.1', 'TLSv1'].includes(credentialsDetails.maxVersion)) {\n      credentialsDetails.maxVersion = 'TLSv1.2';\n    }\n\n    const secureContext = tls.createSecureContext(credentialsDetails);\n\n    return new Promise<void>((resolve, reject) => {\n      const duplexpair = new DuplexPair();\n      const securePair = this.securePair = {\n        cleartext: tls.connect({\n          socket: duplexpair.socket1 as Socket,\n          servername: hostname,\n          secureContext: secureContext,\n          rejectUnauthorized: !trustServerCertificate\n        }),\n        encrypted: duplexpair.socket2\n      };\n\n      const onSecureConnect = () => {\n        securePair.encrypted.removeListener('readable', onReadable);\n        securePair.cleartext.removeListener('error', onError);\n        securePair.cleartext.removeListener('secureConnect', onSecureConnect);\n\n        // If we encounter any errors from this point on,\n        // we just forward them to the actual network socket.\n        securePair.cleartext.once('error', (err) => {\n          this.socket.destroy(err);\n        });\n\n        const cipher = securePair.cleartext.getCipher();\n        if (cipher) {\n          this.debug.log('TLS negotiated (' + cipher.name + ', ' + cipher.version + ')');\n        }\n\n        this.emit('secure', securePair.cleartext);\n\n        securePair.cleartext.setMaxSendFragment(this.outgoingMessageStream.packetSize);\n\n        this.outgoingMessageStream.unpipe(this.socket);\n        this.socket.unpipe(this.incomingMessageStream);\n\n        this.socket.pipe(securePair.encrypted);\n        securePair.encrypted.pipe(this.socket);\n\n        securePair.cleartext.pipe(this.incomingMessageStream);\n        this.outgoingMessageStream.pipe(securePair.cleartext);\n\n        this.tlsNegotiationComplete = true;\n\n        resolve();\n      };\n\n      const onError = (err?: Error) => {\n        securePair.encrypted.removeListener('readable', onReadable);\n        securePair.cleartext.removeListener('error', onError);\n        securePair.cleartext.removeListener('secureConnect', onSecureConnect);\n\n        securePair.cleartext.destroy();\n        securePair.encrypted.destroy();\n\n        reject(err);\n      };\n\n      const onReadable = () => {\n        // When there is handshake data on the encrypted stream of the secure pair,\n        // we wrap it into a `PRELOGIN` message and send it to the server.\n        //\n        // For each `PRELOGIN` message we sent we get back exactly one response message\n        // that contains the server's handshake response data.\n        const message = new Message({ type: TYPE.PRELOGIN, resetConnection: false });\n\n        let chunk;\n        while (chunk = securePair.encrypted.read()) {\n          message.write(chunk);\n        }\n        this.outgoingMessageStream.write(message);\n        message.end();\n\n        this.readMessage().then(async (response) => {\n          // Setup readable handler for the next round of handshaking.\n          // If we encounter a `secureConnect` on the cleartext side\n          // of the secure pair, the `readable` handler is cleared\n          // and no further handshake handling will happen.\n          securePair.encrypted.once('readable', onReadable);\n\n          for await (const data of response) {\n            // We feed the server's handshake response back into the\n            // encrypted end of the secure pair.\n            securePair.encrypted.write(data);\n          }\n        }).catch(onError);\n      };\n\n      securePair.cleartext.once('error', onError);\n      securePair.cleartext.once('secureConnect', onSecureConnect);\n      securePair.encrypted.once('readable', onReadable);\n    });\n  }\n\n  // TODO listen for 'drain' event when socket.write returns false.\n  // TODO implement incomplete request cancelation (2.2.1.6)\n  sendMessage(packetType: number, data?: Buffer, resetConnection?: boolean) {\n    const message = new Message({ type: packetType, resetConnection: resetConnection });\n    message.end(data);\n    this.outgoingMessageStream.write(message);\n    return message;\n  }\n\n  /**\n   * Read the next incoming message from the socket.\n   */\n  async readMessage(): Promise<Message> {\n    const result = await this.incomingMessageIterator.next();\n\n    if (result.done) {\n      throw new Error('unexpected end of message stream');\n    }\n\n    return result.value;\n  }\n}\n\nexport default MessageIO;\nmodule.exports = MessageIO;\n", "type Encoding = 'utf-8' | 'CP437' | 'CP850' | 'CP874' | 'CP932' | 'CP936' | 'CP949' | 'CP950' | 'CP1250' | 'CP1251' | 'CP1252' | 'CP1253' | 'CP1254' | 'CP1255' | 'CP1256' | 'CP1257' | 'CP1258';\n\n// http://technet.microsoft.com/en-us/library/aa176553(v=sql.80).aspx\nexport const codepageByLanguageId: { [key: number]: Encoding } = {\n  // Arabic_*\n  [0x0401]: 'CP1256',\n\n  // Chinese_Taiwan_Stroke_*\n  // Chinese_Traditional_Stroke_Count_*\n  // Chinese_Taiwan_Bopomofo_*\n  // Chinese_Traditional_Bopomofo_*\n  [0x0404]: 'CP950',\n\n  // Czech_*\n  [0x0405]: 'CP1250',\n\n  // Danish_Greenlandic_*\n  // Danish_Norwegian_*\n  [0x0406]: 'CP1252',\n\n  // Greek_*\n  [0x0408]: 'CP1253',\n\n  // Latin1_General_*\n  [0x0409]: 'CP1252',\n\n  // Traditional_Spanish_*\n  [0x040A]: 'CP1252',\n\n  // Finnish_Swedish_*\n  [0x040B]: 'CP1252',\n\n  // French_*\n  [0x040C]: 'CP1252',\n\n  // Hebrew_*\n  [0x040D]: 'CP1255',\n\n  // Hungarian_*\n  // Hungarian_Technical_*\n  [0x040E]: 'CP1250',\n\n  // Icelandic_*\n  [0x040F]: 'CP1252',\n\n  // Japanese_*\n  // Japanese_XJIS_*\n  // Japanese_Unicode_*\n  // Japanese_Bushu_Kakusu_*\n  [0x0411]: 'CP932',\n\n  // Korean_*\n  // Korean_Wansung_*\n  [0x0412]: 'CP949',\n\n  // Norwegian_*\n  [0x0414]: 'CP1252',\n\n  // Polish_*\n  [0x0415]: 'CP1250',\n\n  // Romansh_*\n  [0x0417]: 'CP1252',\n\n  // Romanian_*\n  [0x0418]: 'CP1250',\n\n  // Cyrillic_*\n  [0x0419]: 'CP1251',\n\n  // Croatian_*\n  [0x041A]: 'CP1250',\n\n  // Slovak_*\n  [0x041B]: 'CP1250',\n\n  // Albanian_*\n  [0x041C]: 'CP1250',\n\n  // Thai_*\n  [0x041E]: 'CP874',\n\n  // Turkish_*\n  [0x041F]: 'CP1254',\n\n  // Urdu_*\n  [0x0420]: 'CP1256',\n\n  // Ukrainian_*\n  [0x0422]: 'CP1251',\n\n  // Slovenian_*\n  [0x0424]: 'CP1250',\n\n  // Estonian_*\n  [0x0425]: 'CP1257',\n\n  // Latvian_*\n  [0x0426]: 'CP1257',\n\n  // Lithuanian_*\n  [0x0427]: 'CP1257',\n\n  // Persian_*\n  [0x0429]: 'CP1256',\n\n  // Vietnamese_*\n  [0x042A]: 'CP1258',\n\n  // Azeri_Latin_*\n  [0x042C]: 'CP1254',\n\n  // Upper_Sorbian_*\n  [0x042E]: 'CP1252',\n\n  // Macedonian_FYROM_*\n  [0x042F]: 'CP1251',\n\n  // Sami_Norway_*\n  [0x043B]: 'CP1252',\n\n  // Kazakh_*\n  [0x043F]: 'CP1251',\n\n  // Turkmen_*\n  [0x0442]: 'CP1250',\n\n  // Uzbek_Latin_*\n  [0x0443]: 'CP1254',\n\n  // Tatar_*\n  [0x0444]: 'CP1251',\n\n  // Welsh_*\n  [0x0452]: 'CP1252',\n\n  // Frisian_*\n  [0x0462]: 'CP1252',\n\n  // Bashkir_*\n  [0x046D]: 'CP1251',\n\n  // Mapudungan_*\n  [0x047A]: 'CP1252',\n\n  // Mohawk_*\n  [0x047C]: 'CP1252',\n\n  // Breton_*\n  [0x047E]: 'CP1252',\n\n  // Uighur_*\n  [0x0480]: 'CP1256',\n\n  // Corsican_*\n  [0x0483]: 'CP1252',\n\n  // Yakut_*\n  [0x0485]: 'CP1251',\n\n  // Dari_*\n  [0x048C]: 'CP1256',\n\n  // Chinese_PRC_*\n  // Chinese_Simplified_Pinyin_*\n  // Chinese_PRC_Stroke_*\n  // Chinese_Simplified_Stroke_Order_*\n  [0x0804]: 'CP936',\n\n  // Serbian_Latin_*\n  [0x081A]: 'CP1250',\n\n  // Azeri_Cyrillic_*\n  [0x082C]: 'CP1251',\n\n  // Sami_Sweden_Finland_*\n  [0x083B]: 'CP1252',\n\n  // Tamazight_*\n  [0x085F]: 'CP1252',\n\n  // Chinese_Hong_Kong_Stroke_*\n  [0x0C04]: 'CP950',\n\n  // Modern_Spanish_*\n  [0x0C0A]: 'CP1252',\n\n  // Serbian_Cyrillic_*\n  [0x0C1A]: 'CP1251',\n\n  // Chinese_Traditional_Pinyin_*\n  // Chinese_Traditional_Stroke_Order_*\n  [0x1404]: 'CP950',\n\n  // Bosnian_Latin_*\n  [0x141A]: 'CP1250',\n\n  // Bosnian_Cyrillic_*\n  [0x201A]: 'CP1251',\n\n  // German\n  // German_PhoneBook_*\n  [0x0407]: 'CP1252',\n\n  // Georgian_Modern_Sort_*\n  [0x0437]: 'CP1252'\n};\n\nexport const codepageBySortId: { [key: number]: Encoding } = {\n  [30]: 'CP437', // SQL_Latin1_General_CP437_BIN\n  [31]: 'CP437', // SQL_Latin1_General_CP437_CS_AS\n  [32]: 'CP437', // SQL_Latin1_General_CP437_CI_AS\n  [33]: 'CP437', // SQL_Latin1_General_Pref_CP437_CI_AS\n  [34]: 'CP437', // SQL_Latin1_General_CP437_CI_AI\n  [40]: 'CP850', // SQL_Latin1_General_CP850_BIN\n  [41]: 'CP850', // SQL_Latin1_General_CP850_CS_AS\n  [42]: 'CP850', // SQL_Latin1_General_CP850_CI_AS\n  [43]: 'CP850', // SQL_Latin1_General_Pref_CP850_CI_AS\n  [44]: 'CP850', // SQL_Latin1_General_CP850_CI_AI\n  [49]: 'CP850', // SQL_1xCompat_CP850_CI_AS\n  [51]: 'CP1252', // SQL_Latin1_General_Cp1_CS_AS_KI_WI\n  [52]: 'CP1252', // SQL_Latin1_General_Cp1_CI_AS_KI_WI\n  [53]: 'CP1252', // SQL_Latin1_General_Pref_Cp1_CI_AS_KI_WI\n  [54]: 'CP1252', // SQL_Latin1_General_Cp1_CI_AI_KI_WI\n  [55]: 'CP850', // SQL_AltDiction_CP850_CS_AS\n  [56]: 'CP850', // SQL_AltDiction_Pref_CP850_CI_AS\n  [57]: 'CP850', // SQL_AltDiction_CP850_CI_AI\n  [58]: 'CP850', // SQL_Scandinavian_Pref_CP850_CI_AS\n  [59]: 'CP850', // SQL_Scandinavian_CP850_CS_AS\n  [60]: 'CP850', // SQL_Scandinavian_CP850_CI_AS\n  [61]: 'CP850', // SQL_AltDiction_CP850_CI_AS\n  [80]: 'CP1250', // SQL_Latin1_General_1250_BIN\n  [81]: 'CP1250', // SQL_Latin1_General_CP1250_CS_AS\n  [82]: 'CP1250', // SQL_Latin1_General_Cp1250_CI_AS_KI_WI\n  [83]: 'CP1250', // SQL_Czech_Cp1250_CS_AS_KI_WI\n  [84]: 'CP1250', // SQL_Czech_Cp1250_CI_AS_KI_WI\n  [85]: 'CP1250', // SQL_Hungarian_Cp1250_CS_AS_KI_WI\n  [86]: 'CP1250', // SQL_Hungarian_Cp1250_CI_AS_KI_WI\n  [87]: 'CP1250', // SQL_Polish_Cp1250_CS_AS_KI_WI\n  [88]: 'CP1250', // SQL_Polish_Cp1250_CI_AS_KI_WI\n  [89]: 'CP1250', // SQL_Romanian_Cp1250_CS_AS_KI_WI\n  [90]: 'CP1250', // SQL_Romanian_Cp1250_CI_AS_KI_WI\n  [91]: 'CP1250', // SQL_Croatian_Cp1250_CS_AS_KI_WI\n  [92]: 'CP1250', // SQL_Croatian_Cp1250_CI_AS_KI_WI\n  [93]: 'CP1250', // SQL_Slovak_Cp1250_CS_AS_KI_WI\n  [94]: 'CP1250', // SQL_Slovak_Cp1250_CI_AS_KI_WI\n  [95]: 'CP1250', // SQL_Slovenian_Cp1250_CS_AS_KI_WI\n  [96]: 'CP1250', // SQL_Slovenian_Cp1250_CI_AS_KI_WI\n  [104]: 'CP1251', // SQL_Latin1_General_1251_BIN\n  [105]: 'CP1251', // SQL_Latin1_General_CP1251_CS_AS\n  [106]: 'CP1251', // SQL_Latin1_General_CP1251_CI_AS\n  [107]: 'CP1251', // SQL_Ukrainian_Cp1251_CS_AS_KI_WI\n  [108]: 'CP1251', // SQL_Ukrainian_Cp1251_CI_AS_KI_WI\n  [112]: 'CP1253', // SQL_Latin1_General_1253_BIN\n  [113]: 'CP1253', // SQL_Latin1_General_CP1253_CS_AS\n  [114]: 'CP1253', // SQL_Latin1_General_CP1253_CI_AS\n  [120]: 'CP1253', // SQL_MixDiction_CP1253_CS_AS\n  [121]: 'CP1253', // SQL_AltDiction_CP1253_CS_AS\n  [122]: 'CP1253', // SQL_AltDiction2_CP1253_CS_AS\n  [124]: 'CP1253', // SQL_Latin1_General_CP1253_CI_AI\n  [128]: 'CP1254', // SQL_Latin1_General_1254_BIN\n  [129]: 'CP1254', // SQL_Latin1_General_Cp1254_CS_AS_KI_WI\n  [130]: 'CP1254', // SQL_Latin1_General_Cp1254_CI_AS_KI_WI\n  [136]: 'CP1255', // SQL_Latin1_General_1255_BIN\n  [137]: 'CP1255', // SQL_Latin1_General_CP1255_CS_AS\n  [138]: 'CP1255', // SQL_Latin1_General_CP1255_CI_AS\n  [144]: 'CP1256', // SQL_Latin1_General_1256_BIN\n  [145]: 'CP1256', // SQL_Latin1_General_CP1256_CS_AS\n  [146]: 'CP1256', // SQL_Latin1_General_CP1256_CI_AS\n  [152]: 'CP1257', // SQL_Latin1_General_1257_BIN\n  [153]: 'CP1257', // SQL_Latin1_General_CP1257_CS_AS\n  [154]: 'CP1257', // SQL_Latin1_General_CP1257_CI_AS\n  [155]: 'CP1257', // SQL_Estonian_Cp1257_CS_AS_KI_WI\n  [156]: 'CP1257', // SQL_Estonian_Cp1257_CI_AS_KI_WI\n  [157]: 'CP1257', // SQL_Latvian_Cp1257_CS_AS_KI_WI\n  [158]: 'CP1257', // SQL_Latvian_Cp1257_CI_AS_KI_WI\n  [159]: 'CP1257', // SQL_Lithuanian_Cp1257_CS_AS_KI_WI\n  [160]: 'CP1257', // SQL_Lithuanian_Cp1257_CI_AS_KI_WI\n  [183]: 'CP1252', // SQL_Danish_Pref_Cp1_CI_AS_KI_WI\n  [184]: 'CP1252', // SQL_SwedishPhone_Pref_Cp1_CI_AS_KI_WI\n  [185]: 'CP1252', // SQL_SwedishStd_Pref_Cp1_CI_AS_KI_WI\n  [186]: 'CP1252' // SQL_Icelandic_Pref_Cp1_CI_AS_KI_WI\n};\n\nexport const Flags = {\n  IGNORE_CASE: 1 << 0,\n  IGNORE_ACCENT: 1 << 1,\n  IGNORE_KANA: 1 << 2,\n  IGNORE_WIDTH: 1 << 3,\n  BINARY: 1 << 4,\n  BINARY2: 1 << 5,\n  UTF8: 1 << 6,\n};\n\nexport class Collation {\n  declare readonly lcid: number;\n  declare readonly flags: number;\n  declare readonly version: number;\n  declare readonly sortId: number;\n  declare readonly codepage: Encoding | undefined;\n\n  declare private buffer: Buffer | undefined;\n\n  static fromBuffer(buffer: Buffer, offset = 0) {\n    let lcid = (buffer[offset + 2] & 0x0F) << 16;\n    lcid |= buffer[offset + 1] << 8;\n    lcid |= buffer[offset + 0];\n\n    let flags = (buffer[offset + 3] & 0x0F) << 4;\n    flags |= (buffer[offset + 2] & 0xF0) >>> 4;\n\n    const version = (buffer[offset + 3] & 0xF0) >>> 4;\n\n    const sortId = buffer[offset + 4];\n\n    return new this(lcid, flags, version, sortId);\n  }\n\n  constructor(lcid: number, flags: number, version: number, sortId: number) {\n    this.buffer = undefined;\n\n    this.lcid = lcid;\n    this.flags = flags;\n    this.version = version;\n    this.sortId = sortId;\n\n    if (this.flags & Flags.UTF8) {\n      this.codepage = 'utf-8';\n    } else if (this.sortId) {\n      this.codepage = codepageBySortId[this.sortId];\n    } else {\n      // The last 16 bits of the LCID are the language id.\n      // The first 4 bits define additional sort orders.\n      const languageId = this.lcid & 0xFFFF;\n      this.codepage = codepageByLanguageId[languageId];\n    }\n  }\n\n  toBuffer(): Buffer {\n    if (this.buffer) {\n      return this.buffer;\n    }\n\n    this.buffer = Buffer.alloc(5);\n\n    this.buffer[0] = this.lcid & 0xFF;\n    this.buffer[1] = (this.lcid >>> 8) & 0xFF;\n    this.buffer[2] = ((this.lcid >>> 16) & 0x0F) | ((this.flags & 0x0F) << 4);\n    this.buffer[3] = ((this.flags & 0xF0) >>> 4) | ((this.version & 0x0F) << 4);\n    this.buffer[4] = this.sortId & 0xFF;\n\n    return this.buffer;\n  }\n}\n", "import { type DataType } from '../data-type';\n\nconst Null: DataType = {\n  id: 0x1F,\n  type: 'NULL',\n  name: 'Null',\n\n  declaration() {\n    throw new Error('not implemented');\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default Null;\nmodule.exports = Null;\n", "import { type DataType } from '../data-type';\n\nconst IntN: DataType = {\n  id: 0x26,\n  type: 'INTN',\n  name: 'IntN',\n\n  declaration() {\n    throw new Error('not implemented');\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default IntN;\nmodule.exports = IntN;\n", "import { type DataType } from '../data-type';\nimport IntN from './intn';\n\nconst DATA_LENGTH = Buffer.from([0x01]);\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst TinyInt: DataType = {\n  id: 0x30,\n  type: 'INT1',\n  name: 'TinyInt',\n\n  declaration: function() {\n    return 'tinyint';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([IntN.id, 0x01]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = Buffer.alloc(1);\n    buffer.writeUInt8(Number(parameter.value), 0);\n    yield buffer;\n  },\n\n  validate: function(value): number | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'number') {\n      value = Number(value);\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n\n    if (value < 0 || value > 255) {\n      throw new TypeError('Value must be between 0 and 255, inclusive.');\n    }\n\n    return value | 0;\n  }\n};\n\nexport default TinyInt;\nmodule.exports = TinyInt;\n", "import { type DataType } from '../data-type';\n\nconst BitN: DataType = {\n  id: 0x68,\n  type: 'BITN',\n  name: 'BitN',\n\n  declaration() {\n    throw new Error('not implemented');\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  * generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default BitN;\nmodule.exports = BitN;\n", "import { type DataType } from '../data-type';\nimport BitN from './bitn';\n\nconst DATA_LENGTH = Buffer.from([0x01]);\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst Bit: DataType = {\n  id: 0x32,\n  type: 'BIT',\n  name: 'Bit',\n\n  declaration: function() {\n    return 'bit';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([BitN.id, 0x01]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield parameter.value ? Buffer.from([0x01]) : Buffer.from([0x00]);\n  },\n\n  validate: function(value): null | boolean {\n    if (value == null) {\n      return null;\n    }\n    if (value) {\n      return true;\n    } else {\n      return false;\n    }\n  }\n};\n\nexport default Bit;\nmodule.exports = Bit;\n", "import { type DataType } from '../data-type';\nimport IntN from './intn';\n\nconst DATA_LENGTH = Buffer.from([0x02]);\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst SmallInt: DataType = {\n  id: 0x34,\n  type: 'INT2',\n  name: 'SmallInt',\n\n  declaration: function() {\n    return 'smallint';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([IntN.id, 0x02]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = Buffer.alloc(2);\n    buffer.writeInt16LE(Number(parameter.value), 0);\n    yield buffer;\n  },\n\n  validate: function(value): null | number {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'number') {\n      value = Number(value);\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n\n    if (value < -32768 || value > 32767) {\n      throw new TypeError('Value must be between -32768 and 32767, inclusive.');\n    }\n\n    return value | 0;\n  }\n};\n\nexport default SmallInt;\nmodule.exports = SmallInt;\n", "import { type DataType } from '../data-type';\nimport IntN from './intn';\n\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x04]);\n\nconst Int: DataType = {\n  id: 0x38,\n  type: 'INT4',\n  name: 'Int',\n\n  declaration: function() {\n    return 'int';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([IntN.id, 0x04]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32LE(Number(parameter.value), 0);\n    yield buffer;\n  },\n\n  validate: function(value): number | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'number') {\n      value = Number(value);\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n\n    if (value < -2147483648 || value > 2147483647) {\n      throw new TypeError('Value must be between -2147483648 and 2147483647, inclusive.');\n    }\n\n    return value | 0;\n  }\n};\n\nexport default Int;\nmodule.exports = Int;\n", "import { type DataType } from '../data-type';\n\nconst DateTimeN: DataType = {\n  id: 0x6F,\n  type: 'DATETIMN',\n  name: 'DateTimeN',\n\n  declaration() {\n    throw new Error('not implemented');\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default DateTimeN;\nmodule.exports = DateTimeN;\n", "import { type DataType } from '../data-type';\nimport DateTimeN from './datetimen';\n\nconst EPOCH_DATE = new Date(1900, 0, 1);\nconst UTC_EPOCH_DATE = new Date(Date.UTC(1900, 0, 1));\n\nconst DATA_LENGTH = Buffer.from([0x04]);\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst SmallDateTime: DataType = {\n  id: 0x3A,\n  type: 'DATETIM4',\n  name: 'SmallDateTime',\n\n  declaration: function() {\n    return 'smalldatetime';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([DateTimeN.id, 0x04]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  generateParameterData: function*(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = Buffer.alloc(4);\n\n    let days: number, dstDiff: number, minutes: number;\n    if (options.useUTC) {\n      days = Math.floor((parameter.value.getTime() - UTC_EPOCH_DATE.getTime()) / (1000 * 60 * 60 * 24));\n      minutes = (parameter.value.getUTCHours() * 60) + parameter.value.getUTCMinutes();\n    } else {\n      dstDiff = -(parameter.value.getTimezoneOffset() - EPOCH_DATE.getTimezoneOffset()) * 60 * 1000;\n      days = Math.floor((parameter.value.getTime() - EPOCH_DATE.getTime() + dstDiff) / (1000 * 60 * 60 * 24));\n      minutes = (parameter.value.getHours() * 60) + parameter.value.getMinutes();\n    }\n\n    buffer.writeUInt16LE(days, 0);\n    buffer.writeUInt16LE(minutes, 2);\n\n    yield buffer;\n  },\n\n  validate: function(value, collation, options): null | Date {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    value = value as Date;\n\n    let year, month, date;\n    if (options && options.useUTC) {\n      year = value.getUTCFullYear();\n      month = value.getUTCMonth();\n      date = value.getUTCDate();\n    } else {\n      year = value.getFullYear();\n      month = value.getMonth();\n      date = value.getDate();\n    }\n\n    if (year < 1900 || year > 2079) {\n      throw new TypeError('Out of range.');\n    }\n\n    if (year === 2079) {\n      // Month is 0-indexed, i.e. Jan = 0, Dec = 11\n      if (month > 4 || (month === 4 && date > 6)) {\n        throw new TypeError('Out of range.');\n      }\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\n\nexport default SmallDateTime;\nmodule.exports = SmallDateTime;\n", "import { type DataType } from '../data-type';\n\nconst FloatN: DataType = {\n  id: 0x6D,\n  type: 'FLTN',\n  name: 'FloatN',\n\n  declaration() {\n    throw new Error('not implemented');\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default FloatN;\nmodule.exports = FloatN;\n", "import { type DataType } from '../data-type';\nimport FloatN from './floatn';\n\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x04]);\n\nconst Real: DataType = {\n  id: 0x3B,\n  type: 'FLT4',\n  name: 'Real',\n\n  declaration: function() {\n    return 'real';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([FloatN.id, 0x04]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = Buffer.alloc(4);\n    buffer.writeFloatLE(parseFloat(parameter.value), 0);\n    yield buffer;\n  },\n\n  validate: function(value): null | number {\n    if (value == null) {\n      return null;\n    }\n    value = parseFloat(value);\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n    return value;\n  }\n};\n\nexport default Real;\nmodule.exports = Real;\n", "import { type DataType } from '../data-type';\n\nconst MoneyN: DataType = {\n  id: 0x6E,\n  type: 'MONEYN',\n  name: 'MoneyN',\n\n  declaration() {\n    throw new Error('not implemented');\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default MoneyN;\nmodule.exports = MoneyN;\n", "import { type DataType } from '../data-type';\nimport MoneyN from './moneyn';\n\nconst SHIFT_LEFT_32 = (1 << 16) * (1 << 16);\nconst SHIFT_RIGHT_32 = 1 / SHIFT_LEFT_32;\n\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x08]);\n\nconst Money: DataType = {\n  id: 0x3C,\n  type: 'MONEY',\n  name: 'Money',\n\n  declaration: function() {\n    return 'money';\n  },\n\n  generateTypeInfo: function() {\n    return Buffer.from([MoneyN.id, 0x08]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value * 10000;\n\n    const buffer = Buffer.alloc(8);\n    buffer.writeInt32LE(Math.floor(value * SHIFT_RIGHT_32), 0);\n    buffer.writeInt32LE(value & -1, 4);\n    yield buffer;\n  },\n\n  validate: function(value): number | null {\n    if (value == null) {\n      return null;\n    }\n    value = parseFloat(value);\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n    // money： -922337203685477.5808 to 922337203685477.5807\n    // in javascript -922337203685477.5808 === -922337203685477.6\n    //                922337203685477.5807 === 922337203685477.6\n    // javascript number doesn't have enough precision.\n    if (value < -922337203685477.6 || value > 922337203685477.6) {\n      throw new TypeError('Value must be between -922337203685477.5808 and 922337203685477.5807, inclusive.');\n    }\n\n    return value;\n  }\n};\n\nexport default Money;\nmodule.exports = Money;\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nfunction createErrorType(name, init, superErrorClass = Error) {\n    function JsJodaException(message) {\n        if (!Error.captureStackTrace) {\n            this.stack = (new Error()).stack;\n        } else {\n            Error.captureStackTrace(this, this.constructor);\n        }\n        this.message = message;\n        init && init.apply(this, arguments);\n        this.toString = function () {\n            return `${this.name}: ${this.message}`;\n        };\n    }\n    JsJodaException.prototype = Object.create(superErrorClass.prototype);\n    JsJodaException.prototype.name = name;\n    JsJodaException.prototype.constructor = JsJodaException;\n    return JsJodaException;\n}\n\nexport const DateTimeException = createErrorType('DateTimeException', messageWithCause);\nexport const DateTimeParseException = createErrorType('DateTimeParseException', messageForDateTimeParseException);\nexport const UnsupportedTemporalTypeException = createErrorType('UnsupportedTemporalTypeException', null, DateTimeException);\nexport const ArithmeticException = createErrorType('ArithmeticException');\nexport const IllegalArgumentException = createErrorType('IllegalArgumentException');\nexport const IllegalStateException = createErrorType('IllegalStateException');\nexport const NullPointerException = createErrorType('NullPointerException');\n\nfunction messageWithCause(message, cause = null) {\n    let msg = message || this.name;\n    if (cause !== null && cause instanceof Error) {\n        msg += `\\n-------\\nCaused by: ${cause.stack}\\n-------\\n`;\n    }\n    this.message = msg;\n}\n\nfunction messageForDateTimeParseException(message, text = '', index = 0, cause = null) {\n    let msg = message || this.name;\n    msg += `: ${text}, at index: ${index}`;\n    if (cause !== null && cause instanceof Error) {\n        msg += `\\n-------\\nCaused by: ${cause.stack}\\n-------\\n`;\n    }\n    this.message = msg;\n    this.parsedString = () => {\n        return text;\n    };\n    this.errorIndex = () => {\n        return index;\n    };\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nimport { NullPointerException, IllegalArgumentException } from './errors';\n\n/**\n * @private\n *\n * @param assertion\n * @param msg\n * @param error\n */\nexport function assert(assertion, msg, error) {\n    if(!assertion){\n        if (error) {\n            throw new error(msg);\n        } else {\n            throw new Error(msg);\n        }\n    }\n}\n\n/**\n * @private\n *\n * @param value\n * @param parameterName\n * @returns {*}\n */\nexport function requireNonNull(value, parameterName) {\n    if (value == null) {\n        throw new NullPointerException(`${parameterName} must not be null`);\n    }\n    return value;\n}\n\n/**\n * @private\n *\n * @param value\n * @param _class\n * @param parameterName\n * @returns {_class}\n */\nexport function requireInstance(value, _class, parameterName) {\n    if (!(value instanceof _class)) {\n        throw new IllegalArgumentException(`${parameterName} must be an instance of ${_class.name ? _class.name : _class}${value && value.constructor && value.constructor.name ? `, but is ${value.constructor.name}` : ''}`);\n    }\n    return value;\n}\n\n/**\n * @private\n *\n * @param methodName\n */\nexport function abstractMethodFail(methodName){\n    throw new TypeError(`abstract method \"${methodName}\" is not implemented`);\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nimport { ArithmeticException } from './errors';\n\nexport const MAX_SAFE_INTEGER = 9007199254740991;\nexport const MIN_SAFE_INTEGER = -9007199254740991;\n\n/**\n * Math helper with static function for integer operations\n */\nexport class MathUtil {\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    static intDiv(x, y) {\n        let r = x/y;\n        r = MathUtil.roundDown(r);\n        return MathUtil.safeZero(r);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    static intMod(x, y) {\n        let r = x - MathUtil.intDiv(x, y) * y;\n        r = MathUtil.roundDown(r);\n        return MathUtil.safeZero(r);\n    }\n\n    /**\n     *\n     * @param {number} r\n     * @returns {number}\n     */\n    static roundDown(r){\n        if (r < 0) {\n            return Math.ceil(r);\n        } else {\n            return Math.floor(r);\n        }\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    static floorDiv(x, y){\n        const r = Math.floor(x / y);\n        return MathUtil.safeZero(r);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    static floorMod(x, y){\n        const r = x - MathUtil.floorDiv(x, y) * y;\n        return MathUtil.safeZero(r);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    static safeAdd(x, y) {\n        MathUtil.verifyInt(x);\n        MathUtil.verifyInt(y);\n        if (x === 0) {\n            return MathUtil.safeZero(y);\n        }\n        if (y === 0) {\n            return MathUtil.safeZero(x);\n        }\n        const r = MathUtil.safeToInt(x + y);\n        if (r === x || r === y) {\n            throw new ArithmeticException('Invalid addition beyond MAX_SAFE_INTEGER!');\n        }\n        return r;\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    static safeSubtract(x, y) {\n        MathUtil.verifyInt(x);\n        MathUtil.verifyInt(y);\n        if (x === 0 && y === 0) {\n            return 0;\n        } else if (x === 0) {\n            return MathUtil.safeZero(-1 * y);\n        } else if (y === 0) {\n            return MathUtil.safeZero(x);\n        }\n        return MathUtil.safeToInt(x - y);\n    }\n\n    /**\n     *\n     * @param {number} x\n     * @param {number} y\n     * @returns {number}\n     */\n    static safeMultiply(x, y) {\n        MathUtil.verifyInt(x);\n        MathUtil.verifyInt(y);\n        if (x === 1) {\n            return MathUtil.safeZero(y);\n        }\n        if (y === 1) {\n            return MathUtil.safeZero(x);\n        }\n        if (x === 0 || y === 0) {\n            return 0;\n        }\n        const r = MathUtil.safeToInt(x * y);\n        if (r / y !== x || (x === MIN_SAFE_INTEGER && y === -1) || (y === MIN_SAFE_INTEGER && x === -1)) {\n            throw new ArithmeticException(`Multiplication overflows: ${x} * ${y}`);\n        }\n        return r;\n    }\n\n    /**\n     *\n     * @param {number} value\n     * @returns {number}\n     */\n    static parseInt(value) {\n        const r = parseInt(value);\n        return MathUtil.safeToInt(r);\n    }\n\n    /**\n     *\n     * @param {number} value\n     * @returns {number}\n     */\n    static safeToInt(value) {\n        MathUtil.verifyInt(value);\n        return MathUtil.safeZero(value);\n    }\n\n    /**\n     *\n     * @param {number} value\n     */\n    static verifyInt(value){\n        if (value == null) {\n            throw new ArithmeticException(`Invalid value: '${value}', using null or undefined as argument`);\n        }\n        if (isNaN(value)) {\n            throw new ArithmeticException('Invalid int value, using NaN as argument');\n        }\n        if ((value % 1) !== 0) {\n            throw new ArithmeticException(`Invalid value: '${value}' is a float`);\n        }\n        if (value > MAX_SAFE_INTEGER || value < MIN_SAFE_INTEGER) {\n            throw new ArithmeticException(`Calculation overflows an int: ${value}`);\n        }\n    }\n\n    /**\n     * convert -0 to 0 and int as string to a number ( '1' -> 1 )\n     *\n     * @param {number} value\n     * @returns {number}\n     */\n    static safeZero(value){\n        return value === 0 ? 0 : +value;\n    }\n\n    /**\n     * Compares two Numbers.\n     *\n     * @param {number} a  the first value\n     * @param {number} b  the second value\n     * @return {number} the result\n     */\n    static compareNumbers(a, b) {\n        if (a < b) {\n            return -1;\n        }\n        if (a > b) {\n            return 1;\n        }\n        return 0;\n    }\n\n    // convert to small integer for v8 optimisation\n    static smi(int) {\n        return ((int >>> 1) & 0x40000000) | (int & 0xBFFFFFFF);\n    }\n\n    // calculate 32 bit hash of a number and convert to SMI\n    static hash(number) {\n        if (number !== number || number === Infinity) {\n            return 0;\n        }\n        let result = number;\n        while (number > 0xFFFFFFFF) {\n            number /= 0xFFFFFFFF;\n            result ^= number;\n        }\n        return MathUtil.smi(result);\n    }\n\n    // default hashCode calculation for a number sequence as mentioned by Joshua Bloch\n    static hashCode(...numbers) {\n        let result = 17;\n        for (const n of numbers) {\n            result = (result << 5) - result + MathUtil.hash(n);\n        }\n        return MathUtil.hash(result);\n    }\n}\n\nMathUtil.MAX_SAFE_INTEGER = MAX_SAFE_INTEGER;\nMathUtil.MIN_SAFE_INTEGER = MIN_SAFE_INTEGER;\n\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n/***\n * Base class for a pseudo enum\n */\nexport class Enum {\n    constructor(name){\n        this._name = name;\n    }\n\n    equals(other){\n        return this === other;\n    }\n\n    toString() {\n        return this._name;\n    }\n\n    /**\n     * toJSON() use by JSON.stringify\n     * delegates to toString()\n     *\n     * @return {string}\n     */\n    toJSON() {\n        return this.toString();\n    }\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { abstractMethodFail } from '../assert';\n\n/**\n * Framework-level interface defining an amount of time, such as\n * \"6 hours\", \"8 days\" or \"2 years and 3 months\".\n *\n * This is the base interface type for amounts of time.\n * An amount is distinct from a date or time-of-day in that it is not tied\n * to any specific point on the time-line.\n *\n * The amount can be thought of as a {@link Map} of {@link TemporalUnit} to\n * `long`, exposed via {@link getUnits} and {@link get}.\n * A simple case might have a single unit-value pair, such as \"6 hours\".\n * A more complex case may have multiple unit-value pairs, such as\n * \"7 years, 3 months and 5 days\".\n *\n * There are two common implementations.\n * {@link Period} is a date-based implementation, storing years, months and days.\n * {@link Duration} is a time-based implementation, storing seconds and nanoseconds,\n * but providing some access using other duration based units such as minutes,\n * hours and fixed 24-hour days.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link Period} and {@link Duration}.\n *\n * @interface\n */\nexport class TemporalAmount {\n    /**\n     * Returns the value of the requested unit.\n     * The units returned from {@link getUnits} uniquely define the\n     * value of the {@link TemporalAmount}.  A value must be returned\n     * for each unit listed in {@link getUnits}.\n     *\n     * @implSpec\n     * Implementations may declare support for units not listed by {@link getUnits}.\n     * Typically, the implementation would define additional units\n     * as conversions for the convenience of developers.\n     *\n     * @param {TemporalUnit} unit - the {@link TemporalUnit} for which to return the value\n     * @return {number} the long value of the unit\n     * @throws DateTimeException if a value for the unit cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the {@link unit} is not supported\n     */\n    // eslint-disable-next-line no-unused-vars\n    get(unit) {\n        abstractMethodFail('get');\n    }\n    \n    /**\n     * Returns the list of units uniquely defining the value of this TemporalAmount.\n     * The list of {@link TemporalUnits} is defined by the implementation class.\n     * The list is a snapshot of the units at the time {@link getUnits}\n     * is called and is not mutable.\n     * The units are ordered from longest duration to the shortest duration\n     * of the unit.\n     *\n     * @implSpec\n     * The list of units completely and uniquely represents the\n     * state of the object without omissions, overlaps or duplication.\n     * The units are in order from longest duration to shortest.\n     *\n     * @return {TemporalUnit[]} the List of {@link TemporalUnits}; not null\n     */\n    units() {\n        abstractMethodFail('units');\n    }\n    \n    /**\n     * Adds to the specified temporal object.\n     *\n     * Adds the amount to the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // These two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.addTo(dateTime);\n     *   dateTime = dateTime.plus(adder);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and add to it.\n     * The implementation defines the logic of the addition and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the addition.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to add the amount to, not null\n     * @return {Temporal} an object of the same observable type with the addition made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    // eslint-disable-next-line no-unused-vars\n    addTo(temporal) {\n        abstractMethodFail('addTo');\n    }\n    \n    /**\n     * Subtracts this object from the specified temporal object.\n     *\n     * Subtracts the amount from the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#minus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = amount.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(amount);\n     * </pre>\n     * It is recommended to use the second approach, {@link minus},\n     * as it is a lot clearer to read in code.\n     *\n     * @implSpec\n     * The implementation must take the input object and subtract from it.\n     * The implementation defines the logic of the subtraction and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the subtraction.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal - the temporal object to subtract the amount from, not null\n     * @return {Temporal} an object of the same observable type with the subtraction made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    // eslint-disable-next-line no-unused-vars\n    subtractFrom(temporal) {\n        abstractMethodFail('subtractFrom');\n    }\n    \n}\n\nif (typeof Symbol !== 'undefined' && Symbol.toPrimitive) {\n    TemporalAmount.prototype[Symbol.toPrimitive] = function (hint) {\n        // hint could be 'number', 'string' or 'default'. Only 'number'\n        // should throw and 'default' is treated as 'string'.\n        if (hint !== 'number') {\n            return this.toString();\n        }\n\n        throw new TypeError(\n            'A conversion from TemporalAmount to a number is not allowed. ' +\n            'To compare use the methods .equals(), .compareTo(), .isBefore() ' +\n            'or one that is more suitable to your use case.'\n        );\n    };\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { abstractMethodFail } from '../assert';\n\n/**\n * A unit of date-time, such as Days or Hours.\n *\n * Measurement of time is built on units, such as years, months, days, hours, minutes and seconds.\n * Implementations of this interface represent those units.\n *\n * An instance of this interface represents the unit itself, rather than an amount of the unit.\n * See {@link Period} for a class that represents an amount in terms of the common units.\n *\n * The most commonly used units are defined in {@link ChronoUnit}.\n * Further units are supplied in {@link IsoFields}.\n * Units can also be written by application code by implementing this interface.\n *\n * The unit works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the unit is a {@link ChronoUnit}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n */\nexport class TemporalUnit {\n    /**\n     * Gets the duration of this unit, which may be an estimate.\n     *\n     * All units return a duration measured in standard nanoseconds from this method.\n     * The duration will be positive and non-zero.\n     * For example, an hour has a duration of `60 * 60 * 1,000,000,000 ns`.\n     *\n     * Some units may return an accurate duration while others return an estimate.\n     * For example, days have an estimated duration due to the possibility of\n     * daylight saving time changes.\n     * To determine if the duration is an estimate, use {@link isDurationEstimated}.\n     *\n     * @return {Duration} the duration of this unit, which may be an estimate.\n     */\n    duration() {\n        abstractMethodFail('duration');\n    }\n\n    /**\n     * Checks if the duration of the unit is an estimate.\n     *\n     * All units have a duration, however the duration is not always accurate.\n     * For example, days have an estimated duration due to the possibility of\n     * daylight saving time changes.\n     * This method returns true if the duration is an estimate and false if it is\n     * accurate. Note that accurate/estimated ignores leap seconds.\n     *\n     * @return {boolean} `true` if the duration is estimated, `false` if accurate.\n     */\n    isDurationEstimated() {\n        abstractMethodFail('isDurationEstimated');\n    }\n\n    /**\n     * Checks if this unit is date-based.\n     *\n     * @return {boolean} `true` if date unit, `false` if a time unit.\n     */\n    isDateBased() {\n        abstractMethodFail('isDateBased');\n    }\n\n    /**\n     * Checks if this unit is time-based.\n     *\n     * @return {boolean} `true` if time unit, `false` if a date unit.\n     */\n    isTimeBased() {\n        abstractMethodFail('isTimeBased');\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this unit is supported by the specified temporal object.\n     *\n     * This checks that the implementing date-time can add/subtract this unit.\n     * This can be used to avoid throwing an exception.\n     *\n     * @param {!Temporal} temporal the temporal object to check.\n     * @return {boolean} `true` if the unit is supported.\n     */\n    // eslint-disable-next-line no-unused-vars\n    isSupportedBy(temporal) {\n        abstractMethodFail('isSupportedBy');\n    }\n\n    /**\n     * Returns a copy of the specified temporal object with the specified period added.\n     *\n     * The period added is a multiple of this unit. For example, this method\n     * could be used to add \"3 days\" to a date by calling this method on the\n     * instance representing \"days\", passing the date and the period \"3\".\n     * The period to be added may be negative, which is equivalent to subtraction.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#plus}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisUnit.doPlus(temporal);\n     *   temporal = temporal.plus(thisUnit);\n     * </pre>\n     * It is recommended to use the second approach, {@link plus},\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the units\n     * available in {@link ChronoUnit} or the fields available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * Implementations must not alter the specified temporal object.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {!Temporal} dateTime the temporal object to adjust.\n     * @param {number} periodToAdd the period of this unit to add, positive or negative.\n     * @return {Temporal} the adjusted temporal object.\n     * @throws DateTimeException if the period cannot be added.\n     */\n    // eslint-disable-next-line no-unused-vars\n    addTo(dateTime, periodToAdd) {\n        abstractMethodFail('addTo');\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Calculates the period in terms of this unit between two temporal objects of the same type.\n     *\n     * This calculates the period between two temporals in terms of this unit.\n     * The start and end points are supplied as temporal objects and must be of the same type.\n     * The result will be negative if the end is before the start.\n     * For example, the period in hours between two temporal objects can be calculated\n     * using {@link HOURS.between}.\n     *\n     * The calculation returns a whole number, representing the number of complete units between the two temporals.\n     * For example, the period in hours between the times 11:30 and 13:29 will only be\n     * one hour as it is one minute short of two hours.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#until}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   between = thisUnit.between(start, end);\n     *   between = start.until(end, thisUnit);\n     * </pre>\n     * The choice should be made based on which makes the code more readable.\n     *\n     * For example, this method allows the number of days between two dates to be calculated:\n     * <pre>\n     *   long daysBetween = DAYS.between(start, end);\n     *   // or alternatively\n     *   long daysBetween = start.until(end, DAYS);\n     * </pre>\n     * Implementations should perform any queries or calculations using the units available in\n     * {@link ChronoUnit} or the fields available in {@link ChronoField}.\n     * If the unit is not supported a {@link DateTimeException} must be thrown.\n     * Implementations must not alter the specified temporal objects.\n     *\n     * @param {!Temporal} temporal1 the base temporal object.\n     * @param {!Temporal} temporal2 the other temporal object.\n     * @return {number} the period between temporal1 and temporal2 in terms of this unit;\n     *  positive if temporal2 is later than temporal1, negative if earlier.\n     * @throws DateTimeException if the period cannot be calculated.\n     * @throws ArithmeticException if numeric overflow occurs.\n     */\n    // eslint-disable-next-line no-unused-vars\n    between(temporal1, temporal2) {\n        abstractMethodFail('between');\n    }\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\nimport { requireNonNull, requireInstance } from './assert';\nimport { ArithmeticException, DateTimeParseException, UnsupportedTemporalTypeException } from './errors';\nimport { MathUtil, MAX_SAFE_INTEGER, MIN_SAFE_INTEGER } from './MathUtil';\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { TemporalAmount } from './temporal/TemporalAmount';\nimport { TemporalUnit } from './temporal/TemporalUnit';\n\nimport { LocalTime } from './LocalTime';\n\n/**\n * A time-based amount of time, such as '34.5 seconds'.\n *\n * This class models a quantity or amount of time in terms of seconds and nanoseconds.\n * It can be accessed using other duration-based units, such as minutes and hours.\n * In addition, the {@link ChronoUnit#DAYS} unit can be used and is treated as\n * exactly equal to 24 hours, thus ignoring daylight savings effects.\n * See {@link Period} for the date-based equivalent to this class.\n *\n * A physical duration could be of infinite length.\n * For practicality, the duration is stored with constraints similar to {@link Instant}.\n * The duration uses nanosecond resolution with a maximum value of the seconds that can\n * be held in a `long`. This is greater than the current estimated age of the universe.\n *\n * The range of a duration requires the storage of a number larger than a `long`.\n * To achieve this, the class stores a `long` representing seconds and an `int`\n * representing nanosecond-of-second, which will always be between 0 and 999,999,999.\n *\n * The duration is measured in \"seconds\", but these are not necessarily identical to\n * the scientific \"SI second\" definition based on atomic clocks.\n * This difference only impacts durations measured near a leap-second and should not affect\n * most applications.\n * See {@link Instant} for a discussion as to the meaning of the second and time-scales.\n *\n * ### Static properties of Class {@link Duration}\n *\n * Duration.ZERO\n *\n * Constant for a duration of zero.\n *\n */\nexport class Duration extends TemporalAmount /*implements TemporalAmount, Comparable<Duration>, Serializable */ {\n\n    /**\n     * Constructs an instance of {@link Duration} using seconds and nanoseconds.\n     *\n     * @param {Number} seconds - the length of the duration in seconds, positive or negative\n     * @param {Number} nanos - the nanoseconds within the second, from 0 to 999,999,999\n     * @private\n     */\n    constructor(seconds, nanos) {\n        super();\n        this._seconds = MathUtil.safeToInt(seconds);\n        this._nanos = MathUtil.safeToInt(nanos);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link Duration} from a number of standard 24 hour days.\n     *\n     * The seconds are calculated based on the standard definition of a day,\n     * where each day is 86400 seconds which implies a 24 hour day.\n     * The nanosecond in second field is set to zero.\n     *\n     * @param {Number} days - the number of days, positive or negative\n     * @return {!Duration}\n     * @throws ArithmeticException if the input days exceeds the capacity of {@link Duration}\n     */\n    static ofDays(days) {\n        return Duration._create(MathUtil.safeMultiply(days, LocalTime.SECONDS_PER_DAY), 0);\n    }\n\n    /**\n     * Obtains an instance of {@link Duration} from a number of standard hours.\n     *\n     * The seconds are calculated based on the standard definition of an hour,\n     * where each hour is 3600 seconds.\n     * The nanosecond in second field is set to zero.\n     *\n     * @param {Number} hours - the number of hours, positive or negative\n     * @return {!Duration}\n     * @throws ArithmeticException if the input hours exceeds the capacity of {@link Duration}\n     */\n    static ofHours(hours) {\n        return Duration._create(MathUtil.safeMultiply(hours, LocalTime.SECONDS_PER_HOUR), 0);\n    }\n\n    /**\n     * Obtains an instance of {@link Duration} from a number of standard minutes.\n     *\n     * The seconds are calculated based on the standard definition of a minute,\n     * where each minute is 60 seconds.\n     * The nanosecond in second field is set to zero.\n     *\n     * @param {Number} minutes - the number of minutes, positive or negative\n     * @return {!Duration}\n     * @throws ArithmeticException if the input minutes exceeds the capacity of {@link Duration}\n     */\n    static ofMinutes(minutes) {\n        return Duration._create(MathUtil.safeMultiply(minutes, LocalTime.SECONDS_PER_MINUTE), 0);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link Duration} from a number of seconds\n     * and an adjustment in nanoseconds.\n     *\n     * This method allows an arbitrary number of nanoseconds to be passed in.\n     * The factory will alter the values of the second and nanosecond in order\n     * to ensure that the stored nanosecond is in the range 0 to 999,999,999.\n     * For example, the following will result in the exactly the same duration:\n     * <pre>\n     *  Duration.ofSeconds(3, 1);\n     *  Duration.ofSeconds(4, -999_999_999);\n     *  Duration.ofSeconds(2, 1000_000_001);\n     * </pre>\n     *\n     * @param {Number} seconds - the number of seconds, positive or negative\n     * @param {Number} nanoAdjustment  the nanosecond adjustment to the number of seconds, positive or negative\n     * @return {!Duration}\n     * @throws ArithmeticException if the adjustment causes the seconds to exceed the capacity of {@link Duration}\n     */\n    static ofSeconds(seconds, nanoAdjustment = 0) {\n        const secs = MathUtil.safeAdd(seconds, MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND));\n        const nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        return Duration._create(secs, nos);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link Duration} from a number of milliseconds.\n     *\n     * The seconds and nanoseconds are extracted from the specified milliseconds.\n     *\n     * @param {Number} millis - the number of milliseconds, positive or negative\n     * @return {!Duration}\n     */\n    static ofMillis(millis) {\n        let secs = MathUtil.intDiv(millis, 1000);\n        let mos = MathUtil.intMod(millis, 1000);\n        if (mos < 0) {\n            mos += 1000;\n            secs--;\n        }\n        return Duration._create(secs, mos * 1000000);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link Duration} from a number of nanoseconds.\n     *\n     * The seconds and nanoseconds are extracted from the specified nanoseconds.\n     *\n     * @param {Number} nanos - the number of nanoseconds, positive or negative\n     * @return {!Duration}\n     */\n    static ofNanos(nanos) {\n        let secs = MathUtil.intDiv(nanos, LocalTime.NANOS_PER_SECOND);\n        let nos = MathUtil.intMod(nanos, LocalTime.NANOS_PER_SECOND);\n        if (nos < 0) {\n            nos += LocalTime.NANOS_PER_SECOND;\n            secs--;\n        }\n        return this._create(secs, nos);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link Duration} from a duration in the specified unit.\n     *\n     * The parameters represent the two parts of a phrase like '6 Hours'. For example:\n     * <pre>\n     *  Duration.of(3, SECONDS);\n     *  Duration.of(465, HOURS);\n     * </pre>\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an exact duration (see {@link TemporalUnit#isDurationEstimated}) or\n     * be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n     *\n     * @param {Number} amount - the amount of the duration, measured in terms of the unit, positive or negative\n     * @param {TemporalUnit} unit - the unit that the duration is measured in, must have an exact duration, not null\n     * @return {!Duration}\n     * @throws DateTimeException if the period unit has an estimated duration\n     * @throws ArithmeticException if a numeric overflow occurs\n     */\n    static of(amount, unit) {\n        return Duration.ZERO.plus(amount, unit);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link Duration} from an amount.\n     *\n     * This obtains a duration based on the specified amount.\n     * A TemporalAmount represents an amount of time, which may be date-based\n     * or time-based, which this factory extracts to a duration.\n     *\n     * The conversion loops around the set of units from the amount and uses\n     * the duration of the unit to calculate the total Duration.\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an exact duration or be ChronoUnit.DAYS which\n     * is treated as 24 hours. If any other units are found then an exception is thrown.\n     *\n     * @param {TemporalAmount} amount - the temporal amount to convert, not null\n     * @return {Duration} the resulting duration, not null\n     * @throws DateTimeException if the amount cannot be converted\n     * @throws ArithmeticException if a numeric overflow occurs\n     */\n    static from(amount) {\n        requireNonNull(amount, 'amount');\n        requireInstance(amount, TemporalAmount);\n        let duration = Duration.ZERO;\n        amount.units().forEach((unit) => {\n            duration = duration.plus(amount.get(unit), unit);\n        });\n        return duration;\n    }\n\n    /**\n     * Obtains an instance of {@link Duration} representing the duration between two instants.\n     *\n     * Obtains a {@link Duration} representing the duration between two instants.\n     * This calculates the duration between two temporal objects of the same type.\n     * The difference in seconds is calculated using {@link Temporal#until}.\n     * The difference in nanoseconds is calculated using by querying the\n     * {@link ChronoField#NANO_OF_SECOND} field.\n     *\n     * The result of this method can be a negative period if the end is before the start.\n     * To guarantee to obtain a positive duration call abs() on the result.\n     *\n     * @param {Temporal} startInclusive - the start instant, inclusive, not null\n     * @param {Temporal} endExclusive - the end instant, exclusive, not null\n     * @return {!Duration}\n     * @throws DateTimeException if the seconds between the temporals cannot be obtained\n     * @throws ArithmeticException if the calculation exceeds the capacity of {@link Duration}\n     */\n    static between(startInclusive, endExclusive) {\n        requireNonNull(startInclusive, 'startInclusive');\n        requireNonNull(endExclusive, 'endExclusive');\n        let secs = startInclusive.until(endExclusive, ChronoUnit.SECONDS);\n        let nanos = 0;\n        if (startInclusive.isSupported(ChronoField.NANO_OF_SECOND) && endExclusive.isSupported(ChronoField.NANO_OF_SECOND)) {\n            try {\n                const startNos = startInclusive.getLong(ChronoField.NANO_OF_SECOND);\n                nanos = endExclusive.getLong(ChronoField.NANO_OF_SECOND) - startNos;\n                if (secs > 0 && nanos < 0) {\n                    nanos += LocalTime.NANOS_PER_SECOND;\n                } else if (secs < 0 && nanos > 0) {\n                    nanos -= LocalTime.NANOS_PER_SECOND;\n                } else if (secs === 0 && nanos !== 0) {\n                    // two possible meanings for result, so recalculate secs\n                    const adjustedEnd = endExclusive.with(ChronoField.NANO_OF_SECOND, startNos);\n                    secs = startInclusive.until(adjustedEnd, ChronoUnit.SECONDS);\n                }\n            } catch (e) {\n                // ignore and only use seconds\n            }\n        }\n        return this.ofSeconds(secs, nanos);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains a {@link Duration} from a text string such as {@link PnDTnHnMn.nS}.\n     *\n     * This will parse a textual representation of a duration, including the\n     * string produced by {@link toString}. The formats accepted are based\n     * on the ISO-8601 duration format {@link PnDTnHnMn.nS} with days\n     * considered to be exactly 24 hours.\n     *\n     * The string starts with an optional sign, denoted by the ASCII negative\n     * or positive symbol. If negative, the whole period is negated.\n     * The ASCII letter \"P\" is next in upper or lower case.\n     * There are then four sections, each consisting of a number and a suffix.\n     * The sections have suffixes in ASCII of \"D\", \"H\", \"M\" and \"S\" for\n     * days, hours, minutes and seconds, accepted in upper or lower case.\n     * The suffixes must occur in order. The ASCII letter \"T\" must occur before\n     * the first occurrence, if any, of an hour, minute or second section.\n     * At least one of the four sections must be present, and if \"T\" is present\n     * there must be at least one section after the \"T\".\n     * The number part of each section must consist of one or more ASCII digits.\n     * The number may be prefixed by the ASCII negative or positive symbol.\n     * The number of days, hours and minutes must parse to a `long`.\n     * The number of seconds must parse to a `long` with optional fraction.\n     * The decimal point may be either a dot or a comma.\n     * The fractional part may have from zero to 9 digits.\n     *\n     * The leading plus/minus sign, and negative values for other units are\n     * not part of the ISO-8601 standard.\n     *\n     * Examples:\n     * <pre>\n     *    \"PT20.345S\" -> parses as \"20.345 seconds\"\n     *    \"PT15M\"     -> parses as \"15 minutes\" (where a minute is 60 seconds)\n     *    \"PT10H\"     -> parses as \"10 hours\" (where an hour is 3600 seconds)\n     *    \"P2D\"       -> parses as \"2 days\" (where a day is 24 hours or 86400 seconds)\n     *    \"P2DT3H4M\"  -> parses as \"2 days, 3 hours and 4 minutes\"\n     *    \"P-6H3M\"    -> parses as \"-6 hours and +3 minutes\"\n     *    \"-P6H3M\"    -> parses as \"-6 hours and -3 minutes\"\n     *    \"-P-6H+3M\"  -> parses as \"+6 hours and -3 minutes\"\n     * </pre>\n     *\n     * @param {String} text - the text to parse, not null\n     * @return {Duration} the parsed duration, not null\n     * @throws DateTimeParseException if the text cannot be parsed to a duration\n     */\n    static parse(text) {\n        requireNonNull(text, 'text');\n        /**\n         * The pattern for parsing.\n         */\n        const PATTERN = new RegExp('([-+]?)P(?:([-+]?[0-9]+)D)?(T(?:([-+]?[0-9]+)H)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)(?:[.,]([0-9]{0,9}))?S)?)?', 'i');\n        const matches = PATTERN.exec(text);\n        if (matches !== null) {\n            // check for letter T but no time sections\n            if ('T' === matches[3] === false) {\n                const negate = '-' === matches[1];\n                const dayMatch = matches[2];\n                const hourMatch = matches[4];\n                const minuteMatch = matches[5];\n                const secondMatch = matches[6];\n                const fractionMatch = matches[7];\n                if (dayMatch != null || hourMatch != null || minuteMatch != null || secondMatch != null) {\n                    const daysAsSecs = Duration._parseNumber(text, dayMatch, LocalTime.SECONDS_PER_DAY, 'days');\n                    const hoursAsSecs = Duration._parseNumber(text, hourMatch, LocalTime.SECONDS_PER_HOUR, 'hours');\n                    const minsAsSecs = Duration._parseNumber(text, minuteMatch, LocalTime.SECONDS_PER_MINUTE, 'minutes');\n                    const seconds = Duration._parseNumber(text, secondMatch, 1, 'seconds');\n                    const negativeSecs = secondMatch != null && secondMatch.charAt(0) === '-';\n                    const nanos = Duration._parseFraction(text,  fractionMatch, negativeSecs ? -1 : 1);\n                    try {\n                        return Duration._create(negate, daysAsSecs, hoursAsSecs, minsAsSecs, seconds, nanos);\n                    } catch (ex) {\n                        throw new DateTimeParseException('Text cannot be parsed to a Duration: overflow', text, 0, ex);\n                    }\n                }\n            }\n        }\n        throw new DateTimeParseException('Text cannot be parsed to a Duration', text, 0);\n    }\n\n    static _parseNumber(text, parsed, multiplier, errorText) {\n        // regex limits to [-+]?[0-9]+\n        if (parsed == null) {\n            return 0;\n        }\n        try {\n            if (parsed[0] === '+') {\n                parsed = parsed.substring(1);\n            }\n            return MathUtil.safeMultiply(parseFloat(parsed), multiplier);\n        } catch (ex) {\n            throw new DateTimeParseException(`Text cannot be parsed to a Duration: ${errorText}`, text, 0, ex);\n        }\n    }\n\n    static _parseFraction(text, parsed, negate) {\n        // regex limits to [0-9]{0,9}\n        if (parsed == null || parsed.length === 0) {\n            return 0;\n        }\n        parsed = (`${parsed}000000000`).substring(0, 9);\n        return parseFloat(parsed) * negate;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * to handle function overriding this function accepts any number of arguments, checks their type and delegates to the appropriate\n     * function\n     *\n     * @return {Duration}\n     */\n    static _create() {\n        if (arguments.length <= 2) {\n            return Duration._createSecondsNanos(arguments[0], arguments[1]);\n        } else {\n            return Duration._createNegateDaysHoursMinutesSecondsNanos(arguments[0], arguments[1], arguments[2], arguments[3], arguments[4], arguments[5]);\n        }\n    }\n\n    static _createNegateDaysHoursMinutesSecondsNanos(negate, daysAsSecs, hoursAsSecs, minsAsSecs, secs, nanos) {\n        const seconds = MathUtil.safeAdd(daysAsSecs, MathUtil.safeAdd(hoursAsSecs, MathUtil.safeAdd(minsAsSecs, secs)));\n        if (negate) {\n            return Duration.ofSeconds(seconds, nanos).negated();\n        }\n        return Duration.ofSeconds(seconds, nanos);\n    }\n\n    /**\n     * Obtains an instance of {@link Duration} using seconds and nanoseconds.\n     *\n     * @param {Number} seconds - the length of the duration in seconds, positive or negative\n     * @param {Number} nanoAdjustment - the nanosecond adjustment within the second, from 0 to 999,999,999\n     */\n    static _createSecondsNanos(seconds = 0, nanoAdjustment = 0) {\n        if (seconds === 0 && nanoAdjustment === 0) {\n            return Duration.ZERO;\n        }\n        return new Duration(seconds, nanoAdjustment);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the value of the requested unit.\n     *\n     * This returns a value for each of the two supported units,\n     * {@link ChronoUnit#SECONDS} and {@link ChronoUnit#NANOS}.\n     * All other units throw an exception.\n     *\n     * @param {TemporalUnit} unit the {@link TemporalUnit} for which to return the value\n     * @return {number} the const value of the unit\n     * @throws DateTimeException if the unit is not supported\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     */\n    get(unit) {\n        if (unit === ChronoUnit.SECONDS) {\n            return this._seconds;\n        } else if (unit === ChronoUnit.NANOS) {\n            return this._nanos;\n        } else {\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n    }\n\n    units() {\n        return [ChronoUnit.SECONDS, ChronoUnit.NANOS];\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this duration is zero length.\n     *\n     * A {@link Duration} represents a directed distance between two points on\n     * the time-line and can therefore be positive, zero or negative.\n     * This method checks whether the length is zero.\n     *\n     * @return {boolean} true if this duration has a total length equal to zero\n     */\n    isZero() {\n        return this._seconds === 0 && this._nanos === 0;\n    }\n\n    /**\n     * Checks if this duration is negative, excluding zero.\n     *\n     * A {@link Duration} represents a directed distance between two points on\n     * the time-line and can therefore be positive, zero or negative.\n     * This method checks whether the length is less than zero.\n     *\n     * @return {boolean} true if this duration has a total length less than zero\n     */\n    isNegative() {\n        return this._seconds < 0;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the number of seconds in this duration.\n     *\n     * The length of the duration is stored using two fields - seconds and nanoseconds.\n     * The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to\n     * the length in seconds.\n     * The total duration is defined by calling this method and {@link getNano}.\n     *\n     * A {@link Duration} represents a directed distance between two points on the time-line.\n     * A negative duration is expressed by the negative sign of the seconds part.\n     * A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.\n     *\n     * @return {number} the whole seconds part of the length of the duration, positive or negative\n     */\n    seconds() {\n        return this._seconds;\n    }\n\n    /**\n     * Gets the number of nanoseconds within the second in this duration.\n     *\n     * The length of the duration is stored using two fields - seconds and nanoseconds.\n     * The nanoseconds part is a value from 0 to 999,999,999 that is an adjustment to\n     * the length in seconds.\n     * The total duration is defined by calling this method and {@link getSeconds}.\n     *\n     * A {@link Duration} represents a directed distance between two points on the time-line.\n     * A negative duration is expressed by the negative sign of the seconds part.\n     * A duration of -1 nanosecond is stored as -1 seconds plus 999,999,999 nanoseconds.\n     *\n     * @return {number} the nanoseconds within the second part of the length of the duration, from 0 to 999,999,999\n     */\n    nano() {\n        return this._nanos;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the specified amount of seconds.\n     *\n     * This returns a duration with the specified seconds, retaining the\n     * nano-of-second part of this duration.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} seconds - the seconds to represent, may be negative\n     * @return {Duration} based on this period with the requested seconds, not null\n     */\n    withSeconds(seconds) {\n        return Duration._create(seconds, this._nanos);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified nano-of-second.\n     *\n     * This returns a duration with the specified nano-of-second, retaining the\n     * seconds part of this duration.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999\n     * @return {Duration} based on this period with the requested nano-of-second, not null\n     * @throws DateTimeException if the nano-of-second is invalid\n     */\n    withNanos(nanoOfSecond) {\n        ChronoField.NANO_OF_SECOND.checkValidIntValue(nanoOfSecond);\n        return Duration._create(this._seconds, nanoOfSecond);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the specified duration added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Duration} duration - the duration to add, positive or negative, not null\n     * @return {Duration} based on this duration with the specified duration added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusDuration(duration) {\n        requireNonNull(duration, 'duration');\n        return this.plus(duration.seconds(), duration.nano());\n    }\n\n\n    /**\n     * function overloading for {@link Duration.plus}\n     *\n     * if called with 1 arguments, then {@link Duration.plusDuration} is executed.\n     *\n     * if called with 2 arguments and second argument is an instance of TemporalUnit, then {@link Duration.plusAmountUnit} is executed.\n     *\n     * Otherwise {@link Duration.plusSecondsNanos} is executed.\n     *\n     * @param {!(Duration|number)} durationOrNumber\n     * @param {!TemporalUnit|number} unitOrNumber\n     * @returns {Duration}\n     */\n    plus(durationOrNumber, unitOrNumber) {\n        if (arguments.length === 1) {\n            return this.plusDuration(durationOrNumber);\n        }\n        else if (arguments.length === 2 && unitOrNumber instanceof TemporalUnit) {\n            return this.plusAmountUnit(durationOrNumber, unitOrNumber);\n        } else {\n            return this.plusSecondsNanos(durationOrNumber, unitOrNumber);\n        }\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration added.\n     *\n     * The duration amount is measured in terms of the specified unit.\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an exact duration (see {@link TemporalUnit#isDurationEstimated}) or\n     * be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} amountToAdd - the amount to add, measured in terms of the unit, positive or negative\n     * @param {TemporalUnit} unit - the unit that the amount is measured in, must have an exact duration, not null\n     * @return {Duration} based on this duration with the specified duration added, not null\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusAmountUnit(amountToAdd, unit) {\n        requireNonNull(amountToAdd, 'amountToAdd');\n        requireNonNull(unit, 'unit');\n        if (unit === ChronoUnit.DAYS) {\n            return this.plusSecondsNanos(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY), 0);\n        }\n        if (unit.isDurationEstimated()) {\n            throw new UnsupportedTemporalTypeException('Unit must not have an estimated duration');\n        }\n        if (amountToAdd === 0) {\n            return this;\n        }\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.NANOS: return this.plusNanos(amountToAdd);\n                case ChronoUnit.MICROS: return this.plusSecondsNanos(MathUtil.intDiv(amountToAdd, (1000000 * 1000)) * 1000, MathUtil.intMod(amountToAdd, (1000000 * 1000)) * 1000);\n                case ChronoUnit.MILLIS: return this.plusMillis(amountToAdd);\n                case ChronoUnit.SECONDS: return this.plusSeconds(amountToAdd);\n            }\n            return this.plusSecondsNanos(MathUtil.safeMultiply(unit.duration().seconds(), amountToAdd), 0);\n        }\n        const duration = unit.duration().multipliedBy(amountToAdd);\n        return this.plusSecondsNanos(duration.seconds(), duration.nano());\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the specified duration in 24 hour days added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} daysToAdd - the days to add, positive or negative\n     * @return {Duration} based on this duration with the specified days added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusDays(daysToAdd) {\n        return this.plusSecondsNanos(MathUtil.safeMultiply(daysToAdd, LocalTime.SECONDS_PER_DAY), 0);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in hours added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} hoursToAdd - the hours to add, positive or negative\n     * @return {Duration} based on this duration with the specified hours added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusHours(hoursToAdd) {\n        return this.plusSecondsNanos(MathUtil.safeMultiply(hoursToAdd, LocalTime.SECONDS_PER_HOUR), 0);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in minutes added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} minutesToAdd - the minutes to add, positive or negative\n     * @return {Duration} based on this duration with the specified minutes added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusMinutes(minutesToAdd) {\n        return this.plusSecondsNanos(MathUtil.safeMultiply(minutesToAdd, LocalTime.SECONDS_PER_MINUTE), 0);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in seconds added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} secondsToAdd - the seconds to add, positive or negative\n     * @return {Duration} based on this duration with the specified seconds added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusSeconds(secondsToAdd) {\n        return this.plusSecondsNanos(secondsToAdd, 0);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in milliseconds added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} millisToAdd - the milliseconds to add, positive or negative\n     * @return {Duration} based on this duration with the specified milliseconds added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusMillis(millisToAdd) {\n        return this.plusSecondsNanos(MathUtil.intDiv(millisToAdd, 1000), MathUtil.intMod(millisToAdd, 1000) * 1000000);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in nanoseconds added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} nanosToAdd - the nanoseconds to add, positive or negative\n     * @return {Duration} based on this duration with the specified nanoseconds added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusNanos(nanosToAdd) {\n        return this.plusSecondsNanos(0, nanosToAdd);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} secondsToAdd - the seconds to add, positive or negative\n     * @param {Number} nanosToAdd - the nanos to add, positive or negative\n     * @return {Duration} based on this duration with the specified seconds added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusSecondsNanos(secondsToAdd, nanosToAdd) {\n        requireNonNull(secondsToAdd, 'secondsToAdd');\n        requireNonNull(nanosToAdd, 'nanosToAdd');\n        if (secondsToAdd === 0 && nanosToAdd === 0) {\n            return this;\n        }\n        let epochSec = MathUtil.safeAdd(this._seconds, secondsToAdd);\n        epochSec = MathUtil.safeAdd(epochSec, MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND));\n        nanosToAdd = MathUtil.intMod(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n        const nanoAdjustment = MathUtil.safeAdd(this._nanos, nanosToAdd);  // safe int+LocalTime.NANOS_PER_SECOND\n        return Duration.ofSeconds(epochSec, nanoAdjustment);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for {@link Duration.minus}\n     *\n     * if called with 1 arguments and first argument is an instance of Duration, then {@link Duration.minusDuration} is executed.\n     *\n     * Otherwise {@link Duration.minusAmountUnit} is executed.\n     *\n     * @param {!(Duration|number)} durationOrNumber\n     * @param {?TemporalUnit} unit\n     * @return {Duration}\n     */\n    minus(durationOrNumber, unit) {\n        if (arguments.length === 1) {\n            return this.minusDuration(durationOrNumber);\n        } else {\n            return this.minusAmountUnit(durationOrNumber, unit);\n        }\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Duration} duration - the duration to subtract, positive or negative, not null\n     * @return {Duration} based on this duration with the specified duration subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusDuration(duration) {\n        requireNonNull(duration, 'duration');\n        const secsToSubtract = duration.seconds();\n        const nanosToSubtract = duration.nano();\n        if (secsToSubtract === MIN_SAFE_INTEGER) {\n            return this.plus(MAX_SAFE_INTEGER, -nanosToSubtract);\n        }\n        return this.plus(-secsToSubtract, -nanosToSubtract);\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration subtracted.\n     *\n     * The duration amount is measured in terms of the specified unit.\n     * Only a subset of units are accepted by this method.\n     * The unit must either have an exact duration (see {@link TemporalUnit#isDurationEstimated}) or\n     * be {@link ChronoUnit#DAYS} which is treated as 24 hours. Other units throw an exception.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} amountToSubtract - the amount to subtract, measured in terms of the unit, positive or negative\n     * @param {TemporalUnit} unit - the unit that the amount is measured in, must have an exact duration, not null\n     * @return {Duration} based on this duration with the specified duration subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusAmountUnit(amountToSubtract, unit) {\n        requireNonNull(amountToSubtract, 'amountToSubtract');\n        requireNonNull(unit, 'unit');\n        return (amountToSubtract === MIN_SAFE_INTEGER ? this.plusAmountUnit(MAX_SAFE_INTEGER, unit) : this.plusAmountUnit(-amountToSubtract, unit));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the specified duration in 24 hour days subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} daysToSubtract - the days to subtract, positive or negative\n     * @return {Duration} based on this duration with the specified days subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusDays(daysToSubtract) {\n        return (daysToSubtract === MIN_SAFE_INTEGER ? this.plusDays(MAX_SAFE_INTEGER) : this.plusDays(-daysToSubtract));\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in hours subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} hoursToSubtract - the hours to subtract, positive or negative\n     * @return {Duration} based on this duration with the specified hours subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusHours(hoursToSubtract) {\n        return (hoursToSubtract === MIN_SAFE_INTEGER ? this.plusHours(MAX_SAFE_INTEGER) : this.plusHours(-hoursToSubtract));\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in minutes subtracted.\n     *\n     * The number of hours is multiplied by 60 to obtain the number of seconds to subtract.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} minutesToSubtract - the minutes to subtract, positive or negative\n     * @return {Duration} based on this duration with the specified minutes subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusMinutes(minutesToSubtract) {\n        return (minutesToSubtract === MIN_SAFE_INTEGER ? this.plusMinutes(MAX_SAFE_INTEGER) : this.plusMinutes(-minutesToSubtract));\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in seconds subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} secondsToSubtract - the seconds to subtract, positive or negative\n     * @return {Duration} based on this duration with the specified seconds subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusSeconds(secondsToSubtract) {\n        return (secondsToSubtract === MIN_SAFE_INTEGER ? this.plusSeconds(MAX_SAFE_INTEGER) : this.plusSeconds(-secondsToSubtract));\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in milliseconds subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} millisToSubtract - the milliseconds to subtract, positive or negative\n     * @return {Duration} based on this duration with the specified milliseconds subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusMillis(millisToSubtract) {\n        return (millisToSubtract === MIN_SAFE_INTEGER ? this.plusMillis(MAX_SAFE_INTEGER) : this.plusMillis(-millisToSubtract));\n    }\n\n    /**\n     * Returns a copy of this duration with the specified duration in nanoseconds subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} nanosToSubtract - the nanoseconds to subtract, positive or negative\n     * @return {Duration} based on this duration with the specified nanoseconds subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusNanos(nanosToSubtract) {\n        return (nanosToSubtract === MIN_SAFE_INTEGER ? this.plusNanos(MAX_SAFE_INTEGER) : this.plusNanos(-nanosToSubtract));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration multiplied by the scalar.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} multiplicand - the value to multiply the duration by, positive or negative\n     * @return {Duration} based on this duration multiplied by the specified scalar, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    multipliedBy(multiplicand) {\n        if (multiplicand === 0) {\n            return Duration.ZERO;\n        }\n        if (multiplicand === 1) {\n            return this;\n        }\n        let secs = MathUtil.safeMultiply(this._seconds, multiplicand);\n        let nos = MathUtil.safeMultiply(this._nanos, multiplicand);\n        secs = secs + MathUtil.intDiv(nos, LocalTime.NANOS_PER_SECOND);\n        nos = MathUtil.intMod(nos, LocalTime.NANOS_PER_SECOND);\n        return Duration.ofSeconds(secs, nos);\n    }\n\n    /**\n     * Returns a copy of this duration divided by the specified value.\n     *\n     * In opposite to the threeten implementation the division is realized by floating point not by\n     * fixed point arithmetic. Expect floating point rounding errors for {@link Duration.dividedBy}.\n     *\n     * @param {Number} divisor - the value to divide the duration by, positive or negative, not zero\n     * @return {Duration} based on this duration divided by the specified divisor, not null\n     * @throws ArithmeticException if the divisor is zero or if numeric overflow occurs\n     */\n    dividedBy(divisor) {\n        if (divisor === 0) {\n            throw new ArithmeticException('Cannot divide by zero');\n        }\n        if (divisor === 1) {\n            return this;\n        }\n        const secs = MathUtil.intDiv(this._seconds, divisor);\n        const secsMod = MathUtil.roundDown(((this._seconds/ divisor) - secs) * LocalTime.NANOS_PER_SECOND);\n        let nos = MathUtil.intDiv(this._nanos, divisor);\n        nos = secsMod + nos;\n        return Duration.ofSeconds(secs, nos);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this duration with the length negated.\n     *\n     * This method swaps the sign of the total length of this duration.\n     * For example, {@link PT1.3S} will be returned as {@link PT-1.3S}.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {Duration} based on this duration with the amount negated, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    negated() {\n        return this.multipliedBy(-1);\n    }\n\n    /**\n     * Returns a copy of this duration with a positive length.\n     *\n     * This method returns a positive duration by effectively removing the sign from any negative total length.\n     * For example, {@link PT-1.3S} will be returned as {@link PT1.3S}.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {Duration} based on this duration with an absolute length, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    abs() {\n        return this.isNegative() ? this.negated() : this;\n    }\n\n    //-------------------------------------------------------------------------\n    /**\n     * Adds this duration to the specified temporal object.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with this duration added.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#plus}.\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = thisDuration.addTo(dateTime);\n     *   dateTime = dateTime.plus(thisDuration);\n     * </pre>\n     *\n     * The calculation will add the seconds, then nanos.\n     * Only non-zero amounts will be added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} temporal - the temporal object to adjust, not null\n     * @return {Temporal} an object of the same type with the adjustment made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    addTo(temporal) {\n        requireNonNull(temporal, 'temporal');\n        if (this._seconds !== 0) {\n            temporal = temporal.plus(this._seconds, ChronoUnit.SECONDS);\n        }\n        if (this._nanos !== 0) {\n            temporal = temporal.plus(this._nanos, ChronoUnit.NANOS);\n        }\n        return temporal;\n    }\n\n    /**\n     * Subtracts this duration from the specified temporal object.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with this duration subtracted.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#minus}.\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = thisDuration.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(thisDuration);\n     * </pre>\n     *\n     * The calculation will subtract the seconds, then nanos.\n     * Only non-zero amounts will be added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} temporal - the temporal object to adjust, not null\n     * @return {Temporal} an object of the same type with the adjustment made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    subtractFrom(temporal) {\n        requireNonNull(temporal, 'temporal');\n        if (this._seconds !== 0) {\n            temporal = temporal.minus(this._seconds, ChronoUnit.SECONDS);\n        }\n        if (this._nanos !== 0) {\n            temporal = temporal.minus(this._nanos, ChronoUnit.NANOS);\n        }\n        return temporal;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the number of days in this duration.\n     *\n     * This returns the total number of days in the duration by dividing the\n     * number of seconds by 86400.\n     * This is based on the standard definition of a day as 24 hours.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {number} the number of days in the duration, may be negative\n     */\n    toDays() {\n        return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_DAY);\n    }\n\n    /**\n     * Gets the number of hours in this duration.\n     *\n     * This returns the total number of hours in the duration by dividing the\n     * number of seconds by 3600.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {number} the number of hours in the duration, may be negative\n     */\n    toHours() {\n        return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_HOUR);\n    }\n\n    /**\n     * Gets the number of minutes in this duration.\n     *\n     * This returns the total number of minutes in the duration by dividing the\n     * number of seconds by 60.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {number} the number of minutes in the duration, may be negative\n     */\n    toMinutes() {\n        return MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_MINUTE);\n    }\n\n    /**\n     * Converts this duration to the total length in milliseconds.\n     *\n     * If this duration is too large to fit in a `long` milliseconds, then an\n     * exception is thrown.\n     *\n     * If this duration has greater than millisecond precision, then the conversion\n     * will drop any excess precision information as though the amount in nanoseconds\n     * was subject to integer division by one million.\n     *\n     * @return {number} the total length of the duration in milliseconds\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    toMillis() {\n        let millis = Math.round(MathUtil.safeMultiply(this._seconds, 1000));\n        millis = MathUtil.safeAdd(millis, MathUtil.intDiv(this._nanos, 1000000));\n        return millis;\n    }\n\n    /**\n     * Converts this duration to the total length in nanoseconds expressed as a `long`.\n     *\n     * If this duration is too large to fit in a `long` nanoseconds, then an\n     * exception is thrown.\n     *\n     * @return {number} the total length of the duration in nanoseconds\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    toNanos() {\n        let totalNanos = MathUtil.safeMultiply(this._seconds, LocalTime.NANOS_PER_SECOND);\n        totalNanos = MathUtil.safeAdd(totalNanos, this._nanos);\n        return totalNanos;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares this duration to the specified {@link Duration}.\n     *\n     * The comparison is based on the total length of the durations.\n     *\n     * @param {Duration} otherDuration - the other duration to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     */\n    compareTo(otherDuration) {\n        requireNonNull(otherDuration, 'otherDuration');\n        requireInstance(otherDuration, Duration, 'otherDuration');\n        const cmp = MathUtil.compareNumbers(this._seconds, otherDuration.seconds());\n        if (cmp !== 0) {\n            return cmp;\n        }\n        return this._nanos - otherDuration.nano();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this duration is equal to the specified {@link Duration}.\n     *\n     * The comparison is based on the total length of the durations.\n     *\n     * @param {*} otherDuration - the other duration, null returns false\n     * @return {boolean} true if the other duration is equal to this one\n     */\n    equals(otherDuration) {\n        if (this === otherDuration) {\n            return true;\n        }\n        if (otherDuration instanceof Duration) {\n            return this.seconds() === otherDuration.seconds() &&\n                   this.nano() === otherDuration.nano();\n        }\n        return false;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * A string representation of this duration using ISO-8601 seconds\n     * based representation, such as {@link PT8H6M12.345S}.\n     *\n     * The format of the returned string will be {@link PTnHnMnS}, where n is\n     * the relevant hours, minutes or seconds part of the duration.\n     * Any fractional seconds are placed after a decimal point in the seconds section.\n     * If a section has a zero value, it is omitted.\n     * The hours, minutes and seconds will all have the same sign.\n     *\n     * Examples:\n     * <pre>\n     *    \"20.345 seconds\"                 -> \"PT20.345S\n     *    \"15 minutes\" (15 * 60 seconds)   -> \"PT15M\"\n     *    \"10 hours\" (10 * 3600 seconds)   -> \"PT10H\"\n     *    \"2 days\" (2 * 86400 seconds)     -> \"PT48H\"\n     * </pre>\n     * Note that multiples of 24 hours are not output as days to avoid confusion\n     * with {@link Period}.\n     *\n     * @return {string} an ISO-8601 representation of this duration, not null\n     */\n    toString() {\n        if (this === Duration.ZERO) {\n            return 'PT0S';\n        }\n        const hours = MathUtil.intDiv(this._seconds, LocalTime.SECONDS_PER_HOUR);\n        const minutes = MathUtil.intDiv(MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_HOUR), LocalTime.SECONDS_PER_MINUTE);\n        const secs = MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_MINUTE);\n        let rval = 'PT';\n        if (hours !== 0) {\n            rval += `${hours}H`;\n        }\n        if (minutes !== 0) {\n            rval += `${minutes}M`;\n        }\n        if (secs === 0 && this._nanos === 0 && rval.length > 2) {\n            return rval;\n        }\n        if (secs < 0 && this._nanos > 0) {\n            if (secs === -1) {\n                rval += '-0';\n            } else {\n                rval += secs + 1;\n            }\n        } else {\n            rval += secs;\n        }\n        if (this._nanos > 0) {\n            rval += '.';\n            let nanoString;\n            if (secs < 0) {\n                nanoString = `${2 * LocalTime.NANOS_PER_SECOND - this._nanos}`;\n            } else {\n                nanoString = `${LocalTime.NANOS_PER_SECOND + this._nanos}`;\n            }\n            // remove the leading '1'\n            nanoString = nanoString.slice(1, nanoString.length);\n            rval += nanoString;\n            while (rval.charAt(rval.length - 1) === '0') {\n                rval = rval.slice(0, rval.length - 1);\n            }\n        }\n        rval += 'S';\n        return rval;\n    }\n\n    /**\n     *\n     * @return {string} same as {@link Duration.toString}\n     */\n    toJSON() {\n        return this.toString();\n    }\n\n}\n\nexport function _init() {\n    /**\n     * Constant for a duration of zero.\n     */\n    Duration.ZERO = new Duration(0, 0);\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\n/**\n * attempt to avoid dependency cycles... define all constants here and they could be used\n * so instead of using e.g. Year.MAX_VALUE we could use YearConstants.MAX_VALUE to avoid the cycle\n */\nexport class YearConstants {}\n\nexport function _init() {\n    /**\n     * The minimum supported year\n     */\n    YearConstants.MIN_VALUE = -999999;\n    /**\n     * The maximum supported year\n     */\n    YearConstants.MAX_VALUE = 999999;\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { MathUtil } from '../MathUtil';\n\nimport { Duration } from '../Duration';\nimport { YearConstants } from '../YearConstants';\nimport { TemporalUnit } from './TemporalUnit';\n\n/**\n * A standard set of date periods units.\n *\n * This set of units provide unit-based access to manipulate a date, time or date-time.\n * The standard set of units can be extended by implementing {@link TemporalUnit}.\n *\n * These units are intended to be applicable in multiple calendar systems.\n * For example, most non-ISO calendar systems define units of years, months and days,\n * just with slightly different rules.\n * The documentation of each unit explains how it operates.\n *\n * ### Static properties:\n * \n * - `ChronoUnit.CENTURIES`: Unit that represents the concept of a century. For the ISO calendar\n * system, it is equal to 100 years.\n * \n * - `ChronoUnit.DAYS`: Unit that represents the concept of a day. For the ISO calendar system, it\n * is the standard day from midnight to midnight. The estimated duration of a day is 24 Hours.\n * \n * - `ChronoUnit.DECADES`: Unit that represents the concept of a decade. For the ISO calendar system,\n * it is equal to 10 years.\n * \n * - `ChronoUnit.ERAS`: Unit that represents the concept of an era. The ISO calendar system doesn't\n * have eras thus it is impossible to add an era to a date or date-time. The estimated duration of the\n * era is artificially defined as 1,000,000,000 Years.\n * \n * - `ChronoUnit.FOREVER`: Artificial unit that represents the concept of forever. This is primarily\n * used with {@link TemporalField} to represent unbounded fields such as the year or era. The\n * estimated duration of the era is artificially defined as the largest duration supported by\n * {@link Duration}.\n * \n * - `ChronoUnit.HALF_DAYS`: Unit that represents the concept of half a day, as used in AM/PM. For\n * the ISO calendar system, it is equal to 12 hours.\n *\n * - `ChronoUnit.HOURS`: Unit that represents the concept of an hour. For the ISO calendar system,\n * it is equal to 60 minutes.\n * \n * - `ChronoUnit.MICROS`: Unit that represents the concept of a microsecond. For the ISO calendar\n * system, it is equal to the 1,000,000th part of the second unit.\n * \n * - `ChronoUnit.MILLENNIA`: Unit that represents the concept of a millennium. For the ISO calendar\n * system, it is equal to 1,000 years.\n * \n * - `ChronoUnit.MILLIS`: Unit that represents the concept of a millisecond. For the ISO calendar\n * system, it is equal to the 1000th part of the second unit.\n * \n * - `ChronoUnit.MINUTES`: Unit that represents the concept of a minute. For the ISO calendar system,\n * it is equal to 60 seconds.\n * \n * - `ChronoUnit.MONTHS`: Unit that represents the concept of a month. For the ISO calendar system,\n * the length of the month varies by month-of-year. The estimated duration of a month is one twelfth\n * of 365.2425 Days.\n * \n * - `ChronoUnit.NANOS`: Unit that represents the concept of a nanosecond, the smallest supported unit\n * of time. For the ISO calendar system, it is equal to the 1,000,000,000th part of the second unit.\n * \n * - `ChronoUnit.SECONDS`: Unit that represents the concept of a second. For the ISO calendar system,\n * it is equal to the second in the SI system of units, except around a leap-second.\n * \n * - `ChronoUnit.WEEKS`: Unit that represents the concept of a week. For the ISO calendar system,\n * it is equal to 7 Days.\n * \n * - `ChronoUnit.YEARS`: Unit that represents the concept of a year. For the ISO calendar system, it\n * is equal to 12 months. The estimated duration of a year is 365.2425 Days.\n */\nexport class ChronoUnit extends TemporalUnit {\n\n    /**\n     *\n     * @param {String} name\n     * @param {Duration} estimatedDuration\n     * @private\n     */\n    constructor (name, estimatedDuration) {\n        super();\n        this._name = name;\n        this._duration = estimatedDuration;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * @return {Duration} the duration of this unit, which may be an estimate.\n     */\n    duration() {\n        return this._duration;\n    }\n\n    /**\n     * @return {boolean} `true` if the duration is estimated, `false` if accurate.\n     */\n    isDurationEstimated() {\n        return this.isDateBased() || this === ChronoUnit.FOREVER;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * @return {boolean} `true` if date unit, `false` if a time unit.\n     */\n    isDateBased() {\n        return this.compareTo(ChronoUnit.DAYS) >= 0 && this !== ChronoUnit.FOREVER;\n    }\n\n    /**\n     * Checks if this unit is a time unit.\n     *\n     * @return {boolean} `true` if time unit, `false` if a date unit.\n     */\n    isTimeBased() {\n        return this.compareTo(ChronoUnit.DAYS) < 0;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * @param {!Temporal} temporal the temporal object to check.\n     * @return {boolean} `true` if the unit is supported.\n     */\n    isSupportedBy(temporal) {\n        if (this === ChronoUnit.FOREVER) {\n            return false;\n        }\n        /* TODO: classes not implemented yet */\n        /*\n        if (temporal instanceof ChronoLocalDate) {\n            return isDateBased();\n        }\n        if (temporal instanceof ChronoLocalDateTime || temporal instanceof ChronoZonedDateTime) {\n            return true;\n        }\n*/\n        try {\n            temporal.plus(1, this);\n            return true;\n        } catch (e) {\n            try {\n                temporal.plus(-1, this);\n                return true;\n            } catch (e2) {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * @param {!Temporal} temporal the temporal object to adjust.\n     * @param {number} amount the period of this unit to add, positive or negative.\n     * @return {Temporal} the adjusted temporal object.\n     * @throws DateTimeException if the period cannot be added.\n     */\n    addTo(temporal, amount) {\n        return temporal.plus(amount, this);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * @param {!Temporal} temporal1 the base temporal object.\n     * @param {!Temporal} temporal2 the other temporal object.\n     * @return {number} the period between temporal1 and temporal2 in terms of this unit;\n     *  positive if temporal2 is later than temporal1, negative if earlier.\n     * @throws DateTimeException if the period cannot be calculated.\n     * @throws ArithmeticException if numeric overflow occurs.\n     */\n    between(temporal1, temporal2) {\n        return temporal1.until(temporal2, this);\n    }\n\n    //-----------------------------------------------------------------------\n    toString() {\n        return this._name;\n    }\n\n    /**\n     * Compares this ChronoUnit to the specified {@link TemporalUnit}.\n     *\n     * The comparison is based on the total length of the durations.\n     *\n     * @param {!TemporalUnit} other the other unit to compare to.\n     * @return the comparator value, negative if less, positive if greater.\n     */\n    compareTo(other) {\n        return this.duration().compareTo(other.duration());\n    }\n\n}\n\nexport function _init() {\n    /**\n     * Unit that represents the concept of a nanosecond, the smallest supported unit of time.\n     * For the ISO calendar system, it is equal to the 1,000,000,000th part of the second unit.\n     */\n    ChronoUnit.NANOS = new ChronoUnit('Nanos', Duration.ofNanos(1));\n    /**\n     * Unit that represents the concept of a microsecond.\n     * For the ISO calendar system, it is equal to the 1,000,000th part of the second unit.\n     */\n    ChronoUnit.MICROS = new ChronoUnit('Micros', Duration.ofNanos(1000));\n    /**\n     * Unit that represents the concept of a millisecond.\n     * For the ISO calendar system, it is equal to the 1000th part of the second unit.\n     */\n    ChronoUnit.MILLIS = new ChronoUnit('Millis', Duration.ofNanos(1000000));\n    /**\n     * Unit that represents the concept of a second.\n     * For the ISO calendar system, it is equal to the second in the SI system\n     * of units, except around a leap-second.\n     */\n    ChronoUnit.SECONDS = new ChronoUnit('Seconds', Duration.ofSeconds(1));\n    /**\n     * Unit that represents the concept of a minute.\n     * For the ISO calendar system, it is equal to 60 seconds.\n     */\n    ChronoUnit.MINUTES = new ChronoUnit('Minutes', Duration.ofSeconds(60));\n    /**\n     * Unit that represents the concept of an hour.\n     * For the ISO calendar system, it is equal to 60 minutes.\n     */\n    ChronoUnit.HOURS = new ChronoUnit('Hours', Duration.ofSeconds(3600));\n    /**\n     * Unit that represents the concept of half a day, as used in AM/PM.\n     * For the ISO calendar system, it is equal to 12 hours.\n     */\n    ChronoUnit.HALF_DAYS = new ChronoUnit('HalfDays', Duration.ofSeconds(43200));\n    /**\n     * Unit that represents the concept of a day.\n     * For the ISO calendar system, it is the standard day from midnight to midnight.\n     * The estimated duration of a day is 24 hours.\n     *\n     * When used with other calendar systems it must correspond to the day defined by\n     * the rising and setting of the Sun on Earth. It is not required that days begin\n     * at midnight - when converting between calendar systems, the date should be\n     * equivalent at midday.\n     */\n    ChronoUnit.DAYS = new ChronoUnit('Days', Duration.ofSeconds(86400));\n    /**\n     * Unit that represents the concept of a week.\n     * For the ISO calendar system, it is equal to 7 days.\n     *\n     * When used with other calendar systems it must correspond to an integral number of days.\n     */\n    ChronoUnit.WEEKS = new ChronoUnit('Weeks', Duration.ofSeconds(7 * 86400));\n    /**\n     * Unit that represents the concept of a month.\n     * For the ISO calendar system, the length of the month varies by month-of-year.\n     * The estimated duration of a month is one twelfth of 365.2425 days.\n     *\n     * When used with other calendar systems it must correspond to an integral number of days.\n     */\n    ChronoUnit.MONTHS = new ChronoUnit('Months', Duration.ofSeconds(31556952 / 12));\n    /**\n     * Unit that represents the concept of a year.\n     * For the ISO calendar system, it is equal to 12 months.\n     * The estimated duration of a year is 365.2425 days.\n     *\n     * When used with other calendar systems it must correspond to an integral number of days\n     * or months roughly equal to a year defined by the passage of the Earth around the Sun.\n     */\n    ChronoUnit.YEARS = new ChronoUnit('Years', Duration.ofSeconds(31556952));\n    /**\n     * Unit that represents the concept of a decade.\n     * For the ISO calendar system, it is equal to 10 years.\n     *\n     * When used with other calendar systems it must correspond to an integral number of days\n     * and is normally an integral number of years.\n     */\n    ChronoUnit.DECADES = new ChronoUnit('Decades', Duration.ofSeconds(31556952 * 10));\n    /**\n     * Unit that represents the concept of a century.\n     * For the ISO calendar system, it is equal to 100 years.\n     *\n     * When used with other calendar systems it must correspond to an integral number of days\n     * and is normally an integral number of years.\n     */\n    ChronoUnit.CENTURIES = new ChronoUnit('Centuries', Duration.ofSeconds(31556952 * 100));\n    /**\n     * Unit that represents the concept of a millennium.\n     * For the ISO calendar system, it is equal to 1000 years.\n     *\n     * When used with other calendar systems it must correspond to an integral number of days\n     * and is normally an integral number of years.\n     */\n    ChronoUnit.MILLENNIA = new ChronoUnit('Millennia', Duration.ofSeconds(31556952 * 1000));\n    /**\n     * Unit that represents the concept of an era.\n     * The ISO calendar system doesn't have eras thus it is impossible to add\n     * an era to a date or date-time.\n     * The estimated duration of the era is artificially defined as {Year.MAX_VALUE} + 1.\n     *\n     * When used with other calendar systems there are no restrictions on the unit.\n     */\n    ChronoUnit.ERAS = new ChronoUnit('Eras', Duration.ofSeconds(31556952 * (YearConstants.MAX_VALUE + 1)));\n    /**\n     * Artificial unit that represents the concept of forever.\n     * This is primarily used with {@link TemporalField} to represent unbounded fields\n     * such as the year or era.\n     * The estimated duration of the era is artificially defined as the largest duration\n     * supported by {@link Duration}.\n     */\n    ChronoUnit.FOREVER = new ChronoUnit('Forever', Duration.ofSeconds(MathUtil.MAX_SAFE_INTEGER, 999999999));\n}\n", "import { abstractMethodFail } from '../assert';\n\n/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\n/**\n * A field of date-time, such as month-of-year or hour-of-minute.\n *\n * Date and time is expressed using fields which partition the time-line into something\n * meaningful for humans. Implementations of this interface represent those fields.\n *\n * The most commonly used units are defined in {@link ChronoField}.\n * Further fields are supplied in {@link IsoFields}, {@link WeekFields} and {@link JulianFields}.\n * Fields can also be written by application code by implementing this interface.\n *\n * The field works using double dispatch. Client code calls methods on a date-time like\n * {@link LocalDateTime} which check if the field is a {@link ChronoField}.\n * If it is, then the date-time must handle it.\n * Otherwise, the method call is re-dispatched to the matching method in this interface.\n *\n * @interface\n */\nexport class TemporalField {\n    /**\n     * Checks if this field represents a component of a date.\n     *\n     * @return {boolean} `true` if it is a component of a date, `false` otherwise.\n     */\n    isDateBased() {\n        abstractMethodFail('isDateBased');\n    }\n\n    /**\n     * Checks if this field represents a component of a time.\n     *\n     * @return {boolean} `true` if it is a component of a time, `false` otherwise.\n     */\n    isTimeBased() {\n        abstractMethodFail('isTimeBased');\n    }\n\n    /**\n     * Gets the unit that the field is measured in.\n     *\n     * The unit of the field is the period that varies within the range.\n     * For example, in the field 'MonthOfYear', the unit is 'Months'.\n     * See also {@link rangeUnit}.\n     *\n     * @return {TemporalUnit} the period unit defining the base unit of the field.\n     */\n    baseUnit() {\n        abstractMethodFail('baseUnit');\n    }\n\n    /**\n     * Gets the range that the field is bound by.\n     * \n     * The range of the field is the period that the field varies within.\n     * For example, in the field 'MonthOfYear', the range is 'Years'.\n     * See also {@link baseUnit}.\n     * \n     * The range is never null. For example, the 'Year' field is shorthand for\n     * 'YearOfForever'. It therefore has a unit of 'Years' and a range of 'Forever'.\n     *\n     * @return {TemporalUnit} the period unit defining the range of the field.\n     */\n    rangeUnit() {\n        abstractMethodFail('rangeUnit');\n    }\n\n    /**\n     * Gets the range of valid values for the field.\n     *\n     * All fields can be expressed as an integer.\n     * This method returns an object that describes the valid range for that value.\n     * This method is generally only applicable to the ISO-8601 calendar system.\n     *\n     * Note that the result only describes the minimum and maximum valid values\n     * and it is important not to read too much into them. For example, there\n     * could be values within the range that are invalid for the field.\n     *\n     * @return {ValueRange} the range of valid values for the field.\n     */\n    range() {\n        abstractMethodFail('range');\n    }\n\n    /**\n     * Get the range of valid values for this field using the temporal object to\n     * refine the result.\n     *\n     * This uses the temporal object to find the range of valid values for the field.\n     * This is similar to {@link range}, however this method refines the result\n     * using the temporal. For example, if the field is {@link DAY_OF_MONTH} the\n     * {@link range} method is not accurate as there are four possible month lengths,\n     * 28, 29, 30 and 31 days. Using this method with a date allows the range to be\n     * accurate, returning just one of those four options.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#range}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.rangeRefinedBy(temporal);\n     *   temporal = temporal.range(thisField);\n     * </pre>\n     * It is recommended to use the second approach, {@link range},\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * @param {!TemporalAccessor} temporal the temporal object used to refine the result.\n     * @return {ValueRange} the range of valid values for this field.\n     * @throws {DateTimeException} if the range for the field cannot be obtained.\n     * \n     */\n    // eslint-disable-next-line no-unused-vars\n    rangeRefinedBy(temporal) {\n        abstractMethodFail('rangeRefinedBy');\n    }\n\n    /**\n     * Gets the value of this field from the specified temporal object.\n     *\n     * This queries the temporal object for the value of this field.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#get}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.getFrom(temporal);\n     *   temporal = temporal.get(thisField);\n     * </pre>\n     * It is recommended to use the second approach, as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {number} the value of this field.\n     * @throws {DateTimeException} if a value for the field cannot be obtained.\n     */\n    // eslint-disable-next-line no-unused-vars\n    getFrom(temporal) {\n        abstractMethodFail('getFrom');\n    }\n\n    /**\n     * Returns a copy of the specified temporal object with the value of this field set.\n     *\n     * This returns a new temporal object based on the specified one with the value for\n     * this field changed. For example, on a {@link LocalDate}, this could be used to\n     * set the year, month or day-of-month.\n     * The returned object has the same observable type as the specified object.\n     *\n     * In some cases, changing a field is not fully defined. For example, if the target object is\n     * a date representing the 31st January, then changing the month to February would be unclear.\n     * In cases like this, the implementation is responsible for resolving the result.\n     * Typically it will choose the previous valid date, which would be the last valid\n     * day of February in this example.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.adjustInto(temporal);\n     *   temporal = temporal.with(thisField);\n     * </pre>\n     * It is recommended to use the second approach, `with(temporal)`,\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should perform any queries or calculations using the fields\n     * available in {@link ChronoField}.\n     * If the field is not supported a {@link DateTimeException} must be thrown.\n     *\n     * Implementations must not alter the specified temporal object.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {!Temporal} temporal the temporal object to adjust.\n     * @param {!number} newValue the new value of the field.\n     * @return {Temporal} the adjusted temporal object.\n     * @throws {DateTimeException} if the field cannot be set.\n     */\n    // eslint-disable-next-line no-unused-vars\n    adjustInto(temporal, newValue) {\n        abstractMethodFail('adjustInto');\n    }\n\n    /**\n     * Checks if this field is supported by the temporal object.\n     *\n     * This determines whether the temporal accessor supports this field.\n     * If this returns false, the the temporal cannot be queried for this field.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#isSupported}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisField.isSupportedBy(temporal);\n     *   temporal = temporal.isSupported(thisField);\n     * </pre>\n     * It is recommended to use the second approach, `isSupported(temporal)`,\n     * as it is a lot clearer to read in code.\n     *\n     * Implementations should determine whether they are supported using the fields\n     * available in {@link ChronoField}.\n     *\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {boolean} `true` if the date-time can be queried for this field, `false` if not.\n     */\n    // eslint-disable-next-line no-unused-vars\n    isSupportedBy(temporal) {\n        abstractMethodFail('isSupportedBy');\n    }\n\n    /**\n     * @return {string}\n     */\n    displayName(/* TODO: locale */) {\n        abstractMethodFail('displayName');\n    }\n\n    /**\n    * @param {*} other\n    * @returns {boolean}\n    */\n    // eslint-disable-next-line no-unused-vars\n    equals(other) {\n        abstractMethodFail('equals');\n    }\n\n    /**\n     * @returns {string}\n     */\n    name() {\n        abstractMethodFail('name');\n    }\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { assert } from '../assert';\nimport { DateTimeException, IllegalArgumentException } from '../errors';\nimport { MathUtil } from '../MathUtil';\n\n/**\n * The range of valid values for a date-time field.\n *\n * All TemporalField instances have a valid range of values.\n * For example, the ISO day-of-month runs from 1 to somewhere between 28 and 31.\n * This class captures that valid range.\n *\n * It is important to be aware of the limitations of this class.\n * Only the minimum and maximum values are provided.\n * It is possible for there to be invalid values within the outer range.\n * For example, a weird field may have valid values of 1, 2, 4, 6, 7, thus\n * have a range of '1 - 7', despite that fact that values 3 and 5 are invalid.\n *\n * Instances of this class are not tied to a specific field.\n */\nexport class ValueRange {\n\n    /**\n     *\n     * @param {!number} minSmallest\n     * @param {!number} minLargest\n     * @param {!number} maxSmallest\n     * @param {!number} maxLargest\n     * @private\n     */\n    constructor(minSmallest, minLargest, maxSmallest, maxLargest) {\n        assert(!(minSmallest > minLargest), `Smallest minimum value '${minSmallest \n        }' must be less than largest minimum value '${minLargest}'`, IllegalArgumentException);\n        assert(!(maxSmallest > maxLargest), `Smallest maximum value '${maxSmallest \n        }' must be less than largest maximum value '${maxLargest}'`, IllegalArgumentException);\n        assert(!(minLargest > maxLargest), `Minimum value '${minLargest \n        }' must be less than maximum value '${maxLargest}'`, IllegalArgumentException);\n\n        this._minSmallest = minSmallest;\n        this._minLargest = minLargest;\n        this._maxLargest = maxLargest;\n        this._maxSmallest = maxSmallest;\n    }\n\n    /**\n     * Is the value range fixed and fully known.\n     *\n     * For example, the ISO day-of-month runs from 1 to between 28 and 31.\n     * Since there is uncertainty about the maximum value, the range is not fixed.\n     * However, for the month of January, the range is always 1 to 31, thus it is fixed.\n     *\n     * @return {boolean} true if the set of values is fixed\n     */\n    isFixed() {\n        return this._minSmallest === this._minLargest && this._maxSmallest === this._maxLargest;\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    minimum(){\n        return this._minSmallest;\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    largestMinimum(){\n        return this._minLargest;\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    maximum(){\n        return this._maxLargest;\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    smallestMaximum(){\n        return this._maxSmallest;\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    isValidValue(value) {\n        return (this.minimum() <= value && value <= this.maximum());\n    }\n\n    /**\n     *\n     * @param {number} value\n     * @param {TemporalField} field\n     */\n    checkValidValue(value, field) {\n        let msg;\n        if (!this.isValidValue(value)) {\n            if (field != null) {\n                msg = `Invalid value for ${field} (valid values ${this.toString()}): ${value}`;\n            } else {\n                msg = `Invalid value (valid values ${this.toString()}): ${value}`;\n            }\n            return assert(false, msg, DateTimeException);\n        }\n        return value;\n    }\n\n    /**\n     * Checks that the specified value is valid and fits in an `int`.\n     *\n     * This validates that the value is within the valid range of values and that\n     * all valid values are within the bounds of an `int`.\n     * The field is only used to improve the error message.\n     *\n     * @param {number} value - the value to check\n     * @param {TemporalField} field - the field being checked, may be null\n     * @return {number} the value that was passed in\n     * @see #isValidIntValue(long)\n     */\n    checkValidIntValue(value, field) {\n        if (this.isValidIntValue(value) === false) {\n            throw new DateTimeException(`Invalid int value for ${field}: ${value}`);\n        }\n        return value;\n    }\n\n    /**\n     * Checks if the value is within the valid range and that all values\n     * in the range fit in an `int`.\n     *\n     * This method combines {@link isIntValue} and {@link isValidValue}.\n     *\n     * @param {number} value - the value to check\n     * @return true if the value is valid and fits in an `int`\n     */\n    isValidIntValue(value) {\n        return this.isIntValue() && this.isValidValue(value);\n    }\n\n    /**\n     * Checks if all values in the range fit in an `int`.\n     *\n     * This checks that all valid values are within the bounds of an `int`.\n     *\n     * For example, the ISO month-of-year has values from 1 to 12, which fits in an `int`.\n     * By comparison, ISO nano-of-day runs from 1 to 86,400,000,000,000 which does not fit in an `int`.\n     *\n     * This implementation uses {@link getMinimum} and {@link getMaximum}.\n     *\n     * @return boolean if a valid value always fits in an `int`\n     */\n    isIntValue() { // should be isSafeIntegerValue\n        return this.minimum() >= MathUtil.MIN_SAFE_INTEGER && this.maximum() <= MathUtil.MAX_SAFE_INTEGER;\n    }\n\n    /**\n     * Checks if this range is equal to another range.\n     *\n     * The comparison is based on the four values, minimum, largest minimum,\n     * smallest maximum and maximum.\n     * Only objects of type {@link ValueRange} are compared, other types return false.\n     *\n     * @param {*} other - the object to check, null returns false\n     * @return {boolean} true if this is equal to the other range\n     */\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        if (other instanceof ValueRange) {\n            return this._minSmallest === other._minSmallest && this._minLargest === other._minLargest &&\n                this._maxSmallest === other._maxSmallest && this._maxLargest === other._maxLargest;\n        }\n        return false;\n    }\n\n    /**\n     * A hash code for this range.\n     *\n     * @return {number} a suitable hash code\n     */\n    hashCode() {\n        return MathUtil.hashCode(this._minSmallest, this._minLargest, this._maxSmallest, this._maxLargest);\n    }\n\n    /*\n     * Outputs this range as a String.\n     *\n     * The format will be '{min}/{largestMin} - {smallestMax}/{max}',\n     * where the largestMin or smallestMax sections may be omitted, together\n     * with associated slash, if they are the same as the min or max.\n     *\n     * @return {string} a string representation of this range, not null\n     */\n    toString() {\n        let str = this.minimum() + (this.minimum() !== this.largestMinimum() ? `/${this.largestMinimum()}` : '');\n        str += ' - ';\n        str += this.smallestMaximum() + (this.smallestMaximum() !== this.maximum() ? `/${this.maximum()}` : '');\n        return str;\n    }\n\n    /*\n     * called with 2 params: Obtains a fixed value range.\n     *\n     * This factory obtains a range where the minimum and maximum values are fixed.\n     * For example, the ISO month-of-year always runs from 1 to 12.\n     *\n     * @param min  the minimum value\n     * @param max  the maximum value\n     * @return the ValueRange for min, max, not null\n\n     * called with 3 params: Obtains a variable value range.\n     *\n     * This factory obtains a range where the minimum value is fixed and the maximum value may vary.\n     * For example, the ISO day-of-month always starts at 1, but ends between 28 and 31.\n     *\n     * @param min  the minimum value\n     * @param maxSmallest  the smallest maximum value\n     * @param maxLargest  the largest maximum value\n     * @return the ValueRange for min, smallest max, largest max, not null\n\n     * called with 4 params: Obtains a fully variable value range.\n     *\n     * This factory obtains a range where both the minimum and maximum value may vary.\n     *\n     * @param minSmallest  the smallest minimum value\n     * @param minLargest  the largest minimum value\n     * @param maxSmallest  the smallest maximum value\n     * @param maxLargest  the largest maximum value\n     *\n     * @return {ValueRange} the ValueRange for smallest min, largest min, smallest max, largest max, not null\n     */\n    static of() {\n        if (arguments.length === 2) {\n            return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[1]);\n        } else if (arguments.length === 3) {\n            return new ValueRange(arguments[0], arguments[0], arguments[1], arguments[2]);\n        } else if (arguments.length === 4) {\n            return new ValueRange(arguments[0], arguments[1], arguments[2], arguments[3]);\n        } else {\n            return assert(false, `Invalid number of arguments ${arguments.length}`, IllegalArgumentException);\n        }\n    }\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { MAX_SAFE_INTEGER, MIN_SAFE_INTEGER } from '../MathUtil';\n\nimport { ChronoUnit } from './ChronoUnit';\nimport { TemporalField } from './TemporalField';\nimport { ValueRange } from './ValueRange';\nimport { YearConstants } from '../YearConstants';\n\n/**\n * A standard set of fields.\n *\n * This set of fields provide field-based access to manipulate a date, time or date-time.\n * The standard set of fields can be extended by implementing {@link TemporalField}.\n *\n * These fields are intended to be applicable in multiple calendar systems.\n * For example, most non-ISO calendar systems define dates as a year, month and day,\n * just with slightly different rules.\n * The documentation of each field explains how it operates.\n *\n * ### Static properties:\n *\n * - `ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH`: This represents concept of the count of\n * days within the period of a week where the weeks are aligned to the start of the month.\n * This field is typically used with `ALIGNED_WEEK_OF_MONTH`.\n * \n * - `ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR`: This represents concept of the count of days\n * within the period of a week where the weeks are aligned to the start of the year.\n * This field is typically used with `ALIGNED_WEEK_OF_YEAR`.\n * \n * - `ChronoField.ALIGNED_WEEK_OF_MONTH`: This represents concept of the count of weeks within\n * the period of a month where the weeks are aligned to the start of the month. This field\n * is typically used with `ALIGNED_DAY_OF_WEEK_IN_MONTH`.\n * \n * - `ChronoField.ALIGNED_WEEK_OF_YEAR`: This represents concept of the count of weeks within\n * the period of a year where the weeks are aligned to the start of the year. This field\n * is typically used with `ALIGNED_DAY_OF_WEEK_IN_YEAR`.\n * \n * - `ChronoField.AMPM_OF_DAY`: This counts the AM/PM within the day, from 0 (AM) to 1 (PM).\n * \n * - `ChronoField.CLOCK_HOUR_OF_AMPM`: This counts the hour within the AM/PM, from 1 to 12.\n * This is the hour that would be observed on a standard 12-hour analog wall clock.\n * \n * - `ChronoField.CLOCK_HOUR_OF_DAY`: This counts the hour within the AM/PM, from 1 to 24.\n * This is the hour that would be observed on a 24-hour analog wall clock.\n * \n * - `ChronoField.DAY_OF_MONTH`: This represents the concept of the day within the month.\n * In the default ISO calendar system, this has values from 1 to 31 in most months.\n * April, June, September, November have days from 1 to 30, while February has days from\n * 1 to 28, or 29 in a leap year.\n * \n * - `ChronoField.DAY_OF_WEEK`: This represents the standard concept of the day of the week.\n * In the default ISO calendar system, this has values from Monday (1) to Sunday (7).\n * The {@link DayOfWeek} class can be used to interpret the result.\n * \n * - `ChronoField.DAY_OF_YEAR`: This represents the concept of the day within the year.\n * In the default ISO calendar system, this has values from 1 to 365 in standard years and\n * 1 to 366 in leap years.\n * \n * - `ChronoField.EPOCH_DAY`: This field is the sequential count of days where\n * 1970-01-01 (ISO) is zero. Note that this uses the local time-line, ignoring offset and\n * time-zone.\n * \n * - `ChronoField.ERA`: This represents the concept of the era, which is the largest\n * division of the time-line. This field is typically used with `YEAR_OF_ERA`.\n * \n *     In the default ISO calendar system, there are two eras defined, 'BCE' and 'CE'. The era\n * 'CE' is the one currently in use and year-of-era runs from 1 to the maximum value.\n * The era 'BCE' is the previous era, and the year-of-era runs backwards.\n * \n * - `ChronoField.HOUR_OF_AMPM`: This counts the hour within the AM/PM, from 0 to 11.\n * This is the hour that would be observed on a standard 12-hour digital clock.\n * \n * - `ChronoField.HOUR_OF_DAY`: This counts the hour within the day, from 0 to 23. This is\n * the hour that would be observed on a standard 24-hour digital clock.\n * \n * - `ChronoField.INSTANT_SECONDS`: This represents the concept of the sequential count of\n * seconds where 1970-01-01T00:00Z (ISO) is zero. This field may be used with `NANO_OF_DAY`\n * to represent the fraction of the day.\n * \n *     An Instant represents an instantaneous point on the time-line. On their own they have\n * no elements which allow a local date-time to be obtained. Only when paired with an offset\n * or time-zone can the local date or time be found. This field allows the seconds part of\n * the instant to be queried.\n * \n * - `ChronoField.MICRO_OF_DAY`: This counts the microsecond within the day, from 0 to\n * (24 * 60 * 60 * 1,000,000) - 1.\n * \n *     This field is used to represent the micro-of-day handling any fraction of the second.\n * Implementations of {@link TemporalAccessor} should provide a value for this field if they\n * can return a value for `SECOND_OF_DAY` filling unknown precision with zero.\n * \n *     When this field is used for setting a value, it should behave in the same way as\n * setting `NANO_OF_DAY` with the value multiplied by 1,000.\n * \n * - `ChronoField.MICRO_OF_SECOND`: This counts the microsecond within the second, from 0\n * to 999,999.\n * \n *     This field is used to represent the micro-of-second handling any fraction of the second.\n * Implementations of {@link TemporalAccessor} should provide a value for this field if they\n * can return a value for `SECOND_OF_MINUTE`, `SECOND_OF_DAY` or `INSTANT_SECONDS` filling\n * unknown precision with zero.\n * \n * - `ChronoField.MILLI_OF_DAY`: This counts the millisecond within the day, from 0 to\n * (24 * 60 * 60 * 1,000) - 1.\n * \n *     This field is used to represent the milli-of-day handling any fraction of the second.\n * Implementations of {@link TemporalAccessor} should provide a value for this field if they\n * can return a value for `SECOND_OF_DAY` filling unknown precision with zero.\n * \n *     When this field is used for setting a value, it should behave in the same way as\n * setting `NANO_OF_DAY` with the value multiplied by 1,000,000.\n * \n * - `ChronoField.MILLI_OF_SECOND`: This counts the millisecond within the second, from 0 to\n * 999.\n * \n *     This field is used to represent the milli-of-second handling any fraction of the second.\n * Implementations of {@link TemporalAccessor} should provide a value for this field if they can\n * return a value for `SECOND_OF_MINUTE`, `SECOND_OF_DAY` or `INSTANT_SECONDS` filling unknown\n * precision with zero.\n * \n *     When this field is used for setting a value, it should behave in the same way as\n * setting `NANO_OF_SECOND` with the value multiplied by 1,000,000.\n * \n * - `ChronoField.MINUTE_OF_DAY`: This counts the minute within the day, from 0 to (24 * 60) - 1.\n * \n * - `ChronoField.MINUTE_OF_HOUR`: This counts the minute within the hour, from 0 to 59.\n * \n * - `ChronoField.MONTH_OF_YEAR`: The month-of-year, such as March. This represents the concept\n * of the month within the year. In the default ISO calendar system, this has values from\n * January (1) to December (12).\n * \n * - `ChronoField.NANO_OF_DAY`: This counts the nanosecond within the day, from 0 to\n * (24 * 60 * 60 * 1,000,000,000) - 1.\n * \n *     This field is used to represent the nano-of-day handling any fraction of the second.\n * Implementations of {@link TemporalAccessor} should provide a value for this field if they\n * can return a value for `SECOND_OF_DAY` filling unknown precision with zero.\n * \n * - `ChronoField.NANO_OF_SECOND`: This counts the nanosecond within the second, from 0\n * to 999,999,999.\n * \n *     This field is used to represent the nano-of-second handling any fraction of the second.\n * Implementations of {@link TemporalAccessor} should provide a value for this field if they\n * can return a value for `SECOND_OF_MINUTE`, `SECOND_OF_DAY` or `INSTANT_SECONDS` filling\n * unknown precision with zero.\n * \n *     When this field is used for setting a value, it should set as much precision as the\n * object stores, using integer division to remove excess precision. For example, if the\n * {@link TemporalAccessor} stores time to millisecond precision, then the nano-of-second must\n * be divided by 1,000,000 before replacing the milli-of-second.\n * \n * - `ChronoField.OFFSET_SECONDS`: This represents the concept of the offset in seconds of\n * local time from UTC/Greenwich.\n * \n *     A {@link ZoneOffset} represents the period of time that local time differs from\n * UTC/Greenwich. This is usually a fixed number of hours and minutes. It is equivalent to\n * the total amount of the offset in seconds. For example, during the winter Paris has an\n * offset of +01:00, which is 3600 seconds.\n * \n * - `ChronoField.PROLEPTIC_MONTH`: The proleptic-month, which counts months sequentially\n * from year 0.\n * \n *     The first month in year zero has the value zero. The value increase for later months\n * and decrease for earlier ones. Note that this uses the local time-line, ignoring offset\n * and time-zone.\n * \n * - `ChronoField.SECOND_OF_DAY`: This counts the second within the day, from 0 to\n * (24 * 60 * 60) - 1.\n * \n * - `ChronoField.SECOND_OF_MINUTE`: This counts the second within the minute, from 0 to 59.\n * \n * - `ChronoField.YEAR`: The proleptic year, such as 2012. This represents the concept of\n * the year, counting sequentially and using negative numbers. The proleptic year is not\n * interpreted in terms of the era.\n * \n *     The standard mental model for a date is based on three concepts - year, month and day.\n * These map onto the `YEAR`, `MONTH_OF_YEAR` and `DAY_OF_MONTH` fields. Note that there is no\n * reference to eras. The full model for a date requires four concepts - era, year, month and\n * day. These map onto the `ERA`, `YEAR_OF_ERA`, `MONTH_OF_YEAR` and `DAY_OF_MONTH` fields.\n * Whether this field or `YEAR_OF_ERA` is used depends on which mental model is being used.\n * \n * - `ChronoField.YEAR_OF_ERA`: This represents the concept of the year within the era. This\n * field is typically used with `ERA`. The standard mental model for a date is based on three\n * concepts - year, month and day. These map onto the `YEAR`, `MONTH_OF_YEAR` and\n * `DAY_OF_MONTH` fields. Note that there is no reference to eras. The full model for a date\n * requires four concepts - era, year, month and day. These map onto the `ERA`, `YEAR_OF_ERA`,\n * `MONTH_OF_YEAR` and `DAY_OF_MONTH` fields. Whether this field or `YEAR` is used depends on\n * which mental model is being used.\n * \n *     In the default ISO calendar system, there are two eras defined, 'BCE' and 'CE'.\n * The era 'CE' is the one currently in use and year-of-era runs from 1 to the maximum value.\n * The era 'BCE' is the previous era, and the year-of-era runs backwards.\n * \n *     For example, subtracting a year each time yield the following:\n *    - year-proleptic 2 = 'CE' year-of-era 2\n *    - year-proleptic 1 = 'CE' year-of-era 1\n *    - year-proleptic 0 = 'BCE' year-of-era 1\n *    - year-proleptic -1 = 'BCE' year-of-era 2\n * \n *     Note that the ISO-8601 standard does not actually define eras. Note also that the\n * ISO eras do not align with the well-known AD/BC eras due to the change between the Julian\n * and Gregorian calendar systems.\n */\nexport class ChronoField extends TemporalField {\n\n    /**\n     * helper function to get one of the static ChronoField defines by name, needed to resolve ChronoField from EnumMap\n     *\n     * @param {String} fieldName\n     * @return {ChronoField | null}\n     * @private\n     */\n    static byName(fieldName) {\n        for (const prop in ChronoField) {\n            if (ChronoField[prop]) {\n                if ((ChronoField[prop] instanceof ChronoField) && ChronoField[prop].name() === fieldName) {\n                    return ChronoField[prop];\n                }\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {!string} name\n     * @param {!TemporalUnit} baseUnit\n     * @param {!TemporalUnit} rangeUnit\n     * @param {!ValueRange} range\n     * @private\n     */\n    constructor(name, baseUnit, rangeUnit, range) {\n        super();\n        this._name = name;\n        this._baseUnit = baseUnit;\n        this._rangeUnit = rangeUnit;\n        this._range = range;\n    }\n\n    /**\n     * @return {string}\n     */\n    name(){\n        return this._name;\n    }\n\n    /**\n     * @return {TemporalUnit} the period unit defining the base unit of the field.\n     */\n    baseUnit(){\n        return this._baseUnit;\n    }\n\n    /**\n     * @return {TemporalUnit} the period unit defining the range of the field.\n     */\n    rangeUnit(){\n        return this._rangeUnit;\n    }\n\n    /**\n     * @return {ValueRange} the range of valid values for the field.\n     */\n    range(){\n        return this._range;\n    }\n\n    /**\n     * @returns {string}\n     */\n    displayName(){\n        return this.toString();\n    }\n\n    /**\n     * Checks that the specified value is valid for this field.\n     *\n     * This validates that the value is within the outer range of valid values\n     * returned by {@link range}.\n     *\n     * This method checks against the range of the field in the ISO-8601 calendar system.\n     *\n     * @param {!number} value the value to check.\n     * @returns {number} the value that was passed in.\n     */\n    checkValidValue(value) {\n        return this.range().checkValidValue(value, this);\n    }\n\n    /**\n     * Checks that the specified value is valid and fits in an `int`.\n     *\n     * This validates that the value is within the outer range of valid values\n     * returned by {@link range}.\n     * It also checks that all valid values are within the bounds of an `int`.\n     *\n     * This method checks against the range of the field in the ISO-8601 calendar system.\n     *\n     * @param {number} value the value to check.\n     * @return {number} the value that was passed in.\n     */\n    checkValidIntValue(value) {\n        return this.range().checkValidIntValue(value, this);\n    }\n\n    /**\n     * @return {boolean} `true` if it is a component of a date, `false` otherwise.\n     */\n    isDateBased() {\n        const dateBased =\n            this === ChronoField.DAY_OF_WEEK ||\n            this === ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH ||\n            this === ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR ||\n            this === ChronoField.DAY_OF_MONTH ||\n            this === ChronoField.DAY_OF_YEAR ||\n            this === ChronoField.EPOCH_DAY ||\n            this === ChronoField.ALIGNED_WEEK_OF_MONTH ||\n            this === ChronoField.ALIGNED_WEEK_OF_YEAR ||\n            this === ChronoField.MONTH_OF_YEAR ||\n            this === ChronoField.PROLEPTIC_MONTH ||\n            this === ChronoField.YEAR_OF_ERA ||\n            this === ChronoField.YEAR ||\n            this === ChronoField.ERA;\n        return dateBased;\n    }\n\n    /**\n     * @return {boolean} `true` if it is a component of a time, `false` otherwise.\n     */\n    isTimeBased() {\n        const timeBased =\n            this === ChronoField.NANO_OF_SECOND     ||\n            this === ChronoField.NANO_OF_DAY        ||\n            this === ChronoField.MICRO_OF_SECOND    ||\n            this === ChronoField.MICRO_OF_DAY       ||\n            this === ChronoField.MILLI_OF_SECOND    ||\n            this === ChronoField.MILLI_OF_DAY       ||\n            this === ChronoField.SECOND_OF_MINUTE   ||\n            this === ChronoField.SECOND_OF_DAY      ||\n            this === ChronoField.MINUTE_OF_HOUR     ||\n            this === ChronoField.MINUTE_OF_DAY      ||\n            this === ChronoField.HOUR_OF_AMPM       ||\n            this === ChronoField.CLOCK_HOUR_OF_AMPM ||\n            this === ChronoField.HOUR_OF_DAY        ||\n            this === ChronoField.CLOCK_HOUR_OF_DAY  ||\n            this === ChronoField.AMPM_OF_DAY;\n        return timeBased;\n    }\n\n    /**\n     * @param {!TemporalAccessor} temporal the temporal object used to refine the result.\n     * @return {ValueRange} the range of valid values for this field.\n     * @throws {DateTimeException} if the range for the field cannot be obtained.\n     */\n    rangeRefinedBy(temporal) {\n        return temporal.range(this);\n    }\n\n    \n\n    /**\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {number} the value of this field.\n     * @throws {DateTimeException} if a value for the field cannot be obtained.\n     */\n    getFrom(temporal) {\n        return temporal.getLong(this);\n    }\n\n    /**\n     * @returns {string}\n     */\n    toString(){\n        return this.name();\n    }\n\n    /**\n     * @param {*} other\n     * @returns {boolean}\n     */\n    equals(other){\n        return this === other;\n    }\n\n    /**\n     * @param {!Temporal} temporal the temporal object to adjust.\n     * @param {!number} newValue the new value of the field.\n     * @return {Temporal} the adjusted temporal object.\n     * @throws {DateTimeException} if the field cannot be set.\n     */\n    adjustInto(temporal, newValue) {\n        return temporal.with(this, newValue);\n    }\n\n    /**\n     * @param {!TemporalAccesor} temporal the temporal object to query.\n     * @return {boolean} `true` if the date-time can be queried for this field, `false` if not.\n     */\n    isSupportedBy(temporal) {\n        return temporal.isSupported(this);\n    }\n}\n\nexport function _init() {\n\n    ChronoField.NANO_OF_SECOND = new ChronoField('NanoOfSecond', ChronoUnit.NANOS, ChronoUnit.SECONDS, ValueRange.of(0, 999999999));\n\n    ChronoField.NANO_OF_DAY = new ChronoField('NanoOfDay', ChronoUnit.NANOS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000000000 - 1));\n\n    ChronoField.MICRO_OF_SECOND = new ChronoField('MicroOfSecond', ChronoUnit.MICROS, ChronoUnit.SECONDS, ValueRange.of(0, 999999));\n\n    ChronoField.MICRO_OF_DAY = new ChronoField('MicroOfDay', ChronoUnit.MICROS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000000 - 1));\n\n    ChronoField.MILLI_OF_SECOND = new ChronoField('MilliOfSecond', ChronoUnit.MILLIS, ChronoUnit.SECONDS, ValueRange.of(0, 999));\n\n    ChronoField.MILLI_OF_DAY = new ChronoField('MilliOfDay', ChronoUnit.MILLIS, ChronoUnit.DAYS, ValueRange.of(0, 86400 * 1000 - 1));\n\n    ChronoField.SECOND_OF_MINUTE = new ChronoField('SecondOfMinute', ChronoUnit.SECONDS, ChronoUnit.MINUTES, ValueRange.of(0, 59));\n\n    ChronoField.SECOND_OF_DAY = new ChronoField('SecondOfDay', ChronoUnit.SECONDS, ChronoUnit.DAYS, ValueRange.of(0, 86400 - 1));\n\n    ChronoField.MINUTE_OF_HOUR = new ChronoField('MinuteOfHour', ChronoUnit.MINUTES, ChronoUnit.HOURS, ValueRange.of(0, 59));\n\n    ChronoField.MINUTE_OF_DAY = new ChronoField('MinuteOfDay', ChronoUnit.MINUTES, ChronoUnit.DAYS, ValueRange.of(0, (24 * 60) - 1));\n\n    ChronoField.HOUR_OF_AMPM = new ChronoField('HourOfAmPm', ChronoUnit.HOURS, ChronoUnit.HALF_DAYS, ValueRange.of(0, 11));\n\n    ChronoField.CLOCK_HOUR_OF_AMPM = new ChronoField('ClockHourOfAmPm', ChronoUnit.HOURS, ChronoUnit.HALF_DAYS, ValueRange.of(1, 12));\n\n    ChronoField.HOUR_OF_DAY = new ChronoField('HourOfDay', ChronoUnit.HOURS, ChronoUnit.DAYS, ValueRange.of(0, 23));\n\n    ChronoField.CLOCK_HOUR_OF_DAY = new ChronoField('ClockHourOfDay', ChronoUnit.HOURS, ChronoUnit.DAYS, ValueRange.of(1, 24));\n\n    ChronoField.AMPM_OF_DAY = new ChronoField('AmPmOfDay', ChronoUnit.HALF_DAYS, ChronoUnit.DAYS, ValueRange.of(0, 1));\n\n    ChronoField.DAY_OF_WEEK = new ChronoField('DayOfWeek', ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n\n    ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH = new ChronoField('AlignedDayOfWeekInMonth', ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n\n    ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR = new ChronoField('AlignedDayOfWeekInYear', ChronoUnit.DAYS, ChronoUnit.WEEKS, ValueRange.of(1, 7));\n\n    ChronoField.DAY_OF_MONTH = new ChronoField('DayOfMonth', ChronoUnit.DAYS, ChronoUnit.MONTHS, ValueRange.of(1, 28, 31), 'day');\n\n    ChronoField.DAY_OF_YEAR = new ChronoField('DayOfYear', ChronoUnit.DAYS, ChronoUnit.YEARS, ValueRange.of(1, 365, 366));\n\n    ChronoField.EPOCH_DAY = new ChronoField('EpochDay', ChronoUnit.DAYS, ChronoUnit.FOREVER, ValueRange.of(-365961662, 364522971)); // [LocalDate.MIN.toEpochDay() .. LocalDate.MAX.toEpochDay()]\n\n    ChronoField.ALIGNED_WEEK_OF_MONTH = new ChronoField('AlignedWeekOfMonth', ChronoUnit.WEEKS, ChronoUnit.MONTHS, ValueRange.of(1, 4, 5));\n\n    ChronoField.ALIGNED_WEEK_OF_YEAR = new ChronoField('AlignedWeekOfYear', ChronoUnit.WEEKS, ChronoUnit.YEARS, ValueRange.of(1, 53));\n\n    ChronoField.MONTH_OF_YEAR = new ChronoField('MonthOfYear', ChronoUnit.MONTHS, ChronoUnit.YEARS, ValueRange.of(1, 12), 'month');\n\n    ChronoField.PROLEPTIC_MONTH = new ChronoField('ProlepticMonth', ChronoUnit.MONTHS, ChronoUnit.FOREVER, ValueRange.of(YearConstants.MIN_VALUE * 12, YearConstants.MAX_VALUE * 12 + 11));\n\n    ChronoField.YEAR_OF_ERA = new ChronoField('YearOfEra', ChronoUnit.YEARS, ChronoUnit.FOREVER, ValueRange.of(1, YearConstants.MAX_VALUE, YearConstants.MAX_VALUE + 1));\n\n    ChronoField.YEAR = new ChronoField('Year', ChronoUnit.YEARS, ChronoUnit.FOREVER, ValueRange.of(YearConstants.MIN_VALUE, YearConstants.MAX_VALUE), 'year');\n\n    ChronoField.ERA = new ChronoField('Era', ChronoUnit.ERAS, ChronoUnit.FOREVER, ValueRange.of(0, 1));\n\n    ChronoField.INSTANT_SECONDS = new ChronoField('InstantSeconds', ChronoUnit.SECONDS, ChronoUnit.FOREVER, ValueRange.of(MIN_SAFE_INTEGER, MAX_SAFE_INTEGER));\n\n    ChronoField.OFFSET_SECONDS = new ChronoField('OffsetSeconds', ChronoUnit.SECONDS, ChronoUnit.FOREVER, ValueRange.of(-18 * 3600, 18 * 3600));\n\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\n/**\n * Common implementations of {@link TemporalQuery}.\n *\n * This class provides common implementations of {@link TemporalQuery}.\n * These queries are primarily used as optimizations, allowing the internals\n * of other objects to be extracted effectively. Note that application code\n * can also use the {@link from} method on most temporal\n * objects as a method reference matching the query interface, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on the interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   dateTime = query.queryFrom(dateTime);\n *   dateTime = dateTime.query(query);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n */\nexport class TemporalQueries {\n\n    /**\n     * A strict query for the {@link ZoneId}.\n     *\n     * This queries a {@link TemporalAccessor} for the zone.\n     * The zone is only returned if the date-time conceptually contains a {@link ZoneId}.\n     * It will not be returned if the date-time only conceptually has an {@link ZoneOffset}.\n     * Thus a {@link ZonedDateTime} will return the result of\n     * {@link getZone}, but an {@link OffsetDateTime} will\n     * return null.\n     *\n     * In most cases, applications should use {@link ZONE} as this query is too strict.\n     *\n     * The result from JDK classes implementing {@link TemporalAccessor} is as follows:\n     * * * {@link LocalDate} returns null\n     * * {@link LocalTime} returns null\n     * * {@link LocalDateTime} returns null\n     * * {@link ZonedDateTime} returns the associated zone\n     * * {@link OffsetTime} returns null\n     * * {@link OffsetDateTime} returns null\n     * * {@link ChronoLocalDate} returns null\n     * * {@link ChronoLocalDateTime} returns null\n     * * {@link ChronoZonedDateTime} returns the associated zone\n     * * {@link Era} returns null\n     * * {@link DayOfWeek} returns null\n     * * {@link Month} returns null\n     * * {@link Year} returns null\n     * * {@link YearMonth} returns null\n     * * {@link MonthDay} returns null\n     * * {@link ZoneOffset} returns null\n     * * {@link Instant} returns null\n     *\n     * @return a query that can obtain the zone ID of a temporal, not null\n     */\n    static zoneId() {\n        return TemporalQueries.ZONE_ID;\n    }\n\n    /**\n     * A query for the {@link Chronology}.\n     *\n     * This queries a {@link TemporalAccessor} for the chronology.\n     * If the target {@link TemporalAccessor} represents a date, or part of a date,\n     * then it should return the chronology that the date is expressed in.\n     * As a result of this definition, objects only representing time, such as\n     * {@link LocalTime}, will return null.\n     *\n     * The result from js-joda classes implementing {@link TemporalAccessor} is as follows:\n     *\n     * * {@link LocalDate} returns * {@link IsoChronology.INSTANCE}\n     * * {@link LocalTime} returns null (does not represent a date)\n     * * {@link LocalDateTime} returns * {@link IsoChronology.INSTANCE}\n     * * {@link ZonedDateTime} returns * {@link IsoChronology.INSTANCE}\n     * * {@link OffsetTime} returns null (does not represent a date)\n     * * {@link OffsetDateTime} returns * {@link IsoChronology.INSTANCE}\n     * * {@link ChronoLocalDate} returns the associated chronology\n     * * {@link ChronoLocalDateTime} returns the associated chronology\n     * * {@link ChronoZonedDateTime} returns the associated chronology\n     * * {@link Era} returns the associated chronology\n     * * {@link DayOfWeek} returns null (shared across chronologies)\n     * * {@link Month} returns * {@link IsoChronology.INSTANCE}\n     * * {@link Year} returns * {@link IsoChronology.INSTANCE}\n     * * {@link YearMonth} returns * {@link IsoChronology.INSTANCE}\n     * * {@link MonthDay} returns null * {@link IsoChronology.INSTANCE}\n     * * {@link ZoneOffset} returns null (does not represent a date)\n     * * {@link Instant} returns null (does not represent a date)\n     *\n     * The method {@link Chronology#from} can be used as a\n     * {@link TemporalQuery}\n     * That method is equivalent to this query, except that it throws an\n     * exception if a chronology cannot be obtained.\n     *\n     * @return {TemporalQuery} a query that can obtain the chronology of a temporal, not null\n     */\n    static chronology() {\n        return TemporalQueries.CHRONO;\n    }\n\n    /**\n     * A query for the smallest supported unit.\n     *\n     * This queries a {@link TemporalAccessor} for the time precision.\n     * If the target {@link TemporalAccessor} represents a consistent or complete date-time,\n     * date or time then this must return the smallest precision actually supported.\n     * Note that fields such as {@link NANO_OF_DAY} and {@link NANO_OF_SECOND}\n     * are defined to always return ignoring the precision, thus this is the only\n     * way to find the actual smallest supported unit.\n     * For example, were {@link GregorianCalendar} to implement {@link TemporalAccessor}\n     * it would return a precision of {@link MILLIS}.\n     *\n     * The result from js-joda classes implementing {@link TemporalAccessor} is as follows:\n     *\n     * {@link LocalDate} returns {@link DAYS}\n     * {@link LocalTime} returns {@link NANOS}\n     * {@link LocalDateTime} returns {@link NANOS}\n     * {@link ZonedDateTime} returns {@link NANOS}\n     * {@link OffsetTime} returns {@link NANOS}\n     * {@link OffsetDateTime} returns {@link NANOS}\n     * {@link ChronoLocalDate} returns {@link DAYS}\n     * {@link ChronoLocalDateTime} returns {@link NANOS}\n     * {@link ChronoZonedDateTime} returns {@link NANOS}\n     * {@link Era} returns {@link ERAS}\n     * {@link DayOfWeek} returns {@link DAYS}\n     * {@link Month} returns {@link MONTHS}\n     * {@link Year} returns {@link YEARS}\n     * {@link YearMonth} returns {@link MONTHS}\n     * {@link MonthDay} returns null (does not represent a complete date or time)\n     * {@link ZoneOffset} returns null (does not represent a date or time)\n     * {@link Instant} returns {@link NANOS}\n     *\n     * @return a query that can obtain the precision of a temporal, not null\n     */\n    static precision() {\n        return TemporalQueries.PRECISION;\n    }\n\n    /**\n     * A lenient query for the {@link ZoneId}, falling back to the {@link ZoneOffset}.\n     *\n     * This queries a {@link TemporalAccessor} for the zone.\n     * It first tries to obtain the zone, using {@link zoneId}.\n     * If that is not found it tries to obtain the {@link offset}.\n     *\n     * In most cases, applications should use this query rather than {@link zoneId}.\n     *\n     * This query examines the {@link ChronoField#OFFSET_SECONDS}\n     * field and uses it to create a {@link ZoneOffset}.\n     *\n     * The method {@link ZoneId#from} can be used as a\n     * {@link TemporalQuery} via a method reference, {@link ZoneId::from}.\n     * That method is equivalent to this query, except that it throws an\n     * exception if a zone cannot be obtained.\n     *\n     * @return a query that can obtain the zone ID or offset of a temporal, not null\n     */\n    static zone() {\n        return TemporalQueries.ZONE;\n    }\n\n    /**\n     * A query for {@link ZoneOffset} returning null if not found.\n     *\n     * This returns a {@link TemporalQuery} that can be used to query a temporal\n     * object for the offset. The query will return null if the temporal\n     * object cannot supply an offset.\n     *\n     * The query implementation examines the {@link ChronoField#OFFSET_SECONDS}\n     * field and uses it to create a {@link ZoneOffset}.\n     *\n     * The method {@link java.time.ZoneOffset#from} can be used as a\n     * {@link TemporalQuery} via a method reference, {@link ZoneOffset::from}.\n     * This query and {@link ZoneOffset::from} will return the same result if the\n     * temporal object contains an offset. If the temporal object does not contain\n     * an offset, then the method reference will throw an exception, whereas this\n     * query will return null.\n     *\n     * @return a query that can obtain the offset of a temporal, not null\n     */\n    static offset() {\n        return TemporalQueries.OFFSET;\n    }\n\n    /**\n     * A query for {@link LocalDate} returning null if not found.\n     *\n     * This returns a {@link TemporalQuery} that can be used to query a temporal\n     * object for the local date. The query will return null if the temporal\n     * object cannot supply a local date.\n     *\n     * The query implementation examines the {@link ChronoField#EPOCH_DAY}\n     * field and uses it to create a {@link LocalDate}.\n     *\n     * @return a query that can obtain the date of a temporal, not null\n     */\n    static localDate() {\n        return TemporalQueries.LOCAL_DATE;\n    }\n\n    /**\n     * A query for {@link LocalTime} returning null if not found.\n     *\n     * This returns a {@link TemporalQuery} that can be used to query a temporal\n     * object for the local time. The query will return null if the temporal\n     * object cannot supply a local time.\n     *\n     * The query implementation examines the {@link ChronoField#NANO_OF_DAY}\n     * field and uses it to create a {@link LocalTime}.\n     *\n     * @return a query that can obtain the time of a temporal, not null\n     */\n    static localTime() {\n        return TemporalQueries.LOCAL_TIME;\n    }\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { UnsupportedTemporalTypeException } from '../errors';\nimport { abstractMethodFail } from '../assert';\n\nimport { ChronoField } from './ChronoField';\nimport { TemporalQueries } from './TemporalQueries';\n\nexport class TemporalAccessor {\n    /**\n     * Queries this date-time.\n     *\n     * This queries this date-time using the specified query strategy object.\n     *\n     * Queries are a key tool for extracting information from date-times.\n     * They exists to externalize the process of querying, permitting different\n     * approaches, as per the strategy design pattern.\n     * Examples might be a query that checks if the date is the day before February 29th\n     * in a leap year, or calculates the number of days to your next birthday.\n     *\n     * The most common query implementations are method references, such as\n     * {@link LocalDate::from} and {@link ZoneId::from}.\n     * Further implementations are on {@link TemporalQueries}.\n     * Queries may also be defined by applications.\n     *\n     * @implSpec\n     * Implementations of this method must behave as follows:\n     * <pre>\n        if (query == TemporalQueries.zoneId()\n            || query == TemporalQueries.chronology()\n            || query == TemporalQueries.precision()) {\n                return null;\n        }\n        return query.queryFrom(this);\n     * </pre>\n     *\n     * @param {TemporalQuery} query  the query to invoke, not null\n     * @return the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    query(query) {\n        if (query === TemporalQueries.zoneId()\n                || query === TemporalQueries.chronology()\n                || query === TemporalQueries.precision()) {\n            return null;\n        }\n        return query.queryFrom(this);\n    }\n\n    /**\n     * Gets the value of the specified field as an `int`.\n     *\n     * This queries the date-time for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If the date-time cannot return the value, because the field is unsupported or for\n     * some other reason, an exception will be thrown.\n     *\n     * ### Specification for implementors\n     *\n     * Implementations must check and handle all fields defined in {@link ChronoField}.\n     * If the field is supported and has an `int` range, then the value of\n     * the field must be returned.\n     * If unsupported, then a {@link DateTimeException} must be thrown.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument.\n     *\n     * Implementations must not alter either this object.\n     *\n     * @param {TemporalField} field - the field to get, not null\n     * @return {number} the value for the field, within the valid range of values\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws DateTimeException if the range of valid values for the field exceeds an `int`\n     * @throws DateTimeException if the value is outside the range of valid values for the field\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    get(field) {\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    getLong(field) {\n        abstractMethodFail('getLong');\n    }\n\n    /**\n     * Gets the range of valid values for the specified field.\n     *\n     * All fields can be expressed as a `long` integer.\n     * This method returns an object that describes the valid range for that value.\n     * The value of this temporal object is used to enhance the accuracy of the returned range.\n     * If the date-time cannot return the range, because the field is unsupported or for\n     * some other reason, an exception will be thrown.\n     *\n     * Note that the result only describes the minimum and maximum valid values\n     * and it is important not to read too much into them. For example, there\n     * could be values within the range that are invalid for the field.\n     *\n     * ### Specification for implementors\n     *\n     * Implementations must check and handle all fields defined in {@link ChronoField}.\n     * If the field is supported, then the range of the field must be returned.\n     * If unsupported, then a {@link DateTimeException} must be thrown.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.rangeRefinedBy}\n     * passing `this` as the argument.\n     *\n     * Implementations must not alter either this object.\n     *\n     * @param {TemporalField} field  the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     */\n    range(field) {\n        if (field instanceof ChronoField) {\n            if (this.isSupported(field)) {\n                return field.range();\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.rangeRefinedBy(this);\n    }\n\n    // eslint-disable-next-line no-unused-vars\n    isSupported(field) {\n        abstractMethodFail('isSupported');\n    }\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { abstractMethodFail } from '../assert';\nimport { Enum } from '../Enum';\n\n\n/**\n * Strategy for querying a temporal object.\n *\n * Queries are a key tool for extracting information from temporal objects.\n * They exist to externalize the process of querying, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be a query that checks if the date is the day before February 29th\n * in a leap year, or calculates the number of days to your next birthday.\n *\n * The {@link TemporalField} interface provides another mechanism for querying\n * temporal objects. That interface is limited to returning a `long`.\n * By contrast, queries can return any type.\n *\n * There are two equivalent ways of using a {@link TemporalQuery}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link TemporalAccessor#query}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisQuery.queryFrom(temporal);\n *   temporal = temporal.query(thisQuery);\n * </pre>\n * It is recommended to use the second approach, {@link query},\n * as it is a lot clearer to read in code.\n *\n * The most common implementations are method references, such as\n * {@link LocalDate::from} and {@link ZoneId::from}.\n * Further implementations are on {@link TemporalQueries}.\n * Queries may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n */\nexport class TemporalQuery  extends Enum {\n    /**\n     * Queries the specified temporal object.\n     *\n     * This queries the specified temporal object to return an object using the logic\n     * encapsulated in the implementing class.\n     * Examples might be a query that checks if the date is the day before February 29th\n     * in a leap year, or calculates the number of days to your next birthday.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link TemporalAccessor#query}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisQuery.queryFrom(temporal);\n     *   temporal = temporal.query(thisQuery);\n     * </pre>\n     * It is recommended to use the second approach, {@link query},\n     * as it is a lot clearer to read in code.\n     *\n     * ### Specification for implementors\n     *\n     * The implementation must take the input object and query it.\n     * The implementation defines the logic of the query and is responsible for\n     * documenting that logic.\n     * It may use any method on {@link TemporalAccessor} to determine the result.\n     * The input object must not be altered.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to query, not null\n     * @return the queried value, may return null to indicate not found\n     * @throws DateTimeException if unable to query\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    // eslint-disable-next-line no-unused-vars\n    queryFrom(temporal){\n        abstractMethodFail('queryFrom');\n    }\n\n}\n\n/**\n * @private\n *\n * Factory to create something similar to the JSR-310 {TemporalQuery} interface, takes a function and returns a new TemporalQuery object that presents that function\n * as the queryFrom() function.\n * @param name for the underlying Enum\n * @param queryFromFunction\n */\nexport function createTemporalQuery(name, queryFromFunction) {\n    class ExtendedTemporalQuery extends TemporalQuery {\n\n    }\n\n    ExtendedTemporalQuery.prototype.queryFrom = queryFromFunction;\n    return new ExtendedTemporalQuery(name);\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { DateTimeException, UnsupportedTemporalTypeException, NullPointerException } from './errors';\nimport { MathUtil } from './MathUtil';\nimport { assert, requireNonNull, requireInstance } from './assert';\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { IllegalArgumentException } from './errors';\nimport { TemporalAccessor } from './temporal/TemporalAccessor';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { createTemporalQuery } from './temporal/TemporalQuery';\n\n/**\n * ### Static properties of Class {@link DayOfWeek}\n *\n * DayOfWeek.MONDAY,\n * DayOfWeek.TUESDAY,\n * DayOfWeek.WEDNESDAY,\n * DayOfWeek.THURSDAY,\n * DayOfWeek.FRIDAY,\n * DayOfWeek.SATURDAY,\n * DayOfWeek.SUNDAY\n *\n */\nexport class DayOfWeek extends TemporalAccessor {\n\n    /**\n     *\n     * @param {number} ordinal\n     * @param {string} name\n     * @private\n     */\n    constructor(ordinal, name){\n        super();\n        this._ordinal = ordinal;\n        this._name = name;\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    ordinal(){\n        return this._ordinal;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    name(){\n        return this._name;\n    }\n\n    /**\n     *\n     * @returns {DayOfWeek[]}\n     */\n    static values() {\n        return ENUMS.slice();\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {DayOfWeek}\n     */\n    static valueOf(name) {\n        let ordinal = 0;\n        for(ordinal; ordinal < ENUMS.length; ordinal++){\n            if(ENUMS[ordinal].name() === name){\n                break;\n            }\n        }\n        return DayOfWeek.of(ordinal+1);\n    }\n\n    /**\n     * Obtains an instance of {@link DayOfWeek} from an `int` value.\n     *\n     * {@link DayOfWeek} is an enum representing the 7 days of the week.\n     * This factory allows the enum to be obtained from the `int` value.\n     * The `int` value follows the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).\n     *\n     * @param {!number} dayOfWeek  the day-of-week to represent, from 1 (Monday) to 7 (Sunday)\n     * @return {DayOfWeek} the day-of-week singleton, not null\n     * @throws DateTimeException if the day-of-week is invalid\n     */\n    static of(dayOfWeek) {\n        if (dayOfWeek < 1 || dayOfWeek > 7) {\n            throw new DateTimeException(`Invalid value for DayOfWeek: ${dayOfWeek}`);\n        }\n        return ENUMS[dayOfWeek - 1];\n    }\n\n    /**\n     * Obtains an instance of {@link DayOfWeek} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link DayOfWeek}.\n     *\n     * The conversion extracts the {@link ChronoField#DAY_OF_WEEK} field.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used as a query via method reference, {@link DayOfWeek::from}.\n     *\n     * @param {TemporalAccessor} temporal - the temporal object to convert, not null\n     * @return {DayOfWeek} the day-of-week, not null\n     * @throws DateTimeException if unable to convert to a {@link DayOfWeek}\n     */\n    static from(temporal) {\n        assert(temporal != null, 'temporal', NullPointerException);\n        if (temporal instanceof DayOfWeek) {\n            return temporal;\n        }\n        try {\n            return DayOfWeek.of(temporal.get(ChronoField.DAY_OF_WEEK));\n        } catch (ex) {\n            if(ex instanceof DateTimeException) {\n                throw new DateTimeException(`Unable to obtain DayOfWeek from TemporalAccessor: ${ \n                    temporal}, type ${temporal.constructor != null ? temporal.constructor.name : ''}`, ex);\n            } else {\n                throw ex;\n            }\n        }\n    }\n\n    /**\n     * Gets the day-of-week `int` value.\n     *\n     * The values are numbered following the ISO-8601 standard, from 1 (Monday) to 7 (Sunday).\n     * See {@link WeekFields#dayOfWeek} for localized week-numbering.\n     *\n     * @return {number} the day-of-week, from 1 (Monday) to 7 (Sunday)\n     */\n    value() {\n        return this._ordinal + 1;\n    }\n\n    /**\n     * Gets the textual representation, such as 'Mon' or 'Friday'.\n     *\n     * This returns the textual name used to identify the day-of-week.\n     * The parameters control the length of the returned text and the locale.\n     *\n     * If no textual mapping is found then the numeric value (see {@link getValue}) is returned.\n     *\n     * @param {TextStyle} style - the length of the text required, not null\n     * @param {Locale} locale - the locale to use, not null\n     * @return {string} the text value of the day-of-week, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    displayName(style, locale) {\n        throw new IllegalArgumentException('Pattern using (localized) text not implemented yet!');\n        // return new DateTimeFormatterBuilder().appendText(ChronoField.DAY_OF_WEEK, style).toFormatter(locale).format(this);\n    }\n\n    /**\n     * Checks if the specified field is supported.\n     *\n     * This checks if this day-of-week can be queried for the specified field.\n     * If false, then calling the {@link range} and\n     * {@link get} methods will throw an exception.\n     *\n     * If the field is {@link ChronoField#DAY_OF_WEEK} then\n     * this method returns true.\n     * All other {@link ChronoField} instances will return false.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking `TemporalField.isSupportedBy(TemporalAccessor)`\n     * passing `this` as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField} field - the field to check, null returns false\n     * @return {boolean} true if the field is supported on this day-of-week, false if not\n     */\n    isSupported(field) {\n        if (field instanceof ChronoField) {\n            return field === ChronoField.DAY_OF_WEEK;\n        }\n        return field != null && field.isSupportedBy(this);\n    }\n\n    /**\n     * Gets the range of valid values for the specified field.\n     *\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This day-of-week is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is {@link ChronoField#DAY_OF_WEEK} then the\n     * range of the day-of-week, from 1 to 7, will be returned.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking `TemporalField.rangeRefinedBy(TemporalAccessor)`\n     * passing `this` as the argument.\n     * Whether the range can be obtained is determined by the field.\n     *\n     * @param {TemporalField} field - the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     */\n    range(field) {\n        if (field === ChronoField.DAY_OF_WEEK) {\n            return field.range();\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.rangeRefinedBy(this);\n    }\n\n    /**\n     * Gets the value of the specified field from this day-of-week as an `int`.\n     *\n     * This queries this day-of-week for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is {@link ChronoField#DAY_OF_WEEK} then the\n     * value of the day-of-week, from 1 to 7, will be returned.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field - the field to get, not null\n     * @return {number} the value for the field, within the valid range of values\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws DateTimeException if the range of valid values for the field exceeds an `int`\n     * @throws DateTimeException if the value is outside the range of valid values for the field\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    get(field) {\n        if (field === ChronoField.DAY_OF_WEEK) {\n            return this.value();\n        }\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    }\n\n    /**\n     * Gets the value of the specified field from this day-of-week as a `long`.\n     *\n     * This queries this day-of-week for the value for the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is {@link ChronoField#DAY_OF_WEEK} then the\n     * value of the day-of-week, from 1 to 7, will be returned.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field - the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    getLong(field) {\n        if (field === ChronoField.DAY_OF_WEEK) {\n            return this.value();\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.getFrom(this);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the day-of-week that is the specified number of days after this one.\n     *\n     * The calculation rolls around the end of the week from Sunday to Monday.\n     * The specified period may be negative.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} days - the days to add, positive or negative\n     * @return {DayOfWeek} the resulting day-of-week, not null\n     */\n    plus(days) {\n        const amount = MathUtil.floorMod(days, 7);\n        return ENUMS[MathUtil.floorMod(this._ordinal + (amount + 7), 7)];\n    }\n\n    /**\n     * Returns the day-of-week that is the specified number of days before this one.\n     *\n     * The calculation rolls around the start of the year from Monday to Sunday.\n     * The specified period may be negative.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} days - the days to subtract, positive or negative\n     * @return {DayOfWeek} the resulting day-of-week, not null\n     */\n    minus(days) {\n        return this.plus(-1 * MathUtil.floorMod(days, 7));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Queries this day-of-week using the specified query.\n     *\n     * This queries this day-of-week using the specified query strategy object.\n     * The {@link TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom} method on the\n     * specified query passing `this` as the argument.\n     *\n     * @param {TemporalQuery} query  the query to invoke, not null\n     * @return {*} the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query (defined by the query)\n     * @throws ArithmeticException if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        if (query === TemporalQueries.precision()) {\n            return ChronoUnit.DAYS;\n        } else if (query === TemporalQueries.localDate() || query === TemporalQueries.localTime() || query === TemporalQueries.chronology() ||\n                query === TemporalQueries.zone() || query === TemporalQueries.zoneId() || query === TemporalQueries.offset()) {\n            return null;\n        }\n        assert(query != null, 'query', NullPointerException);\n        return query.queryFrom(this);\n    }\n\n    /**\n     * Adjusts the specified temporal object to have this day-of-week.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with the day-of-week changed to be the same as this.\n     *\n     * The adjustment is equivalent to using {@link Temporal#with}\n     * passing {@link ChronoField#DAY_OF_WEEK} as the field.\n     * Note that this adjusts forwards or backwards within a Monday to Sunday week.\n     * See {@link WeekFields#dayOfWeek} for localized week start days.\n     * See {@link TemporalAdjusters} for other adjusters\n     * with more control, such as `next(MONDAY)`.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisDayOfWeek.adjustInto(temporal);\n     *   temporal = temporal.with(thisDayOfWeek);\n     * </pre>\n     *\n     * For example, given a date that is a Wednesday, the following are output:\n     * <pre>\n     *   dateOnWed.with(MONDAY);     // two days earlier\n     *   dateOnWed.with(TUESDAY);    // one day earlier\n     *   dateOnWed.with(WEDNESDAY);  // same date\n     *   dateOnWed.with(THURSDAY);   // one day later\n     *   dateOnWed.with(FRIDAY);     // two days later\n     *   dateOnWed.with(SATURDAY);   // three days later\n     *   dateOnWed.with(SUNDAY);     // four days later\n     * </pre>\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalAdjusters} temporal  the target object to be adjusted, not null\n     * @return {Temporal} the adjusted object, not null\n     * @throws DateTimeException if unable to make the adjustment\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    adjustInto(temporal) {\n        requireNonNull(temporal, 'temporal');\n        return temporal.with(ChronoField.DAY_OF_WEEK, this.value());\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    equals(other){ \n        return this === other;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString(){\n        return this._name;\n    }\n\n    /**\n     * Compares this DayOfWeek to another DayOfWeek.\n     *\n     * The comparison is based on the value of the DayOfWeek.\n     * It is \"consistent with equals\", as defined by {@link Comparable}.\n     *\n     * @param {DayOfWeek} other  the other year to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     */    \n    compareTo(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, DayOfWeek, 'other');\n        return this._ordinal - other._ordinal;\n    }\n\n    /**\n     * toJSON() use by JSON.stringify\n     * delegates to toString()\n     *\n     * @return {string}\n     */\n    toJSON() {\n        return this.toString();\n    }\n}\n\nlet ENUMS;\n\nexport function _init() {\n    DayOfWeek.MONDAY = new DayOfWeek(0, 'MONDAY');\n    DayOfWeek.TUESDAY = new DayOfWeek(1, 'TUESDAY');\n    DayOfWeek.WEDNESDAY = new DayOfWeek(2, 'WEDNESDAY');\n    DayOfWeek.THURSDAY = new DayOfWeek(3, 'THURSDAY');\n    DayOfWeek.FRIDAY = new DayOfWeek(4, 'FRIDAY');\n    DayOfWeek.SATURDAY = new DayOfWeek(5, 'SATURDAY');\n    DayOfWeek.SUNDAY = new DayOfWeek(6, 'SUNDAY');\n\n    DayOfWeek.FROM = createTemporalQuery('DayOfWeek.FROM', (temporal) => {\n        return DayOfWeek.from(temporal);\n    });\n\n    ENUMS = [\n        DayOfWeek.MONDAY,\n        DayOfWeek.TUESDAY,\n        DayOfWeek.WEDNESDAY,\n        DayOfWeek.THURSDAY,\n        DayOfWeek.FRIDAY,\n        DayOfWeek.SATURDAY,\n        DayOfWeek.SUNDAY\n    ];\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { assert, requireNonNull, requireInstance } from './assert';\nimport { MathUtil } from './MathUtil';\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { DateTimeException, IllegalArgumentException, UnsupportedTemporalTypeException } from './errors';\nimport { IsoChronology } from './chrono/IsoChronology';\nimport { TemporalAccessor } from './temporal/TemporalAccessor';\nimport { TemporalQueries } from './temporal/TemporalQueries';\n\n/**\n * A month-of-year, such as 'July'.\n *\n * {@link Month} is representing the 12 months of the year -\n * January, February, March, April, May, June, July, August, September, October,\n * November and December.\n *\n * In addition to the textual name, each month-of-year has an `int` value.\n * The `int` value follows normal usage and the ISO-8601 standard,\n * from 1 (January) to 12 (December). It is recommended that applications use the static values defined by this class\n * rather than the `int` value to ensure code clarity.\n *\n * This class represents a common concept that is found in many calendar systems.\n * As such, this class may be used by any calendar system that has the month-of-year\n * concept defined exactly equivalent to the ISO-8601 calendar system.\n *\n * ### Static properties of Class {@link Month}\n *\n * Month.JANUARY, Month.FEBRUARY, Month.MARCH, Month.APRIL, Month.MAY, Month.JUNE,\n * Month.JULY, Month.AUGUST, Month.SEPTEMBER, Month.OCTOBER, Month.NOVEMBER, Month.DECEMBER\n *\n */\nexport class Month extends TemporalAccessor {\n\n    /**\n     *\n     * @param {number} ordinal\n     * @param {string} name\n     * @private\n     */\n    constructor(value, name){\n        super();\n        this._value = MathUtil.safeToInt(value);\n        this._name = name;\n    }    \n\n    /**\n     *\n     * @return {number} gets the value\n     */\n    value() {\n        return this._value;\n    }\n    \n    /**\n     *\n     * @returns {number}\n     */\n    ordinal(){\n        return this._value - 1;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    name(){\n        return this._name;\n    }  \n\n    /**\n     * Gets the textual representation, such as 'Jan' or 'December'.\n     *\n     * This returns the textual name used to identify the month-of-year.\n     * The parameters control the length of the returned text and the locale.\n     *\n     * If no textual mapping is found then the numeric value (see {@link getValue}) is returned.\n     *\n     * @param {TextStyle} style - the length of the text required, not null\n     * @param {Locale} locale - the locale to use, not null\n     * @return {string} the text value of the day-of-week, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    displayName(style, locale) {\n        // TODO:\n        throw new IllegalArgumentException('Pattern using (localized) text not implemented yet!');\n    }\n\n    /**\n     * Checks if the specified field is supported.\n     *\n     * This checks if this month-of-year can be queried for the specified field.\n     * If false, then calling the range (see {@link range}) and\n     * get (see {@link get}) methods will throw an exception.\n     *\n     * If the field is MONTH_OF_YEAR (see {@link ChronoField#MONTH_OF_YEAR}) then\n     * this method returns true.\n     * All other {@link ChronoField} instances will return false.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.isSupportedBy}\n     * passing `this` as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField} field - the field to check, null returns false\n     * @return {boolean} true if the field is supported on this month-of-year, false if not\n     */\n    isSupported(field) {\n        if (null === field) {\n            return false;\n        }\n        if (field instanceof ChronoField) {\n            return field === ChronoField.MONTH_OF_YEAR;\n        }\n        return field != null && field.isSupportedBy(this);\n    }\n\n    /**\n     * Gets the value of the specified field from this month-of-year as an `int`.\n     *\n     * This queries this month for the value of the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is MONTH_OF_YEAR (see {@link ChronoField#MONTH_OF_YEAR}) then the\n     * value of the month-of-year, from 1 to 12, will be returned.\n     * All other {@link ChronoField} instances will throw an {@link UnsupportedTemporalTypeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field - the field to get, not null\n     * @return {Number} the value for the field, within the valid range of values\n     * @throws DateTimeException if a value for the field cannot be obtained or\n     *         the value is outside the range of valid values for the field\n     * @throws UnsupportedTemporalTypeException if the field is not supported or\n     *         the range of values exceeds an `int`\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    get(field) {\n        if (field === ChronoField.MONTH_OF_YEAR) {\n            return this.value();\n        }\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    }\n\n    /**\n     * Gets the value of the specified field from this month-of-year as a `long`.\n     *\n     * This queries this month for the value of the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is MONTH_OF_YEAR (see {@link ChronoField#MONTH_OF_YEAR}) then the\n     * value of the month-of-year, from 1 to 12, will be returned.\n     * All other {@link ChronoField} instances will throw an {@link UnsupportedTemporalTypeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field - the field to get, not null\n     * @return {Number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    getLong(field) {\n        if (field === ChronoField.MONTH_OF_YEAR) {\n            return this.value();\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.getFrom(this);\n    }\n\n    /**\n     * Returns the month-of-year that is the specified number of months after this one.\n     *\n     * The calculation rolls around the end of the year from December to January.\n     * The specified period may be negative.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months - the months to add, positive or negative\n     * @return {Month} the resulting month, not null\n     */\n    plus(months) {\n        const amount = MathUtil.intMod(months, 12) + 12; // + 12 to make sure negative arguments are positive, the total is \"corrected\" by the next % 12\n        let newMonthVal = MathUtil.intMod((this.value() + amount), 12);\n        /* December is 12, not 0, but 12 % 12 = 0 */\n        newMonthVal = newMonthVal === 0 ? 12 : newMonthVal;\n        return Month.of(newMonthVal);\n    }\n\n    /**\n     * Returns the month-of-year that is the specified number of months before this one.\n     *\n     * The calculation rolls around the start of the year from January to December.\n     * The specified period may be negative.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months - the months to subtract, positive or negative\n     * @return {Month} the resulting month, not null\n     */\n    minus(months) {\n        return this.plus(-1 * MathUtil.intMod(months, 12));\n    }\n\n    /**\n     * Gets the length of this month in days.\n     *\n     * This takes a flag to determine whether to return the length for a leap year or not.\n     *\n     * February has 28 days in a standard year and 29 days in a leap year.\n     * April, June, September and November have 30 days.\n     * All other months have 31 days.\n     *\n     * @param {boolean} leapYear - true if the length is required for a leap year\n     * @return {number} the length of this month in days, from 28 to 31\n     */\n    length(leapYear) {\n        switch (this) {\n            case Month.FEBRUARY:\n                return (leapYear ? 29 : 28);\n            case Month.APRIL:\n            case Month.JUNE:\n            case Month.SEPTEMBER:\n            case Month.NOVEMBER:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n\n    /**\n     * Gets the minimum length of this month in days.\n     *\n     * February has a minimum length of 28 days.\n     * April, June, September and November have 30 days.\n     * All other months have 31 days.\n     *\n     * @return {number} the minimum length of this month in days, from 28 to 31\n     */\n    minLength() {\n        switch (this) {\n            case Month.FEBRUARY:\n                return 28;\n            case Month.APRIL:\n            case Month.JUNE:\n            case Month.SEPTEMBER:\n            case Month.NOVEMBER:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n\n    /**\n     * Gets the maximum length of this month in days.\n     *\n     * February has a maximum length of 29 days.\n     * April, June, September and November have 30 days.\n     * All other months have 31 days.\n     *\n     * @return {number} the maximum length of this month in days, from 29 to 31\n     */\n    maxLength() {\n        switch (this) {\n            case Month.FEBRUARY:\n                return 29;\n            case Month.APRIL:\n            case Month.JUNE:\n            case Month.SEPTEMBER:\n            case Month.NOVEMBER:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n\n    /**\n     * Gets the day-of-year corresponding to the first day of this month.\n     *\n     * This returns the day-of-year that this month begins on, using the leap\n     * year flag to determine the length of February.\n     *\n     * @param {boolean} leapYear - true if the length is required for a leap year\n     * @return {number} the day of year corresponding to the first day of this month, from 1 to 336\n     */\n    firstDayOfYear(leapYear) {\n        const leap = leapYear ? 1 : 0;\n        switch (this) {\n            case Month.JANUARY:\n                return 1;\n            case Month.FEBRUARY:\n                return 32;\n            case Month.MARCH:\n                return 60 + leap;\n            case Month.APRIL:\n                return 91 + leap;\n            case Month.MAY:\n                return 121 + leap;\n            case Month.JUNE:\n                return 152 + leap;\n            case Month.JULY:\n                return 182 + leap;\n            case Month.AUGUST:\n                return 213 + leap;\n            case Month.SEPTEMBER:\n                return 244 + leap;\n            case Month.OCTOBER:\n                return 274 + leap;\n            case Month.NOVEMBER:\n                return 305 + leap;\n            case Month.DECEMBER:\n            default:\n                return 335 + leap;\n        }\n    }\n\n    /**\n     * Gets the month corresponding to the first month of this quarter.\n     *\n     * The year can be divided into four quarters.\n     * This method returns the first month of the quarter for the base month.\n     * January, February and March return January.\n     * April, May and June return April.\n     * July, August and September return July.\n     * October, November and December return October.\n     *\n     * @return {Month} the first month of the quarter corresponding to this month, not null\n     */\n    firstMonthOfQuarter() {\n        switch (this) {\n            case Month.JANUARY:\n            case Month.FEBRUARY:\n            case Month.MARCH:\n                return Month.JANUARY;\n            case Month.APRIL:\n            case Month.MAY:\n            case Month.JUNE:\n                return Month.APRIL;\n            case Month.JULY:\n            case Month.AUGUST:\n            case Month.SEPTEMBER:\n                return Month.JULY;\n            case Month.OCTOBER:\n            case Month.NOVEMBER:\n            case Month.DECEMBER:\n            default:\n                return Month.OCTOBER;\n        }\n    }\n\n    /**\n     * Queries this month-of-year using the specified query.\n     *\n     * This queries this month-of-year using the specified query strategy object.\n     * The {@link TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom} method on the\n     * specified query passing `this` as the argument.\n     *\n     * @param {TemporalQuery} query - the query to invoke, not null\n     * @return {*} the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query (defined by the query)\n     * @throws ArithmeticException if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        assert(query != null, 'query() parameter must not be null', DateTimeException);\n        if (query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        } else if (query === TemporalQueries.precision()) {\n            return ChronoUnit.MONTHS;\n        }\n        return super.query(query);\n    }\n\n\n\n    /**\n     * toString implementation... in JDK this is inherited from the Enum class\n     *\n     * @return {String}\n     */\n    toString() {\n        switch (this) {\n            case Month.JANUARY:\n                return 'JANUARY';\n            case Month.FEBRUARY:\n                return 'FEBRUARY';\n            case Month.MARCH:\n                return 'MARCH';\n            case Month.APRIL:\n                return 'APRIL';\n            case Month.MAY:\n                return 'MAY';\n            case Month.JUNE:\n                return 'JUNE';\n            case Month.JULY:\n                return 'JULY';\n            case Month.AUGUST:\n                return 'AUGUST';\n            case Month.SEPTEMBER:\n                return 'SEPTEMBER';\n            case Month.OCTOBER:\n                return 'OCTOBER';\n            case Month.NOVEMBER:\n                return 'NOVEMBER';\n            case Month.DECEMBER:\n                return 'DECEMBER';\n            default:\n                return `unknown Month, value: ${this.value()}`;\n        }\n    }\n\n    /**\n     * toJSON() use by JSON.stringify\n     * delegates to toString()\n     *\n     * @return {string}\n     */\n    toJSON() {\n        return this.toString();\n    }\n\n    /**\n     * Adjusts the specified temporal object to have this month-of-year.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with the month-of-year changed to be the same as this.\n     *\n     * The adjustment is equivalent to using {@link Temporal#with}\n     * passing {@link ChronoField#MONTH_OF_YEAR} as the field.\n     * If the specified temporal object does not use the ISO calendar system then\n     * a {@link DateTimeException} is thrown.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisMonth.adjustInto(temporal);\n     *   temporal = temporal.with(thisMonth);\n     * </pre>\n     *\n     * For example, given a date in May, the following are output:\n     * <pre>\n     *   dateInMay.with(JANUARY);    // four months earlier\n     *   dateInMay.with(APRIL);      // one months earlier\n     *   dateInMay.with(MAY);        // same date\n     *   dateInMay.with(JUNE);       // one month later\n     *   dateInMay.with(DECEMBER);   // seven months later\n     * </pre>\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} temporal - the target object to be adjusted, not null\n     * @return {Temporal} the adjusted object, not null\n     * @throws DateTimeException if unable to make the adjustment\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    adjustInto(temporal) {\n        /* we support only ISO for now\n            if (Chronology.from(temporal).equals(IsoChronology.INSTANCE) === false) {\n                throw new DateTimeException('Adjustment only supported on ISO date-time');\n            }\n        */\n        return temporal.with(ChronoField.MONTH_OF_YEAR, this.value());\n    }\n    \n    /**\n     * Compares this Month to another Month.\n     *\n     * The comparison is based on the value of the Month.\n     * It is \"consistent with equals\", as defined by {@link Comparable}.\n     *\n     * @param {Month} other  the other year to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     */    \n    compareTo(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, Month, 'other');\n        return this._value - other._value;\n    }    \n    \n    /**\n     *\n     * @returns {boolean}\n     */\n    equals(other){    \n        return this === other;\n    }\n\n    /**\n     *\n     * @param {string} name\n     * @returns {Month}\n     */\n    static valueOf(name) {\n        let ordinal = 0;\n        for(ordinal; ordinal < MONTHS.length; ordinal++){\n            if(MONTHS[ordinal].name() === name){\n                break;\n            }\n        }\n        return Month.of(ordinal+1);\n    }\n    \n\n    /**\n     * replacement for enum values\n     * @return {Month[]}\n     */\n    static values(){\n        return MONTHS.slice();\n    }\n\n    /**\n     *\n     * @param {number} month\n     * @return {Month} not null\n     **/\n    static of(month) {\n        if (month < 1 || month > 12) {\n            assert(false, `Invalid value for MonthOfYear: ${month}`, DateTimeException);\n        }\n        return MONTHS[month-1];\n    }\n\n    /**\n     * Obtains an instance of {@link Month} from a temporal object.\n     *\n     * This obtains a month based on the specified temporal.\n     * A {@link TemporalAccessor} represents an arbitrary set of date and time information,\n     * which this factory converts to an instance of {@link Month}.\n     *\n     * The conversion extracts the MONTH_OF_YEAR (see {@link ChronoField#MONTH_OF_YEAR}) field.\n     * The extraction is only permitted if the temporal object has an ISO\n     * chronology, or can be converted to a {@link LocalDate}.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used in queries via method reference, {@link Month::from}.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to convert, not null\n     * @return {Month} the month-of-year, not null\n     * @throws DateTimeException if unable to convert to a {@link Month}\n     */\n    static from(temporal) {\n        if (temporal instanceof Month) {\n            return temporal;\n        }\n        try {\n            /* only ISO for now\n            if (IsoChronology.INSTANCE.equals(Chronology.from(temporal)) == false) {\n                temporal = LocalDate.from(temporal);\n            }*/\n            return Month.of(temporal.get(ChronoField.MONTH_OF_YEAR));\n        } catch (ex) {\n            throw new DateTimeException(`Unable to obtain Month from TemporalAccessor: ${ \n                temporal} of type ${temporal && temporal.constructor != null ? temporal.constructor.name : ''}`, ex);\n        }\n    }\n}\n\nlet MONTHS;\n\nexport function _init() {\n    Month.JANUARY = new Month(1, 'JANUARY');\n    Month.FEBRUARY = new Month(2, 'FEBRUARY');\n    Month.MARCH = new Month(3, 'MARCH');\n    Month.APRIL = new Month(4, 'APRIL');\n    Month.MAY = new Month(5, 'MAY');\n    Month.JUNE = new Month(6, 'JUNE');\n    Month.JULY = new Month(7, 'JULY');\n    Month.AUGUST = new Month(8, 'AUGUST');\n    Month.SEPTEMBER = new Month(9, 'SEPTEMBER');\n    Month.OCTOBER = new Month(10, 'OCTOBER');\n    Month.NOVEMBER = new Month(11, 'NOVEMBER');\n    Month.DECEMBER = new Month(12, 'DECEMBER');\n\n    MONTHS = [\n        Month.JANUARY, Month.FEBRUARY, Month.MARCH, Month.APRIL, Month.MAY, Month.JUNE,\n        Month.JULY, Month.AUGUST, Month.SEPTEMBER, Month.OCTOBER, Month.NOVEMBER, Month.DECEMBER\n    ];\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { MathUtil } from './MathUtil';\nimport { requireNonNull, requireInstance } from './assert';\nimport { DateTimeException, UnsupportedTemporalTypeException, ArithmeticException, DateTimeParseException } from './errors';\n\nimport { IsoChronology } from './chrono/IsoChronology';\n\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { TemporalAmount } from './temporal/TemporalAmount';\n\nimport { LocalDate } from './LocalDate';\n\n/**\n * The pattern for parsing.\n */\nconst PATTERN = /([-+]?)P(?:([-+]?[0-9]+)Y)?(?:([-+]?[0-9]+)M)?(?:([-+]?[0-9]+)W)?(?:([-+]?[0-9]+)D)?/;\n\n/**\n * A date-based amount of time, such as '2 years, 3 months and 4 days'.\n *\n * This class models a quantity or amount of time in terms of years, months and days.\n * See {@link Duration} for the time-based equivalent to this class.\n *\n * Durations and period differ in their treatment of daylight savings time\n * when added to {@link ZonedDateTime}. A {@link Duration} will add an exact\n * number of seconds, thus a duration of one day is always exactly 24 hours.\n * By contrast, a {@link Period} will add a conceptual day, trying to maintain\n * the local time.\n *\n * For example, consider adding a period of one day and a duration of one day to\n * 18:00 on the evening before a daylight savings gap. The {@link Period} will add\n * the conceptual day and result in a {@link ZonedDateTime} at 18:00 the following day.\n * By contrast, the {@link Duration} will add exactly 24 hours, resulting in a\n * {@link ZonedDateTime} at 19:00 the following day (assuming a one hour DST gap).\n *\n * The supported units of a period are {@link ChronoUnit#YEARS},\n * {@link ChronoUnit#MONTHS} and {@link ChronoUnit#DAYS}.\n * All three fields are always present, but may be set to zero.\n *\n * The period may be used with any calendar system.\n * The meaning of a 'year' or 'month' is only applied when the object is added to a date.\n *\n * The period is modeled as a directed amount of time, meaning that individual parts of the\n * period may be negative.\n *\n * The months and years fields may be normalized (see {@link normalized}).\n * The normalization assumes a 12 month year, so is not appropriate for all calendar systems.\n *\n * ### Static properties of Class {@link Period}\n *\n * Period.ZERO\n *\n * A constant for a period of zero.\n *\n */\nexport class Period extends TemporalAmount /* extends ChronoPeriod */ {\n\n    /**\n     * do not call the constructor directly\n     * use a factory method instead\n     *\n     * @param {number} years\n     * @param {number} months\n     * @param {number} days\n     * @private\n     */\n    constructor(years, months, days){\n        super();\n        \n        const _years = MathUtil.safeToInt(years);\n        const _months =  MathUtil.safeToInt(months);\n        const _days = MathUtil.safeToInt(days);\n\n        if( _years === 0 && _months === 0 && _days === 0 ){\n            if (!Period.ZERO) {\n                this._years = _years;\n                this._months =  _months;\n                this._days = _days;\n                Period.ZERO = this;\n            }\n            return Period.ZERO;\n        }\n        \n        /**\n         * The number of years.\n         */\n        this._years = _years;\n        /**\n         * The number of months.\n         */\n        this._months =  _months;\n        /**\n         * The number of days.\n         */\n        this._days = _days;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains a {@link Period} representing a number of years.\n     *\n     * The resulting period will have the specified years.\n     * The months and days units will be zero.\n     *\n     * @param {number} years - the number of years, positive or negative\n     * @return {Period} the period of years, not null\n     */\n    static ofYears(years) {\n        return Period.create(years, 0, 0);\n    }\n\n    /**\n     * Obtains a {@link Period} representing a number of months.\n     *\n     * The resulting period will have the specified months.\n     * The years and days units will be zero.\n     *\n     * @param {number} months - the number of months, positive or negative\n     * @return {Period} the period of months, not null\n     */\n    static ofMonths(months) {\n        return Period.create(0, months, 0);\n    }\n\n    /**\n     * Obtains a {@link Period} representing a number of weeks.\n     *\n     * The resulting period will have days equal to the weeks multiplied by seven.\n     * The years and months units will be zero.\n     *\n     * @param {number} weeks - the number of weeks, positive or negative\n     * @return {Period} the period of days, not null\n     */\n    static ofWeeks(weeks) {\n        return Period.create(0, 0, MathUtil.safeMultiply(weeks, 7));\n    }\n\n    /**\n     * Obtains a {@link Period} representing a number of days.\n     *\n     * The resulting period will have the specified days.\n     * The years and months units will be zero.\n     *\n     * @param {number} days - the number of days, positive or negative\n     * @return {Period} the period of days, not null\n     */\n    static ofDays(days) {\n        return Period.create(0, 0, days);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains a {@link Period} representing a number of years, months and days.\n     *\n     * This creates an instance based on years, months and days.\n     *\n     * @param {!number} years - the amount of years, may be negative\n     * @param {!number} months - the amount of months, may be negative\n     * @param {!number} days - the amount of days, may be negative\n     * @return {Period} the period of years, months and days, not null\n     */\n    static of(years, months, days) {\n        return Period.create(years, months, days);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link Period} from a temporal amount.\n     *\n     * This obtains a period based on the specified amount.\n     * A {@link TemporalAmount} represents an - amount of time, which may be\n     * date-based or time-based, which this factory extracts to a {@link Period}.\n     *\n     * The conversion loops around the set of units from the amount and uses\n     * the {@link ChronoUnit#YEARS}, {@link ChronoUnit#MONTHS}\n     * and {@link ChronoUnit#DAYS} units to create a period.\n     * If any other units are found then an exception is thrown.\n     *\n     * If the amount is a {@link ChronoPeriod} then it must use the ISO chronology.\n     *\n     * @param {TemporalAmount} amount - the temporal amount to convert, not null\n     * @return {Period} the equivalent period, not null\n     * @throws DateTimeException if unable to convert to a {@link Period}\n     * @throws ArithmeticException if the amount of years, months or days exceeds an int\n     */\n    static from(amount) {\n        if (amount instanceof Period) {\n            return amount;\n        }\n        /*\n        if (amount instanceof ChronoPeriod) {\n            if (IsoChronology.INSTANCE !== amount.chronology()) {\n                throw new DateTimeException('Period requires ISO chronology: ' + amount);\n            }\n        }\n*/\n        requireNonNull(amount, 'amount');\n        let years = 0;\n        let months = 0;\n        let days = 0;\n        const units = amount.units();\n        for (let i=0; i<units.length; i++) {\n            const unit = units[i];\n            const unitAmount = amount.get(unit);\n            if (unit === ChronoUnit.YEARS) {\n                years = MathUtil.safeToInt(unitAmount);\n            } else if (unit === ChronoUnit.MONTHS) {\n                months = MathUtil.safeToInt(unitAmount);\n            } else if (unit === ChronoUnit.DAYS) {\n                days = MathUtil.safeToInt(unitAmount);\n            } else {\n                throw new DateTimeException(`Unit must be Years, Months or Days, but was ${unit}`);\n            }\n        }\n        return Period.create(years, months, days);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains a {@link Period} consisting of the number of years, months,\n     * and days between two dates.\n     *\n     * The start date is included, but the end date is not.\n     * The period is calculated by removing complete months, then calculating\n     * the remaining number of days, adjusting to ensure that both have the same sign.\n     * The number of months is then split into years and months based on a 12 month year.\n     * A month is considered if the end day-of-month is greater than or equal to the start day-of-month.\n     * For example, from `2010-01-15` to `2011-03-18` is one year, two months and three days.\n     *\n     * The result of this method can be a negative period if the end is before the start.\n     * The negative sign will be the same in each of year, month and day.\n\n     * see {@link ChronoLocalDate.until}\n     *\n     * @param {LocalDate} startDate - the start date, inclusive, not null\n     * @param {LocalDate} endDate - the end date, exclusive, not null\n     * @return {Period} the period between this date and the end date, not null\n     */\n    static between(startDate, endDate) {\n        requireNonNull(startDate, 'startDate');\n        requireNonNull(endDate, 'endDate');\n        requireInstance(startDate, LocalDate, 'startDate');\n        requireInstance(endDate, LocalDate, 'endDate');\n        return startDate.until(endDate);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains a {@link Period} from a text string such as {@link PnYnMnD}.\n     *\n     * This will parse the string produced by {@link toString} which is\n     * based on the ISO-8601 period formats {@link PnYnMnD} and {@link PnW}.\n     *\n     * The string starts with an optional sign, denoted by the ASCII negative\n     * or positive symbol. If negative, the whole period is negated.\n     * The ASCII letter 'P' is next in upper or lower case.\n     * There are then four sections, each consisting of a number and a suffix.\n     * At least one of the four sections must be present.\n     * The sections have suffixes in ASCII of 'Y', 'M', 'W' and 'D' for\n     * years, months, weeks and days, accepted in upper or lower case.\n     * The suffixes must occur in order.\n     * The number part of each section must consist of ASCII digits.\n     * The number may be prefixed by the ASCII negative or positive symbol.\n     * The number must parse to an `int`.\n     *\n     * The leading plus/minus sign, and negative values for other units are\n     * not part of the ISO-8601 standard. In addition, ISO-8601 does not\n     * permit mixing between the {@link PnYnMnD} and {@link PnW} formats.\n     * Any week-based input is multiplied by 7 and treated as a number of days.\n     *\n     * For example, the following are valid inputs:\n     * <pre>\n     *   'P2Y'             -- Period.ofYears(2)\n     *   'P3M'             -- Period.ofMonths(3)\n     *   'P4W'             -- Period.ofWeeks(4)\n     *   'P5D'             -- Period.ofDays(5)\n     *   'P1Y2M3D'         -- Period.of(1, 2, 3)\n     *   'P1Y2M3W4D'       -- Period.of(1, 2, 25)\n     *   'P-1Y2M'          -- Period.of(-1, 2, 0)\n     *   '-P1Y2M'          -- Period.of(-1, -2, 0)\n     * </pre>\n     *\n     * @param {string} text - the text to parse, not null\n     * @return {Period} the parsed period, not null\n     * @throws DateTimeParseException if the text cannot be parsed to a period\n     */\n    static parse(text) {\n        requireNonNull(text, 'text');\n        try {\n            return Period._parse(text);\n        } catch (ex){\n            if(ex instanceof ArithmeticException){\n                throw new DateTimeParseException('Text cannot be parsed to a Period', text, 0, ex);\n            } else {\n                throw ex;\n            }\n        }\n    }\n\n    /**\n     * because functions that containing a try/ catch block cant be optimized,\n     * we put the code in a sub function.\n     */\n    static _parse(text){\n        const matches = PATTERN.exec(text);\n        if (matches != null) {\n            const negate = '-' === matches[1] ? -1 : 1;\n            const yearMatch = matches[2];\n            const monthMatch = matches[3];\n            const weekMatch = matches[4];\n            const dayMatch = matches[5];\n            if (yearMatch != null || monthMatch != null || weekMatch != null || dayMatch != null) {\n                const years = Period._parseNumber(text, yearMatch, negate);\n                const months = Period._parseNumber(text, monthMatch, negate);\n                const weeks = Period._parseNumber(text, weekMatch, negate);\n                let days = Period._parseNumber(text, dayMatch, negate);\n                days = MathUtil.safeAdd(days, MathUtil.safeMultiply(weeks, 7));\n                return Period.create(years, months, days);\n            }\n        }\n        throw new DateTimeParseException('Text cannot be parsed to a Period', text, 0);\n    }\n\n    static _parseNumber(text, str, negate) {\n        if (str == null) {\n            return 0;\n        }\n        const val = MathUtil.parseInt(str);\n        return MathUtil.safeMultiply(val, negate);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Creates an instance.\n     *\n     * @param {number} years - the amount\n     * @param {number} months - the amount\n     * @param {number} days - the amount\n     * @return {Duration}\n     */\n    static create(years, months, days) {\n        return new Period(years, months, days);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the list of units, from largest to smallest, that fully define this amount.\n     *\n     * @returns {ChronoUnit[]} list of units\n     */\n    units() {\n        return [ChronoUnit.YEARS, ChronoUnit.MONTHS, ChronoUnit.DAYS];\n    }\n\n    /**\n     * Gets the chronology that defines the meaning of the supported units.\n     *\n     * The period is defined by the chronology.\n     * It controls the supported units and restricts addition/subtraction\n     * to {@link ChronoLocalDate} instances of the same chronology.\n     *\n     * @return {IsoChronology} the chronology defining the period, not null\n     */\n    chronology() {\n        return IsoChronology.INSTANCE;\n    }\n\n    /**\n     * Gets the value of the requested unit.\n     *\n     * The supported units are chronology specific.\n     * They will typically be {@link ChronoUnit#YEARS},\n     * {@link ChronoUnit#MONTHS} and {@link ChronoUnit#DAYS}.\n     * Requesting an unsupported unit will throw an exception.\n     *\n     * @param {TemporalUnit} unit the {@link TemporalUnit} for which to return the value\n     * @return {number} the long value of the unit\n     * @throws DateTimeException if the unit is not supported\n     * @throws UnsupportedTemporalTypeException if the unit is not supported\n     */\n    get(unit) {\n        if (unit === ChronoUnit.YEARS) {\n            return this._years;\n        }\n        if (unit === ChronoUnit.MONTHS) {\n            return this._months;\n        }\n        if (unit === ChronoUnit.DAYS) {\n            return this._days;\n        }\n        throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if all three units of this period are zero.\n     *\n     * A zero period has the value zero for the years, months and days units.\n     *\n     * @return {boolean} true if this period is zero-length\n     */\n    isZero() {\n        return (this === Period.ZERO);\n    }\n\n    /**\n     * Checks if any of the three units of this period are negative.\n     *\n     * This checks whether the years, months or days units are less than zero.\n     *\n     * @return {boolean} true if any unit of this period is negative\n     */\n    isNegative() {\n        return this._years < 0 || this._months < 0 || this._days < 0;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the amount of years of this period.\n     *\n     * This returns the years unit.\n     *\n     * The months unit is not normalized with the years unit.\n     * This means that a period of '15 months' is different to a period\n     * of '1 year and 3 months'.\n     *\n     * @return {number} the amount of years of this period, may be negative\n     */\n    years() {\n        return this._years;\n    }\n\n    /**\n     * Gets the amount of months of this period.\n     *\n     * This returns the months unit.\n     *\n     * The months unit is not normalized with the years unit.\n     * This means that a period of '15 months' is different to a period\n     * of '1 year and 3 months'.\n     *\n     * @return {number} the amount of months of this period, may be negative\n     */\n    months() {\n        return this._months;\n    }\n\n    /**\n     * Gets the amount of days of this period.\n     *\n     * This returns the days unit.\n     *\n     * @return {number} the amount of days of this period, may be negative\n     */\n    days() {\n        return this._days;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this period with the specified amount of years.\n     *\n     * This sets the amount of the years unit in a copy of this period.\n     * The months and days units are unaffected.\n     *\n     * The months unit is not normalized with the years unit.\n     * This means that a period of '15 months' is different to a period\n     * of '1 year and 3 months'.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} years - the years to represent, may be negative\n     * @return {Period} a {@link Period} based on this period with the requested years, not null\n     */\n    withYears(years) {\n        if (years === this._years) {\n            return this;\n        }\n        return Period.create(years, this._months, this._days);\n    }\n\n    /**\n     * Returns a copy of this period with the specified amount of months.\n     *\n     * This sets the amount of the months unit in a copy of this period.\n     * The years and days units are unaffected.\n     *\n     * The months unit is not normalized with the years unit.\n     * This means that a period of '15 months' is different to a period\n     * of '1 year and 3 months'.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months - the months to represent, may be negative\n     * @return {Period} a {@link Period} based on this period with the requested months, not null\n     */\n    withMonths(months) {\n        if (months === this._months) {\n            return this;\n        }\n        return Period.create(this._years, months, this._days);\n    }\n\n    /**\n     * Returns a copy of this period with the specified amount of days.\n     *\n     * This sets the amount of the days unit in a copy of this period.\n     * The years and months units are unaffected.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} days - the days to represent, may be negative\n     * @return {Period} a {@link Period} based on this period with the requested days, not null\n     */\n    withDays(days) {\n        if (days === this._days) {\n            return this;\n        }\n        return Period.create(this._years, this._months, days);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this period with the specified amount added.\n     *\n     * This input amount is converted to a {@link Period} using {@link from}.\n     * This operates separately on the years, months and days.\n     *\n     * For example, '1 year, 6 months and 3 days' plus '2 years, 2 months and 2 days'\n     * returns '3 years, 8 months and 5 days'.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalAmount} amountToAdd - the period to add, not null\n     * @return {Period} a {@link Period} based on this period with the requested period added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plus(amountToAdd) {\n        const amount = Period.from(amountToAdd);\n        return Period.create(\n            MathUtil.safeAdd(this._years, amount._years),\n            MathUtil.safeAdd(this._months, amount._months),\n            MathUtil.safeAdd(this._days, amount._days));\n    }\n\n    /**\n     * Returns a copy of this period with the specified years added.\n     *\n     * This adds the amount to the years unit in a copy of this period.\n     * The months and days units are unaffected.\n     * For example, '1 year, 6 months and 3 days' plus 2 years returns '3 years, 6 months and 3 days'.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} yearsToAdd - the years to add, positive or negative\n     * @return {Period} a {@link Period} based on this period with the specified years added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusYears(yearsToAdd) {\n        if (yearsToAdd === 0) {\n            return this;\n        }\n        return Period.create(MathUtil.safeToInt(MathUtil.safeAdd(this._years, yearsToAdd)), this._months, this._days);\n    }\n\n    /**\n     * Returns a copy of this period with the specified months added.\n     *\n     * This adds the amount to the months unit in a copy of this period.\n     * The years and days units are unaffected.\n     * For example, '1 year, 6 months and 3 days' plus 2 months returns '1 year, 8 months and 3 days'.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} monthsToAdd - the months to add, positive or negative\n     * @return {Period} a {@link Period} based on this period with the specified months added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusMonths(monthsToAdd) {\n        if (monthsToAdd === 0) {\n            return this;\n        }\n        return Period.create(this._years, MathUtil.safeToInt(MathUtil.safeAdd(this._months, monthsToAdd)), this._days);\n    }\n\n    /**\n     * Returns a copy of this period with the specified days added.\n     *\n     * This adds the amount to the days unit in a copy of this period.\n     * The years and months units are unaffected.\n     * For example, '1 year, 6 months and 3 days' plus 2 days returns '1 year, 6 months and 5 days'.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} daysToAdd - the days to add, positive or negative\n     * @return {Period} a {@link Period} based on this period with the specified days added, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusDays(daysToAdd) {\n        if (daysToAdd === 0) {\n            return this;\n        }\n        return Period.create(this._years, this._months, MathUtil.safeToInt(MathUtil.safeAdd(this._days, daysToAdd)));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this period with the specified amount subtracted.\n     *\n     * This input amount is converted to a {@link Period} using {@link from}.\n     * This operates separately on the years, months and days.\n     *\n     * For example, '1 year, 6 months and 3 days' minus '2 years, 2 months and 2 days'\n     * returns '-1 years, 4 months and 1 day'.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalAmount} amountToSubtract - the period to subtract, not null\n     * @return {Period} a {@link Period} based on this period with the requested period subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minus(amountToSubtract) {\n        const amount = Period.from(amountToSubtract);\n        return Period.create(\n            MathUtil.safeSubtract(this._years, amount._years),\n            MathUtil.safeSubtract(this._months, amount._months),\n            MathUtil.safeSubtract(this._days, amount._days));\n    }\n\n    /**\n     * Returns a copy of this period with the specified years subtracted.\n     *\n     * This subtracts the amount from the years unit in a copy of this period.\n     * The months and days units are unaffected.\n     * For example, '1 year, 6 months and 3 days' minus 2 years returns '-1 years, 6 months and 3 days'.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} yearsToSubtract - the years to subtract, positive or negative\n     * @return {Period} a {@link Period} based on this period with the specified years subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusYears(yearsToSubtract) {\n        return this.plusYears(-1 * yearsToSubtract);\n    }\n\n    /**\n     * Returns a copy of this period with the specified months subtracted.\n     *\n     * This subtracts the amount from the months unit in a copy of this period.\n     * The years and days units are unaffected.\n     * For example, '1 year, 6 months and 3 days' minus 2 months returns '1 year, 4 months and 3 days'.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} monthsToSubtract - the years to subtract, positive or negative\n     * @return {Period} a {@link Period} based on this period with the specified months subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusMonths(monthsToSubtract) {\n        return this.plusMonths(-1 * monthsToSubtract);\n    }\n\n    /**\n     * Returns a copy of this period with the specified days subtracted.\n     *\n     * This subtracts the amount from the days unit in a copy of this period.\n     * The years and months units are unaffected.\n     * For example, '1 year, 6 months and 3 days' minus 2 days returns '1 year, 6 months and 1 day'.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} daysToSubtract - the months to subtract, positive or negative\n     * @return {Period} a {@link Period} based on this period with the specified days subtracted, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusDays(daysToSubtract) {\n        return this.plusDays(-1 * daysToSubtract);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a new instance with each element in this period multiplied\n     * by the specified scalar.\n     *\n     * This simply multiplies each field, years, months, days and normalized time,\n     * by the scalar. No normalization is performed.\n     *\n     * @param {number} scalar - the scalar to multiply by, not null\n     * @return {Period} a {@link Period} based on this period with the amounts multiplied by the scalar, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    multipliedBy(scalar) {\n        if (this === Period.ZERO || scalar === 1) {\n            return this;\n        }\n        return Period.create(\n            MathUtil.safeMultiply(this._years, scalar),\n            MathUtil.safeMultiply(this._months, scalar),\n            MathUtil.safeMultiply(this._days, scalar));\n    }\n\n    /**\n     * Returns a new instance with each amount in this period negated.\n     *\n     * @return {Period} a {@link Period} based on this period with the amounts negated, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    negated() {\n        return this.multipliedBy(-1);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this period with the years and months normalized\n     * using a 12 month year.\n     *\n     * This normalizes the years and months units, leaving the days unit unchanged.\n     * The months unit is adjusted to have an absolute value less than 11,\n     * with the years unit being adjusted to compensate. For example, a period of\n     * '1 Year and 15 months' will be normalized to '2 years and 3 months'.\n     *\n     * The sign of the years and months units will be the same after normalization.\n     * For example, a period of '1 year and -25 months' will be normalized to\n     * '-1 year and -1 month'.\n     *\n     * This normalization uses a 12 month year which is not valid for all calendar systems.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {Period} a {@link Period} based on this period with excess months normalized to years, not null\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    normalized() {\n        const totalMonths = this.toTotalMonths();\n        const splitYears = MathUtil.intDiv(totalMonths, 12);\n        const splitMonths = MathUtil.intMod(totalMonths, 12);  // no overflow\n        if (splitYears === this._years && splitMonths === this._months) {\n            return this;\n        }\n        return Period.create(MathUtil.safeToInt(splitYears), splitMonths, this._days);\n    }\n\n    /**\n     * Gets the total number of months in this period using a 12 month year.\n     *\n     * This returns the total number of months in the period by multiplying the\n     * number of years by 12 and adding the number of months.\n     *\n     * This uses a 12 month year which is not valid for all calendar systems.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {number} the total number of months in the period, may be negative\n     */\n    toTotalMonths() {\n        return this._years * 12 + this._months;  // no overflow\n    }\n\n    //-------------------------------------------------------------------------\n    /**\n     * Adds this period to the specified temporal object.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with this period added.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#plus}.\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = thisPeriod.addTo(dateTime);\n     *   dateTime = dateTime.plus(thisPeriod);\n     * </pre>\n     *\n     * The calculation will add the years, then months, then days.\n     * Only non-zero amounts will be added.\n     * If the date-time has a calendar system with a fixed number of months in a\n     * year, then the years and months will be combined before being added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} temporal - the temporal object to adjust, not null\n     * @return {Temporal} an object of the same type with the adjustment made, not null\n     * @throws DateTimeException if unable to add\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    addTo(temporal) {\n        requireNonNull(temporal, 'temporal');\n        if (this._years !== 0) {\n            if (this._months !== 0) {\n                temporal = temporal.plus(this.toTotalMonths(), ChronoUnit.MONTHS);\n            } else {\n                temporal = temporal.plus(this._years, ChronoUnit.YEARS);\n            }\n        } else if (this._months !== 0) {\n            temporal = temporal.plus(this._months, ChronoUnit.MONTHS);\n        }\n        if (this._days !== 0) {\n            temporal = temporal.plus(this._days, ChronoUnit.DAYS);\n        }\n        return temporal;\n    }\n\n    /**\n     * Subtracts this period from the specified temporal object.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with this period subtracted.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#minus}.\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   dateTime = thisPeriod.subtractFrom(dateTime);\n     *   dateTime = dateTime.minus(thisPeriod);\n     * </pre>\n     *\n     * The calculation operates as follows.\n     * First, the chronology of the temporal is checked to ensure it is ISO chronology or null.\n     * Second, if the months are zero, the years are added if non-zero, otherwise\n     * the combination of years and months is added if non-zero.\n     * Finally, any days are added.\n     *\n     * The calculation will subtract the years, then months, then days.\n     * Only non-zero amounts will be subtracted.\n     * If the date-time has a calendar system with a fixed number of months in a\n     * year, then the years and months will be combined before being subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} temporal - the temporal object to adjust, not null\n     * @return {Temporal} an object of the same type with the adjustment made, not null\n     * @throws DateTimeException if unable to subtract\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    subtractFrom(temporal) {\n        requireNonNull(temporal, 'temporal');\n        if (this._years !== 0) {\n            if (this._months !== 0) {\n                temporal = temporal.minus(this.toTotalMonths(), ChronoUnit.MONTHS);\n            } else {\n                temporal = temporal.minus(this._years, ChronoUnit.YEARS);\n            }\n        } else if (this._months !== 0) {\n            temporal = temporal.minus(this._months, ChronoUnit.MONTHS);\n        }\n        if (this._days !== 0) {\n            temporal = temporal.minus(this._days, ChronoUnit.DAYS);\n        }\n        return temporal;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this period is equal to another period.\n     *\n     * The comparison is based on the amounts held in the period.\n     * To be equal, the years, months and days units must be individually equal.\n     * Note that this means that a period of '15 Months' is not equal to a period\n     * of '1 Year and 3 Months'.\n     *\n     * @param {*} obj - the object to check, null returns false\n     * @return {boolean} true if this is equal to the other period\n     */\n    equals(obj) {\n        if (this === obj) {\n            return true;\n        }\n        if (obj instanceof Period) {\n            const other = obj;\n            return this._years === other._years &&\n                this._months === other._months &&\n                this._days === other._days;\n        }\n        return false;\n    }\n\n    /**\n     * A hash code for this period.\n     *\n     * @return {number} a suitable hash code\n     */\n    hashCode() {\n        return MathUtil.hashCode(this._years, this._months, this._days);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Outputs this period as a string, such as {@link P6Y3M1D}.\n     *\n     * The output will be in the ISO-8601 period format.\n     * A zero period will be represented as zero days, 'P0D'.\n     *\n     * @return {string} a string representation of this period, not null\n     */\n    toString() {\n        if (this === Period.ZERO) {\n            return 'P0D';\n        } else {\n            let buf = 'P';\n            if (this._years !== 0) {\n                buf += `${this._years}Y`;\n            }\n            if (this._months !== 0) {\n                buf += `${this._months}M`;\n            }\n            if (this._days !== 0) {\n                buf += `${this._days}D`;\n            }\n            return buf;\n        }\n    }\n\n    /**\n     *\n     * @return {string} same as {@link Period.toString}\n     */\n    toJSON() {\n        return this.toString();\n    }\n}\n\nexport function _init() {\n    /**\n     * A constant for a period of zero.\n     */\n    Period.ofDays(0);\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\n/**\n * @private\n */\nexport class ParsePosition {\n    constructor(index) {\n        this._index = index;\n        this._errorIndex = -1;\n    }\n\n    getIndex(){\n        return this._index;\n    }\n\n    setIndex(index){\n        this._index = index;\n    }\n\n    getErrorIndex(){\n        return this._errorIndex;\n    }\n\n    setErrorIndex(errorIndex){\n        this._errorIndex = errorIndex;\n    }\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\n/**\n * @private\n */\nexport class EnumMap {\n    constructor(){\n        this._map = {};\n    }\n\n    putAll(otherMap){\n        for(const key in otherMap._map){\n            this._map[key] = otherMap._map[key];\n        }\n        return this;\n    }\n\n    containsKey(key){\n        // eslint-disable-next-line no-prototype-builtins\n        return (this._map.hasOwnProperty(key.name())) && (this.get(key) !== undefined);\n    }\n\n    get(key) {\n        return this._map[key.name()];\n    }\n\n    put(key, val) {\n        return this.set(key, val);\n    }\n\n    set(key, val) {\n        this._map[key.name()] = val;\n        return this;\n    }\n\n    retainAll(keyList){\n        const map = {};\n        for(let i=0; i<keyList.length; i++){\n            const key = keyList[i].name();\n            map[key] = this._map[key];\n        }\n        this._map = map;\n        return this;\n    }\n\n    /**\n     * due to the bad performance of delete we just set the key entry to undefined.\n     *\n     * this might lead to issues with \"null\" entries. Calling clear in the end might solve the issue\n     * @param key\n     * @returns {*}\n     */\n    remove(key){\n        const keyName = key.name();\n        const val = this._map[keyName];\n        this._map[keyName] = undefined;\n        return val;\n    }\n\n    keySet(){\n        return this._map;\n    }\n\n    clear(){\n        this._map = {};\n    }\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { Enum } from '../Enum';\n\n/**\n * Enumeration of different ways to resolve dates and times.\n * \n * Parsing a text string occurs in two phases.\n * Phase 1 is a basic text parse according to the fields added to the builder.\n * Phase 2 resolves the parsed field-value pairs into date and/or time objects.\n * This style is used to control how phase 2, resolving, happens.\n *\n * ### Static properties of Class {@link DateTimeFormatter}\n *\n * ResolverStyle.STRICT = new ResolverStyle('STRICT');\n *\n * Style to resolve dates and times strictly.\n *\n * Using strict resolution will ensure that all parsed values are within\n * the outer range of valid values for the field. Individual fields may\n * be further processed for strictness.\n *\n * For example, resolving year-month and day-of-month in the ISO calendar\n * system using strict mode will ensure that the day-of-month is valid\n * for the year-month, rejecting invalid values.\n *\n * ResolverStyle.SMART = new ResolverStyle('SMART');\n *\n * Style to resolve dates and times in a smart, or intelligent, manner.\n *\n * Using smart resolution will perform the sensible default for each\n * field, which may be the same as strict, the same as lenient, or a third\n * behavior. Individual fields will interpret this differently.\n *\n * For example, resolving year-month and day-of-month in the ISO calendar\n * system using smart mode will ensure that the day-of-month is from\n * 1 to 31, converting any value beyond the last valid day-of-month to be\n * the last valid day-of-month.\n *\n * ResolverStyle.LENIENT = new ResolverStyle('LENIENT');\n *\n * Style to resolve dates and times leniently.\n *\n * Using lenient resolution will resolve the values in an appropriate\n * lenient manner. Individual fields will interpret this differently.\n *\n * For example, lenient mode allows the month in the ISO calendar system\n * to be outside the range 1 to 12.\n * For example, month 15 is treated as being 3 months after month 12.\n *\n */\nexport class ResolverStyle extends Enum {}\n\n/**\n * Style to resolve dates and times strictly.\n * \n * Using strict resolution will ensure that all parsed values are within\n * the outer range of valid values for the field. Individual fields may\n * be further processed for strictness.\n * \n * For example, resolving year-month and day-of-month in the ISO calendar\n * system using strict mode will ensure that the day-of-month is valid\n * for the year-month, rejecting invalid values.\n */\nResolverStyle.STRICT = new ResolverStyle('STRICT');\n/**\n * Style to resolve dates and times in a smart, or intelligent, manner.\n * \n * Using smart resolution will perform the sensible default for each\n * field, which may be the same as strict, the same as lenient, or a third\n * behavior. Individual fields will interpret this differently.\n * \n * For example, resolving year-month and day-of-month in the ISO calendar\n * system using smart mode will ensure that the day-of-month is from\n * 1 to 31, converting any value beyond the last valid day-of-month to be\n * the last valid day-of-month.\n */\nResolverStyle.SMART = new ResolverStyle('SMART');\n/**\n * Style to resolve dates and times leniently.\n * \n * Using lenient resolution will resolve the values in an appropriate\n * lenient manner. Individual fields will interpret this differently.\n * \n * For example, lenient mode allows the month in the ISO calendar system\n * to be outside the range 1 to 12.\n * For example, month 15 is treated as being 3 months after month 12.\n */\nResolverStyle.LENIENT = new ResolverStyle('LENIENT');\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { assert, abstractMethodFail, requireInstance, requireNonNull } from '../assert';\nimport { IllegalArgumentException } from '../errors';\nimport { TemporalAccessor } from './TemporalAccessor';\nimport { TemporalAmount } from './TemporalAmount';\nimport { TemporalUnit } from './TemporalUnit';\n\n/**\n * Framework-level interface defining read-write access to a temporal object,\n * such as a date, time, offset or some combination of these.\n *\n * This is the base interface type for date, time and offset objects that\n * are complete enough to be manipulated using plus and minus.\n * It is implemented by those classes that can provide and manipulate information\n * as fields (see {@link TemporalField}) or queries (see {@link TemporalQuery}).\n * See {@link TemporalAccessor} for the read-only version of this interface.\n *\n * Most date and time information can be represented as a number.\n * These are modeled using {@link TemporalField} with the number held using\n * a `long` to handle large values. Year, month and day-of-month are\n * simple examples of fields, but they also include instant and offsets.\n * See {@link ChronoField} for the standard set of fields.\n *\n * Two pieces of date/time information cannot be represented by numbers,\n * the {@link Chronology} and the {@link ZoneId}.\n * These can be accessed using the static methods defined on {@link TemporalQueries}.\n *\n * This interface is a framework-level interface that should not be widely\n * used in application code. Instead, applications should create and pass\n * around instances of concrete types, such as {@link LocalDate}.\n * There are many reasons for this, part of which is that implementations\n * of this interface may be in calendar systems other than ISO.\n * See {@link ChronoLocalDate} for a fuller discussion of the issues.\n *\n * ### When to implement\n *\n * A class should implement this interface if it meets three criteria:\n *\n * * it provides access to date/time/offset information, as per {@link TemporalAccessor}\n * * the set of fields are contiguous from the largest to the smallest\n * * the set of fields are complete, such that no other field is needed to define the\n *   valid range of values for the fields that are represented\n *\n * Four examples make this clear:\n *\n * * {@link LocalDate} implements this interface as it represents a set of fields\n *   that are contiguous from days to forever and require no external information to determine\n *   the validity of each date. It is therefore able to implement plus/minus correctly.\n * * {@link LocalTime} implements this interface as it represents a set of fields\n *   that are contiguous from nanos to within days and require no external information to determine\n *   validity. It is able to implement plus/minus correctly, by wrapping around the day.\n * * {@link MonthDay}, the combination of month-of-year and day-of-month, does not implement\n *   this interface.  While the combination is contiguous, from days to months within years,\n *   the combination does not have sufficient information to define the valid range of values\n *   for day-of-month.  As such, it is unable to implement plus/minus correctly.\n * * The combination day-of-week and day-of-month (\"Friday the 13th\") should not implement\n *   this interface. It does not represent a contiguous set of fields, as days to weeks overlaps\n *   days to months.\n *\n * @interface\n */\nexport class Temporal extends TemporalAccessor {\n    /**\n     * Checks if the specified unit is supported.\n     * This checks if the date-time can be queried for the specified unit. If false, then calling the plus and minus methods will throw an exception.\n\n     * ### Specification for implementors\n     * Implementations must check and handle all fields defined in {@link ChronoUnit}. If the field is supported, then true is returned, otherwise false\n     * If the field is not a {@link ChronoUnit}, then the result of this method is obtained by invoking `TemporalUnit.isSupportedBy(Temporal)` passing this as the argument.\n\n     * Implementations must not alter this object.\n\n     * @param {TemporalUnit} fieldOrUnit - the unit to check, null returns false\n     * @return {boolean} true if this date-time can be queried for the unit, false if not\n     */\n    // eslint-disable-next-line no-unused-vars\n    isSupported(fieldOrUnit) {\n        abstractMethodFail('isSupported');\n    }\n\n    /**\n     * function overloading for {@link Temporal.plus}\n     *\n     * Called with 1 (or less) arguments, p1 is expected to be a {@link TemporalAmount} and {@link Temporal.minusAmount} is called.\n     *\n     * Otherwise {@link Temporal.minusAmountUnit} is called.\n     *\n     * @param {!(TemporalAmount|number)} amount\n     * @param {TemporalUnit} unit\n     * @return {Temporal}\n     */\n    minus(amount, unit) {\n        if (arguments.length < 2) {\n            return this._minusAmount(amount);\n        } else {\n            return this._minusUnit(amount, unit);\n        }\n    }\n\n    /**\n     * Returns an object of the same type as this object with an amount subtracted.\n     * This adjusts this temporal, subtracting according to the rules of the specified amount. The\n     * amount is typically a {@link Period} but may be any other type implementing the {@link TemporalAmount} interface, such as Duration.\n     *\n     * Some example code indicating how and why this method is used:\n     *\n     * <pre>\n     *   date = date.minus(period);                  // subtract a Period instance\n     *   date = date.minus(duration);                // subtract a Duration instance\n     *   date = date.minus(workingDays(6));          // example user-written workingDays method\n     * </pre>\n     *\n     * Note that calling plus followed by minus is not guaranteed to return the same date-time.\n     *\n     * ### Specification for implementors\n     * Implementations must not alter either this object. Instead, an adjusted copy of the original\n     * must be returned. This provides equivalent, safe behavior for immutable and mutable\n     * implementations.\n     *\n     * @param {TemporalAmount} amount - the amount to subtract, not null\n     * @return {Temporal} an object of the same type with the specified adjustment made, not null\n     * @throws DateTimeException - if the subtraction cannot be made\n     * @throws ArithmeticException - if numeric overflow occurs\n     */\n    _minusAmount(amount) {\n        requireNonNull(amount, 'amount');\n        requireInstance(amount, TemporalAmount, 'amount');\n        return amount.subtractFrom(this);\n    }\n\n    /**\n     * Returns an object of the same type as this object with the specified period subtracted.\n     * This method returns a new object based on this one with the specified period subtracted. For example, on a {@link LocalDate}, this could be used to subtract a number of years, months or days. The returned object will have the same observable type as this object.\n     *\n     * In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st March, then subtracting one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.\n     *\n     * If the implementation represents a date-time that has boundaries, such {@link as} LocalTime, then the permitted units must include the boundary unit, but no multiples of the boundary unit. For example, {@link LocalTime} must accept `DAYS` but not `WEEKS` or `MONTHS`.\n     *\n     * ### Specification for implementors\n     * Implementations must behave in a manor equivalent to the default method behavior.\n     * Implementations must not alter either this object or the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {number} amountToSubtract - the amount of the specified unit to subtract, may be negative\n     * @param {TemporalUnit} unit - the unit of the period to subtract, not null\n     * @return {Temporal} an object of the same type with the specified period subtracted, not null\n     * @throws DateTimeException - if the unit cannot be subtracted\n     * @throws ArithmeticException - if numeric overflow occurs\n     */\n    _minusUnit(amountToSubtract, unit) {\n        requireNonNull(amountToSubtract, 'amountToSubtract');\n        requireNonNull(unit, 'unit');\n        requireInstance(unit, TemporalUnit, 'unit');\n        return this._plusUnit(-amountToSubtract, unit);\n    }\n\n    /**\n     * function overloading for {@link Temporal.plus}\n     *\n     * Called with 1 (or less) arguments, p1 is expected to be a {@link TemporalAmount} and {@link Temporal.plusAmount} is called.\n     *\n     * Otherwise {@link Temporal.plusAmountUnit} is called.\n     *\n     * @param {!(TemporalAmount|number)} amount\n     * @param {TemporalUnit} unit\n     * @return {Temporal}\n     */\n    plus(amount, unit) {\n        if (arguments.length < 2) {\n            return this._plusAmount(amount);\n        } else {\n            return this._plusUnit(amount, unit);\n        }\n    }\n\n    /**\n     * Returns an object of the same type as this object with an amount added.\n     * This adjusts this temporal, adding according to the rules of the specified amount. The amount is typically a {@link Period} but may be any other type implementing the {@link TemporalAmount} interface, such as {@link Duration}.\n     *\n     * Some example code indicating how and why this method is used:\n     *\n     * <pre>\n     *   date = date.plus(period);                  // add a Period instance\n     *   date = date.plus(duration);                // add a Duration instance\n     *   date = date.plus(workingDays(6));          // example user-written workingDays method\n     * </pre>\n     *\n     * Note that calling plus followed by minus is not guaranteed to return the same date-time.\n     *\n     * ### Specification for implementors\n     * Implementations must not alter either this object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {TemporalAmount} amount - the amount to add, not null\n     * @return {Temporal} an object of the same type with the specified adjustment made, not null\n     * @throws DateTimeException - if the addition cannot be made\n     * @throws ArithmeticException - if numeric overflow occurs\n     */\n    _plusAmount(amount) {\n        requireNonNull(amount, 'amount');\n        requireInstance(amount, TemporalAmount, 'amount');\n        return amount.addTo(this);\n    }\n\n    /**\n     * Returns an object of the same type as this object with the specified period added.\n     * This method returns a new object based on this one with the specified period added. For example, on a {@link LocalDate}, this could be used to add a number of years, months or days. The returned object will have the same observable type as this object.\n     *\n     * In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then adding one month would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.\n     *\n     * If the implementation represents a date-time that has boundaries, such as {@link LocalTime}, then the permitted units must include the boundary unit, but no multiples of the boundary unit. For example, {@link LocalTime} must accept `DAYS` but not `WEEKS` or `MONTHS`.\n     *\n     * ### Specification for implementors\n     * Implementations must check and handle all units defined in {@link ChronoUnit}. If the unit is supported, then the addition must be performed. If unsupported, then a {@link DateTimeException} must be thrown.\n     * If the unit is not a {@link ChronoUnit}, then the result of this method is obtained by invoking `TemporalUnit.addTo(Temporal, long)` passing this as the first argument.\n     *\n     * Implementations must not alter either this object or the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {number} amountToAdd - the amount of the specified unit to add, may be negative\n     * @param {TemporalUnit} unit - the unit of the period to add, not null\n     * @return {Temporal} an object of the same type with the specified period added, not null\n     * @throws DateTimeException - if the unit cannot be added\n     * @throws ArithmeticException - if numeric overflow occurs\n     */\n    // eslint-disable-next-line no-unused-vars\n    _plusUnit(amountToAdd, unit) {\n        abstractMethodFail('_plusUnit');\n    }\n\n    /**\n     * Calculates the period between this temporal and another temporal in terms of the specified unit.\n     * This calculates the period between two temporals in terms of a single unit. The start and end points are this and the specified temporal. The result will be negative if the end is before the start. For example, the period in hours between two temporal objects can be calculated using `startTime.until(endTime, HOURS)`.\n     *\n     * The calculation returns a whole number, representing the number of complete units between the two temporals. For example, the period in hours between the times 11:30 and 13:29 will only be one hour as it is one minute short of two hours.\n     *\n     * There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use `TemporalUnit.between(Temporal, Temporal)`:\n     *\n     * <pre>\n     *    // these two lines are equivalent\n     *    between = thisUnit.between(start, end);\n     *    between = start.until(end, thisUnit);\n     * </pre>\n     *\n     * The choice should be made based on which makes the code more readable.\n     * For example, this method allows the number of days between two dates to be calculated:\n     *\n     * <pre>\n     *    long daysBetween = DAYS.between(start, end);\n     *    // or alternatively\n     *    long daysBetween = start.until(end, DAYS);\n     * </pre>\n     *\n     * ### Specification for implementors\n     * Implementations must begin by checking to ensure that the input temporal object is of the same observable type as the implementation. They must then perform the calculation for all instances of {@link ChronoUnit}. A {@link DateTimeException} must be thrown for {@link ChronoUnit} instances that are unsupported.\n     * If the unit is not a {@link ChronoUnit}, then the result of this method is obtained by invoking `TemporalUnit.between(Temporal, Temporal)` passing this as the first argument and the input temporal as the second argument.\n     *\n     * In summary, implementations must behave in a manner equivalent to this code:\n     *\n     * <pre>\n     *   // check input temporal is the same type as this class\n     *   if (unit instanceof ChronoUnit) {\n     *     // if unit is supported, then calculate and return result\n     *     // else throw DateTimeException for unsupported units\n     *   }\n     *   return unit.between(this, endTemporal);\n     * </pre>\n     *\n     * The target object must not be altered by this method.\n     *\n     * @param {Temporal} endTemporal - the end temporal, of the same type as this object, not null\n     * @param {TemporalUnit} unit - the unit to measure the period in, not null\n     * @return {number} the amount of the period between this and the end\n     * @throws DateTimeException - if the period cannot be calculated\n     * @throws ArithmeticException - if numeric overflow occurs\n     */\n    // eslint-disable-next-line no-unused-vars\n    until(endTemporal, unit) {\n        abstractMethodFail('until');\n    }\n\n    /**\n     * function overloading for {@link Temporal.with}\n     *\n     * Called with 1 (or less) arguments, p1 is expected to be a {@link TemporalAdjuster} and {@link Temporal.withAdjuster} is called.\n     *\n     * Otherwise {@link Temporal.withFieldValue} is called.\n     *\n     * @param {!(TemporalAdjuster|TemporalField)} adjusterOrField\n     * @param {number} newValue\n     * @return {Temporal}\n     */\n    with(adjusterOrField, newValue) {\n        if (arguments.length < 2) {\n            return this._withAdjuster(adjusterOrField);\n        } else {\n            return this._withField(adjusterOrField, newValue);\n        }\n    }\n\n    /**\n     * Returns an adjusted object of the same type as this object with the adjustment made.\n     * This adjusts this date-time according to the rules of the specified adjuster. A simple adjuster might simply set the one of the fields, such as the year field. A more complex adjuster might set the date to the last day of the month. A selection of common adjustments is provided in {@link TemporalAdjusters}. These include finding the \"last day of the month\" and \"next Wednesday\". The adjuster is responsible for handling special cases, such as the varying lengths of month and leap years.\n     *\n     * Some example code indicating how and why this method is used:\n     *\n     * <pre>\n     *   date = date.with(Month.JULY);        // most key classes implement TemporalAdjuster\n     *   date = date.with(lastDayOfMonth());  // static import from TemporalAdjusters\n     *   date = date.with(next(WEDNESDAY));   // static import from TemporalAdjusters and DayOfWeek\n     * </pre>\n     *\n     * ### Specification for implementors\n     * Implementations must not alter either this object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {TemporalAdjuster} adjuster - the adjuster to use, not null\n     * @return {Temporal} an object of the same type with the specified adjustment made, not null\n     * @throws DateTimeException - if unable to make the adjustment\n     * @throws ArithmeticException - if numeric overflow occurs\n     */\n    _withAdjuster(adjuster) {\n        requireNonNull(adjuster, 'adjuster');\n        assert(typeof adjuster.adjustInto === 'function',\n            'adjuster must be a TemporalAdjuster',\n            IllegalArgumentException);\n        return adjuster.adjustInto(this);\n    }\n\n    /**\n     * Returns an object of the same type as this object with the specified field altered.\n     * This returns a new object based on this one with the value for the specified field changed. For example, on a {@link LocalDate}, this could be used to set the year, month or day-of-month. The returned object will have the same observable type as this object.\n     *\n     * In some cases, changing a field is not fully defined. For example, if the target object is a date representing the 31st January, then changing the month to February would be unclear. In cases like this, the field is responsible for resolving the result. Typically it will choose the previous valid date, which would be the last valid day of February in this example.\n     *\n     * ### Specification for implementors\n     * Implementations must check and handle all fields defined in {@link ChronoField}. If the field is supported, then the adjustment must be performed. If unsupported, then a {@link DateTimeException} must be thrown.\n     * If the field is not a {@link ChronoField}, then the result of this method is obtained by invoking `TemporalField.adjustInto(Temporal, long)` passing this as the first argument.\n     *\n     * Implementations must not alter either this object or the specified temporal object. Instead, an adjusted copy of the original must be returned. This provides equivalent, safe behavior for immutable and mutable implementations.\n     *\n     * @param {TemporalField} field - the field to set in the result, not null\n     * @param {number} newValue - the new value of the field in the result\n     * @return {Temporal} an object of the same type with the specified field set, not null\n     * @throws DateTimeException - if the field cannot be set\n     * @throws ArithmeticException - if numeric overflow occurs\n     */\n    // eslint-disable-next-line no-unused-vars\n    _withField(field, newValue) {\n        abstractMethodFail('_withField');\n    }\n}\n\nif (typeof Symbol !== 'undefined' && Symbol.toPrimitive) {\n    Temporal.prototype[Symbol.toPrimitive] = function (hint) {\n        // hint could be 'number', 'string' or 'default'. Only 'number'\n        // should throw and 'default' is treated as 'string'.\n        if (hint !== 'number') {\n            return this.toString();\n        }\n\n        throw new TypeError(\n            'A conversion from Temporal to a number is not allowed. ' +\n            'To compare use the methods .equals(), .compareTo(), .isBefore() ' +\n            'or one that is more suitable to your use case.'\n        );\n    };\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull, requireInstance } from '../assert';\n\nimport { ChronoField } from '../temporal/ChronoField';\nimport { ChronoUnit } from '../temporal/ChronoUnit';\nimport { DateTimeFormatter } from '../format/DateTimeFormatter';\nimport { TemporalQueries } from '../temporal/TemporalQueries';\nimport { Temporal } from '../temporal/Temporal';\n\nimport { LocalDate } from '../LocalDate';\n\n/**\n * A date without time-of-day or time-zone in an arbitrary chronology, intended\n * for advanced globalization use cases.\n *\n * **Most applications should declare method signatures, fields and variables\n * as {@link LocalDate}, not this interface.**\n *\n * A {@link ChronoLocalDate} is the abstract representation of a date where the\n * {@link Chronology}, or calendar system, is pluggable.\n * The date is defined in terms of fields expressed by {@link TemporalField},\n * where most common implementations are defined in {@link ChronoField}.\n * The chronology defines how the calendar system operates and the meaning of\n * the standard fields.\n *\n * #### When to use this interface\n *\n * The design of the API encourages the use of {@link LocalDate} rather than this\n * interface, even in the case where the application needs to deal with multiple\n * calendar systems. The rationale for this is explored in the following documentation.\n *\n * The primary use case where this interface should be used is where the generic\n * type parameter `C` is fully defined as a specific chronology.\n * In that case, the assumptions of that chronology are known at development\n * time and specified in the code.\n *\n * When the chronology is defined in the generic type parameter as ? or otherwise\n * unknown at development time, the rest of the discussion below applies.\n *\n * To emphasize the point, declaring a method signature, field or variable as this\n * interface type can initially seem like the sensible way to globalize an application,\n * however it is usually the wrong approach.\n * As such, it should be considered an application-wide architectural decision to choose\n * to use this interface as opposed to {@link LocalDate}.\n *\n * #### Architectural issues to consider\n *\n * These are some of the points that must be considered before using this interface\n * throughout an application.\n *\n * 1) Applications using this interface, as opposed to using just {@link LocalDate},\n * face a significantly higher probability of bugs. This is because the calendar system\n * in use is not known at development time. A key cause of bugs is where the developer\n * applies assumptions from their day-to-day knowledge of the ISO calendar system\n * to code that is intended to deal with any arbitrary calendar system.\n * The section below outlines how those assumptions can cause problems\n * The primary mechanism for reducing this increased risk of bugs is a strong code review process.\n * This should also be considered a extra cost in maintenance for the lifetime of the code.\n *\n * 2) This interface does not enforce immutability of implementations.\n * While the implementation notes indicate that all implementations must be immutable\n * there is nothing in the code or type system to enforce this. Any method declared\n * to accept a {@link ChronoLocalDate} could therefore be passed a poorly or\n * maliciously written mutable implementation.\n *\n * 3) Applications using this interface  must consider the impact of eras.\n * {@link LocalDate} shields users from the concept of eras, by ensuring that `getYear()`\n * returns the proleptic year. That decision ensures that developers can think of\n * {@link LocalDate} instances as consisting of three fields - year, month-of-year and day-of-month.\n * By contrast, users of this interface must think of dates as consisting of four fields -\n * era, year-of-era, month-of-year and day-of-month. The extra era field is frequently\n * forgotten, yet it is of vital importance to dates in an arbitrary calendar system.\n * For example, in the Japanese calendar system, the era represents the reign of an Emperor.\n * Whenever one reign ends and another starts, the year-of-era is reset to one.\n *\n * 4) The only agreed international standard for passing a date between two systems\n * is the ISO-8601 standard which requires the ISO calendar system. Using this interface\n * throughout the application will inevitably lead to the requirement to pass the date\n * across a network or component boundary, requiring an application specific protocol or format.\n *\n * 5) Long term persistence, such as a database, will almost always only accept dates in the\n * ISO-8601 calendar system (or the related Julian-Gregorian). Passing around dates in other\n * calendar systems increases the complications of interacting with persistence.\n *\n * 6) Most of the time, passing a {@link ChronoLocalDate} throughout an application\n * is unnecessary, as discussed in the last section below.\n *\n * #### False assumptions causing bugs in multi-calendar system code\n *\n * As indicated above, there are many issues to consider when try to use and manipulate a\n * date in an arbitrary calendar system. These are some of the key issues.\n *\n * Code that queries the day-of-month and assumes that the value will never be more than\n * 31 is invalid. Some calendar systems have more than 31 days in some months.\n *\n * Code that adds 12 months to a date and assumes that a year has been added is invalid.\n * Some calendar systems have a different number of months, such as 13 in the Coptic or Ethiopic.\n *\n * Code that adds one month to a date and assumes that the month-of-year value will increase\n * by one or wrap to the next year is invalid. Some calendar systems have a variable number\n * of months in a year, such as the Hebrew.\n *\n * Code that adds one month, then adds a second one month and assumes that the day-of-month\n * will remain close to its original value is invalid. Some calendar systems have a large difference\n * between the length of the longest month and the length of the shortest month.\n * For example, the Coptic or Ethiopic have 12 months of 30 days and 1 month of 5 days.\n *\n * Code that adds seven days and assumes that a week has been added is invalid.\n * Some calendar systems have weeks of other than seven days, such as the French Revolutionary.\n *\n * Code that assumes that because the year of `date1` is greater than the year of `date2`\n * then `date1` is after `date2` is invalid. This is invalid for all calendar systems\n * when referring to the year-of-era, and especially untrue of the Japanese calendar system\n * where the year-of-era restarts with the reign of every new Emperor.\n *\n * Code that treats month-of-year one and day-of-month one as the start of the year is invalid.\n * Not all calendar systems start the year when the month value is one.\n *\n * In general, manipulating a date, and even querying a date, is wide open to bugs when the\n * calendar system is unknown at development time. This is why it is essential that code using\n * this interface is subjected to additional code reviews. It is also why an architectural\n * decision to avoid this interface type is usually the correct one.\n *\n * #### Using LocalDate instead\n *\n * The primary alternative to using this interface throughout your application is as follows.\n *\n * * Declare all method signatures referring to dates in terms of {@link LocalDate}.\n * * Either store the chronology (calendar system) in the user profile or lookup the chronology\n *   from the user locale.\n * * Convert the ISO {@link LocalDate} to and from the user's preferred calendar system during\n *   printing and parsing.\n *\n * This approach treats the problem of globalized calendar systems as a localization issue\n * and confines it to the UI layer. This approach is in keeping with other localization\n * issues in the java platform.\n *\n * As discussed above, performing calculations on a date where the rules of the calendar system\n * are pluggable requires skill and is not recommended.\n * Fortunately, the need to perform calculations on a date in an arbitrary calendar system\n * is extremely rare. For example, it is highly unlikely that the business rules of a library\n * book rental scheme will allow rentals to be for one month, where meaning of the month\n * is dependent on the user's preferred calendar system.\n *\n * A key use case for calculations on a date in an arbitrary calendar system is producing\n * a month-by-month calendar for display and user interaction. Again, this is a UI issue,\n * and use of this interface solely within a few methods of the UI layer may be justified.\n *\n * In any other part of the system, where a date must be manipulated in a calendar system\n * other than ISO, the use case will generally specify the calendar system to use.\n * For example, an application may need to calculate the next Islamic or Hebrew holiday\n * which may require manipulating the date.\n * This kind of use case can be handled as follows:\n *\n * * start from the ISO {@link LocalDate} being passed to the method\n * * convert the date to the alternate calendar system, which for this use case is known\n *   rather than arbitrary\n * * perform the calculation\n * * convert back to {@link LocalDate}\n *\n * Developers writing low-level frameworks or libraries should also avoid this interface.\n * Instead, one of the two general purpose access interfaces should be used.\n * Use {@link TemporalAccessor} if read-only access is required, or use {@link Temporal}\n * if read-write access is required.\n *\n * ### Specification for implementors\n *\n * This interface must be implemented with care to ensure other classes operate correctly.\n * All implementations that can be instantiated must be final, immutable and thread-safe.\n * Subclasses should be Serializable wherever possible.\n *\n * Additional calendar systems may be added to the system.\n * See {@link Chronology} for more details.\n *\n * In JDK 8, this is an interface with default methods.\n * Since there are no default methods in JDK 7, an abstract class is used.\n */\nexport class ChronoLocalDate extends Temporal {\n\n    isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit.isDateBased();\n        } else if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isDateBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    }\n\n    query(query) {\n        if (query === TemporalQueries.chronology()) {\n            return this.chronology();\n        } else if (query === TemporalQueries.precision()) {\n            return ChronoUnit.DAYS;\n        } else if (query === TemporalQueries.localDate()) {\n            return LocalDate.ofEpochDay(this.toEpochDay());\n        } else if (query === TemporalQueries.localTime() || query === TemporalQueries.zone() ||\n                query === TemporalQueries.zoneId() || query === TemporalQueries.offset()) {\n            return null;\n        }\n        return super.query(query);\n    }\n\n    adjustInto(temporal) {\n        return temporal.with(ChronoField.EPOCH_DAY, this.toEpochDay());\n    }\n    /**\n     * Formats this date using the specified formatter.\n     *\n     * This date will be passed to the formatter to produce a string.\n     *\n     * The default implementation must behave as follows:\n     * <pre>\n     *  return formatter.format(this);\n     * </pre>\n     *\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {String} the formatted date string, not null\n     * @throws DateTimeException if an error occurs during printing\n     */\n    format(formatter) {\n        requireNonNull(formatter, 'formatter');\n        requireInstance(formatter, DateTimeFormatter, 'formatter');\n        return formatter.format(this);\n    }\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { MathUtil } from './MathUtil';\n\n/**\n * @private\n */\nexport class StringUtil {\n\n    /**\n     *\n     * @param {string} text\n     * @param {string} pattern\n     * @return {boolean}\n     */\n    static startsWith(text, pattern){\n        return text.indexOf(pattern) === 0;\n    }\n\n    /**\n     *\n     * @param {string} text\n     * @returns {number}\n     */\n    static hashCode(text) {\n        const len = text.length;\n        if (len === 0) {\n            return 0;\n        }\n\n        let hash = 0;\n        for (let i = 0; i < len; i++) {\n            const chr = text.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return MathUtil.smi(hash);\n    }\n}\n\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { abstractMethodFail } from './assert';\nimport { DateTimeException } from './errors';\n\nimport { StringUtil } from './StringUtil';\n\nimport { Instant } from './Instant';\n\nexport class ZoneId {\n    /**\n     * Gets the system default time-zone.\n     *\n     * @return {ZoneId} the zone ID, not null\n     */\n    static systemDefault() {\n        // Find implementation at {@link ZoneIdFactory}\n        throw new DateTimeException('not supported operation');\n    }\n\n    /**\n     * Gets the set of available zone IDs.\n     *\n     * This set includes the string form of all available region-based IDs.\n     * Offset-based zone IDs are not included in the returned set.\n     * The ID can be passed to {@link of} to create a {@link ZoneId}.\n     *\n     * The set of zone IDs can increase over time, although in a typical application\n     * the set of IDs is fixed. Each call to this method is thread-safe.\n     *\n     * @return {string[]} a modifiable copy of the set of zone IDs, not null\n     */\n    static getAvailableZoneIds() {\n        // Find implementation at {@link ZoneIdFactory}\n        throw new DateTimeException('not supported operation');\n    }\n\n    /**\n     * Obtains an instance of {@link ZoneId} from an ID ensuring that the\n     * ID is valid and available for use.\n     *\n     * This method parses the ID producing a {@link ZoneId} or {@link ZoneOffset}.\n     * A {@link ZoneOffset} is returned if the ID is 'Z', or starts with '+' or '-'.\n     * The result will always be a valid ID for which {@link ZoneRules} can be obtained.\n     *\n     * Parsing matches the zone ID step by step as follows.\n     *\n     * * If the zone ID equals 'Z', the result is {@link ZoneOffset.UTC}.\n     * * If the zone ID consists of a single letter, the zone ID is invalid\n     *   and {@link DateTimeException} is thrown.\n     * * If the zone ID starts with '+' or '-', the ID is parsed as a\n     *   {@link ZoneOffset} using {@link ZoneOffset#of}.\n     * * If the zone ID equals 'GMT', 'UTC' or 'UT' then the result is a {@link ZoneId}\n     *   with the same ID and rules equivalent to {@link ZoneOffset.UTC}.\n     * * If the zone ID starts with 'UTC+', 'UTC-', 'GMT+', 'GMT-', 'UT+' or 'UT-'\n     *   then the ID is a prefixed offset-based ID. The ID is split in two, with\n     *   a two or three letter prefix and a suffix starting with the sign.\n     *   The suffix is parsed as a {@link ZoneOffset}.\n     *   The result will be a {@link ZoneId} with the specified UTC/GMT/UT prefix\n     *   and the normalized offset ID as per {@link ZoneOffset#getId}.\n     *   The rules of the returned {@link ZoneId} will be equivalent to the\n     *   parsed {@link ZoneOffset}.\n     * * All other IDs are parsed as region-based zone IDs. Region IDs must\n     *   match the regular expression `[A-Za-z][A-Za-z0-9~/._+-]+`,\n     *   otherwise a {@link DateTimeException} is thrown. If the zone ID is not\n     *   in the configured set of IDs, {@link ZoneRulesException} is thrown.\n     *   The detailed format of the region ID depends on the group supplying the data.\n     *   The default set of data is supplied by the IANA Time Zone Database (TZDB).\n     *   This has region IDs of the form '{area}/{city}', such as 'Europe/Paris' or 'America/New_York'.\n     *   This is compatible with most IDs from {@link java.util.TimeZone}.\n     *\n     * @param {string} zoneId  the time-zone ID, not null\n     * @return {ZoneId} the zone ID, not null\n     * @throws DateTimeException if the zone ID has an invalid format\n     * @throws ZoneRulesException if the zone ID is a region ID that cannot be found\n     */\n    static of(zoneId) {\n        // Find implementation at {@link ZoneIdFactory}\n        throw new DateTimeException(`not supported operation${zoneId}`);\n    }\n\n    /**\n     * Obtains an instance of {@link ZoneId} wrapping an offset.\n     *\n     * If the prefix is 'GMT', 'UTC', or 'UT' a {@link ZoneId}\n     * with the prefix and the non-zero offset is returned.\n     * If the prefix is empty `''` the {@link ZoneOffset} is returned.\n     *\n     * @param {string} prefix  the time-zone ID, not null\n     * @param {ZoneOffset} offset  the offset, not null\n     * @return {ZoneId} the zone ID, not null\n     * @throws IllegalArgumentException if the prefix is not one of\n     *     'GMT', 'UTC', or 'UT', or ''\n     */\n    static ofOffset(prefix, offset) {\n        // Find implementation at {@link ZoneIdFactory}\n        throw new DateTimeException(`not supported operation${prefix}${offset}`);\n    }\n\n\n    /**\n     * Obtains an instance of {@link ZoneId} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link ZoneId}.\n     *\n     * The conversion will try to obtain the zone in a way that favours region-based\n     * zones over offset-based zones using {@link TemporalQueries#zone}.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used in queries via method reference, {@link ZoneId::from}.\n     *\n     * @param {!TemporalAccessor} temporal - the temporal object to convert, not null\n     * @return {ZoneId} the zone ID, not null\n     * @throws DateTimeException if unable to convert to a {@link ZoneId}\n     */\n    static from(temporal) {\n        // Find implementation at {@link ZoneIdFactory}\n        throw new DateTimeException(`not supported operation${temporal}`);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the unique time-zone ID.\n     *\n     * This ID uniquely defines this object.\n     * The format of an offset based ID is defined by {@link ZoneOffset#getId}.\n     *\n     * @return {String} the time-zone unique ID, not null\n     */\n    id(){\n        abstractMethodFail('ZoneId.id');\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the time-zone rules for this ID allowing calculations to be performed.\n     *\n     * The rules provide the functionality associated with a time-zone,\n     * such as finding the offset for a given instant or local date-time.\n     *\n     * A time-zone can be invalid if it is deserialized in a Java Runtime which\n     * does not have the same rules loaded as the Java Runtime that stored it.\n     * In this case, calling this method will throw a {@link ZoneRulesException}.\n     *\n     * The rules are supplied by {@link ZoneRulesProvider}. An advanced provider may\n     * support dynamic updates to the rules without restarting the Java Runtime.\n     * If so, then the result of this method may change over time.\n     * Each individual call will be still remain thread-safe.\n     *\n     * {@link ZoneOffset} will always return a set of rules where the offset never changes.\n     *\n     * @return {!ZoneRules} the rules, not null\n     * @throws ZoneRulesException if no rules are available for this ID\n     */\n    rules(){\n        abstractMethodFail('ZoneId.rules');\n    }\n\n    /**\n      * Normalizes the time-zone ID, returning a {@link ZoneOffset} where possible.\n      *\n      * The returns a normalized {@link ZoneId} that can be used in place of this ID.\n      * The result will have {@link ZoneRules} equivalent to those returned by this object,\n      * however the ID returned by {@link getId} may be different.\n      *\n      * The normalization checks if the rules of this {@link ZoneId} have a fixed offset.\n      * If they do, then the {@link ZoneOffset} equal to that offset is returned.\n      * Otherwise `this` is returned.\n      *\n      * @return {ZoneId} the time-zone unique ID, not null\n      */\n    normalized() {\n        const rules = this.rules();\n        if (rules.isFixedOffset()) {\n            return rules.offset(Instant.EPOCH);\n        }\n        //try {\n        //} catch (ZoneRulesException ex) {\n        //    // ignore invalid objects\n        //}\n        return this;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n      * Checks if this time-zone ID is equal to another time-zone ID.\n      *\n      * The comparison is based on the ID.\n      *\n      * @param {*} other  the object to check, null returns false\n      * @return {boolean} true if this is equal to the other time-zone ID\n      */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ZoneId) {\n            return this.id() === other.id();\n        }\n        return false;\n    }\n\n    /**\n      * A hash code for this time-zone ID.\n      *\n      * @return {number} a suitable hash code\n      */\n    hashCode() {\n        return StringUtil.hashCode(this.id());\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n      * Outputs this zone as a string, using the ID.\n      *\n      * @return {string} a string representation of this time-zone ID, not null\n      */\n    toString() {\n        return this.id();\n    }\n\n    /**\n     * toJSON() use by JSON.stringify\n     * delegates to toString()\n     *\n     * @return {string}\n     */\n    toJSON() {\n        return this.toString();\n    }\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull, abstractMethodFail } from '../assert';\n\nimport { Duration } from '../Duration';\nimport { Instant } from '../Instant';\n\nexport class ZoneRules {\n\n    /**\n     * Obtains an instance of {@link ZoneRules} that always uses the same offset.\n     *\n     * The returned rules always have the same offset.\n     *\n     * @param {ZoneOffset} offset - the offset, not null\n     * @return {ZoneRules} the zone rules, not null\n     */\n    static of(offset) {\n        requireNonNull(offset, 'offset');\n        return new Fixed(offset);\n    }\n\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks of the zone rules are fixed, such that the offset never varies.\n     *\n     * @return {boolean} true if the time-zone is fixed and the offset never changes\n     */\n    isFixedOffset(){\n        abstractMethodFail('ZoneRules.isFixedOffset');\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     *\n     * @param instantOrLocalDateTime\n     * @returns {ZoneOffset}\n     */\n    offset(instantOrLocalDateTime){\n        if(instantOrLocalDateTime instanceof Instant){\n            return this.offsetOfInstant(instantOrLocalDateTime);\n        } else {\n            return this.offsetOfLocalDateTime(instantOrLocalDateTime);\n        }\n    }\n\n    /**\n     * Gets the offset applicable at the specified instant in these rules.\n     *\n     * The mapping from an instant to an offset is simple, there is only\n     * one valid offset for each instant.\n     * This method returns that offset.\n     *\n     * @param {Instant} instant - the instant to find the offset for, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffset} the offset, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    offsetOfInstant(instant){\n        abstractMethodFail('ZoneRules.offsetInstant');\n    }\n\n    /**\n     * Gets the offset applicable at the specified epochMilli in these rules.\n     *\n     * The method is for javascript performance optimisation.\n     *\n     * @param {number} epochMilli - the epoch millisecond to find the offset for, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffset} the offset, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    offsetOfEpochMilli(epochMilli){\n        abstractMethodFail('ZoneRules.offsetOfEpochMilli');\n    }\n\n\n    /**\n     * Gets a suitable offset for the specified local date-time in these rules.\n     *\n     * The mapping from a local date-time to an offset is not straightforward.\n     * There are three cases:\n     *\n     * * Normal, with one valid offset. For the vast majority of the year, the normal\n     *   case applies, where there is a single valid offset for the local date-time.\n     * * Gap, with zero valid offsets. This is when clocks jump forward typically\n     *   due to the spring daylight savings change from \"winter\" to \"summer\".\n     *   In a gap there are local date-time values with no valid offset.\n     * * Overlap, with two valid offsets. This is when clocks are set back typically\n     *   due to the autumn daylight savings change from \"summer\" to \"winter\".\n     *   In an overlap there are local date-time values with two valid offsets.\n     *\n     * Thus, for any given local date-time there can be zero, one or two valid offsets.\n     * This method returns the single offset in the Normal case, and in the Gap or Overlap\n     * case it returns the offset before the transition.\n     *\n     * Since, in the case of Gap and Overlap, the offset returned is a \"best\" value, rather\n     * than the \"correct\" value, it should be treated with care. Applications that care\n     * about the correct offset should use a combination of this method,\n     * {@link getValidOffsets} and {@link getTransition}.\n     *\n     * @param {LocalDateTime} localDateTime - the local date-time to query, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffset} the best available offset for the local date-time, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    offsetOfLocalDateTime(localDateTime){\n        abstractMethodFail('ZoneRules.offsetLocalDateTime');\n    }\n\n    /**\n     * Gets the offset applicable at the specified local date-time in these rules.\n     *\n     * The mapping from a local date-time to an offset is not straightforward.\n     * There are three cases:\n     *\n     * * Normal, with one valid offset. For the vast majority of the year, the normal\n     *   case applies, where there is a single valid offset for the local date-time.\n     * * Gap, with zero valid offsets. This is when clocks jump forward typically\n     *   due to the spring daylight savings change from \"winter\" to \"summer\".\n     *   In a gap there are local date-time values with no valid offset.\n     * * Overlap, with two valid offsets. This is when clocks are set back typically\n     *   due to the autumn daylight savings change from \"summer\" to \"winter\".\n     *   In an overlap there are local date-time values with two valid offsets.\n     *\n     * Thus, for any given local date-time there can be zero, one or two valid offsets.\n     * This method returns that list of valid offsets, which is a list of size 0, 1 or 2.\n     * In the case where there are two offsets, the earlier offset is returned at index 0\n     * and the later offset at index 1.\n     *\n     * There are various ways to handle the conversion from a {@link LocalDateTime}.\n     * One technique, using this method, would be:\n     * <pre>\n     *  List<ZoneOffset> validOffsets = rules.getOffset(localDT);\n     *  if (validOffsets.size() == 1) {\n     *    // Normal case: only one valid offset\n     *    zoneOffset = validOffsets.get(0);\n     *  } else {\n     *    // Gap or Overlap: determine what to do from transition (which will be non-null)\n     *    ZoneOffsetTransition trans = rules.getTransition(localDT);\n     *  }\n     * </pre>\n     *\n     * In theory, it is possible for there to be more than two valid offsets.\n     * This would happen if clocks to be put back more than once in quick succession.\n     * This has never happened in the history of time-zones and thus has no special handling.\n     * However, if it were to happen, then the list would return more than 2 entries.\n     *\n     * @param {LocalDateTime} localDateTime - the local date-time to query for valid offsets, not null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffset[]} the list of valid offsets, may be immutable, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    validOffsets(localDateTime){\n        abstractMethodFail('ZoneRules.validOffsets');\n    }\n\n    /**\n     * Gets the offset transition applicable at the specified local date-time in these rules.\n     *\n     * The mapping from a local date-time to an offset is not straightforward.\n     * There are three cases:\n     *\n     * * Normal, with one valid offset. For the vast majority of the year, the normal\n     *   case applies, where there is a single valid offset for the local date-time.\n     * * Gap, with zero valid offsets. This is when clocks jump forward typically\n     *   due to the spring daylight savings change from \"winter\" to \"summer\".\n     *   In a gap there are local date-time values with no valid offset.\n     * * Overlap, with two valid offsets. This is when clocks are set back typically\n     *   due to the autumn daylight savings change from \"summer\" to \"winter\".\n     *   In an overlap there are local date-time values with two valid offsets.\n     *\n     * A transition is used to model the cases of a Gap or Overlap.\n     * The Normal case will return null.\n     *\n     * There are various ways to handle the conversion from a {@link LocalDateTime}.\n     * One technique, using this method, would be:\n     * <pre>\n     *  ZoneOffsetTransition trans = rules.getTransition(localDT);\n     *  if (trans != null) {\n     *    // Gap or Overlap: determine what to do from transition\n     *  } else {\n     *    // Normal case: only one valid offset\n     *    zoneOffset = rule.getOffset(localDT);\n     *  }\n     * </pre>\n     *\n     * @param {LocalDateTime} localDateTime  the local date-time to query for offset transition, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffsetTransition} the offset transition, null if the local date-time is not in transition\n     */\n    // eslint-disable-next-line no-unused-vars\n    transition(localDateTime){\n        abstractMethodFail('ZoneRules.transition');\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the standard offset for the specified instant in this zone.\n     *\n     * This provides access to historic information on how the standard offset\n     * has changed over time.\n     * The standard offset is the offset before any daylight saving time is applied.\n     * This is typically the offset applicable during winter.\n     *\n     * @param {Instant} instant - the instant to find the offset information for, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffset} the standard offset, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    standardOffset(instant){\n        abstractMethodFail('ZoneRules.standardOffset');\n    }\n\n    /**\n     * Gets the amount of daylight savings in use for the specified instant in this zone.\n     *\n     * This provides access to historic information on how the amount of daylight\n     * savings has changed over time.\n     * This is the difference between the standard offset and the actual offset.\n     * Typically the amount is zero during winter and one hour during summer.\n     * Time-zones are second-based, so the nanosecond part of the duration will be zero.\n     *\n     * @param {Instant} instant - the instant to find the daylight savings for, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {Duration} the difference between the standard and actual offset, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    daylightSavings(instant){\n        abstractMethodFail('ZoneRules.daylightSavings');\n        //    default {\n        //        ZoneOffset standardOffset = getStandardOffset(instant);\n        //        ZoneOffset actualOffset = getOffset(instant);\n        //        return actualOffset.toDuration().minus(standardOffset.toDuration()).normalized();\n        //    }\n    }\n\n    /**\n     * Checks if the specified instant is in daylight savings.\n     *\n     * This checks if the standard and actual offsets are the same at the specified instant.\n     *\n     * @param {Instant} instant - the instant to find the offset information for, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {boolean} the standard offset, not null\n     */\n    // eslint-disable-next-line no-unused-vars\n    isDaylightSavings(instant) {\n        abstractMethodFail('ZoneRules.isDaylightSavings');\n        //    default {\n        //        return (getStandardOffset(instant).equals(getOffset(instant)) == false);\n        //    }\n    }\n\n    /**\n     * Checks if the offset date-time is valid for these rules.\n     *\n     * To be valid, the local date-time must not be in a gap and the offset\n     * must match the valid offsets.\n     *\n     * @param {LocalDateTime} localDateTime - the date-time to check, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @param {ZoneOffset} offset - the offset to check, null returns false\n     * @return {boolean} true if the offset date-time is valid for these rules\n     */\n    // eslint-disable-next-line no-unused-vars\n    isValidOffset(localDateTime, offset){\n        abstractMethodFail('ZoneRules.isValidOffset');\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the next transition after the specified instant.\n     *\n     * This returns details of the next transition after the specified instant.\n     * For example, if the instant represents a point where \"Summer\" daylight savings time\n     * applies, then the method will return the transition to the next \"Winter\" time.\n     *\n     * @param {Instant} instant - the instant to get the next transition after, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffsetTransition} the next transition after the specified instant, null if this is after the last transition\n     */\n    // eslint-disable-next-line no-unused-vars\n    nextTransition(instant){\n        abstractMethodFail('ZoneRules.nextTransition');\n    }\n\n    /**\n     * Gets the previous transition before the specified instant.\n     *\n     * This returns details of the previous transition after the specified instant.\n     * For example, if the instant represents a point where \"summer\" daylight saving time\n     * applies, then the method will return the transition from the previous \"winter\" time.\n     *\n     * @param {Instant} instant - the instant to get the previous transition after, not null, but null\n     *  may be ignored if the rules have a single offset for all instants\n     * @return {ZoneOffsetTransition} the previous transition after the specified instant, null if this is before the first transition\n     */\n    // eslint-disable-next-line no-unused-vars\n    previousTransition(instant){\n        abstractMethodFail('ZoneRules.previousTransition');\n    }\n\n    /**\n     * Gets the complete list of fully defined transitions.\n     *\n     * The complete set of transitions for this rules instance is defined by this method\n     * and {@link getTransitionRules}. This method returns those transitions that have\n     * been fully defined. These are typically historical, but may be in the future.\n     *\n     * The list will be empty for fixed offset rules and for any time-zone where there has\n     * only ever been a single offset. The list will also be empty if the transition rules are unknown.\n     *\n     * @return {ZoneOffsetTransition[]} an immutable list of fully defined transitions, not null\n     */\n    transitions(){\n        abstractMethodFail('ZoneRules.transitions');\n    }\n\n    /**\n     * Gets the list of transition rules for years beyond those defined in the transition list.\n     *\n     * The complete set of transitions for this rules instance is defined by this method\n     * and {@link getTransitions}. This method returns instances of {@link ZoneOffsetTransitionRule}\n     * that define an algorithm for when transitions will occur.\n     *\n     * For any given {@link ZoneRules}, this list contains the transition rules for years\n     * beyond those years that have been fully defined. These rules typically refer to future\n     * daylight saving time rule changes.\n     *\n     * If the zone defines daylight savings into the future, then the list will normally\n     * be of size two and hold information about entering and exiting daylight savings.\n     * If the zone does not have daylight savings, or information about future changes\n     * is uncertain, then the list will be empty.\n     *\n     * The list will be empty for fixed offset rules and for any time-zone where there is no\n     * daylight saving time. The list will also be empty if the transition rules are unknown.\n     *\n     * @return {ZoneOffsetTransitionRule[]} an immutable list of transition rules, not null\n     */\n    transitionRules(){\n        abstractMethodFail('ZoneRules.transitionRules');\n    }\n\n    toString(){\n        abstractMethodFail('ZoneRules.toString');\n    }\n\n    /**\n     * toJSON() use by JSON.stringify\n     * delegates to toString()\n     *\n     * @return {string}\n     */\n    toJSON() {\n        return this.toString();\n    }\n}\n\n\nclass Fixed extends ZoneRules{\n    /**\n     *\n     * @param {ZoneOffset} offset\n     * @private\n     */\n    constructor(offset){\n        super();\n        this._offset = offset;\n    }\n\n    isFixedOffset(){\n        return true;\n    }\n\n    offsetOfInstant(){\n        return this._offset;\n    }\n\n    offsetOfEpochMilli(){\n        return this._offset;\n    }\n\n    offsetOfLocalDateTime(){\n        return this._offset;\n    }\n\n    validOffsets(){\n        return [this._offset];\n    }\n\n    transition(){\n        return null;\n    }\n\n    standardOffset(){\n        return this._offset;\n    }\n\n    daylightSavings(){\n        return Duration.ZERO;\n    }\n\n    isDaylightSavings(){\n        return false;\n    }\n\n    /**\n     *\n     * @param {LocalDateTime} localDateTime\n     * @param {ZoneOffset} offset\n     * @return {boolean}\n     */\n    isValidOffset(localDateTime, offset) {\n        return this._offset.equals(offset);\n    }\n\n    nextTransition(){\n        return null;\n    }\n\n    previousTransition(){\n        return null;\n    }\n\n    transitions(){\n        return [];\n    }\n\n    transitionRules(){\n        return [];\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     *\n     * @param {*} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof Fixed) {\n            return this._offset.equals(other._offset);\n        }\n        return false;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString() {\n        return `FixedRules:${this._offset.toString()}`;\n    }\n\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull } from './assert';\nimport { DateTimeException } from './errors';\nimport { MathUtil } from './MathUtil';\n\nimport { LocalTime } from './LocalTime';\nimport { ZoneId } from './ZoneId';\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { TemporalQueries } from './temporal/TemporalQueries';\n\nimport { ZoneRules } from './zone/ZoneRules';\n\nconst SECONDS_CACHE = {};\nconst ID_CACHE = {};\n\n/**\n *\n * ### Static properties of Class {@link LocalDate}\n *\n * ZoneOffset.MAX_SECONDS = 18 * LocalTime.SECONDS_PER_HOUR;\n *\n * ZoneOffset.UTC = ZoneOffset.ofTotalSeconds(0);\n *\n * ZoneOffset.MIN = ZoneOffset.ofTotalSeconds(-ZoneOffset.MAX_SECONDS);\n *\n * ZoneOffset.MAX = ZoneOffset.ofTotalSeconds(ZoneOffset.MAX_SECONDS);\n *\n */\nexport class ZoneOffset extends ZoneId {\n    /**\n     *\n     * @param {number} totalSeconds\n     * @private\n     */\n    constructor(totalSeconds){\n        super();\n        ZoneOffset._validateTotalSeconds(totalSeconds);\n        this._totalSeconds = MathUtil.safeToInt(totalSeconds);\n        this._rules = ZoneRules.of(this);\n        this._id = ZoneOffset._buildId(totalSeconds);\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    totalSeconds() {\n        return this._totalSeconds;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     *\n     * @param {number} totalSeconds\n     * @returns {string}\n     */\n    static _buildId(totalSeconds) {\n        if (totalSeconds === 0) {\n            return 'Z';\n        } else {\n            const absTotalSeconds = Math.abs(totalSeconds);\n            const absHours = MathUtil.intDiv(absTotalSeconds, LocalTime.SECONDS_PER_HOUR);\n            const absMinutes = MathUtil.intMod(MathUtil.intDiv(absTotalSeconds, LocalTime.SECONDS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n            let buf = `${totalSeconds < 0 ? '-' : '+'\n            }${absHours < 10 ? '0' : ''}${absHours\n            }${absMinutes < 10 ? ':0' : ':'}${absMinutes}`;\n            const absSeconds = MathUtil.intMod(absTotalSeconds, LocalTime.SECONDS_PER_MINUTE);\n            if (absSeconds !== 0) {\n                buf += (absSeconds < 10 ? ':0' : ':') + (absSeconds);\n            }\n            return buf;\n        }\n    }\n\n\n    /**\n     *\n     * @param {number} totalSeconds\n     * @private\n     */\n    static _validateTotalSeconds(totalSeconds){\n        if (Math.abs(totalSeconds) > ZoneOffset.MAX_SECONDS) {\n            throw new DateTimeException('Zone offset not in valid range: -18:00 to +18:00');\n        }\n    }\n\n    /**\n     *\n     * @param {number} hours\n     * @param {number} minutes\n     * @param {number} seconds\n     * @private\n     */\n    static _validate(hours, minutes, seconds) {\n        if (hours < -18 || hours > 18) {\n            throw new DateTimeException(`Zone offset hours not in valid range: value ${hours \n            } is not in the range -18 to 18`);\n        }\n        if (hours > 0) {\n            if (minutes < 0 || seconds < 0) {\n                throw new DateTimeException('Zone offset minutes and seconds must be positive because hours is positive');\n            }\n        } else if (hours < 0) {\n            if (minutes > 0 || seconds > 0) {\n                throw new DateTimeException('Zone offset minutes and seconds must be negative because hours is negative');\n            }\n        } else if ((minutes > 0 && seconds < 0) || (minutes < 0 && seconds > 0)) {\n            throw new DateTimeException('Zone offset minutes and seconds must have the same sign');\n        }\n        if (Math.abs(minutes) > 59) {\n            throw new DateTimeException(`Zone offset minutes not in valid range: abs(value) ${ \n                Math.abs(minutes)} is not in the range 0 to 59`);\n        }\n        if (Math.abs(seconds) > 59) {\n            throw new DateTimeException(`Zone offset seconds not in valid range: abs(value) ${ \n                Math.abs(seconds)} is not in the range 0 to 59`);\n        }\n        if (Math.abs(hours) === 18 && (Math.abs(minutes) > 0 || Math.abs(seconds) > 0)) {\n            throw new DateTimeException('Zone offset not in valid range: -18:00 to +18:00');\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link ZoneOffset} using the ID.\n     *\n     * This method parses the string ID of a {@link ZoneOffset} to\n     * return an instance. The parsing accepts all the formats generated by\n     * {@link getId}, plus some additional formats:\n     *\n     * * {@link Z} - for UTC\n     * * `+h`\n     * * `+hh`\n     * * `+hh:mm`\n     * * `-hh:mm`\n     * * `+hhmm`\n     * * `-hhmm`\n     * * `+hh:mm:ss`\n     * * `-hh:mm:ss`\n     * * `+hhmmss`\n     * * `-hhmmss`\n     *\n     * Note that &plusmn; means either the plus or minus symbol.\n     *\n     * The ID of the returned offset will be normalized to one of the formats\n     * described by {@link getId}.\n     *\n     * The maximum supported range is from +18:00 to -18:00 inclusive.\n     *\n     * @param {string} offsetId  the offset ID, not null\n     * @return {ZoneOffset} the zone-offset, not null\n     * @throws DateTimeException if the offset ID is invalid\n     */\n    static of(offsetId) {\n        requireNonNull(offsetId, 'offsetId');\n        // \"Z\" is always in the cache\n        const offset = ID_CACHE[offsetId];\n        if (offset != null) {\n            return offset;\n        }\n\n        // parse - +h, +hh, +hhmm, +hh:mm, +hhmmss, +hh:mm:ss\n        let hours, minutes, seconds;\n        switch (offsetId.length) {\n            case 2:\n                offsetId = `${offsetId[0]}0${offsetId[1]}`;  // fallthru\n            // eslint-disable-next-line no-fallthrough\n            case 3:\n                hours = ZoneOffset._parseNumber(offsetId, 1, false);\n                minutes = 0;\n                seconds = 0;\n                break;\n            case 5:\n                hours = ZoneOffset._parseNumber(offsetId, 1, false);\n                minutes = ZoneOffset._parseNumber(offsetId, 3, false);\n                seconds = 0;\n                break;\n            case 6:\n                hours = ZoneOffset._parseNumber(offsetId, 1, false);\n                minutes = ZoneOffset._parseNumber(offsetId, 4, true);\n                seconds = 0;\n                break;\n            case 7:\n                hours = ZoneOffset._parseNumber(offsetId, 1, false);\n                minutes = ZoneOffset._parseNumber(offsetId, 3, false);\n                seconds = ZoneOffset._parseNumber(offsetId, 5, false);\n                break;\n            case 9:\n                hours = ZoneOffset._parseNumber(offsetId, 1, false);\n                minutes = ZoneOffset._parseNumber(offsetId, 4, true);\n                seconds = ZoneOffset._parseNumber(offsetId, 7, true);\n                break;\n            default:\n                throw new DateTimeException(`Invalid ID for ZoneOffset, invalid format: ${offsetId}`);\n        }\n        const first = offsetId[0];\n        if (first !== '+' && first !== '-') {\n            throw new DateTimeException(`Invalid ID for ZoneOffset, plus/minus not found when expected: ${offsetId}`);\n        }\n        if (first === '-') {\n            return ZoneOffset.ofHoursMinutesSeconds(-hours, -minutes, -seconds);\n        } else {\n            return ZoneOffset.ofHoursMinutesSeconds(hours, minutes, seconds);\n        }\n    }\n\n    /**\n     * Parse a two digit zero-prefixed number.\n     *\n     * @param {string} offsetId - the offset ID, not null\n     * @param {number} pos - the position to parse, valid\n     * @param {boolean} precededByColon - should this number be prefixed by a precededByColon\n     * @return {number} the parsed number, from 0 to 99\n     */\n    static _parseNumber(offsetId, pos, precededByColon) {\n        if (precededByColon && offsetId[pos - 1] !== ':') {\n            throw new DateTimeException(`Invalid ID for ZoneOffset, colon not found when expected: ${offsetId}`);\n        }\n        const ch1 = offsetId[pos];\n        const ch2 = offsetId[pos + 1];\n        if (ch1 < '0' || ch1 > '9' || ch2 < '0' || ch2 > '9') {\n            throw new DateTimeException(`Invalid ID for ZoneOffset, non numeric characters found: ${offsetId}`);\n        }\n        return (ch1.charCodeAt(0) - 48) * 10 + (ch2.charCodeAt(0) - 48);\n    }\n\n    /**\n     *\n     * @param {number} hours\n     * @returns {ZoneOffset}\n     */\n    static ofHours(hours) {\n        return ZoneOffset.ofHoursMinutesSeconds(hours, 0, 0);\n    }\n\n    /**\n     *\n     * @param {number} hours\n     * @param {number} minutes\n     * @returns {ZoneOffset}\n     */\n    static ofHoursMinutes(hours, minutes) {\n        return ZoneOffset.ofHoursMinutesSeconds(hours, minutes, 0);\n    }\n\n    /**\n     *\n     * @param {number} hours\n     * @param {number} minutes\n     * @param {number} seconds\n     * @returns {ZoneOffset}\n     */\n    static ofHoursMinutesSeconds(hours, minutes, seconds) {\n        ZoneOffset._validate(hours, minutes, seconds);\n        const totalSeconds = hours * LocalTime.SECONDS_PER_HOUR + minutes * LocalTime.SECONDS_PER_MINUTE + seconds;\n        return ZoneOffset.ofTotalSeconds(totalSeconds);\n    }\n\n    /**\n     *\n     * @param {number} totalMinutes\n     * @returns {ZoneOffset}\n     */\n    static ofTotalMinutes(totalMinutes) {\n        const totalSeconds = totalMinutes * LocalTime.SECONDS_PER_MINUTE;\n        return ZoneOffset.ofTotalSeconds(totalSeconds);\n    }\n\n    /**\n     *\n     * @param {number} totalSeconds\n     * @returns {ZoneOffset}\n     */\n    static ofTotalSeconds(totalSeconds) {\n        if (totalSeconds % (15 * LocalTime.SECONDS_PER_MINUTE) === 0) {\n            const totalSecs = totalSeconds;\n            let result = SECONDS_CACHE[totalSecs];\n            if (result == null) {\n                result = new ZoneOffset(totalSeconds);\n                SECONDS_CACHE[totalSecs] = result;\n                ID_CACHE[result.id()] = result;\n            }\n            return result;\n        } else {\n            return new ZoneOffset(totalSeconds);\n        }\n    }\n\n    /**\n     * Gets the associated time-zone rules.\n     *\n     * The rules will always return this offset when queried.\n     * The implementation class is immutable, thread-safe and serializable.\n     *\n     * @return {ZoneRules} the rules, not null\n     */\n    rules() {\n        return this._rules;\n    }\n\n    /**\n      * Gets the value of the specified field from this offset as an `int`.\n      *\n      * This queries this offset for the value for the specified field.\n      * The returned value will always be within the valid range of values for the field.\n      * If it is not possible to return the value, because the field is not supported\n      * or for some other reason, an exception is thrown.\n      *\n      * If the field is a {@link ChronoField} then the query is implemented here.\n      * The {@link OFFSET_SECONDS} field returns the value of the offset.\n      * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n      *\n      * If the field is not a {@link ChronoField}, then the result of this method\n      * is obtained by invoking {@link TemporalField.getFrom}\n      * passing `this` as the argument. Whether the value can be obtained,\n      * and what the value represents, is determined by the field.\n      *\n      * @param {TemporalField} field - the field to get, not null\n      * @return {number} the value for the field\n      * @throws DateTimeException if a value for the field cannot be obtained\n      * @throws ArithmeticException if numeric overflow occurs\n      */\n    get(field) {\n        return this.getLong(field);\n    }\n\n    /**\n      * Gets the value of the specified field from this offset as a `long`.\n      *\n      * This queries this offset for the value for the specified field.\n      * If it is not possible to return the value, because the field is not supported\n      * or for some other reason, an exception is thrown.\n      *\n      * If the field is a {@link ChronoField} then the query is implemented here.\n      * The {@link OFFSET_SECONDS} field returns the value of the offset.\n      * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n      *\n      * If the field is not a {@link ChronoField}, then the result of this method\n      * is obtained by invoking {@link TemporalField.getFrom}\n      * passing `this` as the argument. Whether the value can be obtained,\n      * and what the value represents, is determined by the field.\n      *\n      * @param {TemporalField} field - the field to get, not null\n      * @return {number} the value for the field\n      * @throws DateTimeException if a value for the field cannot be obtained\n      * @throws ArithmeticException if numeric overflow occurs\n      */\n    getLong(field) {\n        if (field === ChronoField.OFFSET_SECONDS) {\n            return this._totalSeconds;\n        } else if (field instanceof ChronoField) {\n            throw new DateTimeException(`Unsupported field: ${field}`);\n        }\n        return field.getFrom(this);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n      * Queries this offset using the specified query.\n      *\n      * This queries this offset using the specified query strategy object.\n      * The {@link TemporalQuery} object defines the logic to be used to\n      * obtain the result. Read the documentation of the query to understand\n      * what the result of this method will be.\n      *\n      * The result of this method is obtained by invoking the\n      * {@link TemporalQuery#queryFrom} method on the\n      * specified query passing `this` as the argument.\n      *\n      * @param {TemporalQuery} query - the query to invoke, not null\n      * @return {*} the query result, null may be returned (defined by the query)\n      * @throws DateTimeException if unable to query (defined by the query)\n      * @throws ArithmeticException if numeric overflow occurs (defined by the query)\n      */\n    query(query) {\n        requireNonNull(query, 'query');\n        if (query === TemporalQueries.offset() || query === TemporalQueries.zone()) {\n            return this;\n        } else if (query === TemporalQueries.localDate() || query === TemporalQueries.localTime() ||\n                 query === TemporalQueries.precision() || query === TemporalQueries.chronology() || query === TemporalQueries.zoneId()) {\n            return null;\n        }\n        return query.queryFrom(this);\n    }\n\n    /**\n      * Adjusts the specified temporal object to have the same offset as this object.\n      *\n      * This returns a temporal object of the same observable type as the input\n      * with the offset changed to be the same as this.\n      *\n      * The adjustment is equivalent to using {@link Temporal#with}\n      * passing {@link ChronoField#OFFSET_SECONDS} as the field.\n      *\n      * In most cases, it is clearer to reverse the calling pattern by using\n      * {@link Temporal#with}:\n      * <pre>\n      *   // these two lines are equivalent, but the second approach is recommended\n      *   temporal = thisOffset.adjustInto(temporal);\n      *   temporal = temporal.with(thisOffset);\n      * </pre>\n      *\n      * This instance is immutable and unaffected by this method call.\n      *\n      * @param {Temporal} temporal - the target object to be adjusted, not null\n      * @return {Temporal} the adjusted object, not null\n      * @throws DateTimeException if unable to make the adjustment\n      * @throws ArithmeticException if numeric overflow occurs\n      */\n    adjustInto(temporal) {\n        return temporal.with(ChronoField.OFFSET_SECONDS, this._totalSeconds);\n    }\n\n    /**\n     * Compares this offset to another offset in descending order.\n     *\n     * The offsets are compared in the order that they occur for the same time\n     * of day around the world. Thus, an offset of `+10:00` comes before an\n     * offset of `+09:00` and so on down to `-18:00`.\n     *\n     * The comparison is \"consistent with equals\", as defined by {@link Comparable}.\n     *\n     * @param {!ZoneOffset} other - the other date to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     * @throws NullPointerException if {@link other} is null\n     */\n    compareTo(other) {\n        requireNonNull(other, 'other');\n        return other._totalSeconds - this._totalSeconds;\n    }\n\n\n    /**\n     * Checks if this offset is equal to another offset.\n     *\n     * The comparison is based on the amount of the offset in seconds.\n     * This is equivalent to a comparison by ID.\n     *\n     * @param {*} obj - the object to check, null returns false\n     * @return {boolean} true if this is equal to the other offset\n     */\n    equals(obj) {\n        if (this === obj) {\n            return true;\n        }\n        if (obj instanceof ZoneOffset) {\n            return this._totalSeconds === obj._totalSeconds;\n        }\n        return false;\n    }\n\n    /**\n     * @return {number}\n     */\n    hashCode(){\n        return this._totalSeconds;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString(){\n        return this._id;\n    }\n}\n\nexport function _init() {\n    ZoneOffset.MAX_SECONDS = 18 * LocalTime.SECONDS_PER_HOUR;\n    ZoneOffset.UTC = ZoneOffset.ofTotalSeconds(0);\n    ZoneOffset.MIN = ZoneOffset.ofTotalSeconds(-ZoneOffset.MAX_SECONDS);\n    ZoneOffset.MAX = ZoneOffset.ofTotalSeconds(ZoneOffset.MAX_SECONDS);\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull } from '../assert';\nimport { DateTimeException } from '../errors';\nimport { MathUtil } from '../MathUtil';\n\nimport { EnumMap } from './EnumMap';\nimport { ResolverStyle } from './ResolverStyle';\n\nimport { IsoChronology } from '../chrono/IsoChronology';\nimport { ChronoLocalDate } from '../chrono/ChronoLocalDate';\nimport { ChronoField } from '../temporal/ChronoField';\nimport { TemporalAccessor } from '../temporal/TemporalAccessor';\nimport { TemporalQueries } from '../temporal/TemporalQueries';\n\nimport { LocalTime } from '../LocalTime';\nimport { LocalDate } from '../LocalDate';\nimport { Period } from '../Period';\n\nimport { ZoneOffset } from '../ZoneOffset';\n\n/**\n * Builder that can holds date and time fields and related date and time objects.\n *\n * The builder is used to hold onto different elements of date and time.\n * It is designed as two separate maps:\n *\n * * from {@link TemporalField} to `long` value, where the value may be\n *   outside the valid range for the field\n * * from {@link Class} to {@link TemporalAccessor}, holding larger scale objects\n *   like {@link LocalDateTime}.\n *\n *   @private\n */\nexport class DateTimeBuilder extends TemporalAccessor {\n\n    /**\n     * Creates a new instance of the builder with a single field-value.\n     *\n     * This is equivalent to using {@link addFieldValue} on an empty builder.\n     *\n     * @param {TemporalField} field - the field to add, not null\n     * @param {number} value - the value to add, not null\n     * @return {DateTimeBuilder}\n     */\n    static create(field, value) {\n        const dtb = new DateTimeBuilder();\n        dtb._addFieldValue(field, value);\n        return dtb;\n    }\n\n\n    constructor(){\n        super();\n\n        /**\n         * The map of other fields.\n         */\n        this.fieldValues = new EnumMap();\n        /**\n         * The chronology.\n         */\n        this.chrono = null;\n        /**\n         * The zone.\n         */\n        this.zone = null;\n        /**\n         * The date.\n         */\n        this.date = null;\n        /**\n         * The time.\n         */\n        this.time = null;\n        /**\n         * The leap second flag.\n         */\n        this.leapSecond = false;\n        /**\n         * The excess days.\n         */\n        this.excessDays = null;\n    }\n\n    /**\n     *\n     * @param {TemporalField} field\n     * @return {Number} field value\n     */\n    getFieldValue0(field) {\n        return this.fieldValues.get(field);\n    }\n\n    /**\n     * Adds a field-value pair to the builder.\n     *\n     * This adds a field to the builder.\n     * If the field is not already present, then the field-value pair is added to the map.\n     * If the field is already present and it has the same value as that specified, no action occurs.\n     * If the field is already present and it has a different value to that specified, then\n     * an exception is thrown.\n     *\n     * @param {TemporalField} field - the field to add, not null\n     * @param {Number} value - the value to add, not null\n     * @return {DateTimeBuilder}, this for method chaining\n     * @throws DateTimeException if the field is already present with a different value\n     */\n    _addFieldValue(field, value) {\n        requireNonNull(field, 'field');\n        const old = this.getFieldValue0(field);  // check first for better error message\n        if (old != null && old !== value) {\n            throw new DateTimeException(`Conflict found: ${field} ${old} differs from ${field} ${value}: ${this}`);\n        }\n        return this._putFieldValue0(field, value);\n    }\n\n    /**\n     * @param {TemporalField} field\n     * @param {Number} value\n     * @return {DateTimeBuilder}, this for method chaining\n     */\n    _putFieldValue0(field, value) {\n        this.fieldValues.put(field, value);\n        return this;\n    }\n\n    /**\n     * Resolves the builder, evaluating the date and time.\n     *\n     * This examines the contents of the build.er and resolves it to produce the best\n     * available date and time, throwing an exception if a problem occurs.\n     * Calling this method changes the state of the builder.\n     *\n     * @param {ResolverStyle} resolverStyle - how to resolve\n     * @param {TemporalField[]} resolverFields\n     * @return {DateTimeBuilder} this, for method chaining\n     */\n    resolve(resolverStyle, resolverFields) {\n        if (resolverFields != null) {\n            this.fieldValues.retainAll(resolverFields);\n        }\n        // handle standard fields\n        // this._mergeInstantFields();\n        this._mergeDate(resolverStyle);\n        this._mergeTime(resolverStyle);\n        //if (resolveFields(resolverStyle)) {\n        //    mergeInstantFields();\n        //    mergeDate(resolverStyle);\n        //    mergeTime(resolverStyle);\n        //}\n        this._resolveTimeInferZeroes(resolverStyle);\n        //this._crossCheck();\n        if (this.excessDays != null && this.excessDays.isZero() === false && this.date != null && this.time != null) {\n            this.date = this.date.plus(this.excessDays);\n            this.excessDays = Period.ZERO;\n        }\n        //resolveFractional();\n        this._resolveInstant();\n        return this;\n    }\n\n    /**\n     *\n     * @param {ResolverStyle} resolverStyle\n     * @private\n     */\n    _mergeDate(resolverStyle) {\n        //if (this.chrono instanceof IsoChronology) {\n        this._checkDate(IsoChronology.INSTANCE.resolveDate(this.fieldValues, resolverStyle));\n        //} else {\n        //    if (this.fieldValues.containsKey(ChronoField.EPOCH_DAY)) {\n        //        this._checkDate(LocalDate.ofEpochDay(this.fieldValues.remove(ChronoField.EPOCH_DAY)));\n        //        return;\n        //    }\n        //}\n    }\n\n    /**\n     *\n     * @param {LocalDate} date\n     * @private\n     */\n    _checkDate(date) {\n        if (date != null) {\n            this._addObject(date);\n            for (const fieldName in this.fieldValues.keySet()) {\n                const field = ChronoField.byName(fieldName);\n                if (field) {\n                    if (this.fieldValues.get(field) !== undefined) { // undefined if \"removed\" in EnumMap\n                        if (field.isDateBased()) {\n                            let val1;\n                            try {\n                                val1 = date.getLong(field);\n                            } catch (ex) {\n                                if (ex instanceof DateTimeException) {\n                                    continue;\n                                } else {\n                                    throw ex;\n                                }\n                            }\n                            const val2 = this.fieldValues.get(field);\n                            if (val1 !== val2) {\n                                throw new DateTimeException(`Conflict found: Field ${field} ${val1} differs from ${field} ${val2} derived from ${date}`);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     *\n     * @param {ResolverStyle} resolverStyle\n     * @private\n     */\n    _mergeTime(resolverStyle) {\n        if (this.fieldValues.containsKey(ChronoField.CLOCK_HOUR_OF_DAY)) {\n            const ch = this.fieldValues.remove(ChronoField.CLOCK_HOUR_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                if (resolverStyle === ResolverStyle.SMART && ch === 0) {\n                    // ok\n                } else {\n                    ChronoField.CLOCK_HOUR_OF_DAY.checkValidValue(ch);\n                }\n            }\n            this._addFieldValue(ChronoField.HOUR_OF_DAY, ch === 24 ? 0 : ch);\n        }\n        if (this.fieldValues.containsKey(ChronoField.CLOCK_HOUR_OF_AMPM)) {\n            const ch = this.fieldValues.remove(ChronoField.CLOCK_HOUR_OF_AMPM);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                if (resolverStyle === ResolverStyle.SMART && ch === 0) {\n                    // ok\n                } else {\n                    ChronoField.CLOCK_HOUR_OF_AMPM.checkValidValue(ch);\n                }\n            }\n            this._addFieldValue(ChronoField.HOUR_OF_AMPM, ch === 12 ? 0 : ch);\n        }\n        if (resolverStyle !== ResolverStyle.LENIENT) {\n            if (this.fieldValues.containsKey(ChronoField.AMPM_OF_DAY)) {\n                ChronoField.AMPM_OF_DAY.checkValidValue(this.fieldValues.get(ChronoField.AMPM_OF_DAY));\n            }\n            if (this.fieldValues.containsKey(ChronoField.HOUR_OF_AMPM)) {\n                ChronoField.HOUR_OF_AMPM.checkValidValue(this.fieldValues.get(ChronoField.HOUR_OF_AMPM));\n            }\n        }\n        if (this.fieldValues.containsKey(ChronoField.AMPM_OF_DAY) && this.fieldValues.containsKey(ChronoField.HOUR_OF_AMPM)) {\n            const ap = this.fieldValues.remove(ChronoField.AMPM_OF_DAY);\n            const hap = this.fieldValues.remove(ChronoField.HOUR_OF_AMPM);\n            this._addFieldValue(ChronoField.HOUR_OF_DAY, ap * 12 + hap);\n        }\n        //        if (timeFields.containsKey(HOUR_OF_DAY) && timeFields.containsKey(MINUTE_OF_HOUR)) {\n        //            const hod = timeFields.remove(HOUR_OF_DAY);\n        //            const moh = timeFields.remove(MINUTE_OF_HOUR);\n        //            this._addFieldValue(MINUTE_OF_DAY, hod * 60 + moh);\n        //        }\n        //        if (timeFields.containsKey(MINUTE_OF_DAY) && timeFields.containsKey(SECOND_OF_MINUTE)) {\n        //            const mod = timeFields.remove(MINUTE_OF_DAY);\n        //            const som = timeFields.remove(SECOND_OF_MINUTE);\n        //            this._addFieldValue(SECOND_OF_DAY, mod * 60 + som);\n        //        }\n        if (this.fieldValues.containsKey(ChronoField.NANO_OF_DAY)) {\n            const nod = this.fieldValues.remove(ChronoField.NANO_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.NANO_OF_DAY.checkValidValue(nod);\n            }\n            this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(nod, 1000000000));\n            this._addFieldValue(ChronoField.NANO_OF_SECOND, MathUtil.intMod(nod, 1000000000));\n        }\n        if (this.fieldValues.containsKey(ChronoField.MICRO_OF_DAY)) {\n            const cod = this.fieldValues.remove(ChronoField.MICRO_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.MICRO_OF_DAY.checkValidValue(cod);\n            }\n            this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(cod, 1000000));\n            this._addFieldValue(ChronoField.MICRO_OF_SECOND, MathUtil.intMod(cod, 1000000));\n        }\n        if (this.fieldValues.containsKey(ChronoField.MILLI_OF_DAY)) {\n            const lod = this.fieldValues.remove(ChronoField.MILLI_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.MILLI_OF_DAY.checkValidValue(lod);\n            }\n            this._addFieldValue(ChronoField.SECOND_OF_DAY, MathUtil.intDiv(lod, 1000));\n            this._addFieldValue(ChronoField.MILLI_OF_SECOND, MathUtil.intMod(lod, 1000));\n        }\n        if (this.fieldValues.containsKey(ChronoField.SECOND_OF_DAY)) {\n            const sod = this.fieldValues.remove(ChronoField.SECOND_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.SECOND_OF_DAY.checkValidValue(sod);\n            }\n            this._addFieldValue(ChronoField.HOUR_OF_DAY, MathUtil.intDiv(sod, 3600));\n            this._addFieldValue(ChronoField.MINUTE_OF_HOUR, MathUtil.intMod(MathUtil.intDiv(sod, 60), 60));\n            this._addFieldValue(ChronoField.SECOND_OF_MINUTE, MathUtil.intMod(sod, 60));\n        }\n        if (this.fieldValues.containsKey(ChronoField.MINUTE_OF_DAY)) {\n            const mod = this.fieldValues.remove(ChronoField.MINUTE_OF_DAY);\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.MINUTE_OF_DAY.checkValidValue(mod);\n            }\n            this._addFieldValue(ChronoField.HOUR_OF_DAY, MathUtil.intDiv(mod, 60));\n            this._addFieldValue(ChronoField.MINUTE_OF_HOUR, MathUtil.intMod(mod, 60));\n        }\n\n        //            const sod = MathUtil.intDiv(nod, 1000000000L);\n        //            this._addFieldValue(HOUR_OF_DAY, MathUtil.intDiv(sod, 3600));\n        //            this._addFieldValue(MINUTE_OF_HOUR, MathUtil.intMod(MathUtil.intDiv(sod, 60), 60));\n        //            this._addFieldValue(SECOND_OF_MINUTE, MathUtil.intMod(sod, 60));\n        //            this._addFieldValue(NANO_OF_SECOND, MathUtil.intMod(nod, 1000000000L));\n        if (resolverStyle !== ResolverStyle.LENIENT) {\n            if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND)) {\n                ChronoField.MILLI_OF_SECOND.checkValidValue(this.fieldValues.get(ChronoField.MILLI_OF_SECOND));\n            }\n            if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n                ChronoField.MICRO_OF_SECOND.checkValidValue(this.fieldValues.get(ChronoField.MICRO_OF_SECOND));\n            }\n        }\n        if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND) && this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n            const los = this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n            const cos = this.fieldValues.get(ChronoField.MICRO_OF_SECOND);\n            this._putFieldValue0(ChronoField.MICRO_OF_SECOND, los * 1000 + (MathUtil.intMod(cos, 1000)));\n        }\n        if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND) && this.fieldValues.containsKey(ChronoField.NANO_OF_SECOND)) {\n            const nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n            this._putFieldValue0(ChronoField.MICRO_OF_SECOND, MathUtil.intDiv(nos, 1000));\n            this.fieldValues.remove(ChronoField.MICRO_OF_SECOND);\n        }\n        if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND) && this.fieldValues.containsKey(ChronoField.NANO_OF_SECOND)) {\n            const nos = this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n            this._putFieldValue0(ChronoField.MILLI_OF_SECOND, MathUtil.intDiv(nos, 1000000));\n            this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n        }\n        if (this.fieldValues.containsKey(ChronoField.MICRO_OF_SECOND)) {\n            const cos = this.fieldValues.remove(ChronoField.MICRO_OF_SECOND);\n            this._putFieldValue0(ChronoField.NANO_OF_SECOND, cos * 1000);\n        } else if (this.fieldValues.containsKey(ChronoField.MILLI_OF_SECOND)) {\n            const los = this.fieldValues.remove(ChronoField.MILLI_OF_SECOND);\n            this._putFieldValue0(ChronoField.NANO_OF_SECOND, los * 1000000);\n        }\n    }\n\n    /**\n     *\n     * @param {ResolverStyle} resolverStyle\n     * @private\n     */\n    _resolveTimeInferZeroes(resolverStyle) {\n        let hod =  this.fieldValues.get(ChronoField.HOUR_OF_DAY);\n        const moh =  this.fieldValues.get(ChronoField.MINUTE_OF_HOUR);\n        const som =  this.fieldValues.get(ChronoField.SECOND_OF_MINUTE);\n        let nos =  this.fieldValues.get(ChronoField.NANO_OF_SECOND);\n        if (hod == null) {\n            return;\n        }\n        if (moh == null && (som != null || nos != null)) {\n            return;\n        }\n        if (moh != null && som == null && nos != null) {\n            return;\n        }\n        if (resolverStyle !== ResolverStyle.LENIENT) {\n            if (hod != null) {\n                if (resolverStyle === ResolverStyle.SMART &&\n                                hod === 24 &&\n                                (moh == null || moh === 0) &&\n                                (som == null || som === 0) &&\n                                (nos == null || nos === 0)) {\n                    hod = 0;\n                    this.excessDays = Period.ofDays(1);\n                }\n                const hodVal = ChronoField.HOUR_OF_DAY.checkValidIntValue(hod);\n                if (moh != null) {\n                    const mohVal = ChronoField.MINUTE_OF_HOUR.checkValidIntValue(moh);\n                    if (som != null) {\n                        const somVal = ChronoField.SECOND_OF_MINUTE.checkValidIntValue(som);\n                        if (nos != null) {\n                            const nosVal = ChronoField.NANO_OF_SECOND.checkValidIntValue(nos);\n                            this._addObject(LocalTime.of(hodVal, mohVal, somVal, nosVal));\n                        } else {\n                            this._addObject(LocalTime.of(hodVal, mohVal, somVal));\n                        }\n                    } else {\n                        if (nos == null) {\n                            this._addObject(LocalTime.of(hodVal, mohVal));\n                        }\n                    }\n                } else {\n                    if (som == null && nos == null) {\n                        this._addObject(LocalTime.of(hodVal, 0));\n                    }\n                }\n            }\n        } else {\n            if (hod != null) {\n                let hodVal = hod;\n                if (moh != null) {\n                    if (som != null) {\n                        if (nos == null) {\n                            nos = 0;\n                        }\n                        let totalNanos = MathUtil.safeMultiply(hodVal, 3600000000000);\n                        totalNanos = MathUtil.safeAdd(totalNanos, MathUtil.safeMultiply(moh, 60000000000));\n                        totalNanos = MathUtil.safeAdd(totalNanos, MathUtil.safeMultiply(som, 1000000000));\n                        totalNanos = MathUtil.safeAdd(totalNanos, nos);\n                        const excessDays =  MathUtil.floorDiv(totalNanos, 86400000000000);  // safe int cast\n                        const nod = MathUtil.floorMod(totalNanos, 86400000000000);\n                        this._addObject(LocalTime.ofNanoOfDay(nod));\n                        this.excessDays = Period.ofDays(excessDays);\n                    } else {\n                        let totalSecs = MathUtil.safeMultiply(hodVal, 3600);\n                        totalSecs = MathUtil.safeAdd(totalSecs, MathUtil.safeMultiply(moh, 60));\n                        const excessDays =  MathUtil.floorDiv(totalSecs, 86400);  // safe int cast\n                        const sod = MathUtil.floorMod(totalSecs, 86400);\n                        this._addObject(LocalTime.ofSecondOfDay(sod));\n                        this.excessDays = Period.ofDays(excessDays);\n                    }\n                } else {\n                    const excessDays = MathUtil.safeToInt(MathUtil.floorDiv(hodVal, 24));\n                    hodVal = MathUtil.floorMod(hodVal, 24);\n                    this._addObject(LocalTime.of(hodVal, 0));\n                    this.excessDays = Period.ofDays(excessDays);\n                }\n            }\n        }\n        this.fieldValues.remove(ChronoField.HOUR_OF_DAY);\n        this.fieldValues.remove(ChronoField.MINUTE_OF_HOUR);\n        this.fieldValues.remove(ChronoField.SECOND_OF_MINUTE);\n        this.fieldValues.remove(ChronoField.NANO_OF_SECOND);\n    }\n\n    /**\n     *\n     * @param {ChronoLocalDate|LocalTime} dateOrTime\n     * @private\n     */\n    _addObject(dateOrTime) {\n        if (dateOrTime instanceof ChronoLocalDate){\n            this.date = dateOrTime;\n        } else if (dateOrTime instanceof LocalTime){\n            this.time = dateOrTime;\n        }\n    }\n\n    _resolveInstant() {\n        if (this.date != null && this.time != null) {\n            const offsetSecs = this.fieldValues.get(ChronoField.OFFSET_SECONDS);\n            if (offsetSecs != null) {\n                const offset = ZoneOffset.ofTotalSeconds(offsetSecs);\n                const instant = this.date.atTime(this.time).atZone(offset).getLong(ChronoField.INSTANT_SECONDS);\n                this.fieldValues.put(ChronoField.INSTANT_SECONDS, instant);\n            } else if (this.zone != null) {\n                const instant = this.date.atTime(this.time).atZone(this.zone).getLong(ChronoField.INSTANT_SECONDS);\n                this.fieldValues.put(ChronoField.INSTANT_SECONDS, instant);\n            }\n        }\n    }\n\n    /**\n     * Builds the specified type from the values in this builder.\n     *\n     * This attempts to build the specified type from this builder.\n     * If the builder cannot return the type, an exception is thrown.\n     *\n     * @param {!TemporalQuery} type - the type to invoke `from` on, not null\n     * @return {*} the extracted value, not null\n     * @throws DateTimeException if an error occurs\n     */\n    build(type) {\n        return type.queryFrom(this);\n    }\n\n    /**\n     *\n     * @param {TemporalField} field\n     * @returns {number}\n     */\n    isSupported(field) {\n        if (field == null) {\n            return false;\n        }\n        return (this.fieldValues.containsKey(field) && this.fieldValues.get(field) !== undefined) ||\n                (this.date != null && this.date.isSupported(field)) ||\n                (this.time != null && this.time.isSupported(field));\n    }\n\n    /**\n     *\n     * @param {TemporalField} field\n     * @returns {number}\n     */\n    getLong(field) {\n        requireNonNull(field, 'field');\n        const value = this.getFieldValue0(field);\n        if (value == null) {\n            if (this.date != null && this.date.isSupported(field)) {\n                return this.date.getLong(field);\n            }\n            if (this.time != null && this.time.isSupported(field)) {\n                return this.time.getLong(field);\n            }\n            throw new DateTimeException(`Field not found: ${field}`);\n        }\n        return value;\n    }\n\n    /**\n     *\n     * @param {!TemporalQuery} query\n     * @returns {*}\n     */\n    query(query) {\n        if (query === TemporalQueries.zoneId()) {\n            return this.zone;\n        } else if (query === TemporalQueries.chronology()) {\n            return this.chrono;\n        } else if (query === TemporalQueries.localDate()) {\n            return this.date != null ? LocalDate.from(this.date) : null;\n        } else if (query === TemporalQueries.localTime()) {\n            return this.time;\n        } else if (query === TemporalQueries.zone() || query === TemporalQueries.offset()) {\n            return query.queryFrom(this);\n        } else if (query === TemporalQueries.precision()) {\n            return null;  // not a complete date/time\n        }\n        // inline TemporalAccessor.super.query(query) as an optimization\n        // non-JDK classes are not permitted to make this optimization\n        return query.queryFrom(this);\n    }\n\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { assert, requireNonNull } from '../assert';\n\nimport { DateTimeBuilder } from './DateTimeBuilder';\nimport { EnumMap } from './EnumMap';\n\nimport { IsoChronology } from '../chrono/IsoChronology';\nimport { Temporal } from '../temporal/Temporal';\nimport { TemporalQueries } from '../temporal/TemporalQueries';\n\n/**\n * @private\n */\nexport class DateTimeParseContext{\n\n    constructor(){\n        if(arguments.length === 1){\n            if(arguments[0] instanceof DateTimeParseContext){\n                this._constructorSelf.apply(this, arguments);\n                return;\n            } else {\n                this._constructorFormatter.apply(this, arguments);\n            }\n        } else {\n            this._constructorParam.apply(this, arguments);\n        }\n\n        this._caseSensitive = true;\n        this._strict = true;\n        this._parsed = [new Parsed(this)];\n    }\n\n    _constructorParam(locale, symbols, chronology){\n        this._locale = locale;\n        this._symbols = symbols;\n        this._overrideChronology = chronology;\n    }\n\n    _constructorFormatter(formatter){\n        this._locale = formatter.locale();\n        this._symbols = formatter.decimalStyle();\n        this._overrideChronology = formatter.chronology();\n    }\n\n\n    _constructorSelf(other) {\n        this._locale = other._locale;\n        this._symbols = other._symbols;\n        this._overrideChronology = other._overrideChronology;\n        this._overrideZone = other._overrideZone;\n        this._caseSensitive = other._caseSensitive;\n        this._strict = other._strict;\n        this._parsed = [new Parsed(this)];\n    }\n\n    /**\n     * Creates a copy of this context.\n     */\n    copy() {\n        return new DateTimeParseContext(this);\n    }\n\n    symbols(){\n        return this._symbols;\n    }\n\n    isStrict(){\n        return this._strict;\n    }\n\n    setStrict(strict){\n        this._strict = strict;\n    }\n\n    locale() {\n        return this._locale;\n    }\n\n    setLocale(locale) {\n        this._locale = locale;\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * Starts the parsing of an optional segment of the input.\n     */\n    startOptional() {\n        this._parsed.push(this.currentParsed().copy());\n    }\n\n    /**\n     * Ends the parsing of an optional segment of the input.\n     *\n     * @param {boolean} successful  whether the optional segment was successfully parsed\n     */\n    endOptional(successful) {\n        if (successful) {\n            this._parsed.splice(this._parsed.length - 2, 1);\n        } else {\n            this._parsed.splice(this._parsed.length - 1, 1);\n        }\n    }\n\n    /**\n     * Checks if parsing is case sensitive.\n     *\n     * @return true if parsing is case sensitive, false if case insensitive\n     */\n    isCaseSensitive() {\n        return this._caseSensitive;\n    }\n\n    /**\n     * Sets whether the parsing is case sensitive or not.\n     *\n     * @param caseSensitive  changes the parsing to be case sensitive or not from now on\n     */\n    setCaseSensitive(caseSensitive) {\n        this._caseSensitive = caseSensitive;\n    }\n\n    /**\n     * Helper to compare two {@link CharSequence} instances.\n     * This uses {@link isCaseSensitive}.\n     *\n     * @param cs1  the first character sequence, not null\n     * @param offset1  the offset into the first sequence, valid\n     * @param cs2  the second character sequence, not null\n     * @param offset2  the offset into the second sequence, valid\n     * @param length  the length to check, valid\n     * @return true if equal\n     */\n    subSequenceEquals(cs1, offset1, cs2, offset2, length) {\n        if (offset1 + length > cs1.length || offset2 + length > cs2.length) {\n            return false;\n        }\n        if (! this.isCaseSensitive()) {\n            cs1 = cs1.toLowerCase();\n            cs2 = cs2.toLowerCase();\n        }\n        for (let i = 0; i < length; i++) {\n            const ch1 = cs1[offset1 + i];\n            const ch2 = cs2[offset2 + i];\n            if (ch1 !== ch2) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    /**\n     * Helper to compare two `char`.\n     * This uses {@link isCaseSensitive}.\n     *\n     * @param ch1  the first character\n     * @param ch2  the second character\n     * @return true if equal\n     */\n    charEquals(ch1, ch2) {\n        if (this.isCaseSensitive()) {\n            return ch1 === ch2;\n        }\n        return this.charEqualsIgnoreCase(ch1, ch2);\n    }\n\n    /**\n     * Compares two characters ignoring case.\n     *\n     * @param c1  the first\n     * @param c2  the second\n     * @return true if equal\n     */\n    charEqualsIgnoreCase(c1, c2) {\n        return c1 === c2 ||\n                c1.toLowerCase() === c2.toLowerCase();\n    }\n\n    setParsedField(field, value, errorPos, successPos){\n        const currentParsedFieldValues = this.currentParsed().fieldValues;\n        const old = currentParsedFieldValues.get(field);\n        currentParsedFieldValues.set(field, value);\n        return (old != null && old !== value) ? ~errorPos : successPos;\n    }\n\n    /**\n     * Stores the parsed zone.\n     *\n     * This stores the zone that has been parsed.\n     * No validation is performed other than ensuring it is not null.\n     *\n     * @param {ZoneId} zone  the parsed zone, not null\n     */\n    setParsedZone(zone) {\n        requireNonNull(zone, 'zone');\n        this.currentParsed().zone = zone;\n    }\n\n    getParsed(field) {\n        return this.currentParsed().fieldValues.get(field);\n    }\n\n    toParsed() {\n        return this.currentParsed();\n    }\n\n    currentParsed() {\n        return this._parsed[this._parsed.length - 1];\n    }\n\n    /**\n     * Stores the leap second.\n     */\n    setParsedLeapSecond() {\n        this.currentParsed().leapSecond = true;\n    }\n\n    /**\n     * Gets the effective chronology during parsing.\n     *\n     * @return the effective parsing chronology, not null\n     */\n    getEffectiveChronology() {\n        let chrono = this.currentParsed().chrono;\n        if (chrono == null) {\n            chrono = this._overrideChronology;\n            if (chrono == null) {\n                chrono = IsoChronology.INSTANCE;\n            }\n        }\n        return chrono;\n    }\n\n\n}\n\nclass Parsed extends Temporal {\n    constructor(dateTimeParseContext){\n        super();\n        this.chrono = null;\n        this.zone = null;\n        this.fieldValues = new EnumMap();\n        this.leapSecond = false;\n        this.dateTimeParseContext = dateTimeParseContext;\n    }\n\n    copy() {\n        const cloned = new Parsed();\n        cloned.chrono = this.chrono;\n        cloned.zone = this.zone;\n        cloned.fieldValues.putAll(this.fieldValues);\n        cloned.leapSecond = this.leapSecond;\n        cloned.dateTimeParseContext = this.dateTimeParseContext;\n        return cloned;\n    }\n\n    toString() {\n        return `${this.fieldValues}, ${this.chrono}, ${this.zone}`;\n    }\n\n    isSupported(field) {\n        return this.fieldValues.containsKey(field);\n    }\n\n    get(field) {\n        const val = this.fieldValues.get(field);\n        assert(val != null);\n        return val;\n    }\n\n    query(query) {\n        if (query === TemporalQueries.chronology()) {\n            return this.chrono;\n        }\n        if (query === TemporalQueries.zoneId() || query === TemporalQueries.zone()) {\n            return this.zone;\n        }\n        return super.query(query);\n    }\n\n    toBuilder() {\n        const builder = new DateTimeBuilder();\n        builder.fieldValues.putAll(this.fieldValues);\n        builder.chrono = this.dateTimeParseContext.getEffectiveChronology();\n        if (this.zone != null) {\n            builder.zone = this.zone;\n        } else {\n            builder.zone = this.overrideZone;\n        }\n        builder.leapSecond = this.leapSecond;\n        builder.excessDays = this.excessDays;\n        return builder;\n    }\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { DateTimeException } from '../errors';\n\nimport { DateTimeFormatter } from './DateTimeFormatter';\n\n/**\n * @private\n */\nexport class DateTimePrintContext{\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @param {DateTimeFormatter|Locale} localeOrFormatter\n     * @param {DecimalStyle} symbols\n     */\n    constructor(temporal, localeOrFormatter, symbols) {\n        if(arguments.length === 2 && arguments[1] instanceof DateTimeFormatter){\n            this._temporal = DateTimePrintContext.adjust(temporal, localeOrFormatter);\n            this._locale = localeOrFormatter.locale();\n            this._symbols = localeOrFormatter.decimalStyle();\n        } else {\n            this._temporal = temporal;\n            this._locale = localeOrFormatter;\n            this._symbols = symbols;\n        }\n        this._optional = 0;\n    }\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @param {DateTimeFormatter} formatter\n     * @returns {TemporalAccessor}\n     */\n    // eslint-disable-next-line no-unused-vars\n    static adjust(temporal, formatter) {\n        // TODO implement\n        return temporal;\n    }\n\n\n    symbols(){\n        return this._symbols;\n    }\n\n    /**\n     * Starts the printing of an optional segment of the input.\n     */\n    startOptional() {\n        this._optional++;\n    }\n\n    /**\n     * Ends the printing of an optional segment of the input.\n     */\n    endOptional() {\n        this._optional--;\n    }\n\n    /**\n     * Gets a value using a query.\n     *\n     * @param {TemporalQuery} query  the query to use, not null\n     * @return {*} the result, null if not found and optional is true\n     * @throws DateTimeException if the type is not available and the section is not optional\n     */\n    getValueQuery(query) {\n        const result = this._temporal.query(query);\n        if (result == null && this._optional === 0) {\n            throw new DateTimeException(`Unable to extract value: ${this._temporal}`);\n        }\n        return result;\n    }\n\n    /**\n     * Gets the value of the specified field.\n     *\n     * This will return the value for the specified field.\n     *\n     * @param field  the field to find, not null\n     * @return the value, null if not found and optional is true\n     * @throws DateTimeException if the field is not available and the section is not optional\n     */\n    getValue(field) {\n        try {\n            return this._temporal.getLong(field);\n        } catch (ex) {\n            if ((ex instanceof DateTimeException) && this._optional > 0) {\n                return null;\n            }\n            throw ex;\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the temporal object being output.\n     *\n     * @return {TemporalAccessor} the temporal object, not null\n     */\n    temporal() {\n        return this._temporal;\n    }\n\n    /**\n     * Gets the locale.\n     * <p>\n     * This locale is used to control localization in the print output except\n     * where localization is controlled by the symbols.\n     *\n     * @return the locale, not null\n     */\n    locale() {\n        return this._locale;\n    }\n\n    //-------------------------------------------------------------------------\n    // for testing\n    /**\n     * Sets the date-time being output.\n     *\n     * @param temporal  the date-time object, not null\n     */\n    setDateTime(temporal) {\n        this._temporal = temporal;\n    }\n\n    setLocale(locale) {\n        this._locale = locale;\n    }\n\n\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { UnsupportedTemporalTypeException, IllegalStateException } from '../errors';\n\nimport { DayOfWeek } from '../DayOfWeek';\nimport { Duration } from '../Duration';\nimport { MathUtil } from '../MathUtil';\nimport { LocalDate } from '../LocalDate';\n\nimport { ChronoField } from './ChronoField';\nimport { ChronoUnit } from './ChronoUnit';\nimport { TemporalField } from './TemporalField';\nimport { TemporalUnit } from './TemporalUnit';\nimport { ValueRange } from './ValueRange';\n\nimport { IsoChronology } from '../chrono/IsoChronology';\n\nimport { ResolverStyle } from '../format/ResolverStyle';\n\n/**\n * Fields and units specific to the ISO-8601 calendar system,\n * including quarter-of-year and week-based-year.\n *\n * This class defines fields and units that are specific to the ISO calendar system.\n *\n * ### Quarter of year\n *\n * The ISO-8601 standard is based on the standard civic 12 month year.\n * This is commonly divided into four quarters, often abbreviated as Q1, Q2, Q3 and Q4.\n *\n * January, February and March are in Q1.\n * April, May and June are in Q2.\n * July, August and September are in Q3.\n * October, November and December are in Q4.\n *\n * The complete date is expressed using three fields:\n *\n * * `IsoFields.DAY_OF_QUARTER` - the day within the quarter, from 1 to 90, 91 or 92\n * * `QUARTER_OF_YEAR` - the week within the week-based-year\n * * `ChronoField.YEAR` - the standard ISO year (see {@link ChronoField})\n *\n * ### Week based years\n *\n * The ISO-8601 standard was originally intended as a data interchange format,\n * defining a string format for dates and times. However, it also defines an\n * alternate way of expressing the date, based on the concept of week-based-year.\n *\n * The date is expressed using three fields:\n *\n * * `ChronoField.DAY_OF_WEEK` - the standard field defining the\n *   day-of-week from Monday (1) to Sunday (7) (see {@link ChronoField})\n * * `WEEK_OF_WEEK_BASED_YEAR` - the week within the week-based-year\n * * `WEEK_BASED_YEAR` - the week-based-year \n *\n * The week-based-year itself is defined relative to the standard ISO proleptic year.\n * It differs from the standard year in that it always starts on a Monday.\n *\n * The first week of a week-based-year is the first Monday-based week of the standard\n * ISO year that has at least 4 days in the new year.\n *\n * * If January 1st is Monday then week 1 starts on January 1st\n * * If January 1st is Tuesday then week 1 starts on December 31st of the previous standard year\n * * If January 1st is Wednesday then week 1 starts on December 30th of the previous standard year\n * * If January 1st is Thursday then week 1 starts on December 29th of the previous standard year\n * * If January 1st is Friday then week 1 starts on January 4th\n * * If January 1st is Saturday then week 1 starts on January 3rd\n * * If January 1st is Sunday then week 1 starts on January 2nd\n *\n * There are 52 weeks in most week-based years, however on occasion there are 53 weeks.\n *\n * For example:\n *\n * * Sunday, 2008-12-28: Week 52 of week-based-year 2008\n * * Monday, 2008-12-29: Week 1 of week-based-year 2009\n * * Wednesday, 2008-12-31: Week 1 of week-based-year 2009\n * * Thursday, 2009-01-01: Week 1 of week-based-year 2009\n * * Sunday, 2009-01-04: Week 1 of week-based-year 2009\n * * Monday, 2009-01-05: Week 2 of week-based-year 2009\n *\n * @property {TemporalField} DAY_OF_QUARTER The field that represents the day-of-quarter.\n *\n * This field allows the day-of-quarter value to be queried and set.\n * The day-of-quarter has values from 1 to 90 in Q1 of a standard year, from 1 to 91\n * in Q1 of a leap year, from 1 to 91 in Q2 and from 1 to 92 in Q3 and Q4.\n *\n * The day-of-quarter can only be calculated if the day-of-year, month-of-year and year\n * are available.\n *\n * When setting this field, the value is allowed to be partially lenient, taking any\n * value from 1 to 92. If the quarter has less than 92 days, then day 92, and\n * potentially day 91, is in the following quarter.\n *\n * @property {TemporalField} QUARTER_OF_YEAR The field that represents the quarter-of-year.\n *\n * This field allows the quarter-of-year value to be queried and set.\n * The quarter-of-year has values from 1 to 4.\n *\n * The day-of-quarter can only be calculated if the month-of-year is available.\n *\n * @property {TemporalField} WEEK_OF_WEEK_BASED_YEAR The field that represents the\n * week-of-week-based-year.\n *\n * This field allows the week of the week-based-year value to be queried and set.\n *\n * @property {TemporalField} WEEK_BASED_YEAR The field that represents the week-based-year.\n *\n * This field allows the week-based-year value to be queried and set.\n *\n * @property {TemporalField} WEEK_BASED_YEARS The unit that represents week-based-years for\n * the purpose of addition and subtraction.\n *\n * This allows a number of week-based-years to be added to, or subtracted from, a date.\n * The unit is equal to either 52 or 53 weeks.\n * The estimated duration of a week-based-year is the same as that of a standard ISO\n * year at 365.2425 days.\n *\n * The rules for addition add the number of week-based-years to the existing value\n * for the week-based-year field. If the resulting week-based-year only has 52 weeks,\n * then the date will be in week 1 of the following week-based-year.\n *\n * @property {TemporalField} QUARTER_YEARS Unit that represents the concept of a quarter-year.\n * For the ISO calendar system, it is equal to 3 months.\n * The estimated duration of a quarter-year is one quarter of 365.2425 days.\n * \n * @typedef {Object} IsoFields\n * @type {Object}\n */\nexport const IsoFields = {};\n\n//-----------------------------------------------------------------------\n\nconst QUARTER_DAYS = [0, 90, 181, 273, 0, 91, 182, 274];\n\n/**\n * Implementation of the field.\n * @private\n */\nclass Field extends TemporalField{\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    isDateBased() {\n        return true;\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    isTimeBased() {\n        return false;\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    _isIso() {\n        return true;\n    }\n\n    /**\n     *\n     * @param {LocalDate} date\n     * @returns {ValueRange}\n     */\n    static _getWeekRangeByLocalDate(date) {\n        const wby = Field._getWeekBasedYear(date);\n        return ValueRange.of(1, Field._getWeekRangeByYear(wby));\n    }\n\n    /**\n     *\n     * @param {number} wby\n     * @returns {number}\n     */\n    static _getWeekRangeByYear(wby) {\n        const date = LocalDate.of(wby, 1, 1);\n        // 53 weeks if standard year starts on Thursday, or Wed in a leap year\n        if (date.dayOfWeek() === DayOfWeek.THURSDAY || (date.dayOfWeek() === DayOfWeek.WEDNESDAY && date.isLeapYear())) {\n            return 53;\n        }\n        return 52;\n    }\n\n    /**\n     *\n     * @param {LocalDate} date\n     * @returns {number}\n     */\n    static _getWeek(date) {\n        const dow0 = date.dayOfWeek().ordinal();\n        const doy0 = date.dayOfYear() - 1;\n        const doyThu0 = doy0 + (3 - dow0);  // adjust to mid-week Thursday (which is 3 indexed from zero)\n        const alignedWeek = MathUtil.intDiv(doyThu0, 7);\n        const firstThuDoy0 = doyThu0 - (alignedWeek * 7);\n        let firstMonDoy0 = firstThuDoy0 - 3;\n        if (firstMonDoy0 < -3) {\n            firstMonDoy0 += 7;\n        }\n        if (doy0 < firstMonDoy0) {\n            return Field._getWeekRangeByLocalDate(date.withDayOfYear(180).minusYears(1)).maximum();\n        }\n        let week = MathUtil.intDiv((doy0 - firstMonDoy0), 7) + 1;\n        if (week === 53) {\n            if ((firstMonDoy0 === -3 || (firstMonDoy0 === -2 && date.isLeapYear())) === false) {\n                week = 1;\n            }\n        }\n        return week;\n    }\n\n    /**\n     *\n     * @param {LocalDate} date\n     * @returns {number}\n     */\n    static _getWeekBasedYear(date) {\n        let year = date.year();\n        let doy = date.dayOfYear();\n        if (doy <= 3) {\n            const dow = date.dayOfWeek().ordinal();\n            if (doy - dow < -2) {\n                year--;\n            }\n        } else if (doy >= 363) {\n            const dow = date.dayOfWeek().ordinal();\n            doy = doy - 363 - (date.isLeapYear() ? 1 : 0);\n            if (doy - dow >= 0) {\n                year++;\n            }\n        }\n        return year;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    displayName(/*locale*/) {\n        return this.toString();\n    }\n\n    /**\n     *\n     * @returns {null}\n     */\n    resolve() {\n        return null;\n    }\n\n    name(){\n        return this.toString();\n    }\n\n}\n\n/**\n * @private\n */\nclass DAY_OF_QUARTER_FIELD extends Field {\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString() {\n        return 'DayOfQuarter';\n    }\n\n    /**\n     *\n     * @returns {TemporalUnit}\n     */\n    baseUnit() {\n        return ChronoUnit.DAYS;\n    }\n\n    /**\n     *\n     * @returns {TemporalUnit}\n     */\n    rangeUnit() {\n        return QUARTER_YEARS;\n    }\n\n    /**\n     *\n     * @returns {ValueRange}\n     */\n    range() {\n        return ValueRange.of(1, 90, 92);\n    }\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {boolean}\n     */\n    isSupportedBy(temporal) {\n        return temporal.isSupported(ChronoField.DAY_OF_YEAR) && temporal.isSupported(ChronoField.MONTH_OF_YEAR) &&\n            temporal.isSupported(ChronoField.YEAR) && this._isIso(temporal);\n    }\n\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {ValueRange}\n     */\n    rangeRefinedBy(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException('Unsupported field: DayOfQuarter');\n        }\n        const qoy = temporal.getLong(QUARTER_OF_YEAR);\n        if (qoy === 1) {\n            const year = temporal.getLong(ChronoField.YEAR);\n            return (IsoChronology.isLeapYear(year) ? ValueRange.of(1, 91) : ValueRange.of(1, 90));\n        } else if (qoy === 2) {\n            return ValueRange.of(1, 91);\n        } else if (qoy === 3 || qoy === 4) {\n            return ValueRange.of(1, 92);\n        } // else value not from 1 to 4, so drop through\n        return this.range();\n    }\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {number}\n     */\n    getFrom(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException('Unsupported field: DayOfQuarter');\n        }\n        const doy = temporal.get(ChronoField.DAY_OF_YEAR);\n        const moy = temporal.get(ChronoField.MONTH_OF_YEAR);\n        const year = temporal.getLong(ChronoField.YEAR);\n        return doy - QUARTER_DAYS[MathUtil.intDiv((moy - 1), 3) + (IsoChronology.isLeapYear(year) ? 4 : 0)];\n    }\n\n    /**\n     *\n     * @param {Temporal} temporal\n     * @param {number} newValue\n     * @returns {temporal}\n     */\n    adjustInto(temporal, newValue) {\n        const curValue = this.getFrom(temporal);\n        this.range().checkValidValue(newValue, this);\n        return temporal.with(ChronoField.DAY_OF_YEAR, temporal.getLong(ChronoField.DAY_OF_YEAR) + (newValue - curValue));\n    }\n\n    /**\n     *\n     * @param {Map<TemporalField, number>} fieldValues\n     * @param {TemporalAccessor} partialTemporal\n     * @param {ResolverStyle} resolverStyle\n     * @returns {ValueRange}\n     */\n    resolve(fieldValues, partialTemporal, resolverStyle) {\n        const yearLong = fieldValues.get(ChronoField.YEAR);\n        const qoyLong = fieldValues.get(QUARTER_OF_YEAR);\n        if (yearLong == null || qoyLong == null) {\n            return null;\n        }\n        const y = ChronoField.YEAR.checkValidIntValue(yearLong);\n        const doq = fieldValues.get(DAY_OF_QUARTER);\n        let date;\n        if (resolverStyle === ResolverStyle.LENIENT) {\n            const qoy = qoyLong;\n            date = LocalDate.of(y, 1, 1);\n            date = date.plusMonths(MathUtil.safeMultiply(MathUtil.safeSubtract(qoy, 1), 3));\n            date = date.plusDays(MathUtil.safeSubtract(doq, 1));\n        } else {\n            const qoy = QUARTER_OF_YEAR.range().checkValidIntValue(qoyLong, QUARTER_OF_YEAR);\n            if (resolverStyle === ResolverStyle.STRICT) {\n                let max = 92;\n                if (qoy === 1) {\n                    max = (IsoChronology.isLeapYear(y) ? 91 : 90);\n                } else if (qoy === 2) {\n                    max = 91;\n                }\n                ValueRange.of(1, max).checkValidValue(doq, this);\n            } else {\n                this.range().checkValidValue(doq, this);  // leniently check from 1 to 92\n            }\n            date = LocalDate.of(y, ((qoy - 1) * 3) + 1, 1).plusDays(doq - 1);\n        }\n        fieldValues.remove(this);\n        fieldValues.remove(ChronoField.YEAR);\n        fieldValues.remove(QUARTER_OF_YEAR);\n        return date;\n    }\n}\n\n/**\n * @private\n */\nclass QUARTER_OF_YEAR_FIELD extends Field {\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString() {\n        return 'QuarterOfYear';\n    }\n\n    /**\n     *\n     * @returns {TemporalUnit}\n     */\n    baseUnit() {\n        return QUARTER_YEARS;\n    }\n\n    /**\n     *\n     * @returns {TemporalUnit}\n     */\n    rangeUnit() {\n        return ChronoUnit.YEARS;\n    }\n\n    /**\n     *\n     * @returns {ValueRange}\n     */\n    range() {\n        return ValueRange.of(1, 4);\n    }\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {boolean}\n     */\n    isSupportedBy(temporal) {\n        return temporal.isSupported(ChronoField.MONTH_OF_YEAR) && this._isIso(temporal);\n    }\n\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {ValueRange}\n     */\n    //eslint-disable-next-line no-unused-vars\n    rangeRefinedBy(temporal) {\n        return this.range();\n    }\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {number}\n     */\n    getFrom(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException('Unsupported field: QuarterOfYear');\n        }\n        const moy = temporal.getLong(ChronoField.MONTH_OF_YEAR);\n        return MathUtil.intDiv((moy + 2), 3);\n    }\n\n    /**\n     *\n     * @param {Temporal} temporal\n     * @param {number} newValue\n     * @returns {temporal}\n     */\n    adjustInto(temporal, newValue) {\n        const curValue = this.getFrom(temporal);\n        this.range().checkValidValue(newValue, this);\n        return temporal.with(ChronoField.MONTH_OF_YEAR, temporal.getLong(ChronoField.MONTH_OF_YEAR) + (newValue - curValue) * 3);\n    }\n\n}\n\n/**\n * @private\n */\nclass WEEK_OF_WEEK_BASED_YEAR_FIELD extends Field {\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString() {\n        return 'WeekOfWeekBasedYear';\n    }\n\n    /**\n     *\n     * @returns {TemporalUnit}\n     */\n    baseUnit() {\n        return ChronoUnit.WEEKS;\n    }\n\n    /**\n     *\n     * @returns {TemporalUnit}\n     */\n    rangeUnit() {\n        return WEEK_BASED_YEARS;\n    }\n\n    /**\n     *\n     * @returns {ValueRange}\n     */\n    range() {\n        return ValueRange.of(1, 52, 53);\n    }\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {boolean}\n     */\n    isSupportedBy(temporal) {\n        return temporal.isSupported(ChronoField.EPOCH_DAY) && this._isIso(temporal);\n    }\n\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {ValueRange}\n     */\n    rangeRefinedBy(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException('Unsupported field: WeekOfWeekBasedYear');\n        }\n        return Field._getWeekRangeByLocalDate(LocalDate.from(temporal));\n    }\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {number}\n     */\n    getFrom(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException('Unsupported field: WeekOfWeekBasedYear');\n        }\n        return Field._getWeek(LocalDate.from(temporal));\n    }\n\n    /**\n     *\n     * @param {Temporal} temporal\n     * @param {number} newValue\n     * @returns {temporal}\n     */\n    adjustInto(temporal, newValue) {\n        this.range().checkValidValue(newValue, this);\n        return temporal.plus(MathUtil.safeSubtract(newValue, this.getFrom(temporal)), ChronoUnit.WEEKS);\n    }\n\n    /**\n     *\n     * @param {Map<TemporalField, number>} fieldValues\n     * @param {TemporalAccessor} partialTemporal\n     * @param {ResolverStyle} resolverStyle\n     * @returns {ValueRange}\n     */\n    resolve(fieldValues, partialTemporal, resolverStyle) {\n        const wbyLong = fieldValues.get(WEEK_BASED_YEAR);\n        const dowLong = fieldValues.get(ChronoField.DAY_OF_WEEK);\n        if (wbyLong == null || dowLong == null) {\n            return null;\n        }\n        const wby = WEEK_BASED_YEAR.range().checkValidIntValue(wbyLong, WEEK_BASED_YEAR);\n        const wowby = fieldValues.get(WEEK_OF_WEEK_BASED_YEAR);\n        let date;\n        if (resolverStyle === ResolverStyle.LENIENT) {\n            let dow = dowLong;\n            let weeks = 0;\n            if (dow > 7) {\n                weeks = MathUtil.intDiv((dow - 1), 7);\n                dow = (MathUtil.intMod((dow - 1), 7) + 1);\n            } else if (dow < 1) {\n                weeks = MathUtil.intDiv(dow, 7) - 1;\n                dow = MathUtil.intMod(dow, 7) + 7;\n            }\n            date = LocalDate.of(wby, 1, 4).plusWeeks(wowby - 1).plusWeeks(weeks).with(ChronoField.DAY_OF_WEEK, dow);\n        } else {\n            const dow = ChronoField.DAY_OF_WEEK.checkValidIntValue(dowLong);\n            if (resolverStyle === ResolverStyle.STRICT) {\n                const temp = LocalDate.of(wby, 1, 4);\n                const range = Field._getWeekRangeByLocalDate(temp);\n                range.checkValidValue(wowby, this);\n            } else {\n                this.range().checkValidValue(wowby, this);  // leniently check from 1 to 53\n            }\n            date = LocalDate.of(wby, 1, 4).plusWeeks(wowby - 1).with(ChronoField.DAY_OF_WEEK, dow);\n        }\n        fieldValues.remove(this);\n        fieldValues.remove(WEEK_BASED_YEAR);\n        fieldValues.remove(ChronoField.DAY_OF_WEEK);\n        return date;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    displayName() {\n        return 'Week';\n    }\n\n}\n\n/**\n * @private\n */\nclass WEEK_BASED_YEAR_FIELD extends Field {\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString() {\n        return 'WeekBasedYear';\n    }\n\n    /**\n     *\n     * @returns {TemporalUnit}\n     */\n    baseUnit() {\n        return WEEK_BASED_YEARS;\n    }\n\n    /**\n     *\n     * @returns {TemporalUnit}\n     */\n    rangeUnit() {\n        return ChronoUnit.FOREVER;\n    }\n\n    /**\n     *\n     * @returns {ValueRange}\n     */\n    range() {\n        return ChronoField.YEAR.range();\n    }\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {boolean}\n     */\n    isSupportedBy(temporal) {\n        return temporal.isSupported(ChronoField.EPOCH_DAY) && this._isIso(temporal);\n    }\n\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {ValueRange}\n     */\n    //eslint-disable-next-line no-unused-vars\n    rangeRefinedBy(temporal) {\n        return ChronoField.YEAR.range();\n    }\n\n    /**\n     *\n     * @param {TemporalAccessor} temporal\n     * @returns {number}\n     */\n    getFrom(temporal) {\n        if (temporal.isSupported(this) === false) {\n            throw new UnsupportedTemporalTypeException('Unsupported field: WeekBasedYear');\n        }\n        return Field._getWeekBasedYear(LocalDate.from(temporal));\n    }\n\n    /**\n     *\n     * @param {Temporal} temporal\n     * @param {number} newValue\n     * @returns {temporal}\n     */\n    adjustInto(temporal, newValue) {\n        if (this.isSupportedBy(temporal) === false) {\n            throw new UnsupportedTemporalTypeException('Unsupported field: WeekBasedYear');\n        }\n        const newWby = this.range().checkValidIntValue(newValue, WEEK_BASED_YEAR);  // strict check\n        const date = LocalDate.from(temporal);\n        const dow = date.get(ChronoField.DAY_OF_WEEK);\n        let week = Field._getWeek(date);\n        if (week === 53 && Field._getWeekRangeByYear(newWby) === 52) {\n            week = 52;\n        }\n        let resolved = LocalDate.of(newWby, 1, 4);  // 4th is guaranteed to be in week one\n        const days = (dow - resolved.get(ChronoField.DAY_OF_WEEK)) + ((week - 1) * 7);\n        resolved = resolved.plusDays(days);\n        return temporal.with(resolved);\n    }\n\n}\n\n//-----------------------------------------------------------------------\n/**\n * Implementation of the period unit.\n * @private\n */\nclass Unit extends TemporalUnit {\n\n    /**\n     *\n     * @param {string} name\n     * @param {Duration} estimatedDuration\n     * @private\n     */\n    constructor(name, estimatedDuration) {\n        super();\n        this._name = name;\n        this._duration = estimatedDuration;\n    }\n\n    /**\n     *\n     * @returns {Duration}\n     */\n    duration() {\n        return this._duration;\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    isDurationEstimated() {\n        return true;\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    isDateBased() {\n        return true;\n    }\n\n    /**\n     *\n     * @returns {boolean}\n     */\n    isTimeBased() {\n        return false;\n    }\n\n    /**\n     *\n     * @param {Temporal} temporal\n     * @returns {boolean}\n     */\n    isSupportedBy(temporal) {\n        return temporal.isSupported(ChronoField.EPOCH_DAY);\n    }\n\n    /**\n     *\n     * @param {Temporal} temporal\n     * @param {number} periodToAdd\n     * @returns {number}\n     */\n    addTo(temporal, periodToAdd) {\n        switch(this) {\n            case WEEK_BASED_YEARS: {\n                const added = MathUtil.safeAdd(temporal.get(WEEK_BASED_YEAR), periodToAdd);\n                return temporal.with(WEEK_BASED_YEAR, added);\n            }\n            case QUARTER_YEARS:\n                // no overflow (256 is multiple of 4)\n                return temporal.plus(MathUtil.intDiv(periodToAdd, 256), ChronoUnit.YEARS).plus(MathUtil.intMod(periodToAdd, 256) * 3, ChronoUnit.MONTHS);\n            default:\n                throw new IllegalStateException('Unreachable');\n        }\n    }\n\n    /**\n     *\n     * @param {Temporal} temporal1\n     * @param {Temporal} temporal2\n     * @returns {number}\n     */\n    between(temporal1, temporal2) {\n        switch(this) {\n            case WEEK_BASED_YEARS:\n                return MathUtil.safeSubtract(temporal2.getLong(WEEK_BASED_YEAR), temporal1.getLong(WEEK_BASED_YEAR));\n            case QUARTER_YEARS:\n                return MathUtil.intDiv(temporal1.until(temporal2, ChronoUnit.MONTHS), 3);\n            default:\n                throw new IllegalStateException('Unreachable');\n        }\n    }\n\n    toString() {\n        return this._name;\n    }\n}\n\nlet DAY_OF_QUARTER = null;\nlet QUARTER_OF_YEAR = null;\nlet WEEK_OF_WEEK_BASED_YEAR = null;\nlet WEEK_BASED_YEAR = null;\nlet WEEK_BASED_YEARS = null;\nlet QUARTER_YEARS = null;\n\nexport function _init() {\n    DAY_OF_QUARTER = new DAY_OF_QUARTER_FIELD();\n    QUARTER_OF_YEAR = new QUARTER_OF_YEAR_FIELD();\n    WEEK_OF_WEEK_BASED_YEAR = new WEEK_OF_WEEK_BASED_YEAR_FIELD();\n    WEEK_BASED_YEAR = new WEEK_BASED_YEAR_FIELD();\n\n    WEEK_BASED_YEARS = new Unit('WeekBasedYears', Duration.ofSeconds(31556952));\n    QUARTER_YEARS = new Unit('QuarterYears', Duration.ofSeconds(31556952 / 4));\n\n    IsoFields.DAY_OF_QUARTER = DAY_OF_QUARTER;\n    IsoFields.QUARTER_OF_YEAR = QUARTER_OF_YEAR;\n    IsoFields.WEEK_OF_WEEK_BASED_YEAR = WEEK_OF_WEEK_BASED_YEAR;\n    IsoFields.WEEK_BASED_YEAR = WEEK_BASED_YEAR;\n    IsoFields.WEEK_BASED_YEARS = WEEK_BASED_YEARS;\n    IsoFields.QUARTER_YEARS = QUARTER_YEARS;\n\n    // this differs from threeten, but for ease of use we bring back good old joda time functionality\n    /**\n     * the week of the week based year as defined by the ISO8601 Standard with a Monday-based week\n     *\n     * @returns {number} the week a the week based year\n     */\n    LocalDate.prototype.isoWeekOfWeekyear = function () {\n        return this.get(IsoFields.WEEK_OF_WEEK_BASED_YEAR);\n    };\n    /**\n     * the year of the week based year as defined by the ISO8601 Standard with a Monday-based week\n     *\n     * @returns {number} the year a the week based year\n     */\n    LocalDate.prototype.isoWeekyear = function () {\n        return this.get(IsoFields.WEEK_BASED_YEAR);\n    };\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nexport class DecimalStyle {\n    /**\n     *\n     * @param zeroChar\n     * @param positiveSignChar\n     * @param negativeSignChar\n     * @param decimalPointChar\n     * @private\n     */\n    constructor(zeroChar, positiveSignChar, negativeSignChar, decimalPointChar) {\n        this._zeroDigit = zeroChar;\n        this._zeroDigitCharCode = zeroChar.charCodeAt(0);\n        this._positiveSign = positiveSignChar;\n        this._negativeSign = negativeSignChar;\n        this._decimalSeparator = decimalPointChar;\n    }\n\n    positiveSign(){\n        return this._positiveSign;\n    }\n\n    withPositiveSign(positiveSign) {\n        if (positiveSign === this._positiveSign) {\n            return this;\n        }\n        return new DecimalStyle(this._zeroDigit, positiveSign, this._negativeSign, this._decimalSeparator);\n    }\n\n    negativeSign(){\n        return this._negativeSign;\n    }\n\n    withNegativeSign(negativeSign) {\n        if (negativeSign === this._negativeSign) {\n            return this;\n        }\n        return new DecimalStyle(this._zeroDigit, this._positiveSign, negativeSign, this._decimalSeparator);\n    }\n\n    zeroDigit(){\n        return this._zeroDigit;\n    }\n\n    withZeroDigit(zeroDigit) {\n        if (zeroDigit === this._zeroDigit) {\n            return this;\n        }\n        return new DecimalStyle(zeroDigit, this._positiveSign, this._negativeSign, this._decimalSeparator);\n    }\n\n    decimalSeparator(){\n        return this._decimalSeparator;\n    }\n\n    withDecimalSeparator(decimalSeparator) {\n        if (decimalSeparator === this._decimalSeparator) {\n            return this;\n        }\n        return new DecimalStyle(this._zeroDigit, this._positiveSign, this._negativeSign, decimalSeparator);\n    }\n\n    convertToDigit(char){\n        const val = char.charCodeAt(0) - this._zeroDigitCharCode;\n        return (val >= 0 && val <= 9) ? val : -1;\n    }\n\n    convertNumberToI18N(numericText) {\n        if (this._zeroDigit === '0') {\n            return numericText;\n        }\n        const diff = this._zeroDigitCharCode - '0'.charCodeAt(0);\n        let convertedText = '';\n        for (let i = 0; i < numericText.length; i++) {\n            convertedText += String.fromCharCode(numericText.charCodeAt(i) + diff);\n        }\n        return convertedText;\n    }\n\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof DecimalStyle) {\n            return (this._zeroDigit === other._zeroDigit && this._positiveSign === other._positiveSign &&\n                this._negativeSign === other._negativeSign && this._decimalSeparator === other._decimalSeparator);\n        }\n        return false;\n    }\n\n    hashCode() {\n        return this._zeroDigit + this._positiveSign + this._negativeSign + this._decimalSeparator;\n    }\n\n    toString() {\n        return `DecimalStyle[${this._zeroDigit}${this._positiveSign}${this._negativeSign}${this._decimalSeparator}]`;\n    }\n\n    static of(){\n        throw new Error('not yet supported');\n    }\n    static availableLocales(){\n        throw new Error('not yet supported');\n    }\n\n}\n\nDecimalStyle.STANDARD = new DecimalStyle('0', '+', '-', '.');\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { Enum } from '../Enum';\n\nexport class SignStyle extends Enum{\n    /**\n     * Parse helper.\n     *\n     * @param positive  true if positive sign parsed, false for negative sign\n     * @param strict  true if strict, false if lenient\n     * @param fixedWidth  true if fixed width, false if not\n     * @return true if valid\n     */\n    parse(positive, strict, fixedWidth){\n        switch (this) {\n            case SignStyle.NORMAL: // NORMAL\n                // valid if negative or (positive and lenient)\n                return !positive || !strict;\n            case SignStyle.ALWAYS: // ALWAYS\n            case SignStyle.EXCEEDS_PAD: // EXCEEDS_PAD\n                return true;\n            default:\n                // valid if lenient and not fixed width\n                return !strict && !fixedWidth;\n        }\n\n    }\n}\n\nSignStyle.NORMAL = new SignStyle('NORMAL');\nSignStyle.NEVER = new SignStyle('NEVER');\nSignStyle.ALWAYS = new SignStyle('ALWAYS');\nSignStyle.EXCEEDS_PAD = new SignStyle('EXCEEDS_PAD');\nSignStyle.NOT_NEGATIVE = new SignStyle('NOT_NEGATIVE');\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\nimport { Enum } from '../Enum';\n\n/**\n * Enumeration of the style of text formatting and parsing.\n *\n * Text styles define three sizes for the formatted text - 'full', 'short' and 'narrow'.\n * Each of these three sizes is available in both 'standard' and 'stand-alone' variations.\n *\n * The difference between the three sizes is obvious in most languages.\n * For example, in English the 'full' month is 'January', the 'short' month is 'Jan'\n * and the 'narrow' month is 'J'. Note that the narrow size is often not unique.\n * For example, 'January', 'June' and 'July' all have the 'narrow' text 'J'.\n *\n * The difference between the 'standard' and 'stand-alone' forms is trickier to describe\n * as there is no difference in English. However, in other languages there is a difference\n * in the word used when the text is used alone, as opposed to in a complete date.\n * For example, the word used for a month when used alone in a date picker is different\n * to the word used for month in association with a day and year in a date.\n *\n * ### Specification for implementors\n *\n * This is immutable and thread-safe enum.\n */\nexport class TextStyle extends Enum {\n    /**\n     * Checks if the style is stand-alone.\n     *\n     * @return {boolean} true if the style is stand-alone\n     */\n    isStandalone() {\n        switch (this) {\n            case TextStyle.FULL_STANDALONE:\n            case TextStyle.SHORT_STANDALONE:\n            case TextStyle.NARROW_STANDALONE:\n                return true;\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Converts the style to the equivalent stand-alone style.\n     *\n     * @return {TextStyle} the matching stand-alone style\n     */\n    asStandalone() {\n        switch (this) {\n            case TextStyle.FULL:\n                return TextStyle.FULL_STANDALONE;\n            case TextStyle.SHORT:\n                return TextStyle.SHORT_STANDALONE;\n            case TextStyle.NARROW:\n                return TextStyle.NARROW_STANDALONE;\n            default:\n                // all others are already standalone\n                return this;\n        }\n    }\n\n    /**\n     * Converts the style to the equivalent normal style.\n     *\n     * @return {TextStyle} the matching normal style\n     */\n    asNormal() {\n        switch (this) {\n            case TextStyle.FULL_STANDALONE:\n                return TextStyle.FULL;\n            case TextStyle.SHORT_STANDALONE:\n                return TextStyle.SHORT;\n            case TextStyle.NARROW_STANDALONE:\n                return TextStyle.NARROW;\n            default:\n                // all others are already normal\n                return this;\n        }\n    }\n}\n\n/**\n * Full text, typically the full description.\n * For example, day-of-week Monday might output \"Monday\".\n */\nTextStyle.FULL = new TextStyle('FULL');\n/**\n * Full text for stand-alone use, typically the full description.\n * For example, day-of-week Monday might output \"Monday\".\n */\nTextStyle.FULL_STANDALONE = new TextStyle('FULL_STANDALONE');\n/**\n * Short text, typically an abbreviation.\n * For example, day-of-week Monday might output \"Mon\".\n */\nTextStyle.SHORT = new TextStyle('SHORT');\n/**\n * Short text for stand-alone use, typically an abbreviation.\n * For example, day-of-week Monday might output \"Mon\".\n */\nTextStyle.SHORT_STANDALONE = new TextStyle('SHORT_STANDALONE');\n/**\n * Narrow text, typically a single letter.\n * For example, day-of-week Monday might output \"M\".\n */\nTextStyle.NARROW = new TextStyle('NARROW');\n/**\n * Narrow text for stand-alone use, typically a single letter.\n * For example, day-of-week Monday might output \"M\".\n */\nTextStyle.NARROW_STANDALONE = new TextStyle('NARROW_STANDALONE');\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { IllegalArgumentException } from '../../errors';\n\n/**\n * Prints or parses a char literal.\n * @private\n */\nexport class CharLiteralPrinterParser {\n\n    constructor(literal) {\n        if (literal.length > 1) {\n            throw new IllegalArgumentException(`invalid literal, too long: \"${literal}\"`);\n        }\n        this._literal = literal;\n    }\n\n    print(context, buf) {\n        buf.append(this._literal);\n        return true;\n    }\n\n    parse(context, text, position) {\n        const length = text.length;\n        if (position === length) {\n            return ~position;\n        }\n        const ch = text.charAt(position);\n        if (context.charEquals(this._literal, ch) === false) {\n            return ~position;\n        }\n        return position + this._literal.length;\n    }\n\n    toString() {\n        if (this._literal === '\\'') {\n            return \"''\";\n        }\n        return `'${this._literal}'`;\n    }\n}\n\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\n/**\n * @private\n */\nexport class CompositePrinterParser {\n\n    constructor(printerParsers, optional) {\n        this._printerParsers = printerParsers;\n        this._optional = optional;\n    }\n\n    /**\n     * Returns a copy of this printer-parser with the optional flag changed.\n     *\n     * @param {boolean} optional  the optional flag to set in the copy\n     * @return {CompositePrinterParser} the new printer-parser, not null\n     */\n    withOptional(optional) {\n        if (optional === this._optional) {\n            return this;\n        }\n        return new CompositePrinterParser(this._printerParsers, optional);\n    }\n\n    print(context, buf) {\n        const length = buf.length();\n        if (this._optional) {\n            context.startOptional();\n        }\n        try {\n            for (let i=0; i<this._printerParsers.length; i++) {\n                const pp = this._printerParsers[i];\n                if (pp.print(context, buf) === false) {\n                    buf.setLength(length);  // reset buffer\n                    return true;\n                }\n            }\n        } finally {\n            if (this._optional) {\n                context.endOptional();\n            }\n        }\n        return true;\n    }\n\n    parse(context, text, position) {\n        if (this._optional) {\n            context.startOptional();\n            let pos = position;\n            for (let i=0; i<this._printerParsers.length; i++) {\n                const pp = this._printerParsers[i];\n                pos = pp.parse(context, text, pos);\n                if (pos < 0) {\n                    context.endOptional(false);\n                    return position;  // return original position\n                }\n            }\n            context.endOptional(true);\n            return pos;\n        } else {\n            for (let i=0; i<this._printerParsers.length; i++) {\n                const pp = this._printerParsers[i];\n                position = pp.parse(context, text, position);\n                if (position < 0) {\n                    break;\n                }\n            }\n            return position;\n        }\n    }\n\n    toString() {\n        let buf = '';\n        if (this._printerParsers != null) {\n            buf += this._optional ? '[' : '(';\n            for (let i=0; i<this._printerParsers.length; i++) {\n                const pp = this._printerParsers[i];\n                buf += pp.toString();\n            }\n            buf += this._optional ? ']' : ')';\n        }\n        return buf;\n    }\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull } from '../../assert';\nimport { IllegalArgumentException } from '../../errors';\nimport { MathUtil } from '../../MathUtil';\n\n/**\n * TODO optimize FractionPrinterParser, fix documentation\n *\n * Prints and parses a numeric date-time field with optional padding.\n * @private\n */\nexport class FractionPrinterParser {\n\n    /**\n     * Constructor.\n     *\n     * @param {TemporalField} field  the field to output, not null\n     * @param {Number} minWidth  the minimum width to output, from 0 to 9\n     * @param {Number} maxWidth  the maximum width to output, from 0 to 9\n     * @param {boolean} decimalPoint  whether to output the localized decimal point symbol\n     */\n    constructor(field, minWidth, maxWidth, decimalPoint) {\n        requireNonNull(field, 'field');\n        if (field.range().isFixed() === false) {\n            throw new IllegalArgumentException(`Field must have a fixed set of values: ${field}`);\n        }\n        if (minWidth < 0 || minWidth > 9) {\n            throw new IllegalArgumentException(`Minimum width must be from 0 to 9 inclusive but was ${minWidth}`);\n        }\n        if (maxWidth < 1 || maxWidth > 9) {\n            throw new IllegalArgumentException(`Maximum width must be from 1 to 9 inclusive but was ${maxWidth}`);\n        }\n        if (maxWidth < minWidth) {\n            throw new IllegalArgumentException(`Maximum width must exceed or equal the minimum width but ${ \n                maxWidth} < ${minWidth}`);\n        }\n        this.field = field;\n        this.minWidth = minWidth;\n        this.maxWidth = maxWidth;\n        this.decimalPoint = decimalPoint;\n    }\n\n    print(context, buf) {\n        const value = context.getValue(this.field);\n        if (value === null) {\n            return false;\n        }\n        const symbols = context.symbols();\n        if (value === 0) {  // scale is zero if value is zero\n            if (this.minWidth > 0) {\n                if (this.decimalPoint) {\n                    buf.append(symbols.decimalSeparator());\n                }\n                for (let i = 0; i < this.minWidth; i++) {\n                    buf.append(symbols.zeroDigit());\n                }\n            }\n        } else {\n            let fraction = this.convertToFraction(value, symbols.zeroDigit());\n            const outputScale = Math.min(Math.max(fraction.length, this.minWidth), this.maxWidth);\n            fraction = fraction.substr(0, outputScale);\n            if(fraction * 1 > 0 ) {\n                while (fraction.length > this.minWidth && fraction[fraction.length - 1] === '0') {\n                    fraction = fraction.substr(0, fraction.length - 1);\n                }\n            }\n            let str = fraction;\n            str = symbols.convertNumberToI18N(str);\n            if (this.decimalPoint) {\n                buf.append(symbols.decimalSeparator());\n            }\n            buf.append(str);\n        }\n        return true;\n    }\n\n    parse(context, text, position) {\n        const effectiveMin = (context.isStrict() ? this.minWidth : 0);\n        const effectiveMax = (context.isStrict() ? this.maxWidth : 9);\n        const length = text.length;\n        if (position === length) {\n            // valid if whole field is optional, invalid if minimum width\n            return (effectiveMin > 0 ? ~position : position);\n        }\n        if (this.decimalPoint) {\n            if (text[position] !== context.symbols().decimalSeparator()) {\n                // valid if whole field is optional, invalid if minimum width\n                return (effectiveMin > 0 ? ~position : position);\n            }\n            position++;\n        }\n        const minEndPos = position + effectiveMin;\n        if (minEndPos > length) {\n            return ~position;  // need at least min width digits\n        }\n        const maxEndPos = Math.min(position + effectiveMax, length);\n        let total = 0;  // can use int because we are only parsing up to 9 digits\n        let pos = position;\n        while (pos < maxEndPos) {\n            const ch = text.charAt(pos++);\n            const digit = context.symbols().convertToDigit(ch);\n            if (digit < 0) {\n                if (pos < minEndPos) {\n                    return ~position;  // need at least min width digits\n                }\n                pos--;\n                break;\n            }\n            total = total * 10 + digit;\n        }\n        const moveLeft = pos - position;\n        const scale = Math.pow(10, moveLeft);\n        const value = this.convertFromFraction(total, scale);\n        return context.setParsedField(this.field, value, position, pos);\n    }\n\n    /**\n     *\n     * @param {Number} value  the value to convert, must be valid for this rule\n     * @param {String} zeroDigit  the character for zero\n     * @return {String} the value as a fraction within the range, from 0 to 1, not null\n     */\n    convertToFraction(value, zeroDigit) {\n        const range = this.field.range();\n        range.checkValidValue(value, this.field);\n        const _min = range.minimum();\n        const _range = range.maximum() - _min + 1;\n        const _value = value - _min;\n        const _scaled = MathUtil.intDiv((_value * 1000000000),  _range);\n        let fraction = `${_scaled}`;\n        while(fraction.length < 9){\n            fraction = zeroDigit + fraction;\n        }\n        return fraction;\n    }\n\n    /**\n     *\n     * @param {Number} total  the fraction to convert, not null\n     * @param {Number} scale  the scale, not null\n     * @return {Number} the value of the field, valid for this rule\n     * @throws DateTimeException if the value cannot be converted\n     */\n    convertFromFraction(total, scale) {\n        const range = this.field.range();\n        const _min = range.minimum();\n        const _range = range.maximum() - _min + 1;\n        const _value = MathUtil.intDiv((total * _range), scale);\n        return _value;\n    }\n\n    toString() {\n        const decimal = (this.decimalPoint ? ',DecimalPoint' : '');\n        return `Fraction(${this.field},${this.minWidth},${this.maxWidth}${decimal})`;\n    }\n}\n\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { assert } from '../../assert';\nimport { ArithmeticException, DateTimeException, IllegalArgumentException } from '../../errors';\nimport { MathUtil } from '../../MathUtil';\n\nimport { IsoChronology } from '../../chrono/IsoChronology';\n\nimport { SignStyle } from '../SignStyle';\n\n\nconst MAX_WIDTH = 15; // can't parse all numbers with more then 15 digits in javascript\n\nconst EXCEED_POINTS = [\n    0,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000,\n    1000000000\n];\n\n/**\n * @private\n */\nexport class NumberPrinterParser {\n\n    /**\n     * Constructor.\n     *\n     * @param field  the field to print, not null\n     * @param minWidth  the minimum field width, from 1 to 19\n     * @param maxWidth  the maximum field width, from minWidth to 19\n     * @param signStyle  the positive/negative sign style, not null\n     * @param subsequentWidth  the width of subsequent non-negative numbers, 0 or greater,\n     *  -1 if fixed width due to active adjacent parsing\n     */\n    constructor(field, minWidth, maxWidth, signStyle, subsequentWidth=0){\n        this._field = field;\n        this._minWidth = minWidth;\n        this._maxWidth = maxWidth;\n        this._signStyle = signStyle;\n        this._subsequentWidth = subsequentWidth;\n    }\n\n    field(){ return this._field;}\n    minWidth(){ return this._minWidth;}\n    maxWidth(){ return this._maxWidth;}\n    signStyle(){ return this._signStyle;}\n\n    withFixedWidth() {\n        if (this._subsequentWidth === -1) {\n            return this;\n        }\n        return new NumberPrinterParser(this._field, this._minWidth, this._maxWidth, this._signStyle, -1);\n    }\n\n    withSubsequentWidth(subsequentWidth) {\n        return new NumberPrinterParser(this._field, this._minWidth, this._maxWidth, this._signStyle, this._subsequentWidth + subsequentWidth);\n    }\n\n    _isFixedWidth() {\n        return this._subsequentWidth === -1 ||\n            (this._subsequentWidth > 0 && this._minWidth === this._maxWidth && this._signStyle === SignStyle.NOT_NEGATIVE);\n    }\n\n    print(context, buf) {\n        const contextValue = context.getValue(this._field);\n        if (contextValue == null) {\n            return false;\n        }\n        const value = this._getValue(context, contextValue);\n        const symbols = context.symbols();\n        let str = `${Math.abs(value)}`;\n        if (str.length > this._maxWidth) {\n            throw new DateTimeException(`Field ${this._field \n            } cannot be printed as the value ${value \n            } exceeds the maximum print width of ${this._maxWidth}`);\n        }\n        str = symbols.convertNumberToI18N(str);\n\n        if (value >= 0) {\n            switch (this._signStyle) {\n                case SignStyle.EXCEEDS_PAD:\n                    if (this._minWidth < MAX_WIDTH && value >= EXCEED_POINTS[this._minWidth]) {\n                        buf.append(symbols.positiveSign());\n                    }\n                    break;\n                case SignStyle.ALWAYS:\n                    buf.append(symbols.positiveSign());\n                    break;\n            }\n        } else {\n            switch (this._signStyle) {\n                case SignStyle.NORMAL:\n                case SignStyle.EXCEEDS_PAD:\n                case SignStyle.ALWAYS:\n                    buf.append(symbols.negativeSign());\n                    break;\n                case SignStyle.NOT_NEGATIVE:\n                    throw new DateTimeException(`Field ${this._field \n                    } cannot be printed as the value ${value \n                    } cannot be negative according to the SignStyle`);\n            }\n        }\n        for (let i = 0; i < this._minWidth - str.length; i++) {\n            buf.append(symbols.zeroDigit());\n        }\n        buf.append(str);\n        return true;\n    }\n\n    parse(context, text, position){\n        const length = text.length;\n        if (position === length) {\n            return ~position;\n        }\n        assert(position>=0 && position<length);\n        const sign = text.charAt(position);  // IOOBE if invalid position\n        let negative = false;\n        let positive = false;\n        if (sign === context.symbols().positiveSign()) {\n            if (this._signStyle.parse(true, context.isStrict(), this._minWidth === this._maxWidth) === false) {\n                return ~position;\n            }\n            positive = true;\n            position++;\n        } else if (sign === context.symbols().negativeSign()) {\n            if (this._signStyle.parse(false, context.isStrict(), this._minWidth === this._maxWidth) === false) {\n                return ~position;\n            }\n            negative = true;\n            position++;\n        } else {\n            if (this._signStyle === SignStyle.ALWAYS && context.isStrict()) {\n                return ~position;\n            }\n        }\n        const effMinWidth = (context.isStrict() || this._isFixedWidth() ? this._minWidth : 1);\n        const minEndPos = position + effMinWidth;\n        if (minEndPos > length) {\n            return ~position;\n        }\n        let effMaxWidth = (context.isStrict() || this._isFixedWidth() ? this._maxWidth : 9) + Math.max(this._subsequentWidth, 0);\n        let total = 0;\n        let pos = position;\n        for (let pass = 0; pass < 2; pass++) {\n            const maxEndPos = Math.min(pos + effMaxWidth, length);\n            while (pos < maxEndPos) {\n                const ch = text.charAt(pos++);\n                const digit = context.symbols().convertToDigit(ch);\n                if (digit < 0) {\n                    pos--;\n                    if (pos < minEndPos) {\n                        return ~position;  // need at least min width digits\n                    }\n                    break;\n                }\n                if ((pos - position) > MAX_WIDTH) {\n                    throw new ArithmeticException('number text exceeds length');\n                } else {\n                    total = total * 10 + digit;\n                }\n            }\n            if (this._subsequentWidth > 0 && pass === 0) {\n                // re-parse now we know the correct width\n                const parseLen = pos - position;\n                effMaxWidth = Math.max(effMinWidth, parseLen - this._subsequentWidth);\n                pos = position;\n                total = 0;\n            } else {\n                break;\n            }\n        }\n        if (negative) {\n            if (total === 0 && context.isStrict()) {\n                return ~(position - 1);  // minus zero not allowed\n            }\n            if(total !== 0) {\n                total = -total;\n            }\n        } else if (this._signStyle === SignStyle.EXCEEDS_PAD && context.isStrict()) {\n            const parseLen = pos - position;\n            if (positive) {\n                if (parseLen <= this._minWidth) {\n                    return ~(position - 1);  // '+' only parsed if minWidth exceeded\n                }\n            } else {\n                if (parseLen > this._minWidth) {\n                    return ~position;  // '+' must be parsed if minWidth exceeded\n                }\n            }\n        }\n        return this._setValue(context, total, position, pos);\n    }\n\n    /**\n     * Gets the value to output.\n     * (This is needed to allow e.g. ReducedPrinterParser to override this and change the value!\n     *\n     * @param context  the context\n     * @param value  the value of the field, not null\n     * @return the value\n     * @private\n     */\n    _getValue(context, value) {\n        return value;\n    }\n\n    /**\n     * Stores the value.\n     *\n     * @param context  the context to store into, not null\n     * @param value  the value\n     * @param errorPos  the position of the field being parsed\n     * @param successPos  the position after the field being parsed\n     * @return the new position\n     */\n    _setValue(context, value, errorPos, successPos) {\n        return context.setParsedField(this._field, value, errorPos, successPos);\n    }\n\n    toString() {\n        if (this._minWidth === 1 && this._maxWidth === MAX_WIDTH && this._signStyle === SignStyle.NORMAL) {\n            return `Value(${this._field})`;\n        }\n        if (this._minWidth === this._maxWidth && this._signStyle === SignStyle.NOT_NEGATIVE) {\n            return `Value(${this._field},${this._minWidth})`;\n        }\n        return `Value(${this._field},${this._minWidth},${this._maxWidth},${this._signStyle})`;\n    }\n\n}\n//-----------------------------------------------------------------------\n/**\n * Prints and parses a reduced numeric date-time field.\n * @private\n */\nexport class ReducedPrinterParser extends NumberPrinterParser {\n\n    /**\n     * Constructor.\n     *\n     * @param {TemporalField} field  the field to print, validated not null\n     * @param {number} width  the field width, from 1 to 10\n     * @param {number} maxWidth  the field max width, from 1 to 10\n     * @param {number} baseValue  the base value\n     * @param {ChronoLocalDate} baseDate  the base date\n     */\n    constructor(field, width, maxWidth, baseValue, baseDate) {\n        super(field, width, maxWidth, SignStyle.NOT_NEGATIVE);\n        if (width < 1 || width > 10) {\n            throw new IllegalArgumentException(`The width must be from 1 to 10 inclusive but was ${width}`);\n        }\n        if (maxWidth < 1 || maxWidth > 10) {\n            throw new IllegalArgumentException(`The maxWidth must be from 1 to 10 inclusive but was ${maxWidth}`);\n        }\n        if (maxWidth < width) {\n            throw new IllegalArgumentException('The maxWidth must be greater than the width');\n        }\n        if (baseDate === null) {\n            if (field.range().isValidValue(baseValue) === false) {\n                throw new IllegalArgumentException('The base value must be within the range of the field');\n            }\n            if ((baseValue + EXCEED_POINTS[width]) > MathUtil.MAX_SAFE_INTEGER) {\n                throw new DateTimeException('Unable to add printer-parser as the range exceeds the capacity of an int');\n            }\n        }\n        this._baseValue = baseValue;\n        this._baseDate = baseDate;\n    }\n\n    /**\n     *\n     * @param {DateTimePrintContext} context\n     * @param {number} value\n     */\n    _getValue(context, value) {\n        const absValue = Math.abs(value);\n        let baseValue = this._baseValue;\n        if (this._baseDate !== null) {\n            // TODO: in threetenbp the following line is used, but we dont have Chronology yet,\n            // let chrono = Chronology.from(context.getTemporal());\n            // so let's use IsoChronology for now\n            context.temporal();\n            const chrono = IsoChronology.INSTANCE;\n            baseValue = chrono.date(this._baseDate).get(this._field);\n        }\n        if (value >= baseValue && value < baseValue + EXCEED_POINTS[this._minWidth]) {\n            return absValue % EXCEED_POINTS[this._minWidth];\n        }\n        return absValue % EXCEED_POINTS[this._maxWidth];\n    }\n\n    /**\n     *\n     * @param {DateTimeParseContext} context\n     * @param {number} value\n     * @param {number} errorPos\n     * @param {number} successPos\n     */\n    _setValue(context, value, errorPos, successPos) {\n        let baseValue = this._baseValue;\n        if (this._baseDate != null) {\n            const chrono = context.getEffectiveChronology();\n            baseValue = chrono.date(this._baseDate).get(this._field);\n            // TODO: not implemented??\n            // context.addChronologyChangedParser(this, value, errorPos, successPos);\n        }\n        const parseLen = successPos - errorPos;\n        if (parseLen === this._minWidth && value >= 0) {\n            const range = EXCEED_POINTS[this._minWidth];\n            const lastPart = baseValue % range;\n            const basePart = baseValue - lastPart;\n            if (baseValue > 0) {\n                value = basePart + value;\n            } else {\n                value = basePart - value;\n            }\n            if (value < baseValue) {\n                value += range;\n            }\n        }\n        return context.setParsedField(this._field, value, errorPos, successPos);\n    }\n\n    withFixedWidth() {\n        if (this._subsequentWidth === -1) {\n            return this;\n        }\n        return new ReducedPrinterParser(this._field, this._minWidth, this._maxWidth, this._baseValue, this._baseDate, -1);\n    }\n\n    /**\n     *\n     * @param {number} subsequentWidth\n     * @returns {ReducedPrinterParser}\n     */\n    withSubsequentWidth(subsequentWidth) {\n        return new ReducedPrinterParser(this._field, this._minWidth, this._maxWidth, this._baseValue, this._baseDate,\n            this._subsequentWidth + subsequentWidth);\n    }\n\n    /**\n     *\n     * @param {DateTimeParseContext} context\n     */\n    isFixedWidth(context) {\n        if (context.isStrict() === false) {\n            return false;\n        }\n        return super.isFixedWidth(context);\n    }\n\n    toString() {\n        return `ReducedValue(${this._field},${this._minWidth},${this._maxWidth},${this._baseDate != null ? this._baseDate : this._baseValue})`;\n    }\n}\n\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull } from '../../assert';\nimport { IllegalArgumentException } from '../../errors';\nimport { MathUtil } from '../../MathUtil';\n\nimport { ChronoField } from '../../temporal/ChronoField';\n\n//-----------------------------------------------------------------------\nconst PATTERNS = [\n    '+HH', '+HHmm', '+HH:mm', '+HHMM', '+HH:MM', '+HHMMss', '+HH:MM:ss', '+HHMMSS', '+HH:MM:SS'\n];\n/**\n * Prints or parses an offset ID.\n * @private\n */\nexport class OffsetIdPrinterParser  {\n\n    /**\n     * Constructor.\n     *\n     * @param {string} noOffsetText  the text to use for UTC, not null\n     * @param {string} pattern  the pattern\n     */\n    constructor(noOffsetText, pattern) {\n        requireNonNull(noOffsetText, 'noOffsetText');\n        requireNonNull(pattern, 'pattern');\n        this.noOffsetText = noOffsetText;\n        this.type = this._checkPattern(pattern);\n    }\n\n    /**\n     * @param {String} pattern\n     * @return {number}\n     */\n    _checkPattern(pattern) {\n        for (let i = 0; i < PATTERNS.length; i++) {\n            if (PATTERNS[i] === pattern) {\n                return i;\n            }\n        }\n        throw new IllegalArgumentException(`Invalid zone offset pattern: ${pattern}`);\n    }\n\n    /**\n     * @param {DateTimePrintContext} context\n     * @param {StringBuilder} buf\n     * @return {boolean}\n     */\n    print(context, buf) {\n        const offsetSecs = context.getValue(ChronoField.OFFSET_SECONDS);\n        if (offsetSecs == null) {\n            return false;\n        }\n        const totalSecs = MathUtil.safeToInt(offsetSecs);\n        if (totalSecs === 0) {\n            buf.append(this.noOffsetText);\n        } else {\n            const absHours = Math.abs(MathUtil.intMod(MathUtil.intDiv(totalSecs, 3600), 100));  // anything larger than 99 silently dropped\n            const absMinutes = Math.abs(MathUtil.intMod(MathUtil.intDiv(totalSecs, 60), 60));\n            const absSeconds = Math.abs(MathUtil.intMod(totalSecs, 60));\n            const bufPos = buf.length();\n            let output = absHours;\n            buf.append(totalSecs < 0 ? '-' : '+')\n                .appendChar((`${MathUtil.intDiv(absHours, 10)}0`)).appendChar(`${MathUtil.intMod(absHours, 10)}0`);\n            if (this.type >= 3 || (this.type >= 1 && absMinutes > 0)) {\n                buf.append((this.type % 2) === 0 ? ':' : '')\n                    .appendChar((`${MathUtil.intDiv(absMinutes, 10)}0`)).appendChar((`${absMinutes % 10}0`));\n                output += absMinutes;\n                if (this.type >= 7 || (this.type >= 5 && absSeconds > 0)) {\n                    buf.append((this.type % 2) === 0 ? ':' : '')\n                        .appendChar((`${MathUtil.intDiv(absSeconds, 10)}0`)).appendChar((`${absSeconds % 10}0`));\n                    output += absSeconds;\n                }\n            }\n            if (output === 0) {\n                buf.setLength(bufPos);\n                buf.append(this.noOffsetText);\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @param {DateTimeParseContext} context\n     * @param {String} text\n     * @param {number} position\n     * @return {number}\n     */\n    parse(context, text, position) {\n        const length = text.length;\n        const noOffsetLen = this.noOffsetText.length;\n        if (noOffsetLen === 0) {\n            if (position === length) {\n                return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position);\n            }\n        } else {\n            if (position === length) {\n                return ~position;\n            }\n            if (context.subSequenceEquals(text, position, this.noOffsetText, 0, noOffsetLen)) {\n                return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position + noOffsetLen);\n            }\n        }\n\n        // parse normal plus/minus offset\n        const sign = text[position];  // IOOBE if invalid position\n        if (sign === '+' || sign === '-') {\n            // starts\n            const negative = (sign === '-' ? -1 : 1);\n            const array = [0,0,0,0];\n            array[0] = position + 1;\n            if ((this._parseNumber(array, 1, text, true) ||\n                this._parseNumber(array, 2, text, this.type >=3) ||\n                this._parseNumber(array, 3, text, false)) === false) {\n                // success\n                const offsetSecs = MathUtil.safeZero(negative * (array[1] * 3600 + array[2] * 60 + array[3]));\n                return context.setParsedField(ChronoField.OFFSET_SECONDS, offsetSecs, position, array[0]);\n            }\n        }\n        // handle special case of empty no offset text\n        if (noOffsetLen === 0) {\n            return context.setParsedField(ChronoField.OFFSET_SECONDS, 0, position, position + noOffsetLen);\n        }\n        return ~position;\n    }\n\n    /**\n     * Parse a two digit zero-prefixed number.\n     *\n     * @param {number[]} array  the array of parsed data, 0=pos,1=hours,2=mins,3=secs, not null\n     * @param {number} arrayIndex  the index to parse the value into\n     * @param {string} parseText  the offset ID, not null\n     * @param {boolean} required  whether this number is required\n     * @return {boolean} true if an error occurred\n     */\n    _parseNumber(array, arrayIndex, parseText, required) {\n        if ((this.type + 3) / 2 < arrayIndex) {\n            return false;  // ignore seconds/minutes\n        }\n        let pos = array[0];\n        if ((this.type % 2) === 0 && arrayIndex > 1) {\n            if (pos + 1 > parseText.length || parseText[pos] !== ':') {\n                return required;\n            }\n            pos++;\n        }\n        if (pos + 2 > parseText.length) {\n            return required;\n        }\n        const ch1 = parseText[pos++];\n        const ch2 = parseText[pos++];\n        if (ch1 < '0' || ch1 > '9' || ch2 < '0' || ch2 > '9') {\n            return required;\n        }\n        const value = (ch1.charCodeAt(0) - 48) * 10 + (ch2.charCodeAt(0) - 48);\n        if (value < 0 || value > 59) {\n            return required;\n        }\n        array[arrayIndex] = value;\n        array[0] = pos;\n        return false;\n    }\n\n\n    toString() {\n        const converted = this.noOffsetText.replace('\\'', '\\'\\'');\n        return `Offset(${PATTERNS[this.type]},'${converted}')`;\n    }\n}\nOffsetIdPrinterParser.INSTANCE_ID = new OffsetIdPrinterParser('Z', '+HH:MM:ss');\nOffsetIdPrinterParser.PATTERNS = PATTERNS;\n\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { assert } from '../../assert';\n\nimport { DateTimeException } from '../../errors';\n\n/**\n * Pads the output to a fixed width.\n * @private\n */\nexport class PadPrinterParserDecorator {\n\n    /**\n     * Constructor.\n     *\n     * @param printerParser  the printer, not null\n     * @param padWidth  the width to pad to, 1 or greater\n     * @param padChar  the pad character\n     */\n    constructor(printerParser, padWidth, padChar) {\n        // input checked by DateTimeFormatterBuilder\n        this._printerParser = printerParser;\n        this._padWidth = padWidth;\n        this._padChar = padChar;\n    }\n\n    print(context, buf) {\n        const preLen = buf.length();\n        if (this._printerParser.print(context, buf) === false) {\n            return false;\n        }\n        const len = buf.length() - preLen;\n        if (len > this._padWidth) {\n            throw new DateTimeException(\n                `Cannot print as output of ${len} characters exceeds pad width of ${this._padWidth}`);\n        }\n        for (let i = 0; i < this._padWidth - len; i++) {\n            buf.insert(preLen, this._padChar);\n        }\n        return true;\n    }\n\n    parse(context, text, position) {\n        // cache context before changed by decorated parser\n        const strict = context.isStrict();\n        const caseSensitive = context.isCaseSensitive();\n        // parse\n        assert(!(position > text.length));\n        assert(position >= 0);\n        if (position === text.length) {\n            return ~position;  // no more characters in the string\n        }\n        let endPos = position + this._padWidth;\n        if (endPos > text.length) {\n            if (strict) {\n                return ~position;  // not enough characters in the string to meet the parse width\n            }\n            endPos = text.length;\n        }\n        let pos = position;\n        while (pos < endPos &&\n        (caseSensitive ? text[pos] === this._padChar : context.charEquals(text[pos], this._padChar))) {\n            pos++;\n        }\n        text = text.substring(0, endPos);\n        const resultPos = this._printerParser.parse(context, text, pos);\n        if (resultPos !== endPos && strict) {\n            return ~(position + pos);  // parse of decorated field didn't parse to the end\n        }\n        return resultPos;\n    }\n\n    toString() {\n        return `Pad(${this._printerParser},${this._padWidth}${(this._padChar === ' ' ? ')' : `,'${this._padChar}')`)}`;\n    }\n}\n\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { Enum } from '../../Enum';\n\n/**\n * @private\n */\nexport class SettingsParser extends Enum {\n\n    print(/*context, buf*/) {\n        return true;  // nothing to do here\n    }\n\n    parse(context, text, position) {\n        // using ordinals to avoid javac synthetic inner class\n        switch (this) {\n            case SettingsParser.SENSITIVE:   context.setCaseSensitive(true); break;\n            case SettingsParser.INSENSITIVE: context.setCaseSensitive(false); break;\n            case SettingsParser.STRICT:      context.setStrict(true); break;\n            case SettingsParser.LENIENT:     context.setStrict(false); break;\n        }\n        return position;\n    }\n\n    toString() {\n        // using ordinals to avoid javac synthetic inner class\n        switch (this) {\n            case SettingsParser.SENSITIVE:   return 'ParseCaseSensitive(true)';\n            case SettingsParser.INSENSITIVE: return 'ParseCaseSensitive(false)';\n            case SettingsParser.STRICT:      return 'ParseStrict(true)';\n            case SettingsParser.LENIENT:     return 'ParseStrict(false)';\n        }\n    }\n}\n\nSettingsParser.SENSITIVE = new SettingsParser('SENSITIVE');\nSettingsParser.INSENSITIVE = new SettingsParser('INSENSITIVE');\nSettingsParser.STRICT = new SettingsParser('STRICT');\nSettingsParser.LENIENT = new SettingsParser('LENIENT');\n\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { assert } from '../../assert';\n\n/**\n * Prints or parses a string literal.\n * @private\n */\nexport class StringLiteralPrinterParser {\n\n    constructor(literal) {\n        this._literal = literal;\n    }\n\n    print(context, buf) {\n        buf.append(this._literal);\n        return true;\n    }\n\n    parse(context, text, position) {\n        const length = text.length;\n        assert(!(position > length || position < 0));\n\n        if (context.subSequenceEquals(text, position, this._literal, 0, this._literal.length) === false) {\n            return ~position;\n        }\n        return position + this._literal.length;\n    }\n\n    toString() {\n        const converted = this._literal.replace(\"'\", \"''\");\n        return `'${converted}'`;\n    }\n}\n\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter, Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { DateTimeException } from '../errors';\n\nexport class ZoneRulesProvider {\n    /**\n     * Gets the rules for the zone ID.\n     *\n     * This returns the latest available rules for the zone ID.\n     *\n     * This method relies on time-zone data provider files that are configured.\n     *\n     * @param {string} zoneId\n     * @return {ZoneRules}\n     */\n    static getRules(zoneId){\n        throw new DateTimeException(`unsupported ZoneId:${zoneId}`);\n    }\n\n\n    /**\n     * Gets the set of available zone IDs.\n     *\n     * These zone IDs are loaded and available for use by {@link ZoneId}.\n     *\n     * @return {string[]} a modifiable copy of the set of zone IDs, not null\n     */\n    static getAvailableZoneIds(){\n        return [];\n    }\n}\n\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\n\nimport { ZoneId } from './ZoneId';\nimport { ZoneRulesProvider } from './zone/ZoneRulesProvider';\n\n/**\n * A geographical region where the same time-zone rules apply.\n *\n * Time-zone information is categorized as a set of rules defining when and\n * how the offset from UTC/Greenwich changes. These rules are accessed using\n * identifiers based on geographical regions, such as countries or states.\n * The most common region classification is the Time Zone Database (TZDB),\n * which defines regions such as 'Europe/Paris' and 'Asia/Tokyo'.\n *\n * The region identifier, modeled by this class, is distinct from the\n * underlying rules, modeled by {@link ZoneRules}.\n * The rules are defined by governments and change frequently.\n * By contrast, the region identifier is well-defined and long-lived.\n * This separation also allows rules to be shared between regions if appropriate.\n *\n * ### Specification for implementors\n *\n * This class is immutable and thread-safe.\n */\nexport class ZoneRegion extends ZoneId {\n    /**\n     * @param {string} zoneId\n     * @return {ZoneId}\n     */\n    static ofId(zoneId){\n        const rules = ZoneRulesProvider.getRules(zoneId);\n        return new ZoneRegion(zoneId, rules);\n    }\n\n    //-------------------------------------------------------------------------\n    /**\n     * Constructor.\n     *\n     * @param {string} id  the time-zone ID, not null\n     * @param {ZoneRules} rules  the rules, null for lazy lookup\n     * @private\n     */\n    constructor(id, rules) {\n        super();\n        this._id = id;\n        this._rules = rules;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     *\n     * @returns {string}\n     */\n    id() {\n        return this._id;\n    }\n\n    /**\n     *\n     * @returns {ZoneRules}\n     */\n    rules() {\n        return this._rules;\n    }\n\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { ZoneOffset } from '../../ZoneOffset';\nimport { ZoneId } from '../../ZoneId';\nimport { ZoneRegion } from '../../ZoneRegion';\n\nimport { ChronoField } from '../../temporal/ChronoField';\n\nimport { ZoneRulesProvider } from '../../zone/ZoneRulesProvider';\n\nimport { OffsetIdPrinterParser } from './OffsetIdPrinterParser';\n\n/**\n * Prints or parses a zone ID.\n * @private\n */\nexport class ZoneIdPrinterParser {\n\n    /**\n     *\n     * @param {TemporalQuery} query\n     * @param {string} description\n     */\n    constructor(query, description) {\n        this.query = query;\n        this.description = description;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     *\n     * @param {DateTimePrintContext } context\n     * @param {StringBuilder} buf\n     * @returns {boolean}\n     */\n    print(context, buf) {\n        const zone = context.getValueQuery(this.query);\n        if (zone == null) {\n            return false;\n        }\n        buf.append(zone.id());\n        return true;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * This implementation looks for the longest matching string.\n     * For example, parsing Etc/GMT-2 will return Etc/GMC-2 rather than just\n     * Etc/GMC although both are valid.\n     *\n     * This implementation uses a tree to search for valid time-zone names in\n     * the parseText. The top level node of the tree has a length equal to the\n     * length of the shortest time-zone as well as the beginning characters of\n     * all other time-zones.\n     *\n     * @param {DateTimeParseContext} context\n     * @param {String} text\n     * @param {number} position\n     * @return {number}\n     */\n    parse(context, text, position) {\n        const length = text.length;\n        if (position > length) {\n            return ~position;\n        }\n        if (position === length) {\n            return ~position;\n        }\n\n        // handle fixed time-zone IDs\n        const nextChar = text.charAt(position);\n        if (nextChar === '+' || nextChar === '-') {\n            const newContext = context.copy();\n            const endPos = OffsetIdPrinterParser.INSTANCE_ID.parse(newContext, text, position);\n            if (endPos < 0) {\n                return endPos;\n            }\n            const offset = newContext.getParsed(ChronoField.OFFSET_SECONDS);\n            const zone = ZoneOffset.ofTotalSeconds(offset);\n            context.setParsedZone(zone);\n            return endPos;\n        } else if (length >= position + 2) {\n            const nextNextChar = text.charAt(position + 1);\n            if (context.charEquals(nextChar, 'U') &&\n                context.charEquals(nextNextChar, 'T')) {\n                if (length >= position + 3 &&\n                    context.charEquals(text.charAt(position + 2), 'C')) {\n                    return this._parsePrefixedOffset(context, text, position, position + 3);\n                }\n                return this._parsePrefixedOffset(context, text, position, position + 2);\n            } else if (context.charEquals(nextChar, 'G') &&\n                length >= position + 3 &&\n                context.charEquals(nextNextChar, 'M') &&\n                context.charEquals(text.charAt(position + 2), 'T')) {\n                return this._parsePrefixedOffset(context, text, position, position + 3);\n            }\n        }\n        // javascript special case\n        if(text.substr(position, 6) === 'SYSTEM'){\n            context.setParsedZone(ZoneId.systemDefault());\n            return position + 6;\n        }\n\n        // ...\n        if (context.charEquals(nextChar, 'Z')) {\n            context.setParsedZone(ZoneOffset.UTC);\n            return position + 1;\n        }\n\n        const availableZoneIds = ZoneRulesProvider.getAvailableZoneIds();\n        if (zoneIdTree.size !== availableZoneIds.length) {\n            zoneIdTree = ZoneIdTree.createTreeMap(availableZoneIds);\n        }\n\n        const maxParseLength = length - position;\n        let treeMap = zoneIdTree.treeMap;\n        let parsedZoneId = null;\n        let parseLength = 0;\n        while(treeMap != null) {\n            const parsedSubZoneId = text.substr(position, Math.min(treeMap.length, maxParseLength));\n            treeMap = treeMap.get(parsedSubZoneId);\n            if (treeMap != null && treeMap.isLeaf) {\n                parsedZoneId = parsedSubZoneId;\n                parseLength = treeMap.length;\n            }\n        }\n        if (parsedZoneId != null) {\n            context.setParsedZone(ZoneRegion.ofId(parsedZoneId));\n            return position + parseLength;\n        }\n\n        return ~position;\n    }\n\n    /**\n     *\n     * @param {DateTimeParseContext} context\n     * @param {String} text\n     * @param {number} prefixPos\n     * @param {number} position\n     * @return {number}\n     */\n    _parsePrefixedOffset(context, text, prefixPos, position) {\n        const prefix = text.substring(prefixPos, position).toUpperCase();\n        const newContext = context.copy();\n        if (position < text.length && context.charEquals(text.charAt(position), 'Z')) {\n            context.setParsedZone(ZoneId.ofOffset(prefix, ZoneOffset.UTC));\n            return position;\n        }\n        const endPos = OffsetIdPrinterParser.INSTANCE_ID.parse(newContext, text, position);\n        if (endPos < 0) {\n            context.setParsedZone(ZoneId.ofOffset(prefix, ZoneOffset.UTC));\n            return position;\n        }\n        const offsetSecs = newContext.getParsed(ChronoField.OFFSET_SECONDS);\n        const offset = ZoneOffset.ofTotalSeconds(offsetSecs);\n        context.setParsedZone(ZoneId.ofOffset(prefix, offset));\n        return endPos;\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString() {\n        return this.description;\n    }\n}\n\nclass ZoneIdTree {\n\n    static createTreeMap(availableZoneIds) {\n        const sortedZoneIds =  availableZoneIds.sort((a, b) => a.length - b.length);\n        const treeMap = new ZoneIdTreeMap(sortedZoneIds[0].length, false);\n        for (let i=0; i<sortedZoneIds.length; i++){\n            treeMap.add(sortedZoneIds[i]);\n        }\n        return new ZoneIdTree(sortedZoneIds.length, treeMap);\n    }\n\n    constructor(size, treeMap) {\n        this.size = size;\n        this.treeMap = treeMap;\n    }\n}\n\nclass ZoneIdTreeMap {\n    constructor(length = 0, isLeaf = false){\n        this.length = length;\n        this.isLeaf = isLeaf;\n        this._treeMap = {};\n    }\n\n    add(zoneId){\n        const idLength = zoneId.length;\n        if(idLength === this.length) {\n            this._treeMap[zoneId] = new ZoneIdTreeMap(idLength, true);\n        } else if (idLength > this.length) {\n            const subZoneId = zoneId.substr(0, this.length);\n            let subTreeMap = this._treeMap[subZoneId];\n            if (subTreeMap == null) {\n                subTreeMap = new ZoneIdTreeMap(idLength, false);\n                this._treeMap[subZoneId] = subTreeMap;\n            }\n            subTreeMap.add(zoneId);\n        }\n    }\n\n    get(zoneId){\n        return this._treeMap[zoneId];\n    }\n}\n\nlet zoneIdTree = new ZoneIdTree([]);", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { assert, requireNonNull, requireInstance } from '../assert';\nimport { IllegalArgumentException, IllegalStateException } from '../errors';\nimport { MathUtil } from '../MathUtil';\n\nimport { LocalDate } from '../LocalDate';\nimport { LocalDateTime } from '../LocalDateTime';\nimport { ZoneOffset } from '../ZoneOffset';\nimport { ChronoLocalDate } from '../chrono/ChronoLocalDate';\nimport { ChronoField } from '../temporal/ChronoField';\nimport { IsoFields } from '../temporal/IsoFields';\nimport { TemporalQueries } from '../temporal/TemporalQueries';\n\nimport { DateTimeFormatter } from './DateTimeFormatter';\nimport { DecimalStyle } from './DecimalStyle';\nimport { SignStyle } from './SignStyle';\nimport { TextStyle } from './TextStyle';\nimport { ResolverStyle } from './ResolverStyle';\n\nimport { CharLiteralPrinterParser } from './parser/CharLiteralPrinterParser';\nimport { CompositePrinterParser } from './parser/CompositePrinterParser';\nimport { FractionPrinterParser } from './parser/FractionPrinterParser';\nimport { NumberPrinterParser, ReducedPrinterParser } from './parser/NumberPrinterParser';\nimport { OffsetIdPrinterParser } from './parser/OffsetIdPrinterParser';\nimport { PadPrinterParserDecorator } from './parser/PadPrinterParserDecorator';\nimport { SettingsParser } from './parser/SettingsParser';\nimport { StringLiteralPrinterParser } from './parser/StringLiteralPrinterParser';\nimport { ZoneIdPrinterParser } from './parser/ZoneIdPrinterParser';\n\nconst MAX_WIDTH = 15; // can't parse all numbers with more then 15 digits in javascript\n\nexport class DateTimeFormatterBuilder {\n\n    /**\n     * Constructs a new instance of the builder.\n     */\n    constructor() {\n        /**\n         * The currently active builder, used by the outermost builder.\n         */\n        this._active = this;\n        /**\n         * The parent builder, null for the outermost builder.\n         */\n        this._parent = null;\n\n        /**\n         * The list of printers that will be used.\n         */\n        this._printerParsers = [];\n\n        /**\n         * Whether this builder produces an optional formatter.\n         */\n        this._optional = false;\n        /**\n         * The width to pad the next field to.\n         */\n        this._padNextWidth = 0;\n\n        /**\n         * The character to pad the next field with.\n         */\n        this._padNextChar = null;\n\n        /**\n         * The index of the last variable width value parser.\n         */\n        this._valueParserIndex = -1;\n    }\n\n    /**\n     * Private static factory, replaces private threeten constructor\n     * Returns a new instance of the builder.\n     *\n     * @param {DateTimeFormatterBuilder} parent  the parent builder, not null\n     * @param {boolean} optional  whether the formatter is optional, not null\n     * @return {DateTimeFormatterBuilder} new instance\n     */\n    static _of(parent, optional){\n        requireNonNull(parent, 'parent');\n        requireNonNull(optional, 'optional');\n\n        const dtFormatterBuilder = new DateTimeFormatterBuilder();\n        dtFormatterBuilder._parent = parent;\n        dtFormatterBuilder._optional = optional;\n\n        return dtFormatterBuilder;\n    }\n\n    /**\n     * Changes the parse style to be case sensitive for the remainder of the formatter.\n     *\n     * Parsing can be case sensitive or insensitive - by default it is case sensitive.\n     * This method allows the case sensitivity setting of parsing to be changed.\n     *\n     * Calling this method changes the state of the builder such that all\n     * subsequent builder method calls will parse text in case sensitive mode.\n     * See {@link parseCaseInsensitive} for the opposite setting.\n     * The parse case sensitive/insensitive methods may be called at any point\n     * in the builder, thus the parser can swap between case parsing modes\n     * multiple times during the parse.\n     *\n     * Since the default is case sensitive, this method should only be used after\n     * a previous call to {@link parseCaseInsensitive}.\n     *\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    parseCaseSensitive() {\n        this._appendInternalPrinterParser(SettingsParser.SENSITIVE);\n        return this;\n    }\n\n    /**\n     * Changes the parse style to be case insensitive for the remainder of the formatter.\n     *\n     * Parsing can be case sensitive or insensitive - by default it is case sensitive.\n     * This method allows the case sensitivity setting of parsing to be changed.\n     *\n     * Calling this method changes the state of the builder such that all\n     * subsequent builder method calls will parse text in case sensitive mode.\n     * See {@link parseCaseSensitive} for the opposite setting.\n     * The parse case sensitive/insensitive methods may be called at any point\n     * in the builder, thus the parser can swap between case parsing modes\n     * multiple times during the parse.\n     *\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    parseCaseInsensitive() {\n        this._appendInternalPrinterParser(SettingsParser.INSENSITIVE);\n        return this;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Changes the parse style to be strict for the remainder of the formatter.\n     *\n     * Parsing can be strict or lenient - by default its strict.\n     * This controls the degree of flexibility in matching the text and sign styles.\n     *\n     * When used, this method changes the parsing to be strict from this point onwards.\n     * As strict is the default, this is normally only needed after calling {@link parseLenient}.\n     * The change will remain in force until the end of the formatter that is eventually\n     * constructed or until {@link parseLenient} is called.\n     *\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    parseStrict() {\n        this._appendInternalPrinterParser(SettingsParser.STRICT);\n        return this;\n    }\n\n    /**\n     * Changes the parse style to be lenient for the remainder of the formatter.\n     * Note that case sensitivity is set separately to this method.\n     *\n     * Parsing can be strict or lenient - by default its strict.\n     * This controls the degree of flexibility in matching the text and sign styles.\n     * Applications calling this method should typically also call {@link parseCaseInsensitive}.\n     *\n     * When used, this method changes the parsing to be strict from this point onwards.\n     * The change will remain in force until the end of the formatter that is eventually\n     * constructed or until {@link parseStrict} is called.\n     *\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    parseLenient() {\n        this._appendInternalPrinterParser(SettingsParser.LENIENT);\n        return this;\n    }\n\n    /**\n     * Appends a default value for a field to the formatter for use in parsing.\n     * <p>\n     * This appends an instruction to the builder to inject a default value\n     * into the parsed result. This is especially useful in conjunction with\n     * optional parts of the formatter.\n     * <p>\n     * For example, consider a formatter that parses the year, followed by\n     * an optional month, with a further optional day-of-month. Using such a\n     * formatter would require the calling code to check whether a full date,\n     * year-month or just a year had been parsed. This method can be used to\n     * default the month and day-of-month to a sensible value, such as the\n     * first of the month, allowing the calling code to always get a date.\n     * <p>\n     * During formatting, this method has no effect.\n     * <p>\n     * During parsing, the current state of the parse is inspected.\n     * If the specified field has no associated value, because it has not been\n     * parsed successfully at that point, then the specified value is injected\n     * into the parse result. Injection is immediate, thus the field-value pair\n     * will be visible to any subsequent elements in the formatter.\n     * As such, this method is normally called at the end of the builder.\n     *\n     * @param {TemporalField} field  the field to default the value of, not null\n     * @param {number} value  the value to default the field to\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    parseDefaulting(field, value) {\n        requireNonNull(field);\n        this._appendInternal(new DefaultingParser(field, value));\n        return this;\n    }\n\n    /**\n     * appendValue function overloading\n     */\n    appendValue(){\n        if(arguments.length === 1){\n            return this._appendValue1.apply(this, arguments);\n        } else if(arguments.length === 2){\n            return this._appendValue2.apply(this, arguments);\n        } else {\n            return this._appendValue4.apply(this, arguments);\n        }\n    }\n\n    /**\n     * Appends the value of a date-time field to the formatter using a normal\n     * output style.\n     *\n     * The value of the field will be output during a print.\n     * If the value cannot be obtained then an exception will be thrown.\n     *\n     * The value will be printed as per the normal print of an integer value.\n     * Only negative numbers will be signed. No padding will be added.\n     *\n     * The parser for a variable width value such as this normally behaves greedily,\n     * requiring one digit, but accepting as many digits as possible.\n     * This behavior can be affected by 'adjacent value parsing'.\n     * See {@link appendValue} for full details.\n     *\n     * @param field  the field to append, not null\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    _appendValue1(field) {\n        requireNonNull(field);\n        this._appendValuePrinterParser(new NumberPrinterParser(field, 1, MAX_WIDTH, SignStyle.NORMAL));\n        return this;\n    }\n\n    /**\n     * Appends the value of a date-time field to the formatter using a fixed\n     * width, zero-padded approach.\n     *\n     * The value of the field will be output during a print.\n     * If the value cannot be obtained then an exception will be thrown.\n     *\n     * The value will be zero-padded on the left. If the size of the value\n     * means that it cannot be printed within the width then an exception is thrown.\n     * If the value of the field is negative then an exception is thrown during printing.\n     *\n     * This method supports a special technique of parsing known as 'adjacent value parsing'.\n     * This technique solves the problem where a variable length value is followed by one or more\n     * fixed length values. The standard parser is greedy, and thus it would normally\n     * steal the digits that are needed by the fixed width value parsers that follow the\n     * variable width one.\n     *\n     * No action is required to initiate 'adjacent value parsing'.\n     * When a call to {@link appendValue} with a variable width is made, the builder\n     * enters adjacent value parsing setup mode. If the immediately subsequent method\n     * call or calls on the same builder are to this method, then the parser will reserve\n     * space so that the fixed width values can be parsed.\n     *\n     * For example, consider `builder.appendValue(YEAR).appendValue(MONTH_OF_YEAR, 2)`.\n     * The year is a variable width parse of between 1 and 19 digits.\n     * The month is a fixed width parse of 2 digits.\n     * Because these were appended to the same builder immediately after one another,\n     * the year parser will reserve two digits for the month to parse.\n     * Thus, the text '201106' will correctly parse to a year of 2011 and a month of 6.\n     * Without adjacent value parsing, the year would greedily parse all six digits and leave\n     * nothing for the month.\n     *\n     * Adjacent value parsing applies to each set of fixed width not-negative values in the parser\n     * that immediately follow any kind of variable width value.\n     * Calling any other append method will end the setup of adjacent value parsing.\n     * Thus, in the unlikely event that you need to avoid adjacent value parsing behavior,\n     * simply add the `appendValue` to another {@link DateTimeFormatterBuilder}\n     * and add that to this builder.\n     *\n     * If adjacent parsing is active, then parsing must match exactly the specified\n     * number of digits in both strict and lenient modes.\n     * In addition, no positive or negative sign is permitted.\n     *\n     * @param field  the field to append, not null\n     * @param width  the width of the printed field, from 1 to 19\n     * @return this, for chaining, not null\n     * @throws IllegalArgumentException if the width is invalid\n     */\n    _appendValue2(field, width) {\n        requireNonNull(field);\n        if (width < 1 || width > MAX_WIDTH) {\n            throw new IllegalArgumentException(`The width must be from 1 to ${MAX_WIDTH} inclusive but was ${width}`);\n        }\n        const pp = new NumberPrinterParser(field, width, width, SignStyle.NOT_NEGATIVE);\n        this._appendValuePrinterParser(pp);\n        return this;\n    }\n\n    /**\n     * Appends the value of a date-time field to the formatter providing full\n     * control over printing.\n     *\n     * The value of the field will be output during a print.\n     * If the value cannot be obtained then an exception will be thrown.\n     *\n     * This method provides full control of the numeric formatting, including\n     * zero-padding and the positive/negative sign.\n     *\n     * The parser for a variable width value such as this normally behaves greedily,\n     * accepting as many digits as possible.\n     * This behavior can be affected by 'adjacent value parsing'.\n     * See {@link appendValue} for full details.\n     *\n     * In strict parsing mode, the minimum number of parsed digits is `minWidth`.\n     * In lenient parsing mode, the minimum number of parsed digits is one.\n     *\n     * If this method is invoked with equal minimum and maximum widths and a sign style of\n     * `NOT_NEGATIVE` then it delegates to `appendValue(TemporalField, int)`.\n     * In this scenario, the printing and parsing behavior described there occur.\n     *\n     * @param field  the field to append, not null\n     * @param minWidth  the minimum field width of the printed field, from 1 to 19\n     * @param maxWidth  the maximum field width of the printed field, from 1 to 19\n     * @param signStyle  the positive/negative output style, not null\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     * @throws IllegalArgumentException if the widths are invalid\n     */\n    _appendValue4(field, minWidth, maxWidth, signStyle) {\n        requireNonNull(field);\n        requireNonNull(signStyle);\n        if (minWidth === maxWidth && signStyle === SignStyle.NOT_NEGATIVE) {\n            return this._appendValue2(field, maxWidth);\n        }\n        if (minWidth < 1 || minWidth > MAX_WIDTH) {\n            throw new IllegalArgumentException(`The minimum width must be from 1 to ${MAX_WIDTH} inclusive but was ${minWidth}`);\n        }\n        if (maxWidth < 1 || maxWidth > MAX_WIDTH) {\n            throw new IllegalArgumentException(`The minimum width must be from 1 to ${MAX_WIDTH} inclusive but was ${maxWidth}`);\n        }\n        if (maxWidth < minWidth) {\n            throw new IllegalArgumentException(`The maximum width must exceed or equal the minimum width but ${maxWidth} < ${minWidth}`);\n        }\n        const pp = new NumberPrinterParser(field, minWidth, maxWidth, signStyle);\n        this._appendValuePrinterParser(pp);\n        return this;\n    }\n\n    /**\n     * appendValueReduced function overloading\n     */\n    appendValueReduced() {\n        if (arguments.length === 4 && arguments[3] instanceof ChronoLocalDate) {\n            return this._appendValueReducedFieldWidthMaxWidthBaseDate.apply(this, arguments);\n        } else {\n            return this._appendValueReducedFieldWidthMaxWidthBaseValue.apply(this, arguments);\n        }\n    }\n\n    /**\n     * Appends the reduced value of a date-time field to the formatter.\n     *\n     * Since fields such as year vary by chronology, it is recommended to use the\n     * {@link appendValueReduced} date}\n     * variant of this method in most cases. This variant is suitable for\n     * simple fields or working with only the ISO chronology.\n     *\n     * For formatting, the `width` and `maxWidth` are used to\n     * determine the number of characters to format.\n     * If they are equal then the format is fixed width.\n     * If the value of the field is within the range of the `baseValue` using\n     * `width` characters then the reduced value is formatted otherwise the value is\n     * truncated to fit `maxWidth`.\n     * The rightmost characters are output to match the width, left padding with zero.\n     *\n     * For strict parsing, the number of characters allowed by `width` to `maxWidth` are parsed.\n     * For lenient parsing, the number of characters must be at least 1 and less than 10.\n     * If the number of digits parsed is equal to `width` and the value is positive,\n     * the value of the field is computed to be the first number greater than\n     * or equal to the `baseValue` with the same least significant characters,\n     * otherwise the value parsed is the field value.\n     * This allows a reduced value to be entered for values in range of the baseValue\n     * and width and absolute values can be entered for values outside the range.\n     *\n     * For example, a base value of `1980` and a width of `2` will have\n     * valid values from `1980` to `2079`.\n     * During parsing, the text `\"12\"` will result in the value `2012` as that\n     * is the value within the range where the last two characters are \"12\".\n     * By contrast, parsing the text `\"1915\"` will result in the value `1915`.\n     *\n     * @param {TemporalField} field  the field to append, not null\n     * @param {number} width  the field width of the printed and parsed field, from 1 to 10\n     * @param {number} maxWidth  the maximum field width of the printed field, from 1 to 10\n     * @param {number} baseValue  the base value of the range of valid values\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     * @throws IllegalArgumentException if the width or base value is invalid\n     */\n    _appendValueReducedFieldWidthMaxWidthBaseValue(field, width, maxWidth, baseValue) {\n        requireNonNull(field, 'field');\n        const pp = new ReducedPrinterParser(field, width, maxWidth, baseValue, null);\n        this._appendValuePrinterParser(pp);\n        return this;\n    }\n\n    /**\n     * Appends the reduced value of a date-time field to the formatter.\n     *\n     * This is typically used for formatting and parsing a two digit year.\n     *\n     * The base date is used to calculate the full value during parsing.\n     * For example, if the base date is 1950-01-01 then parsed values for\n     * a two digit year parse will be in the range 1950-01-01 to 2049-12-31.\n     * Only the year would be extracted from the date, thus a base date of\n     * 1950-08-25 would also parse to the range 1950-01-01 to 2049-12-31.\n     * This behavior is necessary to support fields such as week-based-year\n     * or other calendar systems where the parsed value does not align with\n     * standard ISO years.\n     *\n     * The exact behavior is as follows. Parse the full set of fields and\n     * determine the effective chronology using the last chronology if\n     * it appears more than once. Then convert the base date to the\n     * effective chronology. Then extract the specified field from the\n     * chronology-specific base date and use it to determine the\n     * `baseValue` used below.\n     *\n     * For formatting, the `width` and `maxWidth` are used to\n     * determine the number of characters to format.\n     * If they are equal then the format is fixed width.\n     * If the value of the field is within the range of the `baseValue` using\n     * `width` characters then the reduced value is formatted otherwise the value is\n     * truncated to fit `maxWidth`.\n     * The rightmost characters are output to match the width, left padding with zero.\n     *\n     * For strict parsing, the number of characters allowed by `width` to `maxWidth` are parsed.\n     * For lenient parsing, the number of characters must be at least 1 and less than 10.\n     * If the number of digits parsed is equal to `width` and the value is positive,\n     * the value of the field is computed to be the first number greater than\n     * or equal to the `baseValue` with the same least significant characters,\n     * otherwise the value parsed is the field value.\n     * This allows a reduced value to be entered for values in range of the baseValue\n     * and width and absolute values can be entered for values outside the range.\n     *\n     * For example, a base value of `1980` and a width of `2` will have\n     * valid values from `1980` to `2079`.\n     * During parsing, the text `\"12\"` will result in the value `2012` as that\n     * is the value within the range where the last two characters are \"12\".\n     * By contrast, parsing the text `\"1915\"` will result in the value `1915`.\n     *\n     * @param {TemporalField} field  the field to append, not null\n     * @param {number} width  the field width of the printed and parsed field, from 1 to 10\n     * @param {number} maxWidth  the maximum field width of the printed field, from 1 to 10\n     * @param {ChronoLocalDate} baseDate  the base date used to calculate the base value for the range\n     *  of valid values in the parsed chronology, not null\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     * @throws IllegalArgumentException if the width or base value is invalid\n     */\n    _appendValueReducedFieldWidthMaxWidthBaseDate(field, width, maxWidth, baseDate) {\n        requireNonNull(field, 'field');\n        requireNonNull(baseDate, 'baseDate');\n        requireInstance(baseDate, ChronoLocalDate, 'baseDate');\n        const pp = new ReducedPrinterParser(field, width, maxWidth, 0, baseDate);\n        this._appendValuePrinterParser(pp);\n        return this;\n    }\n\n    /**\n     * Appends a fixed width printer-parser.\n     *\n     * @param pp  the printer-parser, not null\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    _appendValuePrinterParser(pp) {\n        assert(pp != null);\n        if (this._active._valueParserIndex >= 0 &&\n                this._active._printerParsers[this._active._valueParserIndex] instanceof NumberPrinterParser) {\n            const activeValueParser = this._active._valueParserIndex;\n\n            // adjacent parsing mode, update setting in previous parsers\n            let basePP = this._active._printerParsers[activeValueParser];\n            if (pp.minWidth() === pp.maxWidth() && pp.signStyle() === SignStyle.NOT_NEGATIVE) {\n                // Append the width to the subsequentWidth of the active parser\n                basePP = basePP.withSubsequentWidth(pp.maxWidth());\n                // Append the new parser as a fixed width\n                this._appendInternal(pp.withFixedWidth());\n                // Retain the previous active parser\n                this._active._valueParserIndex = activeValueParser;\n            } else {\n                // Modify the active parser to be fixed width\n                basePP = basePP.withFixedWidth();\n                // The new parser becomes the mew active parser\n                this._active._valueParserIndex = this._appendInternal(pp);\n            }\n            // Replace the modified parser with the updated one\n            this._active._printerParsers[activeValueParser] = basePP;\n        } else {\n            // The new Parser becomes the active parser\n            this._active._valueParserIndex = this._appendInternal(pp);\n        }\n        return this;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Appends the fractional value of a date-time field to the formatter.\n     *\n     * The fractional value of the field will be output including the\n     * preceding decimal point. The preceding value is not output.\n     * For example, the second-of-minute value of 15 would be output as `.25`.\n     *\n     * The width of the printed fraction can be controlled. Setting the\n     * minimum width to zero will cause no output to be generated.\n     * The printed fraction will have the minimum width necessary between\n     * the minimum and maximum widths - trailing zeroes are omitted.\n     * No rounding occurs due to the maximum width - digits are simply dropped.\n     *\n     * When parsing in strict mode, the number of parsed digits must be between\n     * the minimum and maximum width. When parsing in lenient mode, the minimum\n     * width is considered to be zero and the maximum is nine.\n     *\n     * If the value cannot be obtained then an exception will be thrown.\n     * If the value is negative an exception will be thrown.\n     * If the field does not have a fixed set of valid values then an\n     * exception will be thrown.\n     * If the field value in the date-time to be printed is invalid it\n     * cannot be printed and an exception will be thrown.\n     *\n     * @param {TemporalField} field  the field to append, not null\n     * @param {Number} minWidth  the minimum width of the field excluding the decimal point, from 0 to 9\n     * @param {Number} maxWidth  the maximum width of the field excluding the decimal point, from 1 to 9\n     * @param {boolean} decimalPoint  whether to output the localized decimal point symbol\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     * @throws IllegalArgumentException if the field has a variable set of valid values or\n     *  either width is invalid\n     */\n    appendFraction(field, minWidth, maxWidth, decimalPoint) {\n        this._appendInternal(new FractionPrinterParser(field, minWidth, maxWidth, decimalPoint));\n        return this;\n    }\n\n    /**\n     * Appends an instant using ISO-8601 to the formatter with control over\n     * the number of fractional digits.\n     *\n     * Instants have a fixed output format, although this method provides some\n     * control over the fractional digits. They are converted to a date-time\n     * with a zone-offset of UTC and printed using the standard ISO-8601 format.\n     * The localized decimal style is not used.\n     *\n     * The {@link this.fractionalDigits} parameter allows the output of the fractional\n     * second to be controlled. Specifying zero will cause no fractional digits\n     * to be output. From 1 to 9 will output an increasing number of digits, using\n     * zero right-padding if necessary. The special value -1 is used to output as\n     * many digits as necessary to avoid any trailing zeroes.\n     *\n     * When parsing in strict mode, the number of parsed digits must match the\n     * fractional digits. When parsing in lenient mode, any number of fractional\n     * digits from zero to nine are accepted.\n     *\n     * The instant is obtained using {@link ChronoField#INSTANT_SECONDS}\n     * and optionally (@code NANO_OF_SECOND). The value of {@link INSTANT_SECONDS}\n     * may be outside the maximum range of {@link LocalDateTime}.\n     *\n     * The {@link ResolverStyle} has no effect on instant parsing.\n     * The end-of-day time of '24:00' is handled as midnight at the start of the following day.\n     * The leap-second time of '23:59:59' is handled to some degree, see\n     * {@link DateTimeFormatter#parsedLeapSecond} for full details.\n     *\n     * An alternative to this method is to format/parse the instant as a single\n     * epoch-seconds value. That is achieved using `appendValue(INSTANT_SECONDS)`.\n     *\n     * @param {number} [fractionalDigits=-2] - the number of fractional second digits to format with,\n     *  from 0 to 9, or -1 to use as many digits as necessary\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    appendInstant(fractionalDigits=-2) {\n        if (fractionalDigits < -2 || fractionalDigits > 9) {\n            throw new IllegalArgumentException(`Invalid fractional digits: ${fractionalDigits}`);\n        }\n        this._appendInternal(new InstantPrinterParser(fractionalDigits));\n        return this;\n    }\n\n\n    /**\n     * Appends the zone offset, such as '+01:00', to the formatter.\n     *\n     * This appends an instruction to print/parse the offset ID to the builder.\n     * This is equivalent to calling `appendOffset(\"HH:MM:ss\", \"Z\")`.\n     *\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    appendOffsetId() {\n        this._appendInternal(OffsetIdPrinterParser.INSTANCE_ID);\n        return this;\n    }\n\n    /**\n     * Appends the zone offset, such as '+01:00', to the formatter.\n     *\n     * This appends an instruction to print/parse the offset ID to the builder.\n     *\n     * During printing, the offset is obtained using a mechanism equivalent\n     * to querying the temporal with {@link TemporalQueries#offset}.\n     * It will be printed using the format defined below.\n     * If the offset cannot be obtained then an exception is thrown unless the\n     * section of the formatter is optional.\n     *\n     * During parsing, the offset is parsed using the format defined below.\n     * If the offset cannot be parsed then an exception is thrown unless the\n     * section of the formatter is optional.\n     *\n     * The format of the offset is controlled by a pattern which must be one\n     * of the following:\n     *\n     * * `+HH` - hour only, ignoring minute and second\n     * * `+HHmm` - hour, with minute if non-zero, ignoring second, no colon\n     * * `+HH:mm` - hour, with minute if non-zero, ignoring second, with colon\n     * * `+HHMM` - hour and minute, ignoring second, no colon\n     * * `+HH:MM` - hour and minute, ignoring second, with colon\n     * * `+HHMMss` - hour and minute, with second if non-zero, no colon\n     * * `+HH:MM:ss` - hour and minute, with second if non-zero, with colon\n     * * `+HHMMSS` - hour, minute and second, no colon\n     * * `+HH:MM:SS` - hour, minute and second, with colon\n     *\n     * The \"no offset\" text controls what text is printed when the total amount of\n     * the offset fields to be output is zero.\n     * Example values would be 'Z', '+00:00', 'UTC' or 'GMT'.\n     * Three formats are accepted for parsing UTC - the \"no offset\" text, and the\n     * plus and minus versions of zero defined by the pattern.\n     *\n     * @param {String} pattern  the pattern to use, not null\n     * @param {String} noOffsetText  the text to use when the offset is zero, not null\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    appendOffset(pattern, noOffsetText) {\n        this._appendInternalPrinterParser(new OffsetIdPrinterParser(noOffsetText, pattern));\n        return this;\n    }\n\n    /**\n      * Appends the time-zone ID, such as 'Europe/Paris' or '+02:00', to the formatter.\n      *\n      * This appends an instruction to print/parse the zone ID to the builder.\n      * The zone ID is obtained in a strict manner suitable for {@link ZonedDateTime}.\n      * By contrast, {@link OffsetDateTime} does not have a zone ID suitable\n      * for use with this method, see {@link appendZoneOrOffsetId}.\n      *\n      * During printing, the zone is obtained using a mechanism equivalent\n      * to querying the temporal with {@link TemporalQueries#zoneId}.\n      * It will be printed using the result of {@link ZoneId#getId}.\n      * If the zone cannot be obtained then an exception is thrown unless the\n      * section of the formatter is optional.\n      *\n      * During parsing, the zone is parsed and must match a known zone or offset.\n      * If the zone cannot be parsed then an exception is thrown unless the\n      * section of the formatter is optional.\n      *\n      * @return {DateTimeFormatterBuilder} this, for chaining, not null\n      * @see #appendZoneRegionId()\n      */\n    appendZoneId() {\n        this._appendInternal(new ZoneIdPrinterParser(TemporalQueries.zoneId(), 'ZoneId()'));\n        return this;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Appends the elements defined by the specified pattern to the builder.\n     *\n     * All letters 'A' to 'Z' and 'a' to 'z' are reserved as pattern letters.\n     * The characters '{' and '}' are reserved for future use.\n     * The characters '[' and ']' indicate optional patterns.\n     * The following pattern letters are defined:\n     * <pre>\n     *  |Symbol  |Meaning                     |Presentation      |Examples\n     *  |--------|----------------------------|------------------|----------------------------------------------------\n     *  | G      | era                        | number/text      | 1; 01; AD; Anno Domini\n     *  | u      | year                       | year             | 2004; 04\n     *  | y      | year-of-era                | year             | 2004; 04\n     *  | D      | day-of-year                | number           | 189\n     *  | M      | month-of-year              | number/text      | 7; 07; Jul; July; J\n     *  | d      | day-of-month               | number           | 10\n     *  |        |                            |                  |\n     *  | Q      | quarter-of-year            | number/text      | 3; 03; Q3\n     *  | Y      | week-based-year            | year             | 1996; 96\n     *  | w      | week-of-year               | number           | 27\n     *  | W      | week-of-month              | number           | 27\n     *  | e      | localized day-of-week      | number           | 2; Tue; Tuesday; T\n     *  | E      | day-of-week                | number/text      | 2; Tue; Tuesday; T\n     *  | F      | week-of-month              | number           | 3\n     *  |        |                            |                  |\n     *  | a      | am-pm-of-day               | text             | PM\n     *  | h      | clock-hour-of-am-pm (1-12) | number           | 12\n     *  | K      | hour-of-am-pm (0-11)       | number           | 0\n     *  | k      | clock-hour-of-am-pm (1-24) | number           | 0\n     *  |        |                            |                  |\n     *  | H      | hour-of-day (0-23)         | number           | 0\n     *  | m      | minute-of-hour             | number           | 30\n     *  | s      | second-of-minute           | number           | 55\n     *  | S      | fraction-of-second         | fraction         | 978\n     *  | A      | milli-of-day               | number           | 1234\n     *  | n      | nano-of-second             | number           | 987654321\n     *  | N      | nano-of-day                | number           | 1234000000\n     *  |        |                            |                  |\n     *  | V      | time-zone ID               | zone-id          | America/Los_Angeles; Z; -08:30\n     *  | z      | time-zone name             | zone-name        | Pacific Standard Time; PST\n     *  | X      | zone-offset 'Z' for zero   | offset-X         | Z; -08; -0830; -08:30; -083015; -08:30:15;\n     *  | x      | zone-offset                | offset-x         | +0000; -08; -0830; -08:30; -083015; -08:30:15;\n     *  | Z      | zone-offset                | offset-Z         | +0000; -0800; -08:00;\n     *  |        |                            |                  |\n     *  | p      | pad next                   | pad modifier     | 1\n     *  |        |                            |                  |\n     *  | '      | escape for text            | delimiter        |\n     *  | ''     | single quote               | literal          | '\n     *  | [      | optional section start     |                  |\n     *  | ]      | optional section end       |                  |\n     *  | {}     | reserved for future use    |                  |\n     * </pre>\n     *\n     * The count of pattern letters determine the format.\n     *\n     * **Text**: The text style is determined based on the number of pattern letters used.\n     * Less than 4 pattern letters will use the short form (see {@link TextStyle#SHORT}).\n     * Exactly 4 pattern letters will use the full form (see {@link TextStyle#FULL}).\n     * Exactly 5 pattern letters will use the narrow form (see {@link TextStyle#NARROW}).\n     *\n     * **Number**: If the count of letters is one, then the value is printed using the minimum number\n     * of digits and without padding as per {@link appendValue}. Otherwise, the\n     * count of digits is used as the width of the output field as per {@link appendValue}.\n     *\n     * **Number/Text**: If the count of pattern letters is 3 or greater, use the Text rules above.\n     * Otherwise use the Number rules above.\n     *\n     * **Fraction**: Outputs the nano-of-second field as a fraction-of-second.\n     * The nano-of-second value has nine digits, thus the count of pattern letters is from 1 to 9.\n     * If it is less than 9, then the nano-of-second value is truncated, with only the most\n     * significant digits being output.\n     * When parsing in strict mode, the number of parsed digits must match the count of pattern letters.\n     * When parsing in lenient mode, the number of parsed digits must be at least the count of pattern\n     * letters, up to 9 digits.\n     *\n     * **Year**: The count of letters determines the minimum field width below which padding is used.\n     * If the count of letters is two, then a reduced (see {@link appendValueReduced}) two digit form is used.\n     * For printing, this outputs the rightmost two digits. For parsing, this will parse using the\n     * base value of 2000, resulting in a year within the range 2000 to 2099 inclusive.\n     * If the count of letters is less than four (but not two), then the sign is only output for negative\n     * years as per {@link SignStyle#NORMAL}.\n     * Otherwise, the sign is output if the pad width is exceeded, as per {@link SignStyle#EXCEEDS_PAD}\n     *\n     * **ZoneId**: This outputs the time-zone ID, such as 'Europe/Paris'.\n     * If the count of letters is two, then the time-zone ID is output.\n     * Any other count of letters throws {@link IllegalArgumentException}.\n     * <pre>\n     *  Pattern     Equivalent builder methods\n     *   VV          appendZoneId()\n     * </pre>\n     *\n     * **Zone names**: This outputs the display name of the time-zone ID.\n     * If the count of letters is one, two or three, then the short name is output.\n     * If the count of letters is four, then the full name is output.\n     * Five or more letters throws {@link IllegalArgumentException}.\n     * <pre>\n     *  Pattern     Equivalent builder methods\n     *   z           appendZoneText(TextStyle.SHORT)\n     *   zz          appendZoneText(TextStyle.SHORT)\n     *   zzz         appendZoneText(TextStyle.SHORT)\n     *   zzzz        appendZoneText(TextStyle.FULL)\n     * </pre>\n     *\n     * **Offset X and x**: This formats the offset based on the number of pattern letters.\n     * One letter outputs just the hour', such as '+01', unless the minute is non-zero\n     * in which case the minute is also output, such as '+0130'.\n     * Two letters outputs the hour and minute, without a colon, such as '+0130'.\n     * Three letters outputs the hour and minute, with a colon, such as '+01:30'.\n     * Four letters outputs the hour and minute and optional second, without a colon, such as '+013015'.\n     * Five letters outputs the hour and minute and optional second, with a colon, such as '+01:30:15'.\n     * Six or more letters throws {@link IllegalArgumentException}.\n     * Pattern letter 'X' (upper case) will output 'Z' when the offset to be output would be zero,\n     * whereas pattern letter 'x' (lower case) will output '+00', '+0000', or '+00:00'.\n     * <pre>\n     *  Pattern     Equivalent builder methods\n     *   X           appendOffset(\"+HHmm\",\"Z\")\n     *   XX          appendOffset(\"+HHMM\",\"Z\")\n     *   XXX         appendOffset(\"+HH:MM\",\"Z\")\n     *   XXXX        appendOffset(\"+HHMMss\",\"Z\")\n     *   XXXXX       appendOffset(\"+HH:MM:ss\",\"Z\")\n     *   x           appendOffset(\"+HHmm\",\"+00\")\n     *   xx          appendOffset(\"+HHMM\",\"+0000\")\n     *   xxx         appendOffset(\"+HH:MM\",\"+00:00\")\n     *   xxxx        appendOffset(\"+HHMMss\",\"+0000\")\n     *   xxxxx       appendOffset(\"+HH:MM:ss\",\"+00:00\")\n     * </pre>\n     *\n     * **Offset Z**: This formats the offset based on the number of pattern letters.\n     * One, two or three letters outputs the hour and minute, without a colon, such as '+0130'.\n     * Four or more letters throws {@link IllegalArgumentException}.\n     * The output will be '+0000' when the offset is zero.\n     * <pre>\n     *  Pattern     Equivalent builder methods\n     *   Z           appendOffset(\"+HHMM\",\"+0000\")\n     *   ZZ          appendOffset(\"+HHMM\",\"+0000\")\n     *   ZZZ         appendOffset(\"+HHMM\",\"+0000\")\n     * </pre>\n     *\n     * **Optional section**: The optional section markers work exactly like calling {@link optionalStart}\n     * and {@link optionalEnd}.\n     *\n     * **Pad modifier**: Modifies the pattern that immediately follows to be padded with spaces.\n     * The pad width is determined by the number of pattern letters.\n     * This is the same as calling {@link padNext}.\n     *\n     * For example, 'ppH' outputs the hour-of-day padded on the left with spaces to a width of 2.\n     *\n     * Any unrecognized letter is an error.\n     * Any non-letter character, other than '[', ']', '{', '}' and the single quote will be output directly.\n     * Despite this, it is recommended to use single quotes around all characters that you want to\n     * output directly to ensure that future changes do not break your application.\n     *\n     * Note that the pattern string is similar, but not identical, to\n     * {@link java.text.SimpleDateFormat}.\n     * The pattern string is also similar, but not identical, to that defined by the\n     * Unicode Common Locale Data Repository (CLDR/LDML).\n     * Pattern letters 'E' and 'u' are merged, which changes the meaning of \"E\" and \"EE\" to be numeric.\n     * Pattern letters 'X' is aligned with Unicode CLDR/LDML, which affects pattern 'X'.\n     * Pattern letter 'y' and 'Y' parse years of two digits and more than 4 digits differently.\n     * Pattern letters 'n', 'A', 'N', 'I' and 'p' are added.\n     * Number types will reject large numbers.\n     *\n     * @param {String} pattern  the pattern to add, not null\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     * @throws IllegalArgumentException if the pattern is invalid\n     */\n    appendPattern(pattern) {\n        requireNonNull(pattern, 'pattern');\n        this._parsePattern(pattern);\n        return this;\n    }\n\n\n    //-----------------------------------------------------------------------\n    // empty implementations of locale functionality, be implemented/overridden by js-joda-locale\n\n    appendZoneText() {\n        throw new IllegalArgumentException('Pattern using (localized) text not implemented, use @js-joda/locale plugin!');\n    }\n\n    appendText() {\n        throw new IllegalArgumentException('Pattern using (localized) text not implemented, use @js-joda/locale plugin!');\n    }\n\n    appendLocalizedOffset() {\n        throw new IllegalArgumentException('Pattern using (localized) text not implemented, use @js-joda/locale plugin!');\n    }\n\n    appendWeekField() {\n        throw new IllegalArgumentException('Pattern using (localized) text not implemented, use @js-joda/locale plugin!');\n    }\n\n    //-----------------------------------------------------------------------\n\n    _parsePattern(pattern) {\n        /** Map of letters to fields. */\n        const FIELD_MAP = {\n            'G': ChronoField.ERA,\n            'y': ChronoField.YEAR_OF_ERA,\n            'u': ChronoField.YEAR,\n            'Q': IsoFields.QUARTER_OF_YEAR,\n            'q': IsoFields.QUARTER_OF_YEAR,\n            'M': ChronoField.MONTH_OF_YEAR,\n            'L': ChronoField.MONTH_OF_YEAR,\n            'D': ChronoField.DAY_OF_YEAR,\n            'd': ChronoField.DAY_OF_MONTH,\n            'F': ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH,\n            'E': ChronoField.DAY_OF_WEEK,\n            'c': ChronoField.DAY_OF_WEEK,\n            'e': ChronoField.DAY_OF_WEEK,\n            'a': ChronoField.AMPM_OF_DAY,\n            'H': ChronoField.HOUR_OF_DAY,\n            'k': ChronoField.CLOCK_HOUR_OF_DAY,\n            'K': ChronoField.HOUR_OF_AMPM,\n            'h': ChronoField.CLOCK_HOUR_OF_AMPM,\n            'm': ChronoField.MINUTE_OF_HOUR,\n            's': ChronoField.SECOND_OF_MINUTE,\n            'S': ChronoField.NANO_OF_SECOND,\n            'A': ChronoField.MILLI_OF_DAY,\n            'n': ChronoField.NANO_OF_SECOND,\n            'N': ChronoField.NANO_OF_DAY\n        };\n\n        for (let pos = 0; pos < pattern.length; pos++) {\n            let cur = pattern.charAt(pos);\n            if ((cur >= 'A' && cur <= 'Z') || (cur >= 'a' && cur <= 'z')) {\n                let start = pos++;\n                for (; pos < pattern.length && pattern.charAt(pos) === cur; pos++);  // short loop\n                let count = pos - start;\n                // padding\n                if (cur === 'p') {\n                    let pad = 0;\n                    if (pos < pattern.length) {\n                        cur = pattern.charAt(pos);\n                        if ((cur >= 'A' && cur <= 'Z') || (cur >= 'a' && cur <= 'z')) {\n                            pad = count;\n                            start = pos++;\n                            for (; pos < pattern.length && pattern.charAt(pos) === cur; pos++);  // short loop\n                            count = pos - start;\n                        }\n                    }\n                    if (pad === 0) {\n                        throw new IllegalArgumentException(\n                            `Pad letter 'p' must be followed by valid pad pattern: ${pattern}`);\n                    }\n                    this.padNext(pad); // pad and continue parsing\n                }\n                // main rules\n                const field = FIELD_MAP[cur];\n                if (field != null) {\n                    this._parseField(cur, count, field);\n                } else if (cur === 'z') {\n                    if (count > 4) {\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                    } else if (count === 4) {\n                        this.appendZoneText(TextStyle.FULL);\n                    } else {\n                        this.appendZoneText(TextStyle.SHORT);\n                    }\n                } else if (cur === 'V') {\n                    if (count !== 2) {\n                        throw new IllegalArgumentException(`Pattern letter count must be 2: ${cur}`);\n                    }\n                    this.appendZoneId();\n                } else if (cur === 'Z') {\n                    if (count < 4) {\n                        this.appendOffset('+HHMM', '+0000');\n                    } else if (count === 4) {\n                        this.appendLocalizedOffset(TextStyle.FULL);\n                    } else if (count === 5) {\n                        this.appendOffset('+HH:MM:ss', 'Z');\n                    } else {\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                    }\n                } else if (cur === 'O') {\n                    if (count === 1) {\n                        this.appendLocalizedOffset(TextStyle.SHORT);\n                    } else if (count === 4) {\n                        this.appendLocalizedOffset(TextStyle.FULL);\n                    } else {\n                        throw new IllegalArgumentException(`Pattern letter count must be 1 or 4: ${cur}`);\n                    }\n                } else if (cur === 'X') {\n                    if (count > 5) {\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                    }\n                    this.appendOffset(OffsetIdPrinterParser.PATTERNS[count + (count === 1 ? 0 : 1)], 'Z');\n                } else if (cur === 'x') {\n                    if (count > 5) {\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                    }\n                    const zero = (count === 1 ? '+00' : (count % 2 === 0 ? '+0000' : '+00:00'));\n                    this.appendOffset(OffsetIdPrinterParser.PATTERNS[count + (count === 1 ? 0 : 1)], zero);\n                } else if (cur === 'W') {\n                    if (count > 1) {\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                    }\n                    this.appendWeekField('W', count);\n                } else if (cur === 'w') {\n                    if (count > 2) {\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                    }\n                    this.appendWeekField('w', count);\n                } else if (cur === 'Y') {\n                    this.appendWeekField('Y', count);\n                } else {\n                    throw new IllegalArgumentException(`Unknown pattern letter: ${cur}`);\n                }\n                pos--;\n\n            } else if (cur === '\\'') {\n                // parse literals\n                const start = pos++;\n                for (; pos < pattern.length; pos++) {\n                    if (pattern.charAt(pos) === '\\'') {\n                        if (pos + 1 < pattern.length && pattern.charAt(pos + 1) === '\\'') {\n                            pos++;\n                        } else {\n                            break;  // end of literal\n                        }\n                    }\n                }\n                if (pos >= pattern.length) {\n                    throw new IllegalArgumentException(`Pattern ends with an incomplete string literal: ${pattern}`);\n                }\n                const str = pattern.substring(start + 1, pos);\n                if (str.length === 0) {\n                    this.appendLiteral('\\'');\n                } else {\n                    this.appendLiteral(str.replace('\\'\\'', '\\''));\n                }\n\n            } else if (cur === '[') {\n                this.optionalStart();\n\n            } else if (cur === ']') {\n                if (this._active._parent === null) {\n                    throw new IllegalArgumentException('Pattern invalid as it contains ] without previous [');\n                }\n                this.optionalEnd();\n\n            } else if (cur === '{' || cur === '}' || cur === '#') {\n                throw new IllegalArgumentException(`Pattern includes reserved character: '${cur}'`);\n            } else {\n                this.appendLiteral(cur);\n            }\n        }\n    }\n\n    _parseField(cur, count, field) {\n        switch (cur) {\n            case 'u':\n            case 'y':\n                if (count === 2) {\n                    this.appendValueReduced(field, 2, 2, ReducedPrinterParser.BASE_DATE);\n                } else if (count < 4) {\n                    this.appendValue(field, count, MAX_WIDTH, SignStyle.NORMAL);\n                } else {\n                    this.appendValue(field, count, MAX_WIDTH, SignStyle.EXCEEDS_PAD);\n                }\n                break;\n            case 'M':\n            case 'Q':\n                switch (count) {\n                    case 1:\n                        this.appendValue(field);\n                        break;\n                    case 2:\n                        this.appendValue(field, 2);\n                        break;\n                    case 3:\n                        this.appendText(field, TextStyle.SHORT);\n                        break;\n                    case 4:\n                        this.appendText(field, TextStyle.FULL);\n                        break;\n                    case 5:\n                        this.appendText(field, TextStyle.NARROW);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                }\n                break;\n            case 'L':\n            case 'q':\n                switch (count) {\n                    case 1:\n                        this.appendValue(field);\n                        break;\n                    case 2:\n                        this.appendValue(field, 2);\n                        break;\n                    case 3:\n                        this.appendText(field, TextStyle.SHORT_STANDALONE);\n                        break;\n                    case 4:\n                        this.appendText(field, TextStyle.FULL_STANDALONE);\n                        break;\n                    case 5:\n                        this.appendText(field, TextStyle.NARROW_STANDALONE);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                }\n                break;\n            case 'e':\n                switch (count) {\n                    case 1:\n                    case 2:\n                        this.appendWeekField('e', count);\n                        break;\n                    case 3:\n                        this.appendText(field, TextStyle.SHORT);\n                        break;\n                    case 4:\n                        this.appendText(field, TextStyle.FULL);\n                        break;\n                    case 5:\n                        this.appendText(field, TextStyle.NARROW);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                }\n                // eslint-disable-next-line no-unreachable\n                break;\n            case 'c':\n                switch (count) {\n                    case 1:\n                        this.appendWeekField('c', count);\n                        break;\n                    case 2:\n                        throw new IllegalArgumentException(`Invalid number of pattern letters: ${cur}`);\n                    case 3:\n                        this.appendText(field, TextStyle.SHORT_STANDALONE);\n                        break;\n                    case 4:\n                        this.appendText(field, TextStyle.FULL_STANDALONE);\n                        break;\n                    case 5:\n                        this.appendText(field, TextStyle.NARROW_STANDALONE);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                }\n                // eslint-disable-next-line no-unreachable\n                break;\n            case 'a':\n                if (count === 1) {\n                    this.appendText(field, TextStyle.SHORT);\n                } else {\n                    throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                }\n                // eslint-disable-next-line no-unreachable\n                break;\n            case 'E':\n            case 'G':\n                switch (count) {\n                    case 1:\n                    case 2:\n                    case 3:\n                        this.appendText(field, TextStyle.SHORT);\n                        break;\n                    case 4:\n                        this.appendText(field, TextStyle.FULL);\n                        break;\n                    case 5:\n                        this.appendText(field, TextStyle.NARROW);\n                        break;\n                    default:\n                        throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                }\n                // eslint-disable-next-line no-unreachable\n                break;\n            case 'S':\n                this.appendFraction(ChronoField.NANO_OF_SECOND, count, count, false);\n                break;\n            case 'F':\n                if (count === 1) {\n                    this.appendValue(field);\n                } else {\n                    throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                }\n                break;\n            case 'd':\n            case 'h':\n            case 'H':\n            case 'k':\n            case 'K':\n            case 'm':\n            case 's':\n                if (count === 1) {\n                    this.appendValue(field);\n                } else if (count === 2) {\n                    this.appendValue(field, count);\n                } else {\n                    throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                }\n                break;\n            case 'D':\n                if (count === 1) {\n                    this.appendValue(field);\n                } else if (count <= 3) {\n                    this.appendValue(field, count);\n                } else {\n                    throw new IllegalArgumentException(`Too many pattern letters: ${cur}`);\n                }\n                break;\n            default:\n                if (count === 1) {\n                    this.appendValue(field);\n                } else {\n                    this.appendValue(field, count);\n                }\n                break;\n        }\n    }\n\n    /**\n     * padNext function overloading\n     */\n    padNext() {\n        if (arguments.length === 1) {\n            return this._padNext1.apply(this, arguments);\n        } else {\n            return this._padNext2.apply(this, arguments);\n        }\n    }\n\n    /**\n     * Causes the next added printer/parser to pad to a fixed width using a space.\n     *\n     * This padding will pad to a fixed width using spaces.\n     *\n     * During formatting, the decorated element will be output and then padded\n     * to the specified width. An exception will be thrown during printing if\n     * the pad width is exceeded.\n     *\n     * During parsing, the padding and decorated element are parsed.\n     * If parsing is lenient, then the pad width is treated as a maximum.\n     * If parsing is case insensitive, then the pad character is matched ignoring case.\n     * The padding is parsed greedily. Thus, if the decorated element starts with\n     * the pad character, it will not be parsed.\n     *\n     * @param {number} padWidth  the pad width, 1 or greater\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     * @throws IllegalArgumentException if pad width is too small\n     */\n    _padNext1(padWidth) {\n        return this._padNext2(padWidth, ' ');\n    }\n\n    /**\n     * Causes the next added printer/parser to pad to a fixed width.\n     *\n     * This padding is intended for padding other than zero-padding.\n     * Zero-padding should be achieved using the appendValue methods.\n     *\n     * During formatting, the decorated element will be output and then padded\n     * to the specified width. An exception will be thrown during printing if\n     * the pad width is exceeded.\n     *\n     * During parsing, the padding and decorated element are parsed.\n     * If parsing is lenient, then the pad width is treated as a maximum.\n     * If parsing is case insensitive, then the pad character is matched ignoring case.\n     * The padding is parsed greedily. Thus, if the decorated element starts with\n     * the pad character, it will not be parsed.\n     *\n     * @param {number} padWidth  the pad width, 1 or greater\n     * @param {String} padChar  the pad character\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     * @throws IllegalArgumentException if pad width is too small\n     */\n    _padNext2(padWidth, padChar) {\n        if (padWidth < 1) {\n            throw new IllegalArgumentException(`The pad width must be at least one but was ${padWidth}`);\n        }\n        this._active._padNextWidth = padWidth;\n        this._active._padNextChar = padChar;\n        this._active._valueParserIndex = -1;\n        return this;\n    }\n\n\n    //-----------------------------------------------------------------------\n    /**\n     * Mark the start of an optional section.\n     *\n     * The output of printing can include optional sections, which may be nested.\n     * An optional section is started by calling this method and ended by calling\n     * {@link optionalEnd} or by ending the build process.\n     *\n     * All elements in the optional section are treated as optional.\n     * During printing, the section is only output if data is available in the\n     * {@link TemporalAccessor} for all the elements in the section.\n     * During parsing, the whole section may be missing from the parsed string.\n     *\n     * For example, consider a builder setup as\n     * `builder.appendValue(HOUR_OF_DAY,2).optionalStart().appendValue(MINUTE_OF_HOUR,2)`.\n     * The optional section ends automatically at the end of the builder.\n     * During printing, the minute will only be output if its value can be obtained from the date-time.\n     * During parsing, the input will be successfully parsed whether the minute is present or not.\n     *\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    optionalStart() {\n        this._active._valueParserIndex = -1;\n        this._active = DateTimeFormatterBuilder._of(this._active, true);\n        return this;\n    }\n\n    /**\n     * Ends an optional section.\n     *\n     * The output of printing can include optional sections, which may be nested.\n     * An optional section is started by calling {@link optionalStart} and ended\n     * using this method (or at the end of the builder).\n     *\n     * Calling this method without having previously called `optionalStart`\n     * will throw an exception.\n     * Calling this method immediately after calling `optionalStart` has no effect\n     * on the formatter other than ending the (empty) optional section.\n     *\n     * All elements in the optional section are treated as optional.\n     * During printing, the section is only output if data is available in the\n     * {@link TemporalAccessor} for all the elements in the section.\n     * During parsing, the whole section may be missing from the parsed string.\n     *\n     * For example, consider a builder setup as\n     * `builder.appendValue(HOUR_OF_DAY,2).optionalStart().appendValue(MINUTE_OF_HOUR,2).optionalEnd()`.\n     * During printing, the minute will only be output if its value can be obtained from the date-time.\n     * During parsing, the input will be successfully parsed whether the minute is present or not.\n     *\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     * @throws IllegalStateException if there was no previous call to `optionalStart`\n     */\n    optionalEnd() {\n        if (this._active._parent == null) {\n            throw new IllegalStateException('Cannot call optionalEnd() as there was no previous call to optionalStart()');\n        }\n        if (this._active._printerParsers.length > 0) {\n            const cpp = new CompositePrinterParser(this._active._printerParsers, this._active._optional);\n            this._active = this._active._parent;\n            this._appendInternal(cpp);\n        } else {\n            this._active = this._active._parent;\n        }\n        return this;\n    }\n\n    /**\n     * Appends a printer and/or parser to the internal list handling padding.\n     *\n     * @param pp  the printer-parser to add, not null\n     * @return the index into the active parsers list\n     */\n    _appendInternal(pp) {\n        assert(pp != null);\n        if (this._active._padNextWidth > 0) {\n            if (pp != null) {\n                pp = new PadPrinterParserDecorator(pp, this._active._padNextWidth, this._active._padNextChar);\n            }\n            this._active._padNextWidth = 0;\n            this._active._padNextChar = 0;\n        }\n        this._active._printerParsers.push(pp);\n        this._active._valueParserIndex = -1;\n        return this._active._printerParsers.length - 1;\n    }\n\n    /**\n     * Appends a string literal to the formatter.\n     *\n     * This string will be output during a print.\n     *\n     * If the literal is empty, nothing is added to the formatter.\n     *\n     * @param literal  the literal to append, not null\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    appendLiteral(literal) {\n        assert(literal != null);\n        if (literal.length > 0) {\n            if (literal.length === 1) {\n                this._appendInternalPrinterParser(new CharLiteralPrinterParser(literal.charAt(0)));\n            } else {\n                this._appendInternalPrinterParser(new StringLiteralPrinterParser(literal));\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Appends a printer and/or parser to the internal list handling padding.\n     *\n     * @param pp  the printer-parser to add, not null\n     * @return the index into the active parsers list\n     */\n    _appendInternalPrinterParser(pp) {\n        assert(pp != null);\n        if (this._active._padNextWidth > 0) {\n            if (pp != null) {\n                pp = new PadPrinterParserDecorator(pp, this._active._padNextWidth, this._active._padNextChar);\n            }\n            this._active._padNextWidth = 0;\n            this._active._padNextChar = 0;\n        }\n        this._active._printerParsers.push(pp);\n        this._active._valueParserIndex = -1;\n        return this._active._printerParsers.length - 1;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Appends all the elements of a formatter to the builder.\n     *\n     * This method has the same effect as appending each of the constituent\n     * parts of the formatter directly to this builder.\n     *\n     * @param {DateTimeFormatter} formatter  the formatter to add, not null\n     * @return {DateTimeFormatterBuilder} this, for chaining, not null\n     */\n    append(formatter) {\n        requireNonNull(formatter, 'formatter');\n        this._appendInternal(formatter._toPrinterParser(false));\n        return this;\n    }\n\n    /**\n     * Completes this builder by creating the DateTimeFormatter.\n     *\n     * This will create a formatter with the specified locale.\n     * Numbers will be printed and parsed using the standard non-localized set of symbols.\n     *\n     * Calling this method will end any open optional sections by repeatedly\n     * calling {@link optionalEnd} before creating the formatter.\n     *\n     * This builder can still be used after creating the formatter if desired,\n     * although the state may have been changed by calls to `optionalEnd`.\n     *\n     * @param resolverStyle  the new resolver style\n     * @return the created formatter, not null\n     */\n    toFormatter(resolverStyle=ResolverStyle.SMART) {\n        while (this._active._parent != null) {\n            this.optionalEnd();\n        }\n        const pp = new CompositePrinterParser(this._printerParsers, false);\n        return new DateTimeFormatter(pp, null, DecimalStyle.STANDARD, resolverStyle, null, null, null);\n    }\n\n}\n\n// days in a 400 year cycle = 146097\n// days in a 10,000 year cycle = 146097 * 25\n// seconds per day = 86400\nconst SECONDS_PER_10000_YEARS = 146097 * 25 * 86400;\nconst SECONDS_0000_TO_1970 = ((146097 * 5) - (30 * 365 + 7)) * 86400;\n\n/**\n * Prints or parses an ISO-8601 instant.\n */\nclass InstantPrinterParser  {\n\n    constructor(fractionalDigits) {\n        this.fractionalDigits = fractionalDigits;\n    }\n\n    print(context, buf) {\n        // use INSTANT_SECONDS, thus this code is not bound by Instant.MAX\n        const inSecs = context.getValue(ChronoField.INSTANT_SECONDS);\n        let inNanos = 0;\n        if (context.temporal().isSupported(ChronoField.NANO_OF_SECOND)) {\n            inNanos = context.temporal().getLong(ChronoField.NANO_OF_SECOND);\n        }\n        if (inSecs == null) {\n            return false;\n        }\n        const inSec = inSecs;\n        let inNano = ChronoField.NANO_OF_SECOND.checkValidIntValue(inNanos);\n        if (inSec >= -SECONDS_0000_TO_1970) {\n            // current era\n            const zeroSecs = inSec - SECONDS_PER_10000_YEARS + SECONDS_0000_TO_1970;\n            const hi = MathUtil.floorDiv(zeroSecs, SECONDS_PER_10000_YEARS) + 1;\n            const lo = MathUtil.floorMod(zeroSecs, SECONDS_PER_10000_YEARS);\n            const ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n            if (hi > 0) {\n                buf.append('+').append(hi);\n            }\n            buf.append(ldt.toString());\n            if (ldt.second() === 0) {\n                buf.append(':00');\n            }\n        } else {\n            // before current era\n            const zeroSecs = inSec + SECONDS_0000_TO_1970;\n            const hi = MathUtil.intDiv(zeroSecs, SECONDS_PER_10000_YEARS);\n            const lo = MathUtil.intMod(zeroSecs, SECONDS_PER_10000_YEARS);\n            const ldt = LocalDateTime.ofEpochSecond(lo - SECONDS_0000_TO_1970, 0, ZoneOffset.UTC);\n            const pos = buf.length();\n            buf.append(ldt.toString());\n            if (ldt.second() === 0) {\n                buf.append(':00');\n            }\n            if (hi < 0) {\n                if (ldt.year() === -10000) {\n                    buf.replace(pos, pos + 2, `${hi - 1}`);\n                } else if (lo === 0) {\n                    buf.insert(pos, hi);\n                } else {\n                    buf.insert(pos + 1, Math.abs(hi));\n                }\n            }\n        }\n        //fraction\n        if (this.fractionalDigits === -2) {\n            if (inNano !== 0) {\n                buf.append('.');\n                if (MathUtil.intMod(inNano, 1000000) === 0) {\n                    buf.append((`${MathUtil.intDiv(inNano, 1000000) + 1000}`).substring(1));\n                } else if (MathUtil.intMod(inNano, 1000) === 0) {\n                    buf.append((`${MathUtil.intDiv(inNano, 1000) + 1000000}`).substring(1));\n                } else {\n                    buf.append((`${(inNano) + 1000000000}`).substring(1));\n                }\n            }\n        } else if (this.fractionalDigits > 0 || (this.fractionalDigits === -1 && inNano > 0)) {\n            buf.append('.');\n            let div = 100000000;\n            for (let i = 0; ((this.fractionalDigits === -1 && inNano > 0) || i < this.fractionalDigits); i++) {\n                const digit = MathUtil.intDiv(inNano, div);\n                buf.append(digit);\n                inNano = inNano - (digit * div);\n                div = MathUtil.intDiv(div, 10);\n            }\n        }\n        buf.append('Z');\n        return true;\n    }\n\n    parse(context, text, position) {\n        // new context to avoid overwriting fields like year/month/day\n        const newContext = context.copy();\n        const minDigits = (this.fractionalDigits < 0 ? 0 : this.fractionalDigits);\n        const maxDigits = (this.fractionalDigits < 0 ? 9 : this.fractionalDigits);\n        const parser = new DateTimeFormatterBuilder()\n            .append(DateTimeFormatter.ISO_LOCAL_DATE).appendLiteral('T')\n            .appendValue(ChronoField.HOUR_OF_DAY, 2).appendLiteral(':').appendValue(ChronoField.MINUTE_OF_HOUR, 2).appendLiteral(':')\n            .appendValue(ChronoField.SECOND_OF_MINUTE, 2).appendFraction(ChronoField.NANO_OF_SECOND, minDigits, maxDigits, true).appendLiteral('Z')\n            .toFormatter()._toPrinterParser(false);\n        const pos = parser.parse(newContext, text, position);\n        if (pos < 0) {\n            return pos;\n        }\n        // parser restricts most fields to 2 digits, so definitely int\n        // correctly parsed nano is also guaranteed to be valid\n        const yearParsed = newContext.getParsed(ChronoField.YEAR);\n        const month = newContext.getParsed(ChronoField.MONTH_OF_YEAR);\n        const day = newContext.getParsed(ChronoField.DAY_OF_MONTH);\n        let hour = newContext.getParsed(ChronoField.HOUR_OF_DAY);\n        const min = newContext.getParsed(ChronoField.MINUTE_OF_HOUR);\n        const secVal = newContext.getParsed(ChronoField.SECOND_OF_MINUTE);\n        const nanoVal = newContext.getParsed(ChronoField.NANO_OF_SECOND);\n        let sec = (secVal != null ? secVal : 0);\n        const nano = (nanoVal != null ? nanoVal : 0);\n        const year = MathUtil.intMod(yearParsed, 10000);\n        let days = 0;\n        if (hour === 24 && min === 0 && sec === 0 && nano === 0) {\n            hour = 0;\n            days = 1;\n        } else if (hour === 23 && min === 59 && sec === 60) {\n            context.setParsedLeapSecond();\n            sec = 59;\n        }\n        let instantSecs;\n        try {\n            const ldt = LocalDateTime.of(year, month, day, hour, min, sec, 0).plusDays(days);\n            instantSecs = ldt.toEpochSecond(ZoneOffset.UTC);\n            instantSecs += MathUtil.safeMultiply(MathUtil.intDiv(yearParsed, 10000), SECONDS_PER_10000_YEARS);\n        } catch (ex) {\n            return ~position;\n        }\n        let successPos = pos;\n        successPos = context.setParsedField(ChronoField.INSTANT_SECONDS, instantSecs, position, successPos);\n        return context.setParsedField(ChronoField.NANO_OF_SECOND, nano, position, successPos);\n    }\n\n    toString() {\n        return 'Instant()';\n    }\n}\n\n/**\n * Used by parseDefaulting().\n * @implements {DateTimePrinterParser}\n * @private\n */\nclass DefaultingParser {\n    /**\n     * @param {TemporalField} field \n     * @param {number} value \n     */\n    constructor(field, value) {\n        this._field = field;\n        this._value = value;\n    }\n\n    /**\n     * @param {DateTimePrintContext} context\n     * @param {StringBuilder} buf\n     * @return {boolean}\n     */\n    print() {\n        return true;\n    }\n\n\n    /** \n     * @param {DateTimeParseContext} context \n     * @param {string} text\n     * @param {number} position \n     * @returns {number}\n     */\n    parse(context, text, position) {\n        if (context.getParsed(this._field) == null) {\n            context.setParsedField(this._field, this._value, position, position);\n        }\n        return position;\n    }\n}\n\nexport function _init() {\n    ReducedPrinterParser.BASE_DATE = LocalDate.of(2000, 1, 1);\n\n    DateTimeFormatterBuilder.CompositePrinterParser = CompositePrinterParser;\n    DateTimeFormatterBuilder.PadPrinterParserDecorator = PadPrinterParserDecorator;\n    DateTimeFormatterBuilder.SettingsParser = SettingsParser;\n    DateTimeFormatterBuilder.CharLiteralPrinterParser = StringLiteralPrinterParser;\n    DateTimeFormatterBuilder.StringLiteralPrinterParser = StringLiteralPrinterParser;\n    DateTimeFormatterBuilder.CharLiteralPrinterParser = CharLiteralPrinterParser;\n    DateTimeFormatterBuilder.NumberPrinterParser = NumberPrinterParser;\n    DateTimeFormatterBuilder.ReducedPrinterParser = ReducedPrinterParser;\n    DateTimeFormatterBuilder.FractionPrinterParser = FractionPrinterParser;\n    DateTimeFormatterBuilder.OffsetIdPrinterParser = OffsetIdPrinterParser;\n    DateTimeFormatterBuilder.ZoneIdPrinterParser = ZoneIdPrinterParser;\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\n/**\n * @private\n */\nexport class StringBuilder {\n    constructor(){\n        this._str = '';\n    }\n\n    append(str){\n        this._str += str;\n        return this;\n    }\n\n    appendChar(str){\n        this._str += str[0];\n        return this;\n    }\n\n    insert(offset, str){\n        this._str = this._str.slice(0, offset) + str + this._str.slice(offset);\n        return this;\n    }\n\n    replace(start, end, str){\n        this._str = this._str.slice(0, start) + str + this._str.slice(end);\n        return this;\n    }\n\n    length(){\n        return this._str.length;\n    }\n\n    setLength(length){\n        this._str = this._str.slice(0, length);\n        return this;\n    }\n\n\n    toString() {\n        return this._str;\n    }\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { assert, requireNonNull } from '../assert';\n\nimport { DateTimeParseException, NullPointerException } from '../errors';\n\nimport { Period } from '../Period';\n\nimport { ParsePosition } from './ParsePosition';\nimport { DateTimeBuilder } from './DateTimeBuilder';\nimport { DateTimeParseContext } from './DateTimeParseContext';\nimport { DateTimePrintContext } from './DateTimePrintContext';\nimport { DateTimeFormatterBuilder } from './DateTimeFormatterBuilder';\nimport { SignStyle } from './SignStyle';\nimport { StringBuilder } from './StringBuilder';\nimport { ResolverStyle } from './ResolverStyle';\n\nimport { IsoChronology } from '../chrono/IsoChronology';\nimport { ChronoField } from '../temporal/ChronoField';\nimport { createTemporalQuery } from '../temporal/TemporalQuery';\n\n/**\n *\n * ### Static properties of Class {@link DateTimeFormatter}\n *\n * DateTimeFormatter.ISO_LOCAL_DATE\n *\n * DateTimeFormatter.ISO_LOCAL_TIME\n *\n * DateTimeFormatter.ISO_LOCAL_DATE_TIME\n *\n */\nexport class DateTimeFormatter {\n\n    //-----------------------------------------------------------------------\n    /**\n     * A query that provides access to the excess days that were parsed.\n     *\n     * This returns a singleton {@link TemporalQuery} that provides\n     * access to additional information from the parse. The query always returns\n     * a non-null period, with a zero period returned instead of null.\n     *\n     * There are two situations where this query may return a non-zero period.\n     *\n     * * If the {@link ResolverStyle} is {@link LENIENT} and a time is parsed\n     *   without a date, then the complete result of the parse consists of a\n     *   {@link LocalTime} and an excess {@link Period} in days.\n     * * If the {@link ResolverStyle} is {@link SMART} and a time is parsed\n     *   without a date where the time is 24:00:00, then the complete result of\n     *   the parse consists of a {@link LocalTime} of 00:00:00 and an excess\n     *   {@link Period} of one day.\n     *\n     * In both cases, if a complete {@link ChronoLocalDateTime} or {@link Instant}\n     * is parsed, then the excess days are added to the date part.\n     * As a result, this query will return a zero period.\n     *\n     * The {@link SMART} behaviour handles the common \"end of day\" 24:00 value.\n     * Processing in {@link LENIENT} mode also produces the same result:\n     * <pre>\n     *  Text to parse        Parsed object                         Excess days\n     *  \"2012-12-03T00:00\"   LocalDateTime.of(2012, 12, 3, 0, 0)   ZERO\n     *  \"2012-12-03T24:00\"   LocalDateTime.of(2012, 12, 4, 0, 0)   ZERO\n     *  \"00:00\"              LocalTime.of(0, 0)                    ZERO\n     *  \"24:00\"              LocalTime.of(0, 0)                    Period.ofDays(1)\n     * </pre>\n     * The query can be used as follows:\n     * <pre>\n     *  TemporalAccessor parsed = formatter.parse(str);\n     *  LocalTime time = parsed.query(LocalTime.FROM);\n     *  Period extraDays = parsed.query(DateTimeFormatter.parsedExcessDays());\n     * </pre>\n     * @return {TemporalQuery} a query that provides access to the excess days that were parsed\n     */\n    static parsedExcessDays() {\n        return DateTimeFormatter.PARSED_EXCESS_DAYS;\n    }\n\n    /**\n     * A query that provides access to whether a leap-second was parsed.\n     *\n     * This returns a singleton {@link TemporalQuery} that provides\n     * access to additional information from the parse. The query always returns\n     * a non-null boolean, true if parsing saw a leap-second, false if not.\n     *\n     * Instant parsing handles the special \"leap second\" time of '23:59:60'.\n     * Leap seconds occur at '23:59:60' in the UTC time-zone, but at other\n     * local times in different time-zones. To avoid this potential ambiguity,\n     * the handling of leap-seconds is limited to\n     * {@link DateTimeFormatterBuilder#appendInstant}, as that method\n     * always parses the instant with the UTC zone offset.\n     *\n     * If the time '23:59:60' is received, then a simple conversion is applied,\n     * replacing the second-of-minute of 60 with 59. This query can be used\n     * on the parse result to determine if the leap-second adjustment was made.\n     * The query will return one second of excess if it did adjust to remove\n     * the leap-second, and zero if not. Note that applying a leap-second\n     * smoothing mechanism, such as UTC-SLS, is the responsibility of the\n     * application, as follows:\n     * <pre>\n     *  TemporalAccessor parsed = formatter.parse(str);\n     *  Instant instant = parsed.query(Instant::from);\n     *  if (parsed.query(DateTimeFormatter.parsedLeapSecond())) {\n     *    // validate leap-second is correct and apply correct smoothing\n     *  }\n     * </pre>\n     * @return a query that provides access to whether a leap-second was parsed\n     */\n    static parsedLeapSecond() {\n        return DateTimeFormatter.PARSED_LEAP_SECOND;\n    }\n\n    /**\n     * Creates a formatter using the specified pattern.\n     *\n     * This method will create a formatter based on a simple pattern of letters and symbols.\n     *\n     * The returned formatter will use the default locale, but this can be changed\n     * using {@link DateTimeFormatter.withLocale}.\n     *\n     * All letters 'A' to 'Z' and 'a' to 'z' are reserved as pattern letters.\n     * The following pattern letters are defined:\n     * <pre>\n     *  |Symbol  |Meaning                     |Presentation      |Examples\n     *  |--------|----------------------------|------------------|----------------------------------------------------\n     *  | G      | era                        | number/text      | 1; 01; AD; Anno Domini\n     *  | u      | year                       | year             | 2004; 04\n     *  | y      | year-of-era                | year             | 2004; 04\n     *  | D      | day-of-year                | number           | 189\n     *  | M      | month-of-year              | number/text      | 7; 07; Jul; July; J\n     *  | d      | day-of-month               | number           | 10\n     *  |        |                            |                  |\n     *  | Q      | quarter-of-year            | number/text      | 3; 03; Q3\n     *  | Y      | week-based-year            | year             | 1996; 96\n     *  | w      | week-of-year               | number           | 27\n     *  | W      | week-of-month              | number           | 27\n     *  | e      | localized day-of-week      | number           | 2; Tue; Tuesday; T\n     *  | E      | day-of-week                | number/text      | 2; Tue; Tuesday; T\n     *  | F      | week-of-month              | number           | 3\n     *  |        |                            |                  |\n     *  | a      | am-pm-of-day               | text             | PM\n     *  | h      | clock-hour-of-am-pm (1-12) | number           | 12\n     *  | K      | hour-of-am-pm (0-11)       | number           | 0\n     *  | k      | clock-hour-of-am-pm (1-24) | number           | 0\n     *  |        |                            |                  |\n     *  | H      | hour-of-day (0-23)         | number           | 0\n     *  | m      | minute-of-hour             | number           | 30\n     *  | s      | second-of-minute           | number           | 55\n     *  | S      | fraction-of-second         | fraction         | 978\n     *  | A      | milli-of-day               | number           | 1234\n     *  | n      | nano-of-second             | number           | 987654321\n     *  | N      | nano-of-day                | number           | 1234000000\n     *  |        |                            |                  |\n     *  | V      | time-zone ID               | zone-id          | America/Los_Angeles; Z; -08:30\n     *  | z      | time-zone name             | zone-name        | Pacific Standard Time; PST\n     *  | X      | zone-offset 'Z' for zero   | offset-X         | Z; -08; -0830; -08:30; -083015; -08:30:15;\n     *  | x      | zone-offset                | offset-x         | +0000; -08; -0830; -08:30; -083015; -08:30:15;\n     *  | Z      | zone-offset                | offset-Z         | +0000; -0800; -08:00;\n     *  |        |                            |                  |\n     *  | p      | pad next                   | pad modifier     | 1\n     *  |        |                            |                  |\n     *  | '      | escape for text            | delimiter        |\n     *  | ''     | single quote               | literal          | '\n     *  | [      | optional section start     |                  |\n     *  | ]      | optional section end       |                  |\n     *  | {}     | reserved for future use    |                  |\n     * </pre>\n     *\n     * The count of pattern letters determine the format.\n     *\n     * **Text**: The text style is determined based on the number of pattern letters used.\n     * Less than 4 pattern letters will use the short form `TextStyle.SHORT`.\n     * Exactly 4 pattern letters will use the full form `TextStyle.FULL`.\n     * Exactly 5 pattern letters will use the narrow form `TextStyle.NARROW`.\n     *\n     * **NOTE**: since text styles require locale support, they are currently not supported in js-joda!\n     *\n     * **Number**: If the count of letters is one, then the value is printed using the minimum number\n     * of digits and without padding as per {@link DateTimeFormatterBuilder.appendValue}.\n     * Otherwise, the count of digits is used as the width of the output field as per\n     * {@link DateTimeFormatterBuilder.appendValue}.\n     *\n     * **Number/Text**: If the count of pattern letters is 3 or greater, use the Text rules above.\n     * Otherwise use the Number rules above.\n     *\n     * **Fraction**: Outputs the nano-of-second field as a fraction-of-second.\n     * The nano-of-second value has nine digits, thus the count of pattern letters is from 1 to 9.\n     * If it is less than 9, then the nano-of-second value is truncated, with only the most\n     * significant digits being output.\n     * When parsing in strict mode, the number of parsed digits must match the count of pattern letters.\n     * When parsing in lenient mode, the number of parsed digits must be at least the count of pattern\n     * letters, up to 9 digits.\n     *\n     * **Year**: The count of letters determines the minimum field width below which padding is used.\n     * If the count of letters is two, then a {@link DateTimeFormatterBuilder.appendValueReduced}\n     * two digit form is used.\n     * For printing, this outputs the rightmost two digits. For parsing, this will parse using the\n     * base value of 2000, resulting in a year within the range 2000 to 2099 inclusive.\n     * If the count of letters is less than four (but not two), then the sign is only output for negative\n     * years as per `SignStyle.NORMAL`.\n     * Otherwise, the sign is output if the pad width is exceeded, as per `SignStyle.EXCEEDS_PAD`\n     *\n     * **ZoneId**: This outputs the time-zone ID, such as 'Europe/Paris'.\n     * If the count of letters is two, then the time-zone ID is output.\n     * Any other count of letters throws `IllegalArgumentException`.\n     *\n     * **Zone names**: This outputs the display name of the time-zone ID.\n     * If the count of letters is one, two or three, then the short name is output.\n     * If the count of letters is four, then the full name is output.\n     * Five or more letters throws `IllegalArgumentException`.\n     *\n     * **NOTE**: since zone ids and name require the iana tzdb, they are currently not supported in js-joda!\n     *\n     * **Offset X and x**: This formats the offset based on the number of pattern letters.\n     * One letter outputs just the hour', such as '+01', unless the minute is non-zero\n     * in which case the minute is also output, such as '+0130'.\n     * Two letters outputs the hour and minute, without a colon, such as '+0130'.\n     * Three letters outputs the hour and minute, with a colon, such as '+01:30'.\n     * Four letters outputs the hour and minute and optional second, without a colon, such as '+013015'.\n     * Five letters outputs the hour and minute and optional second, with a colon, such as '+01:30:15'.\n     * Six or more letters throws `IllegalArgumentException`.\n     * Pattern letter 'X' (upper case) will output 'Z' when the offset to be output would be zero,\n     * whereas pattern letter 'x' (lower case) will output '+00', '+0000', or '+00:00'.\n     *\n     * **Offset Z**: This formats the offset based on the number of pattern letters.\n     * One, two or three letters outputs the hour and minute, without a colon, such as '+0130'.\n     * Four or more letters throws `IllegalArgumentException`.\n     * The output will be '+0000' when the offset is zero.\n     *\n     * **Optional section**: The optional section markers work exactly like calling\n     * {@link DateTimeFormatterBuilder.optionalStart} and {@link DateTimeFormatterBuilder.optionalEnd}.\n     *\n     * **Pad modifier**: Modifies the pattern that immediately follows to be padded with spaces.\n     * The pad width is determined by the number of pattern letters.\n     * This is the same as calling {@link DateTimeFormatterBuilder.padNext}.\n     *\n     * For example, 'ppH' outputs the hour-of-day padded on the left with spaces to a width of 2.\n     *\n     * Any unrecognized letter is an error.\n     * Any non-letter character, other than '[', ']', '{', '}' and the single quote will be output directly.\n     * Despite this, it is recommended to use single quotes around all characters that you want to\n     * output directly to ensure that future changes do not break your application.\n     *\n     * @param {String} pattern  the pattern to use, not null\n     * @return {DateTimeFormatter} the formatter based on the pattern, not null\n     * @throws IllegalArgumentException if the pattern is invalid\n     * @see DateTimeFormatterBuilder#appendPattern(String)\n     * @example\n     * var s = LocalDate.parse('2016-04-01').format(DateTimeFormatter.ofPattern('d MM yyyy'));\n     * console.log(s); // '1 04 2016'\n     *\n     */\n    static ofPattern(pattern) {\n        return new DateTimeFormatterBuilder().appendPattern(pattern).toFormatter();\n    }\n\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructor.\n     *\n     * @param printerParser  the printer/parser to use, not null\n     * @param locale  the locale to use, not null\n     * @param decimalStyle  the decimal style to use, not null\n     * @param resolverStyle  the resolver style to use, not null\n     * @param resolverFields  the fields to use during resolving, null for all fields\n     * @param chrono  the chronology to use, null for no override\n     * @param zone  the zone to use, null for no override\n     * @private\n     */\n    constructor(printerParser, locale, decimalStyle, resolverStyle, resolverFields, chrono=IsoChronology.INSTANCE, zone) {\n        assert(printerParser != null);\n        assert(decimalStyle != null);\n        assert(resolverStyle != null);\n        /**\n         * The printer and/or parser to use, not null.\n         */\n        this._printerParser = printerParser;\n        /**\n         * The locale to use for formatting. // nyi\n         */\n        this._locale = locale;\n        /**\n         * The symbols to use for formatting, not null.\n         */\n        this._decimalStyle = decimalStyle;\n        /**\n         * The resolver style to use, not null.\n         */\n        this._resolverStyle = resolverStyle;\n        /**\n         * The fields to use in resolving, null for all fields.\n         */\n        this._resolverFields = resolverFields;\n        /**\n         * The chronology to use for formatting, null for no override.\n         */\n        this._chrono = chrono;\n        /**\n         * The zone to use for formatting, null for no override. // nyi\n         */\n        this._zone = zone;\n    }\n\n    locale() {\n        return this._locale;\n    }\n\n    decimalStyle() {\n        return this._decimalStyle;\n    }\n\n    chronology() {\n        return this._chrono;\n    }\n\n    /**\n     * Returns a copy of this formatter with a new override chronology.\n     *\n     * This returns a formatter with similar state to this formatter but\n     * with the override chronology set.\n     * By default, a formatter has no override chronology, returning null.\n     *\n     * If an override is added, then any date that is printed or parsed will be affected.\n     *\n     * When printing, if the {@link Temporal} object contains a date then it will\n     * be converted to a date in the override chronology.\n     * Any time or zone will be retained unless overridden.\n     * The converted result will behave in a manner equivalent to an implementation\n     * of {@link ChronoLocalDate},{@link ChronoLocalDateTime} or {@link ChronoZonedDateTime}.\n     *\n     * When parsing, the override chronology will be used to interpret the\n     * {@link ChronoField} into a date unless the\n     * formatter directly parses a valid chronology.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param chrono  the new chronology, not null\n     * @return a formatter based on this formatter with the requested override chronology, not null\n     */\n    withChronology(chrono) {\n        if (this._chrono != null && this._chrono.equals(chrono)) {\n            return this;\n        }\n        return new DateTimeFormatter(this._printerParser, this._locale, this._decimalStyle,\n            this._resolverStyle, this._resolverFields, chrono, this._zone);\n    }\n\n    /**\n     * not yet supported\n     * @returns {DateTimeFormatter}\n     */\n    withLocale(){\n        return this;\n    }\n\n    /**\n     * Returns a copy of this formatter with a new resolver style.\n     * <p>\n     * This returns a formatter with similar state to this formatter but\n     * with the resolver style set. By default, a formatter has the\n     * {@link ResolverStyle#SMART SMART} resolver style.\n     * <p>\n     * Changing the resolver style only has an effect during parsing.\n     * Parsing a text string occurs in two phases.\n     * Phase 1 is a basic text parse according to the fields added to the builder.\n     * Phase 2 resolves the parsed field-value pairs into date and/or time objects.\n     * The resolver style is used to control how phase 2, resolving, happens.\n     * See {@link ResolverStyle} for more information on the options available.\n     * <p>\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {ResolverStyle} resolverStyle  the new resolver style, not null\n     * @return {DateTimeFormatter} a formatter based on this formatter with the requested resolver style, not null\n     */\n    withResolverStyle(resolverStyle) {\n        requireNonNull(resolverStyle, 'resolverStyle');\n        if (resolverStyle.equals(this._resolverStyle)) {\n            return this;\n        }\n        return new DateTimeFormatter(this._printerParser, this._locale, this._decimalStyle, resolverStyle, this._resolverFields, this._chrono, this._zone);\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * Formats a date-time object using this formatter.\n     *\n     * This formats the date-time to a String using the rules of the formatter.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to print, not null\n     * @return {String} the printed string, not null\n     * @throws DateTimeException if an error occurs during formatting\n     */\n    format(temporal) {\n        const buf = new StringBuilder(32);\n        this._formatTo(temporal, buf);\n        return buf.toString();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Formats a date-time object to an {@link Appendable} using this formatter.\n     *\n     * This formats the date-time to the specified destination.\n     * {@link Appendable} is a general purpose interface that is implemented by all\n     * key character output classes including {@link StringBuffer}, {@link StringBuilder},\n     * {@link PrintStream} and {@link Writer}.\n     *\n     * Although {@link Appendable} methods throw an {@link IOException}, this method does not.\n     * Instead, any {@link IOException} is wrapped in a runtime exception.\n     *\n     * @param {TemporalAccessor} temporal - the temporal object to print, not null\n     * @param {StringBuilder} appendable - the appendable to print to, not null\n     * @throws DateTimeException if an error occurs during formatting\n     */\n    _formatTo(temporal, appendable) {\n        requireNonNull(temporal, 'temporal');\n        requireNonNull(appendable, 'appendable');\n        const context = new DateTimePrintContext(temporal, this);\n        this._printerParser.print(context, appendable);\n    }\n\n    /**\n     * function overloading for {@link DateTimeFormatter.parse}\n     *\n     * if called with one arg {@link DateTimeFormatter.parse1} is called\n     * otherwise {@link DateTimeFormatter.parse2}\n     *\n     * @param {string} text\n     * @param {TemporalQuery} type\n     * @return {TemporalAccessor}\n     */\n    parse(text, type){\n        if(arguments.length === 1){\n            return this.parse1(text);\n        } else {\n            return this.parse2(text, type);\n        }\n    }\n\n    /**\n     * Fully parses the text producing a temporal object.\n     *\n     * This parses the entire text producing a temporal object.\n     * It is typically more useful to use {@link parse}.\n     * The result of this method is {@link TemporalAccessor} which has been resolved,\n     * applying basic validation checks to help ensure a valid date-time.\n     *\n     * If the parse completes without reading the entire length of the text,\n     * or a problem occurs during parsing or merging, then an exception is thrown.\n     *\n     * @param {String} text  the text to parse, not null\n     * @return {TemporalAccessor} the parsed temporal object, not null\n     * @throws DateTimeParseException if unable to parse the requested result\n     */\n    parse1(text) {\n        requireNonNull(text, 'text');\n        try {\n            return this._parseToBuilder(text, null).resolve(this._resolverStyle, this._resolverFields);\n        } catch (ex) {\n            if(ex instanceof DateTimeParseException){\n                throw ex;\n            } else {\n                throw this._createError(text, ex);\n            }\n        }\n    }\n\n    /**\n     * Fully parses the text producing a temporal object.\n     *\n     * This parses the entire text producing a temporal object.\n     * It is typically more useful to use {@link parse}.\n     * The result of this method is {@link TemporalAccessor} which has been resolved,\n     * applying basic validation checks to help ensure a valid date-time.\n     *\n     * If the parse completes without reading the entire length of the text,\n     * or a problem occurs during parsing or merging, then an exception is thrown.\n     *\n     * @param text  the text to parse, not null\n     * @param type the type to extract, not null\n * @return the parsed temporal object, not null\n     * @throws DateTimeParseException if unable to parse the requested result\n     */\n    parse2(text, type) {\n        requireNonNull(text, 'text');\n        requireNonNull(type, 'type');\n        try {\n            const builder = this._parseToBuilder(text, null).resolve(this._resolverStyle, this._resolverFields);\n            return builder.build(type);\n        } catch (ex) {\n            if(ex instanceof DateTimeParseException){\n                throw ex;\n            } else {\n                throw this._createError(text, ex);\n            }\n        }\n    }\n\n    _createError(text, ex) {\n        let abbr = '';\n        if (text.length > 64) {\n            abbr = `${text.substring(0, 64)}...`;\n        } else {\n            abbr = text;\n        }\n        return new DateTimeParseException(`Text '${abbr}' could not be parsed: ${ex.message}`, text, 0, ex);\n    }\n\n\n    /**\n     * Parses the text to a builder.\n     *\n     * This parses to a {@link DateTimeBuilder} ensuring that the text is fully parsed.\n     * This method throws {@link DateTimeParseException} if unable to parse, or\n     * some other {@link DateTimeException} if another date/time problem occurs.\n     *\n     * @param text  the text to parse, not null\n     * @param position  the position to parse from, updated with length parsed\n     *  and the index of any error, null if parsing whole string\n     * @return the engine representing the result of the parse, not null\n     * @throws DateTimeParseException if the parse fails\n     */\n    _parseToBuilder(text, position) {\n        const pos = (position != null ? position : new ParsePosition(0));\n        const result = this._parseUnresolved0(text, pos);\n        if (result == null || pos.getErrorIndex() >= 0 || (position == null && pos.getIndex() < text.length)) {\n            let abbr = '';\n            if (text.length > 64) {\n                abbr = `${text.substr(0, 64).toString()}...`;\n            } else {\n                abbr = text;\n            }\n            if (pos.getErrorIndex() >= 0) {\n                throw new DateTimeParseException(`Text '${abbr}' could not be parsed at index ${ \n                    pos.getErrorIndex()}`, text, pos.getErrorIndex());\n            } else {\n                throw new DateTimeParseException(`Text '${abbr}' could not be parsed, unparsed text found at index ${ \n                    pos.getIndex()}`, text, pos.getIndex());\n            }\n        }\n        return result.toBuilder();\n    }\n\n    /**\n     * Parses the text using this formatter, without resolving the result, intended\n     * for advanced use cases.\n     *\n     * Parsing is implemented as a two-phase operation.\n     * First, the text is parsed using the layout defined by the formatter, producing\n     * a {@link Map} of field to value, a {@link ZoneId} and a {@link Chronology}.\n     * Second, the parsed data is *resolved*, by validating, combining and\n     * simplifying the various fields into more useful ones.\n     * This method performs the parsing stage but not the resolving stage.\n     *\n     * The result of this method is {@link TemporalAccessor} which represents the\n     * data as seen in the input. Values are not validated, thus parsing a date string\n     * of '2012-00-65' would result in a temporal with three fields - year of '2012',\n     * month of '0' and day-of-month of '65'.\n     *\n     * The text will be parsed from the specified start {@link ParsePosition}.\n     * The entire length of the text does not have to be parsed, the {@link ParsePosition}\n     * will be updated with the index at the end of parsing.\n     *\n     * Errors are returned using the error index field of the {@link ParsePosition}\n     * instead of {@link DateTimeParseException}.\n     * The returned error index will be set to an index indicative of the error.\n     * Callers must check for errors before using the context.\n     *\n     * If the formatter parses the same field more than once with different values,\n     * the result will be an error.\n     *\n     * This method is intended for advanced use cases that need access to the\n     * internal state during parsing. Typical application code should use\n     * {@link parse} or the parse method on the target type.\n     *\n     * @param text  the text to parse, not null\n     * @param position  the position to parse from, updated with length parsed\n     *  and the index of any error, not null\n     * @return the parsed text, null if the parse results in an error\n     * @throws DateTimeException if some problem occurs during parsing\n     * @throws IndexOutOfBoundsException if the position is invalid\n     */\n    parseUnresolved(text, position) {\n        return this._parseUnresolved0(text, position);\n    }\n\n    _parseUnresolved0(text, position) {\n        assert(text != null, 'text', NullPointerException);\n        assert(position != null, 'position', NullPointerException);\n        const context = new DateTimeParseContext(this);\n        let pos = position.getIndex();\n        pos = this._printerParser.parse(context, text, pos);\n        if (pos < 0) {\n            position.setErrorIndex(~pos);  // index not updated from input\n            return null;\n        }\n        position.setIndex(pos);  // errorIndex not updated from input\n        return context.toParsed();\n    }\n\n    /**\n     * Returns the formatter as a composite printer parser.\n     *\n     * @param {boolean} optional  whether the printer/parser should be optional\n     * @return {CompositePrinterParser} the printer/parser, not null\n     */\n    _toPrinterParser(optional) {\n        return this._printerParser.withOptional(optional);\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString() {\n        const pattern = this._printerParser.toString();\n        return pattern.indexOf('[') === 0 ? pattern : pattern.substring(1, pattern.length - 1);\n    }\n\n}\n\nexport function _init() {\n\n    DateTimeFormatter.ISO_LOCAL_DATE = new DateTimeFormatterBuilder()\n        .appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD)\n        .appendLiteral('-')\n        .appendValue(ChronoField.MONTH_OF_YEAR, 2)\n        .appendLiteral('-')\n        .appendValue(ChronoField.DAY_OF_MONTH, 2)\n        .toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n\n    DateTimeFormatter.ISO_LOCAL_TIME = new DateTimeFormatterBuilder()\n        .appendValue(ChronoField.HOUR_OF_DAY, 2)\n        .appendLiteral(':')\n        .appendValue(ChronoField.MINUTE_OF_HOUR, 2)\n        .optionalStart()\n        .appendLiteral(':')\n        .appendValue(ChronoField.SECOND_OF_MINUTE, 2)\n        .optionalStart()\n        .appendFraction(ChronoField.NANO_OF_SECOND, 0, 9, true)\n        .toFormatter(ResolverStyle.STRICT);\n\n    DateTimeFormatter.ISO_LOCAL_DATE_TIME = new DateTimeFormatterBuilder()\n        .parseCaseInsensitive()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE)\n        .appendLiteral('T')\n        .append(DateTimeFormatter.ISO_LOCAL_TIME)\n        .toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n\n    DateTimeFormatter.ISO_INSTANT = new DateTimeFormatterBuilder()\n        .parseCaseInsensitive()\n        .appendInstant()\n        .toFormatter(ResolverStyle.STRICT);\n\n    DateTimeFormatter.ISO_OFFSET_DATE_TIME = new DateTimeFormatterBuilder()\n        .parseCaseInsensitive()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE_TIME)\n        .appendOffsetId()\n        .toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n\n    DateTimeFormatter.ISO_ZONED_DATE_TIME = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_OFFSET_DATE_TIME)\n        .optionalStart()\n        .appendLiteral('[')\n        .parseCaseSensitive()\n        .appendZoneId()\n        // .appendZoneRegionId()\n        .appendLiteral(']')\n        .toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n\n    DateTimeFormatter.BASIC_ISO_DATE = new DateTimeFormatterBuilder()\n        .appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD)\n        .appendValue(ChronoField.MONTH_OF_YEAR, 2)\n        .appendValue(ChronoField.DAY_OF_MONTH, 2)\n        .toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n\n    DateTimeFormatter.ISO_OFFSET_DATE = new DateTimeFormatterBuilder()\n        .parseCaseInsensitive()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE)\n        .appendOffsetId()\n        .toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n\n    DateTimeFormatter.ISO_OFFSET_TIME = new DateTimeFormatterBuilder()\n        .parseCaseInsensitive()\n        .append(DateTimeFormatter.ISO_LOCAL_TIME)\n        .appendOffsetId()\n        .toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n\n    DateTimeFormatter.ISO_ORDINAL_DATE = new DateTimeFormatterBuilder()\n        .appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD)\n        .appendLiteral('-')\n        .appendValue(ChronoField.DAY_OF_YEAR)\n        .toFormatter(ResolverStyle.STRICT);\n\n    DateTimeFormatter.ISO_WEEK_DATE = new DateTimeFormatterBuilder()\n        .appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD)\n        .appendLiteral('-W')\n        .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR)\n        .appendLiteral('-')\n        .appendValue(ChronoField.DAY_OF_WEEK)\n        .toFormatter(ResolverStyle.STRICT);\n\n    DateTimeFormatter.ISO_DATE = new DateTimeFormatterBuilder()\n        .parseCaseInsensitive()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE)\n        .optionalStart()\n        .appendOffsetId()\n        .optionalEnd()\n        .toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n\n    DateTimeFormatter.ISO_TIME = new DateTimeFormatterBuilder()\n        .parseCaseInsensitive()\n        .append(DateTimeFormatter.ISO_LOCAL_TIME)\n        .optionalStart()\n        .appendOffsetId()\n        .optionalEnd()\n        .toFormatter(ResolverStyle.STRICT);\n\n    DateTimeFormatter.ISO_DATE_TIME = new DateTimeFormatterBuilder()\n        .append(DateTimeFormatter.ISO_LOCAL_DATE_TIME)\n        .optionalStart()\n        .appendOffsetId()\n        .optionalEnd()\n        .toFormatter(ResolverStyle.STRICT).withChronology(IsoChronology.INSTANCE);\n\n    // TODO:\n    //  RFC_1123_DATE_TIME - https://www.threeten.org/threetenbp/apidocs/org/threeten/bp/format/DateTimeFormatter.html#RFC_1123_DATE_TIME\n\n    DateTimeFormatter.PARSED_EXCESS_DAYS = createTemporalQuery('PARSED_EXCESS_DAYS', (temporal) => {\n        if (temporal instanceof DateTimeBuilder) {\n            return temporal.excessDays;\n        } else {\n            return Period.ZERO;\n        }\n    });\n\n    DateTimeFormatter.PARSED_LEAP_SECOND = createTemporalQuery('PARSED_LEAP_SECOND', (temporal) => {\n        if (temporal instanceof DateTimeBuilder) {\n            return temporal.leapSecond;\n        } else {\n            return false;\n        }\n    });\n\n\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\nimport { requireNonNull, requireInstance } from './assert';\nimport { DateTimeException, UnsupportedTemporalTypeException } from './errors';\nimport { MathUtil } from './MathUtil';\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { Clock } from './Clock';\nimport { DateTimeFormatter } from './format/DateTimeFormatter';\nimport { DateTimeFormatterBuilder } from './format/DateTimeFormatterBuilder';\nimport { IsoChronology } from './chrono/IsoChronology';\nimport { LocalDate } from './LocalDate';\nimport { Month } from './Month';\nimport { TemporalAccessor } from './temporal/TemporalAccessor';\nimport { TemporalQuery, createTemporalQuery } from './temporal/TemporalQuery';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { ValueRange } from './temporal/ValueRange';\nimport { Year } from './Year';\nimport { ZoneId } from './ZoneId';\n\n/**\n * A month-day in the ISO-8601 calendar system, such as `--12-03`.\n *\n * {@link MonthDay} is an immutable date-time object that represents the combination\n * of a year and month. Any field that can be derived from a month and day, such as\n * quarter-of-year, can be obtained.\n *\n * This class does not store or represent a year, time or time-zone.\n * For example, the value \"December 3rd\" can be stored in a {@link MonthDay}.\n *\n * Since a {@link MonthDay} does not possess a year, the leap day of\n * February 29th is considered valid.\n *\n * This class implements {@link TemporalAccessor} rather than {@link Temporal}.\n * This is because it is not possible to define whether February 29th is valid or not\n * without external information, preventing the implementation of plus/minus.\n * Related to this, {@link MonthDay} only provides access to query and set the fields\n * {@link MONTH_OF_YEAR} and {@link DAY_OF_MONTH}.\n *\n * The ISO-8601 calendar system is the modern civil calendar system used today\n * in most of the world. It is equivalent to the proleptic Gregorian calendar\n * system, in which today's rules for leap years are applied for all time.\n * For most applications written today, the ISO-8601 rules are entirely suitable.\n * However, any application that makes use of historical dates, and requires them\n * to be accurate will find the ISO-8601 approach unsuitable.\n *\n * ### Specification for implementors\n *\n * This class is immutable and thread-safe.\n */\nexport class MonthDay extends TemporalAccessor {\n    /**\n     * function overloading for {@link MonthDay.now}\n     *\n     * if called with 0 argument {@link MonthDay.now0} is executed,\n     *\n     * if called with 1 argument and first argument is an instance of ZoneId, then {@link MonthDay.nowZoneId} is executed,\n     *\n     * otherwise {@link MonthDay.nowClock} is executed\n     *\n     * @param {?(ZoneId|Clock)} zoneIdOrClock\n     * @returns {MonthDay}\n     */\n    static now(zoneIdOrClock) {\n        if (arguments.length === 0) {\n            return MonthDay.now0();\n        } else if (arguments.length === 1 && zoneIdOrClock instanceof ZoneId) {\n            return MonthDay.nowZoneId(zoneIdOrClock);\n        } else {\n            return MonthDay.nowClock(zoneIdOrClock);\n        }\n    }\n    /**\n     * Obtains the current month-day from the system clock in the default time-zone.\n     *\n     * This will query the system clock (see {@link Clock#systemDefaultZone}) in the default\n     * time-zone to obtain the current month-day.\n     *\n     * Using this method will prevent the ability to use an alternate clock for testing\n     * because the clock is hard-coded.\n     *\n     * @return {MonthDay} the current month-day using the system clock and default time-zone, not null\n     */\n    static now0() {\n        return this.nowClock(Clock.systemDefaultZone());\n    }\n\n    /**\n     * Obtains the current month-day from the system clock in the specified time-zone.\n     *\n     * This will query the system clock (see {@link Clock#system}) to obtain the current month-day.\n     * Specifying the time-zone avoids dependence on the default time-zone.\n     *\n     * Using this method will prevent the ability to use an alternate clock for testing\n     * because the clock is hard-coded.\n     *\n     * @param {ZoneId} zone  the zone ID to use, not null\n     * @return {MonthDay} the current month-day using the system clock, not null\n     */\n    static nowZoneId(zone) {\n        requireNonNull(zone, 'zone');\n        return this.nowClock(Clock.system(zone));\n    }\n\n    /**\n     * Obtains the current month-day from the specified clock.\n     *\n     * This will query the specified clock to obtain the current month-day.\n     * Using this method allows the use of an alternate clock for testing.\n     * The alternate clock may be introduced using dependency injection (see {@link Clock}).\n     *\n     * @param {Clock} clock  the clock to use, not null\n     * @return {MonthDay} the current month-day, not null\n     */\n    static nowClock(clock) {\n        requireNonNull(clock, 'clock');\n        const now = LocalDate.now(clock);  // called once\n        return MonthDay.of(now.month(), now.dayOfMonth());\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for {@link MonthDay.of}\n     *\n     * if called with 2 argument and first argument is an instance of Month, then {@link MonthDay.ofMonthNumber} is executed,\n     *\n     * otherwise {@link MonthDay.ofNumberNumber} is executed\n     *\n     * @param {!(Month|number)} monthOrNumber\n     * @param {?number} number\n     * @returns {MonthDay}\n     */\n    static of(monthOrNumber, number) {\n        if (arguments.length === 2 && monthOrNumber instanceof Month) {\n            return MonthDay.ofMonthNumber(monthOrNumber, number);\n        } else {\n            return MonthDay.ofNumberNumber(monthOrNumber, number);\n        }\n    }\n    /**\n     * Obtains an instance of {@link MonthDay}.\n     *\n     * The day-of-month must be valid for the month within a leap year.\n     * Hence, for February, day 29 is valid.\n     *\n     * For example, passing in April and day 31 will throw an exception, as\n     * there can never be April 31st in any year. By contrast, passing in\n     * February 29th is permitted, as that month-day can sometimes be valid.\n     *\n     * @param {Month} month  the month-of-year to represent, not null\n     * @param {number} dayOfMonth  the day-of-month to represent, from 1 to 31\n     * @return {MonthDay} the month-day, not null\n     * @throws DateTimeException if the value of any field is out of range\n     * @throws DateTimeException if the day-of-month is invalid for the month\n     */\n    static ofMonthNumber(month, dayOfMonth) {\n        requireNonNull(month, 'month');\n        ChronoField.DAY_OF_MONTH.checkValidValue(dayOfMonth);\n        if (dayOfMonth > month.maxLength()) {\n            throw new DateTimeException(`Illegal value for DayOfMonth field, value ${dayOfMonth \n            } is not valid for month ${month.toString()}`);\n        }\n        return new MonthDay(month.value(), dayOfMonth);\n    }\n\n    /**\n     * Obtains an instance of {@link MonthDay}.\n     *\n     * The day-of-month must be valid for the month within a leap year.\n     * Hence, for month 2 (February), day 29 is valid.\n     *\n     * For example, passing in month 4 (April) and day 31 will throw an exception, as\n     * there can never be April 31st in any year. By contrast, passing in\n     * February 29th is permitted, as that month-day can sometimes be valid.\n     *\n     * @param {number} month  the month-of-year to represent, from 1 (January) to 12 (December)\n     * @param {number} dayOfMonth  the day-of-month to represent, from 1 to 31\n     * @return {MonthDay} the month-day, not null\n     * @throws DateTimeException if the value of any field is out of range\n     * @throws DateTimeException if the day-of-month is invalid for the month\n     */\n    static ofNumberNumber(month, dayOfMonth) {\n        requireNonNull(month, 'month');\n        requireNonNull(dayOfMonth, 'dayOfMonth');\n        return MonthDay.of(Month.of(month), dayOfMonth);\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link MonthDay} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link MonthDay}.\n     *\n     * The conversion extracts the MONTH_OF_YEAR (see {@link ChronoField#MONTH_OF_YEAR}) and\n     * DAY_OF_MONTH (see {@link ChronoField#DAY_OF_MONTH}) fields.\n     * The extraction is only permitted if the date-time has an ISO chronology.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used in queries via method reference, {@link MonthDay::from}.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to convert, not null\n     * @return {MonthDay} the month-day, not null\n     * @throws DateTimeException if unable to convert to a {@link MonthDay}\n     */\n    static from(temporal) {\n        requireNonNull(temporal, 'temporal');\n        requireInstance(temporal, TemporalAccessor, 'temporal');\n        if (temporal instanceof MonthDay) {\n            return temporal;\n        }\n        try {\n            /* TODO: only IsoChronology for now\n            if (IsoChronology.INSTANCE.equals(Chronology.from(temporal)) == false) {\n                temporal = LocalDate.from(temporal);\n            }*/\n            return MonthDay.of(temporal.get(ChronoField.MONTH_OF_YEAR), temporal.get(ChronoField.DAY_OF_MONTH));\n        } catch (ex) {\n            throw new DateTimeException(`Unable to obtain MonthDay from TemporalAccessor: ${ \n                temporal}, type ${temporal && temporal.constructor != null ? temporal.constructor.name : ''}`);\n        }\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for {@link MonthDay.parse}\n     *\n     * if called with 1 argument, then {@link MonthDay.parseString} is executed,\n     *\n     * otherwise {@link MonthDay.parseStringFormatter} is executed\n     *\n     * @param {!(String)} text\n     * @param {?DateTimeFormatter} formatter\n     * @returns {MonthDay}\n     */\n    static parse(text, formatter) {\n        if (arguments.length === 1) {\n            return MonthDay.parseString(text);\n        } else {\n            return MonthDay.parseStringFormatter(text, formatter);\n        }\n    }\n\n    /**\n     * Obtains an instance of {@link MonthDay} from a text string such as `--12-03`.\n     *\n     * The string must represent a valid month-day.\n     * The format is `--MM-dd`.\n     *\n     * @param {String} text  the text to parse such as \"--12-03\", not null\n     * @return {MonthDay} the parsed month-day, not null\n     * @throws DateTimeParseException if the text cannot be parsed\n     */\n    static parseString(text) {\n        return MonthDay.parseStringFormatter(text, PARSER);\n    }\n\n    /**\n     * Obtains an instance of {@link MonthDay} from a text string using a specific formatter.\n     *\n     * The text is parsed using the formatter, returning a month-day.\n     *\n     * @param {String} text  the text to parse, not null\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {MonthDay} the parsed month-day, not null\n     * @throws DateTimeParseException if the text cannot be parsed\n     */\n    static parseStringFormatter(text, formatter) {\n        requireNonNull(text, 'text');\n        requireNonNull(formatter, 'formatter');\n        requireInstance(formatter, DateTimeFormatter, 'formatter');\n        return formatter.parse(text, MonthDay.FROM);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructor, previously validated.\n     *\n     * @param {number} month  the month-of-year to represent, validated from 1 to 12\n     * @param {number} dayOfMonth  the day-of-month to represent, validated from 1 to 29-31\n     * @private\n     */\n    constructor(month, dayOfMonth) {\n        super();\n        this._month = MathUtil.safeToInt(month);\n        this._day = MathUtil.safeToInt(dayOfMonth);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the month-of-year field from 1 to 12.\n     *\n     * This method returns the month as an `int` from 1 to 12.\n     * Application code is frequently clearer if the enum {@link Month}\n     * is used by calling {@link getMonth}.\n     *\n     * @return {number} the month-of-year, from 1 to 12\n     * @see #month()\n     */\n    monthValue() {\n        return this._month;\n    }\n\n    /**\n     * Gets the month-of-year field using the {@link Month} enum.\n     *\n     * This method returns the enum {@link Month} for the month.\n     * This avoids confusion as to what `int` values mean.\n     * If you need access to the primitive `int` value then the enum\n     * provides the int value (see {@link Month#getValue}).\n     *\n     * @return {Month} the month-of-year, not null\n     * @see #getMonthValue()\n     */\n    month() {\n        return Month.of(this._month);\n    }\n\n    /**\n     * Gets the day-of-month field.\n     *\n     * This method returns the primitive `int` value for the day-of-month.\n     *\n     * @return {number} the day-of-month, from 1 to 31\n     */\n    dayOfMonth() {\n        return this._day;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if the specified field is supported.\n     *\n     * This checks if this month-day can be queried for the specified field.\n     * If false, then calling the range (see {@link range}) and\n     * get (see {@link get}) methods will throw an exception.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this date-time.\n     * The supported fields are:\n     *\n     * * {@link MONTH_OF_YEAR}\n     * * {@link YEAR}\n     *\n     * All other {@link ChronoField} instances will return false.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.isSupportedBy}\n     * passing `this` as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField} field  the field to check, null returns false\n     * @return {boolean} true if the field is supported on this month-day, false if not\n     */\n    isSupported(field) {\n        if (field instanceof ChronoField) {\n            return field === ChronoField.MONTH_OF_YEAR || field === ChronoField.DAY_OF_MONTH;\n        }\n        return field != null && field.isSupportedBy(this);\n    }\n\n    /**\n     * Gets the range of valid values for the specified field.\n     *\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This month-day is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return\n     * appropriate range instances.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.rangeRefinedBy}\n     * passing `this` as the argument.\n     * Whether the range can be obtained is determined by the field.\n     *\n     * @param {TemporalField} field  the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     */\n    range(field) {\n        if (field === ChronoField.MONTH_OF_YEAR) {\n            return field.range();\n        } else if (field === ChronoField.DAY_OF_MONTH) {\n            return ValueRange.of(1, this.month().minLength(), this.month().maxLength());\n        }\n        return super.range(field);\n    }\n\n    /**\n     * Gets the value of the specified field from this month-day as an `int`.\n     *\n     * This queries this month-day for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this month-day.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field  the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    get(field) {\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    }\n\n    /**\n     * Gets the value of the specified field from this month-day as a `long`.\n     *\n     * This queries this month-day for the value for the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this month-day.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field  the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    getLong(field) {\n        requireNonNull(field, 'field');\n        if (field instanceof ChronoField) {\n            switch (field) {\n                // alignedDOW and alignedWOM not supported because they cannot be set in with()\n                case ChronoField.DAY_OF_MONTH: return this._day;\n                case ChronoField.MONTH_OF_YEAR: return this._month;\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.getFrom(this);\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if the year is valid for this month-day.\n     *\n     * This method checks whether this month and day and the input year form\n     * a valid date. This can only return false for February 29th.\n     *\n     * @param {number} year  the year to validate, an out of range value returns false\n     * @return {boolean} true if the year is valid for this month-day\n     * @see Year#isValidMonthDay(MonthDay)\n     */\n    isValidYear(year) {\n        return (this._day === 29 && this._month === 2 && Year.isLeap(year) === false) === false;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link MonthDay} with the month-of-year altered.\n     *\n     * This returns a month-day with the specified month.\n     * If the day-of-month is invalid for the specified month, the day will\n     * be adjusted to the last valid day-of-month.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} month  the month-of-year to set in the returned month-day, from 1 (January) to 12 (December)\n     * @return {MonthDay} based on this month-day with the requested month, not null\n     * @throws DateTimeException if the month-of-year value is invalid\n     */\n    withMonth(month) {\n        return this.with(Month.of(month));\n    }\n\n    /**\n    * Returns a copy of this {@link MonthDay} with the month-of-year altered.\n    *\n    * This returns a month-day with the specified month.\n    * If the day-of-month is invalid for the specified month, the day will\n    * be adjusted to the last valid day-of-month.\n    *\n    * This instance is immutable and unaffected by this method call.\n    *\n    * @param {Month} month  the month-of-year to set in the returned month-day, not null\n    * @return {MonthDay} based on this month-day with the requested month, not null\n    */\n    with(month) {\n        requireNonNull(month, 'month');\n        if (month.value() === this._month) {\n            return this;\n        }\n        const day = Math.min(this._day, month.maxLength());\n        return new MonthDay(month.value(), day);\n    }\n\n    /**\n     * Returns a copy of this {@link MonthDay} with the day-of-month altered.\n     *\n     * This returns a month-day with the specified day-of-month.\n     * If the day-of-month is invalid for the month, an exception is thrown.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} dayOfMonth  the day-of-month to set in the return month-day, from 1 to 31\n     * @return {MonthDay} based on this month-day with the requested day, not null\n     * @throws DateTimeException if the day-of-month value is invalid\n     * @throws DateTimeException if the day-of-month is invalid for the month\n     */\n    withDayOfMonth(dayOfMonth) {\n        if (dayOfMonth === this._day) {\n            return this;\n        }\n        return MonthDay.of(this._month, dayOfMonth);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Queries this month-day using the specified query.\n     *\n     * This queries this month-day using the specified query strategy object.\n     * The {@link TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom} method on the\n     * specified query passing `this` as the argument.\n     *\n     * @param {TemporalQuery} query  the query to invoke, not null\n     * @return {*} the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query (defined by the query)\n     * @throws ArithmeticException if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        requireNonNull(query, 'query');\n        requireInstance(query, TemporalQuery, 'query');\n        if (query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        }\n        return super.query(query);\n    }\n\n    /**\n     * Adjusts the specified temporal object to have this month-day.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with the month and day-of-month changed to be the same as this.\n     *\n     * The adjustment is equivalent to using {@link Temporal#with}\n     * twice, passing {@link ChronoField#MONTH_OF_YEAR} and\n     * {@link ChronoField#DAY_OF_MONTH} as the fields.\n     * If the specified temporal object does not use the ISO calendar system then\n     * a {@link DateTimeException} is thrown.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisMonthDay.adjustInto(temporal);\n     *   temporal = temporal.with(thisMonthDay);\n     * </pre>\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} temporal  the target object to be adjusted, not null\n     * @return {Temporal} the adjusted object, not null\n     * @throws DateTimeException if unable to make the adjustment\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    adjustInto(temporal) {\n        requireNonNull(temporal, 'temporal');\n        /* TODO: only IsoChronology for now\n        if (Chronology.from(temporal).equals(IsoChronology.INSTANCE) == false) {\n            throw new DateTimeException(\"Adjustment only supported on ISO date-time\");\n        }*/\n        temporal = temporal.with(ChronoField.MONTH_OF_YEAR, this._month);\n        return temporal.with(ChronoField.DAY_OF_MONTH, Math.min(temporal.range(ChronoField.DAY_OF_MONTH).maximum(), this._day));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Combines this month-day with a year to create a {@link LocalDate}.\n     *\n     * This returns a {@link LocalDate} formed from this month-day and the specified year.\n     *\n     * A month-day of February 29th will be adjusted to February 28th in the resulting\n     * date if the year is not a leap year.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} year  the year to use, from MIN_YEAR to MAX_YEAR\n     * @return {LocalDate} the local date formed from this month-day and the specified year, not null\n     * @throws DateTimeException if the year is outside the valid range of years\n     */\n    atYear(year) {\n        return LocalDate.of(year, this._month, this.isValidYear(year) ? this._day : 28);\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * Compares this month-day to another month-day.\n     *\n     * The comparison is based first on value of the month, then on the value of the day.\n     * It is \"consistent with equals\", as defined by {@link Comparable}.\n     *\n     * @param {MonthDay} other  the other month-day to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     */\n    compareTo(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, MonthDay, 'other');\n        let cmp = (this._month - other.monthValue());\n        if (cmp === 0) {\n            cmp = (this._day - other.dayOfMonth());\n        }\n        return cmp;\n    }\n\n    /**\n     * Is this month-day after the specified month-day.\n     *\n     * @param {MonthDay} other  the other month-day to compare to, not null\n     * @return {boolean} true if this is after the specified month-day\n     */\n    isAfter(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, MonthDay, 'other');\n        return this.compareTo(other) > 0;\n    }\n\n    /**\n     * Is this month-day before the specified month-day.\n     *\n     * @param {MonthDay} other  the other month-day to compare to, not null\n     * @return {boolean} true if this point is before the specified month-day\n     */\n    isBefore(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, MonthDay, 'other');\n        return this.compareTo(other) < 0;\n    }\n\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this month-day is equal to another month-day.\n     *\n     * The comparison is based on the time-line position of the month-day within a year.\n     *\n     * @param {*} obj  the object to check, null returns false\n     * @return {boolean} true if this is equal to the other month-day\n     */\n    equals(obj) {\n        if (this === obj) {\n            return true;\n        }\n        if (obj instanceof MonthDay) {\n            const other = obj;\n            return this.monthValue() === other.monthValue() && this.dayOfMonth() === other.dayOfMonth();\n        }\n        return false;\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * Outputs this month-day as a string, such as `--12-03`.\n     *\n     * The output will be in the format `--MM-dd`:\n     *\n     * @return {String} a string representation of this month-day, not null\n     */\n    toString() {\n        return `--${\n            this._month < 10 ? '0' : ''}${this._month\n        }${this._day < 10 ? '-0' : '-'}${this._day}`;\n    }\n\n    /**\n     * toJSON() use by JSON.stringify\n     * delegates to toString()\n     *\n     * @return {string}\n     */\n    toJSON() {\n        return this.toString();\n    }\n\n    /**\n     * Outputs this month-day as a string using the formatter.\n     *\n     * This month-day will be passed to the formatter\n     * print method (see {@link DateTimeFormatter#format}).\n     *\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {String} the formatted month-day string, not null\n     * @throws DateTimeException if an error occurs during printing\n     */\n    format(formatter) {\n        requireNonNull(formatter, 'formatter');\n        requireInstance(formatter, DateTimeFormatter, 'formatter');\n        return formatter.format(this);\n    }\n\n}\n\nlet PARSER;\n\nexport function _init() {\n    PARSER = new DateTimeFormatterBuilder()\n        .appendLiteral('--')\n        .appendValue(ChronoField.MONTH_OF_YEAR, 2)\n        .appendLiteral('-')\n        .appendValue(ChronoField.DAY_OF_MONTH, 2)\n        .toFormatter();\n\n    MonthDay.FROM = createTemporalQuery('MonthDay.FROM', (temporal) => {\n        return MonthDay.from(temporal);\n    });\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE.md in the root directory of this source tree)\n */\n\nimport { requireNonNull, requireInstance } from './assert';\nimport { DateTimeException, UnsupportedTemporalTypeException } from './errors';\nimport { MathUtil } from './MathUtil';\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { Clock } from './Clock';\nimport { DateTimeFormatterBuilder } from './format/DateTimeFormatterBuilder';\nimport { IsoChronology } from './chrono/IsoChronology';\nimport { LocalDate } from './LocalDate';\nimport { Month } from './Month';\nimport { SignStyle } from './format/SignStyle';\nimport { Temporal } from './temporal/Temporal';\nimport { TemporalField } from './temporal/TemporalField';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { TemporalQuery } from './temporal/TemporalQuery';\nimport { TemporalUnit } from './temporal/TemporalUnit';\nimport { createTemporalQuery } from './temporal/TemporalQuery';\nimport { ValueRange } from './temporal/ValueRange';\nimport { Year } from './Year';\nimport { ZoneId } from './ZoneId';\n\n/**\n * A year-month in the ISO-8601 calendar system, such as `2007-12`.\n *\n * {@link YearMonth} is an immutable date-time object that represents the combination\n * of a year and month. Any field that can be derived from a year and month, such as\n * quarter-of-year, can be obtained.\n *\n * This class does not store or represent a day, time or time-zone.\n * For example, the value \"October 2007\" can be stored in a {@link YearMonth}.\n *\n * The ISO-8601 calendar system is the modern civil calendar system used today\n * in most of the world. It is equivalent to the proleptic Gregorian calendar\n * system, in which today's rules for leap years are applied for all time.\n * For most applications written today, the ISO-8601 rules are entirely suitable.\n * However, any application that makes use of historical dates, and requires them\n * to be accurate will find the ISO-8601 approach unsuitable.\n *\n * ### Specification for implementors\n *\n * This class is immutable and thread-safe.\n */\nexport class YearMonth extends Temporal {\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for {@link YearMonth.now}\n     *\n     * if called with 0 argument {@link YearMonth.now0} is executed,\n     *\n     * if called with 1 argument and first argument is an instance of ZoneId, then {@link YearMonth.nowZoneId} is executed,\n     *\n     * otherwise {@link YearMonth.nowClock} is executed\n     *\n     * @param {?(ZoneId|Clock)} zoneIdOrClock\n     * @returns {YearMonth}\n     */\n    static now(zoneIdOrClock) {\n        if (arguments.length === 0) {\n            return YearMonth.now0();\n        } else if (arguments.length === 1 && zoneIdOrClock instanceof ZoneId) {\n            return YearMonth.nowZoneId(zoneIdOrClock);\n        } else {\n            return YearMonth.nowClock(zoneIdOrClock);\n        }\n    }\n\n    /**\n     * Obtains the current year-month from the system clock in the default time-zone.\n     *\n     * This will query the system clock (see {@link Clock#systemDefaultZone}) in the default\n     * time-zone to obtain the current year-month.\n     * The zone and offset will be set based on the time-zone in the clock.\n     *\n     * Using this method will prevent the ability to use an alternate clock for testing\n     * because the clock is hard-coded.\n     *\n     * @return {YearMonth} the current year-month using the system clock and default time-zone, not null\n     */\n    static now0() {\n        return YearMonth.nowClock(Clock.systemDefaultZone());\n    }\n\n    /**\n     * Obtains the current year-month from the system clock in the specified time-zone.\n     *\n     * This will query the system clock (see {@link Clock#system}) to obtain the current year-month.\n     * Specifying the time-zone avoids dependence on the default time-zone.\n     *\n     * Using this method will prevent the ability to use an alternate clock for testing\n     * because the clock is hard-coded.\n     *\n     * @param {ZoneId} zone  the zone ID to use, not null\n     * @return {YearMonth} the current year-month using the system clock, not null\n     */\n    static nowZoneId(zone) {\n        return YearMonth.nowClock(Clock.system(zone));\n    }\n\n    /**\n     * Obtains the current year-month from the specified clock.\n     *\n     * This will query the specified clock to obtain the current year-month.\n     * Using this method allows the use of an alternate clock for testing.\n     * The alternate clock may be introduced using dependency injection.\n     *\n     * @param {Clock} clock  the clock to use, not null\n     * @return {YearMonth} the current year-month, not null\n     */\n    static nowClock(clock) {\n        const now = LocalDate.now(clock);\n        return YearMonth.of(now.year(), now.month());\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for {@link YearMonth.of}\n     *\n     * if called with 2 argument and first argument is an instance of Month, then {@link YearMonth.ofNumberMonth} is executed,\n     *\n     * otherwise {@link YearMonth.ofNumberNumber} is executed\n     *\n     * @param {!number} year\n     * @param {!(Month|number)} monthOrNumber\n     * @returns {YearMonth}\n     */\n    static of(year, monthOrNumber) {\n        if (arguments.length === 2 && monthOrNumber instanceof Month) {\n            return YearMonth.ofNumberMonth(year, monthOrNumber);\n        } else {\n            return YearMonth.ofNumberNumber(year, monthOrNumber);\n        }\n    }\n\n    /**\n     * Obtains an instance of {@link YearMonth} from a year and month.\n     *\n     * @param {number} year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param {Month} month  the month-of-year to represent, not null\n     * @return {YearMonth} the year-month, not null\n     * @throws DateTimeException if the year value is invalid\n     */\n    static ofNumberMonth(year, month) {\n        requireNonNull(month, 'month');\n        requireInstance(month, Month, 'month');\n        return YearMonth.ofNumberNumber(year, month.value());\n    }\n\n    /**\n     * Obtains an instance of {@link YearMonth} from a year and month.\n     *\n     * @param {number} year  the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param {number} month  the month-of-year to represent, from 1 (January) to 12 (December)\n     * @return {YearMonth} the year-month, not null\n     * @throws DateTimeException if either field value is invalid\n     */\n    static ofNumberNumber(year, month) {\n        requireNonNull(year, 'year');\n        requireNonNull(month, 'month');\n        ChronoField.YEAR.checkValidValue(year);\n        ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n        return new YearMonth(year, month);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link YearMonth} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link YearMonth}.\n     *\n     * The conversion extracts the {@link ChronoField#YEAR} and\n     * {@link ChronoField#MONTH_OF_YEAR} fields.\n     * The extraction is only permitted if the temporal object has an ISO\n     * chronology, or can be converted to a {@link LocalDate}.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used in queries via method reference, {@link YearMonth::from}.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to convert, not null\n     * @return {YearMonth} the year-month, not null\n     * @throws DateTimeException if unable to convert to a {@link YearMonth}\n     */\n    static from(temporal) {\n        requireNonNull(temporal, 'temporal');\n        if (temporal instanceof YearMonth) {\n            return temporal;\n        }\n        try {\n            /* TODO: only IsoChronology for now\n            if (IsoChronology.INSTANCE.equals(Chronology.from(temporal)) == false) {\n                temporal = LocalDate.from(temporal);\n            }*/\n            return YearMonth.of(temporal.get(ChronoField.YEAR), temporal.get(ChronoField.MONTH_OF_YEAR));\n        } catch (ex) {\n            throw new DateTimeException(`Unable to obtain YearMonth from TemporalAccessor: ${ \n                temporal}, type ${temporal && temporal.constructor != null ? temporal.constructor.name : ''}`);\n        }\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for {@link YearMonth.parse}\n     *\n     * if called with 2 argument and first argument is an instance of Month, then {@link YearMonth.parseString} is executed,\n     *\n     * otherwise {@link YearMonth.parseStringFormatter} is executed\n     *\n     * @param {!(String)} text\n     * @param {?DateTimeFormatter} formatter\n     * @returns {YearMonth}\n     */\n    static parse(text, formatter) {\n        if (arguments.length === 1) {\n            return YearMonth.parseString(text);\n        } else {\n            return YearMonth.parseStringFormatter(text, formatter);\n        }\n    }\n\n    /**\n     * Obtains an instance of {@link YearMonth} from a text string such as `2007-12`.\n     *\n     * The string must represent a valid year-month.\n     * The format must be {@link yyyy-MM}.\n     * Years outside the range 0000 to 9999 must be prefixed by the plus or minus symbol.\n     *\n     * @param {String} text  the text to parse such as \"2007-12\", not null\n     * @return {YearMonth} the parsed year-month, not null\n     * @throws DateTimeParseException if the text cannot be parsed\n     */\n    static parseString(text) {\n        return YearMonth.parseStringFormatter(text, PARSER);\n    }\n\n    /**\n     * Obtains an instance of {@link YearMonth} from a text string using a specific formatter.\n     *\n     * The text is parsed using the formatter, returning a year-month.\n     *\n     * @param {String} text  the text to parse, not null\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return the parsed year-month, not null\n     * @throws DateTimeParseException if the text cannot be parsed\n     */\n    static parseStringFormatter(text, formatter) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.parse(text, YearMonth.FROM);\n    }\n\n\n    /**\n     * Constructor.\n     *\n     * @param {number} year  the year to represent, validated from MIN_YEAR to MAX_YEAR\n     * @param {number} month  the month-of-year to represent, validated from 1 (January) to 12 (December)\n     * @private\n     */\n    constructor(year, month) {\n        super();\n        this._year = MathUtil.safeToInt(year);\n        this._month = MathUtil.safeToInt(month);\n    }\n\n    /**\n     * function overloading for {@link YearMonth.isSupported}\n     *\n     * if called with 1 argument and first argument is an instance of TemporalField, then {@link YearMonth.isSupportedField} is executed,\n     *\n     * otherwise {@link YearMonth.isSupportedUnit} is executed\n     *\n     * @param {!(TemporalField|ChronoUnit)} fieldOrUnit\n     * @returns {boolean}\n     */\n    isSupported(fieldOrUnit) {\n        if (arguments.length === 1 && fieldOrUnit instanceof TemporalField) {\n            return this.isSupportedField(fieldOrUnit);\n        } else {\n            return this.isSupportedUnit(fieldOrUnit);\n        }\n    }\n\n    /**\n     * Checks if the specified field is supported.\n     *\n     * This checks if this year-month can be queried for the specified field.\n     * If false, then calling {@link range} and {@link get} will throw an exception.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this date-time.\n     * The supported fields are:\n     *\n     * * {@link MONTH_OF_YEAR}\n     * * {@link EPOCH_MONTH}\n     * * {@link YEAR_OF_ERA}\n     * * {@link YEAR}\n     * * {@link ERA}\n     *\n     * All other {@link ChronoField} instances will return false.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.isSupportedBy}\n     * passing `this` as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField} field  the field to check, null returns false\n     * @return {boolean} true if the field is supported on this year-month, false if not\n     */\n    isSupportedField(field) {\n        if (field instanceof ChronoField) {\n            return field === ChronoField.YEAR || field === ChronoField.MONTH_OF_YEAR ||\n                    field === ChronoField.PROLEPTIC_MONTH || field === ChronoField.YEAR_OF_ERA || field === ChronoField.ERA;\n        }\n        return field != null && field.isSupportedBy(this);\n    }\n\n    isSupportedUnit(unit) {\n        if (unit instanceof ChronoUnit) {\n            return unit === ChronoUnit.MONTHS || unit === ChronoUnit.YEARS || unit === ChronoUnit.DECADES || unit === ChronoUnit.CENTURIES || unit === ChronoUnit.MILLENNIA || unit === ChronoUnit.ERAS;\n        }\n        return unit != null && unit.isSupportedBy(this);\n    }\n\n    /**\n     * Gets the range of valid values for the specified field.\n     *\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This year-month is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return\n     * appropriate range instances.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.rangeRefinedBy}\n     * passing `this` as the argument.\n     * Whether the range can be obtained is determined by the field.\n     *\n     * @param {TemporalField} field  the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     */\n    range(field) {\n        if (field === ChronoField.YEAR_OF_ERA) {\n            return (this.year() <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE));\n        }\n        return super.range(field);\n    }\n\n    /**\n     * Gets the value of the specified field from this year-month as an `int`.\n     *\n     * This queries this year-month for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this year-month, except {@link EPOCH_MONTH} which is too\n     * large to fit in an `int` and throw a {@link DateTimeException}.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field  the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    get(field) {\n        requireNonNull(field, 'field');\n        requireInstance(field, TemporalField, 'field');\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    }\n\n    /**\n     * Gets the value of the specified field from this year-month as a `long`.\n     *\n     * This queries this year-month for the value for the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this year-month.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field  the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    getLong(field) {\n        requireNonNull(field, 'field');\n        requireInstance(field, TemporalField, 'field');\n        if (field instanceof ChronoField) {\n            switch (field) {\n                case ChronoField.MONTH_OF_YEAR: return this._month;\n                case ChronoField.PROLEPTIC_MONTH: return this._getProlepticMonth();\n                case ChronoField.YEAR_OF_ERA: return (this._year < 1 ? 1 - this._year : this._year);\n                case ChronoField.YEAR: return this._year;\n                case ChronoField.ERA: return (this._year < 1 ? 0 : 1);\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.getFrom(this);\n    }\n\n    _getProlepticMonth() {\n        return MathUtil.safeAdd(MathUtil.safeMultiply(this._year, 12), (this._month - 1));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the year field.\n     *\n     * This method returns the primitive `int` value for the year.\n     *\n     * The year returned by this method is proleptic as per {@link get}.\n     *\n     * @return {number} the year, from MIN_YEAR to MAX_YEAR\n     */\n    year() {\n        return this._year;\n    }\n\n    /**\n     * Gets the month-of-year field from 1 to 12.\n     *\n     * This method returns the month as an `int` from 1 to 12.\n     * Application code is frequently clearer if the enum {@link Month}\n     * is used by calling {@link getMonth}.\n     *\n     * @return {number} the month-of-year, from 1 to 12\n     * @see #getMonth()\n     */\n    monthValue() {\n        return this._month;\n    }\n\n    /**\n     * Gets the month-of-year field using the {@link Month} enum.\n     *\n     * This method returns the enum {@link Month} for the month.\n     * This avoids confusion as to what `int` values mean.\n     * If you need access to the primitive `int` value, use {@link Month#getValue}.\n     *\n     * @return {Month} the month-of-year, not null\n     */\n    month() {\n        return Month.of(this._month);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if the year is a leap year, according to the ISO proleptic\n     * calendar system rules.\n     *\n     * This method applies the current rules for leap years across the whole time-line.\n     * In general, a year is a leap year if it is divisible by four without\n     * remainder. However, years divisible by 100, are not leap years, with\n     * the exception of years divisible by 400 which are.\n     *\n     * For example, 1904 is a leap year it is divisible by 4.\n     * 1900 was not a leap year as it is divisible by 100, however 2000 was a\n     * leap year as it is divisible by 400.\n     *\n     * The calculation is proleptic - applying the same rules into the far future and far past.\n     * This is historically inaccurate, but is correct for the ISO-8601 standard.\n     *\n     * @return {boolean} true if the year is leap, false otherwise\n     */\n    isLeapYear() {\n        return IsoChronology.isLeapYear(this._year);\n    }\n\n    /**\n     * Checks if the day-of-month is valid for this year-month.\n     *\n     * This method checks whether this year and month and the input day form\n     * a valid date.\n     *\n     * @param {number} dayOfMonth  the day-of-month to validate, from 1 to 31, invalid value returns false\n     * @return {boolean} true if the day is valid for this year-month\n     */\n    isValidDay(dayOfMonth) {\n        return dayOfMonth >= 1 && dayOfMonth <= this.lengthOfMonth();\n    }\n\n    /**\n     * Returns the length of the month, taking account of the year.\n     *\n     * This returns the length of the month in days.\n     * For example, a date in January would return 31.\n     *\n     * @return {number} the length of the month in days, from 28 to 31\n     */\n    lengthOfMonth() {\n        return this.month().length(this.isLeapYear());\n    }\n\n    /**\n     * Returns the length of the year.\n     *\n     * This returns the length of the year in days, either 365 or 366.\n     *\n     * @return {number} 366 if the year is leap, 365 otherwise\n     */\n    lengthOfYear() {\n        return (this.isLeapYear() ? 366 : 365);\n    }\n\n    /**\n     * function overloading for {@link YearMonth.with}\n     *\n     * if called with 1 argument, then {@link YearMonth.withAdjuster} is executed,\n     * otherwise {@link YearMonth.withFieldValue} is executed.\n     *\n     * @param {!(TemporalAdjuster|TemporalField)} adjusterOrField\n     * @param {?number} value nullable only of first argument is an instance of TemporalAdjuster\n     * @returns {YearMonth}\n     */\n    with(adjusterOrField, value) {\n        if (arguments.length === 1) {\n            return this._withAdjuster(adjusterOrField);\n        } else {\n            return this._withField(adjusterOrField, value);\n        }\n    }\n\n    /**\n     * Returns a copy of this year-month with the specified field set to a new value.\n     *\n     * This returns a new {@link YearMonth}, based on this one, with the value\n     * for the specified field changed.\n     * This can be used to change any supported field, such as the year or month.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     *\n     * * {@link MONTH_OF_YEAR} -\n     *   Returns a {@link YearMonth} with the specified month-of-year.\n     *   The year will be unchanged.\n     * * {@link PROLEPTIC_MONTH} -\n     *   Returns a {@link YearMonth} with the specified proleptic-month.\n     *   This completely replaces the year and month of this object.\n     * * {@link YEAR_OF_ERA} -\n     *   Returns a {@link YearMonth} with the specified year-of-era\n     *   The month and era will be unchanged.\n     * * {@link YEAR} -\n     *   Returns a {@link YearMonth} with the specified year.\n     *   The month will be unchanged.\n     * * {@link ERA} -\n     *   Returns a {@link YearMonth} with the specified era.\n     *   The month and year-of-era will be unchanged.\n     *\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@link DateTimeException} will be thrown.\n     *\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.adjustInto}\n     * passing `this` as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalField} field  the field to set in the result, not null\n     * @param {number} newValue  the new value of the field in the result\n     * @return a {@link YearMonth} based on `this` with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    _withField(field, newValue) {\n        requireNonNull(field, 'field');\n        requireInstance(field, TemporalField, 'field');\n        if (field instanceof ChronoField) {\n            const f = field;\n            f.checkValidValue(newValue);\n            switch (f) {\n                case ChronoField.MONTH_OF_YEAR: return this.withMonth(newValue);\n                case ChronoField.PROLEPTIC_MONTH: return this.plusMonths(newValue - this.getLong(ChronoField.PROLEPTIC_MONTH));\n                case ChronoField.YEAR_OF_ERA: return this.withYear((this._year < 1 ? 1 - newValue : newValue));\n                case ChronoField.YEAR: return this.withYear(newValue);\n                case ChronoField.ERA: return (this.getLong(ChronoField.ERA) === newValue ? this : this.withYear(1 - this._year));\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.adjustInto(this, newValue);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link YearMonth} with the year altered.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} year  the year to set in the returned year-month, from MIN_YEAR to MAX_YEAR\n     * @return {YearMonth} based on this year-month with the requested year, not null\n     * @throws DateTimeException if the year value is invalid\n     */\n    withYear(year) {\n        ChronoField.YEAR.checkValidValue(year);\n        return new YearMonth(year, this._month);\n    }\n\n    /**\n     * Returns a copy of this {@link YearMonth} with the month-of-year altered.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} month  the month-of-year to set in the returned year-month, from 1 (January) to 12 (December)\n     * @return {YearMonth} based on this year-month with the requested month, not null\n     * @throws DateTimeException if the month-of-year value is invalid\n     */\n    withMonth(month) {\n        ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n        return new YearMonth(this._year, month);\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * @param {number} amountToAdd\n     * @param {TemporalUnit} unit\n     * @return {YearMonth} based on this year-month with the addition made, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    _plusUnit(amountToAdd, unit) {\n        requireNonNull(unit, 'unit');\n        requireInstance(unit, TemporalUnit, 'unit');\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.MONTHS: return this.plusMonths(amountToAdd);\n                case ChronoUnit.YEARS: return this.plusYears(amountToAdd);\n                case ChronoUnit.DECADES: return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n                case ChronoUnit.CENTURIES: return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n                case ChronoUnit.MILLENNIA: return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n                case ChronoUnit.ERAS: return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.addTo(this, amountToAdd);\n    }\n\n    /**\n     * Returns a copy of this year-month with the specified period in years added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} yearsToAdd  the years to add, may be negative\n     * @return {YearMonth} based on this year-month with the years added, not null\n     * @throws DateTimeException if the result exceeds the supported range\n     */\n    plusYears(yearsToAdd) {\n        if (yearsToAdd === 0) {\n            return this;\n        }\n        const newYear = ChronoField.YEAR.checkValidIntValue(this._year + yearsToAdd);  // safe overflow\n        return this.withYear(newYear);\n    }\n\n    /**\n     * Returns a copy of this year-month with the specified period in months added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} monthsToAdd  the months to add, may be negative\n     * @return {YearMonth} based on this year-month with the months added, not null\n     * @throws DateTimeException if the result exceeds the supported range\n     */\n    plusMonths(monthsToAdd) {\n        if (monthsToAdd === 0) {\n            return this;\n        }\n        const monthCount = (this._year * 12) + (this._month - 1);\n        const calcMonths = monthCount + monthsToAdd;\n        const newYear = ChronoField.YEAR.checkValidIntValue(MathUtil.floorDiv(calcMonths, 12));\n        const newMonth = MathUtil.floorMod(calcMonths, 12) + 1;\n        return new YearMonth(newYear, newMonth);\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a copy of this year-month with the specified period in years subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} yearsToSubtract  the years to subtract, may be negative\n     * @return {YearMonth} based on this year-month with the years subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported range\n     */\n    minusYears(yearsToSubtract) {\n        return (yearsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusYears(MathUtil.MIN_SAFE_INTEGER).plusYears(1) : this.plusYears(-yearsToSubtract));\n    }\n\n    /**\n     * Returns a copy of this year-month with the specified period in months subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} monthsToSubtract  the months to subtract, may be negative\n     * @return {YearMonth} based on this year-month with the months subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported range\n     */\n    minusMonths(monthsToSubtract) {\n        return (monthsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusMonths(Math.MAX_SAFE_INTEGER).plusMonths(1) : this.plusMonths(-monthsToSubtract));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Queries this year-month using the specified query.\n     *\n     * This queries this year-month using the specified query strategy object.\n     * The {@link TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom} method on the\n     * specified query passing `this` as the argument.\n     *\n     * @param {TemporalQuery} query  the query to invoke, not null\n     * @return {*} the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query (defined by the query)\n     * @throws ArithmeticException if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        requireNonNull(query, 'query');\n        requireInstance(query, TemporalQuery, 'query');\n        if (query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        } else if (query === TemporalQueries.precision()) {\n            return ChronoUnit.MONTHS;\n        } else if (query === TemporalQueries.localDate() || query === TemporalQueries.localTime() ||\n                query === TemporalQueries.zone() || query === TemporalQueries.zoneId() || query === TemporalQueries.offset()) {\n            return null;\n        }\n        return super.query(query);\n    }\n\n    /**\n     * Adjusts the specified temporal object to have this year-month.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with the year and month changed to be the same as this.\n     *\n     * The adjustment is equivalent to using {@link Temporal#with}\n     * passing {@link ChronoField#PROLEPTIC_MONTH} as the field.\n     * If the specified temporal object does not use the ISO calendar system then\n     * a {@link DateTimeException} is thrown.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisYearMonth.adjustInto(temporal);\n     *   temporal = temporal.with(thisYearMonth);\n     * </pre>\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} temporal  the target object to be adjusted, not null\n     * @return {Temporal} the adjusted object, not null\n     * @throws DateTimeException if unable to make the adjustment\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    adjustInto(temporal) {\n        requireNonNull(temporal, 'temporal');\n        requireInstance(temporal, Temporal, 'temporal');\n        /* TODO: only IsoChronology for now\n        if (Chronology.from(temporal).equals(IsoChronology.INSTANCE) == false) {\n            throw new DateTimeException(\"Adjustment only supported on ISO date-time\");\n        }*/\n        return temporal.with(ChronoField.PROLEPTIC_MONTH, this._getProlepticMonth());\n    }\n\n    /**\n     * Calculates the period between this year-month and another year-month in\n     * terms of the specified unit.\n     *\n     * This calculates the period between two year-months in terms of a single unit.\n     * The start and end points are `this` and the specified year-month.\n     * The result will be negative if the end is before the start.\n     * The {@link Temporal} passed to this method must be a {@link YearMonth}.\n     * For example, the period in years between two year-months can be calculated\n     * using {@link startYearMonth.until}.\n     *\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two year-months.\n     * For example, the period in decades between 2012-06 and 2032-05\n     * will only be one decade as it is one month short of two decades.\n     *\n     * This method operates in association with {@link TemporalUnit#between}.\n     * The result of this method is a `long` representing the amount of\n     * the specified unit. By contrast, the result of {@link between} is an\n     * object that can be used directly in addition/subtraction:\n     * <pre>\n     *   long period = start.until(end, YEARS);   // this method\n     *   dateTime.plus(YEARS.between(start, end));      // use in plus/minus\n     * </pre>\n     *\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@link MONTHS}, {@link YEARS}, {@link DECADES},\n     * {@link CENTURIES}, {@link MILLENNIA} and {@link ERAS} are supported.\n     * Other {@link ChronoUnit} values will throw an exception.\n     *\n     * If the unit is not a {@link ChronoUnit}, then the result of this method\n     * is obtained by invoking {@link TemporalUnit.between}\n     * passing `this` as the first argument and the input temporal as\n     * the second argument.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} endExclusive  the end year-month, which is converted to a {@link YearMonth}, not null\n     * @param {TemporalUnit} unit  the unit to measure the period in, not null\n     * @return {number} the amount of the period between this year-month and the end year-month\n     * @throws DateTimeException if the period cannot be calculated\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    until(endExclusive, unit) {\n        requireNonNull(endExclusive, 'endExclusive');\n        requireNonNull(unit, 'unit');\n        requireInstance(endExclusive, Temporal, 'endExclusive');\n        requireInstance(unit, TemporalUnit, 'unit');\n\n        const end = YearMonth.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            const monthsUntil = end._getProlepticMonth() - this._getProlepticMonth();  // no overflow\n            switch (unit) {\n                case ChronoUnit.MONTHS: return monthsUntil;\n                case ChronoUnit.YEARS: return MathUtil.intDiv(monthsUntil, 12);\n                case ChronoUnit.DECADES: return MathUtil.intDiv(monthsUntil, 120);\n                case ChronoUnit.CENTURIES: return MathUtil.intDiv(monthsUntil, 1200);\n                case ChronoUnit.MILLENNIA: return MathUtil.intDiv(monthsUntil, 12000);\n                case ChronoUnit.ERAS: return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.between(this, end);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Combines this year-month with a day-of-month to create a {@link LocalDate}.\n     *\n     * This returns a {@link LocalDate} formed from this year-month and the specified day-of-month.\n     *\n     * The day-of-month value must be valid for the year-month.\n     *\n     * This method can be used as part of a chain to produce a date:\n     * <pre>\n     *  LocalDate date = year.atMonth(month).atDay(day);\n     * </pre>\n     *\n     * @param {number} dayOfMonth  the day-of-month to use, from 1 to 31\n     * @return {LocalDate} the date formed from this year-month and the specified day, not null\n     * @throws DateTimeException if the day is invalid for the year-month\n     * @see #isValidDay(int)\n     */\n    atDay(dayOfMonth) {\n        requireNonNull(dayOfMonth, 'dayOfMonth');\n        return LocalDate.of(this._year, this._month, dayOfMonth);\n    }\n\n    /**\n     * Returns a {@link LocalDate} at the end of the month.\n     *\n     * This returns a {@link LocalDate} based on this year-month.\n     * The day-of-month is set to the last valid day of the month, taking\n     * into account leap years.\n     *\n     * This method can be used as part of a chain to produce a date:\n     * <pre>\n     *  LocalDate date = year.atMonth(month).atEndOfMonth();\n     * </pre>\n     *\n     * @return {LocalDate} the last valid date of this year-month, not null\n     */\n    atEndOfMonth() {\n        return LocalDate.of(this._year, this._month, this.lengthOfMonth());\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares this year-month to another year-month.\n     *\n     * The comparison is based first on the value of the year, then on the value of the month.\n     * It is \"consistent with equals\", as defined by {@link Comparable}.\n     *\n     * @param {YearMonth} other  the other year-month to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     */\n    compareTo(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, YearMonth, 'other');\n        let cmp = (this._year - other.year());\n        if (cmp === 0) {\n            cmp = (this._month - other.monthValue());\n        }\n        return cmp;\n    }\n\n    /**\n     * Is this year-month after the specified year-month.\n     *\n     * @param {YearMonth} other  the other year-month to compare to, not null\n     * @return {boolean} true if this is after the specified year-month\n     */\n    isAfter(other) {\n        return this.compareTo(other) > 0;\n    }\n\n    /**\n     * Is this year-month before the specified year-month.\n     *\n     * @param {YearMonth} other  the other year-month to compare to, not null\n     * @return {boolean} true if this point is before the specified year-month\n     */\n    isBefore(other) {\n        return this.compareTo(other) < 0;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this year-month is equal to another year-month.\n     *\n     * The comparison is based on the time-line position of the year-months.\n     *\n     * @param {*} obj  the object to check, null returns false\n     * @return {boolean} true if this is equal to the other year-month\n     */\n    equals(obj) {\n        if (this === obj) {\n            return true;\n        }\n        if (obj instanceof YearMonth) {\n            const other = obj;\n            return this.year() === other.year() && this.monthValue() === other.monthValue();\n        }\n        return false;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Outputs this year-month as a string, such as `2007-12`.\n     *\n     * The output will be in the format {@link yyyy-MM}:\n     *\n     * @return {String} a string representation of this year-month, not null\n     */\n    toString() {\n        return PARSER.format(this);\n    }\n\n    /**\n     * toJSON() use by JSON.stringify\n     * delegates to toString()\n     *\n     * @return {string}\n     */\n    toJSON() {\n        return this.toString();\n    }\n\n    /**\n     * Outputs this year-month as a string using the formatter.\n     *\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {String} the formatted year-month string, not null\n     * @throws DateTimeException if an error occurs during printing\n     */\n    format(formatter) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.format(this);\n    }\n\n}\n\nlet PARSER;\n\nexport function _init() {\n\n    PARSER = new DateTimeFormatterBuilder()\n        .appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD)\n        .appendLiteral('-')\n        .appendValue(ChronoField.MONTH_OF_YEAR, 2)\n        .toFormatter();\n\n    YearMonth.FROM = createTemporalQuery('YearMonth.FROM', (temporal) => {\n        return YearMonth.from(temporal);\n    });\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { DateTimeException, UnsupportedTemporalTypeException } from './errors';\nimport { requireNonNull, requireInstance } from './assert';\nimport { MathUtil } from './MathUtil';\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { Clock } from './Clock';\nimport { DateTimeFormatter } from './format/DateTimeFormatter';\nimport { DateTimeFormatterBuilder } from './format/DateTimeFormatterBuilder';\nimport { IsoChronology } from './chrono/IsoChronology';\nimport { LocalDate } from './LocalDate';\nimport { Month } from './Month';\nimport { MonthDay } from './MonthDay';\nimport { SignStyle } from './format/SignStyle';\nimport { Temporal } from './temporal/Temporal';\nimport { TemporalAccessor } from './temporal/TemporalAccessor';\nimport { TemporalField } from './temporal/TemporalField';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { TemporalQuery, createTemporalQuery } from './temporal/TemporalQuery';\nimport { TemporalUnit } from './temporal/TemporalUnit';\nimport { YearConstants } from './YearConstants';\nimport { YearMonth } from './YearMonth';\nimport { ZoneId } from './ZoneId';\n\n\n/**\n * A year in the ISO-8601 calendar system, such as `2007`.\n *\n * {@link Year} is an immutable date-time object that represents a year.\n * Any field that can be derived from a year can be obtained.\n *\n * **Note that years in the ISO chronology only align with years in the\n * Gregorian-Julian system for modern years. Parts of Russia did not switch to the\n * modern Gregorian/ISO rules until 1920.\n * As such, historical years must be treated with caution.**\n *\n * This class does not store or represent a month, day, time or time-zone.\n * For example, the value \"2007\" can be stored in a {@link Year}.\n *\n * Years represented by this class follow the ISO-8601 standard and use\n * the proleptic numbering system. Year 1 is preceded by year 0, then by year -1.\n *\n * The ISO-8601 calendar system is the modern civil calendar system used today\n * in most of the world. It is equivalent to the proleptic Gregorian calendar\n * system, in which today's rules for leap years are applied for all time.\n * For most applications written today, the ISO-8601 rules are entirely suitable.\n * However, any application that makes use of historical dates, and requires them\n * to be accurate will find the ISO-8601 approach unsuitable.\n *\n * ### Static properties of Class {@link LocalDate}\n *\n * Year.MIN_VALUE = -999.999;\n *\n * The minimum supported year. Theoretically the minimum could be -28.542.4812 years in javascript.\n * approx LocalDateTime.ofEpochSecond(Number.MIN_SAFE_INTEGER, 0, ZoneOffset.UTC).year()\n *\n * Year.MAX_VALUE = 999.999;\n *\n * The maximum supported year. Theoretically the maximum could be 285.428.751 years in javascript.\n * approx LocalDateTime.ofEpochSecond(Number.MAX_SAFE_INTEGER, 0, ZoneOffset.UTC).year()\n *\n */\nexport class Year extends Temporal {\n\n    /**\n     *\n     * @param {number} value\n     * @private\n     */\n    constructor(value) {\n        super();\n        this._year = MathUtil.safeToInt(value);\n    }\n\n    /**\n     *\n     * @return {number} gets the value\n     */\n    value() {\n        return this._year;\n    }\n\n    /**\n     * function overloading for {@link Year.now}\n     *\n     * if called without arguments, then {@link Year.now0} is executed.\n\n     * if called with 1 arguments and first argument is an instance of ZoneId, then {@link Year.nowZoneId} is executed.\n     *\n     * Otherwise {@link Year.nowClock} is executed.\n     *\n     * @param {!(ZoneId|Clock)} zoneIdOrClock\n     * @returns {Year}\n     */\n    static now(zoneIdOrClock = undefined) {\n        if (zoneIdOrClock === undefined) {\n            return Year.now0();\n        } else if (zoneIdOrClock instanceof ZoneId) {\n            return Year.nowZoneId(zoneIdOrClock);\n        } else {\n            return Year.nowClock(zoneIdOrClock);\n        }\n    }\n\n    /**\n     * Obtains the current year from the system clock in the default time-zone.\n     *\n     * This will query the system clock (see {@link Clock#systemDefaultZone}) in the default\n     * time-zone to obtain the current year.\n     *\n     * Using this method will prevent the ability to use an alternate clock for testing\n     * because the clock is hard-coded.\n     *\n     * @return {Year} the current year using the system clock and default time-zone, not null\n     */\n    static now0() {\n        return Year.nowClock(Clock.systemDefaultZone());\n    }\n\n    /**\n     * Obtains the current year from the system clock in the specified time-zone.\n     *\n     * This will query the system clock (see {@link Clock#system}) to obtain the current year.\n     * Specifying the time-zone avoids dependence on the default time-zone.\n     *\n     * Using this method will prevent the ability to use an alternate clock for testing\n     * because the clock is hard-coded.\n     *\n     * @param {ZoneId} zone  the zone ID to use, not null\n     * @return {Year} the current year using the system clock, not null\n     */\n    static nowZoneId(zone) {\n        requireNonNull(zone, 'zone');\n        requireInstance(zone, ZoneId, 'zone');\n        return Year.nowClock(Clock.system(zone));\n    }\n\n    /**\n     * Obtains the current year from the specified clock.\n     *\n     * This will query the specified clock to obtain the current year.\n     * Using this method allows the use of an alternate clock for testing.\n     * The alternate clock may be introduced using dependency injection.\n     *\n     * @param {Clock} clock  the clock to use, not null\n     * @return {Year} the current year, not null\n     */\n    static nowClock(clock) {\n        requireNonNull(clock, 'clock');\n        requireInstance(clock, Clock, 'clock');\n        const now = LocalDate.now(clock);  // called once\n        return Year.of(now.year());\n    }\n    /**\n     * Obtains an instance of {@link Year}.\n     *\n     * This method accepts a year value from the proleptic ISO calendar system.\n     *\n     * * The year 2AD/CE is represented by 2.\n     * * The year 1AD/CE is represented by 1.\n     * * The year 1BC/BCE is represented by 0.\n     * * The year 2BC/BCE is represented by -1.\n     *\n     * @param {Number} isoYear  the ISO proleptic year to represent, from {@link MIN_VALUE} to {@link MAX_VALUE}\n     * @return {Year} the year, not null\n     * @throws DateTimeException if the field is invalid\n     */\n    static of(isoYear) {\n        requireNonNull(isoYear, 'isoYear');\n        ChronoField.YEAR.checkValidValue(isoYear);\n        return new Year(isoYear);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link Year} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link Year}.\n     *\n     * The conversion extracts the {@link ChronoField#YEAR} field.\n     * The extraction is only permitted if the temporal object has an ISO\n     * chronology, or can be converted to a {@link LocalDate}.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used in queries via method reference, {@link Year::from}.\n     *\n     * @param {TemporalAccessor} temporal  the temporal object to convert, not null\n     * @return {Year} the year, not null\n     * @throws DateTimeException if unable to convert to a {@link Year}\n     */\n    static from(temporal) {\n        requireNonNull(temporal, 'temporal');\n        requireInstance(temporal, TemporalAccessor, 'temporal');\n        if (temporal instanceof Year) {\n            return temporal;\n        }\n        try {\n            /* TODO: we support only ISO for now\n            if (IsoChronology.INSTANCE.equals(Chronology.from(temporal)) == false) {\n                temporal = LocalDate.from(temporal);\n            }*/\n            return Year.of(temporal.get(ChronoField.YEAR));\n        } catch (ex) {\n            throw new DateTimeException(`Unable to obtain Year from TemporalAccessor: ${ \n                temporal}, type ${temporal && temporal.constructor != null ? temporal.constructor.name : ''}`);\n        }\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for {@link Year.parse}\n     *\n     * if called with 1 argument, then {@link Year.parseText} is executed.\n     *\n     * Otherwise {@link Year.parseTextFormatter} is executed.\n     *\n     * @param {!(String)} text\n     * @param {?DateTimeFormatter} formatter\n     * @returns {Year}\n     */\n    static parse(text, formatter) {\n        if (arguments.length <= 1) {\n            return Year.parseText(text);\n        } else {\n            return Year.parseTextFormatter(text, formatter);\n        }\n    }\n\n    /**\n     * Obtains an instance of {@link Year} from a text string such as `2007`.\n     *\n     * The string must represent a valid year.\n     * Years outside the range 0000 to 9999 must be prefixed by the plus or minus symbol.\n     *\n     * @param {String} text  the text to parse such as \"2007\", not null\n     * @return {Year} the parsed year, not null\n     * @throws DateTimeParseException if the text cannot be parsed\n     */\n    static parseText(text) {\n        requireNonNull(text, 'text');\n        return Year.parse(text, PARSER);\n    }\n\n    /**\n     * Obtains an instance of {@link Year} from a text string using a specific formatter.\n     *\n     * The text is parsed using the formatter, returning a year.\n     *\n     * @param {String} text  the text to parse, not null\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {Year} the parsed year, not null\n     * @throws DateTimeParseException if the text cannot be parsed\n     */\n    static parseTextFormatter(text, formatter = PARSER) {\n        requireNonNull(text, 'text');\n        requireNonNull(formatter, 'formatter');\n        requireInstance(formatter, DateTimeFormatter, 'formatter');\n        return formatter.parse(text, Year.FROM);\n    }\n\n    //-------------------------------------------------------------------------\n    /**\n     * Checks if the year is a leap year, according to the ISO proleptic\n     * calendar system rules.\n     *\n     * This method applies the current rules for leap years across the whole time-line.\n     * In general, a year is a leap year if it is divisible by four without\n     * remainder. However, years divisible by 100, are not leap years, with\n     * the exception of years divisible by 400 which are.\n     *\n     * For example, 1904 is a leap year it is divisible by 4.\n     * 1900 was not a leap year as it is divisible by 100, however 2000 was a\n     * leap year as it is divisible by 400.\n     *\n     * The calculation is proleptic - applying the same rules into the far future and far past.\n     * This is historically inaccurate, but is correct for the ISO-8601 standard.\n     *\n     * @param {number} year  the year to check\n     * @return {boolean} true if the year is leap, false otherwise\n     */\n    static isLeap(year) {\n        return ((MathUtil.intMod(year, 4) === 0) && ((MathUtil.intMod(year, 100) !== 0) || (MathUtil.intMod(year, 400) === 0)));\n    }\n\n    /**\n     * function overloading for {@link YearMonth.isSupported}\n     *\n     * if called with 1 argument and first argument is an instance of TemporalField, then {@link YearMonth.isSupportedField} is executed,\n     *\n     * otherwise {@link YearMonth.isSupportedUnit} is executed\n     *\n     * @param {!(TemporalField|ChronoUnit)} fieldOrUnit\n     * @returns {boolean}\n     */\n    isSupported(fieldOrUnit) {\n        if (arguments.length === 1 && fieldOrUnit instanceof TemporalField) {\n            return this.isSupportedField(fieldOrUnit);\n        } else {\n            return this.isSupportedUnit(fieldOrUnit);\n        }\n    }\n\n    /**\n     * Checks if the specified field is supported.\n     *\n     * This checks if this year can be queried for the specified field.\n     * If false, then calling {@link range} and {@link get} will throw an exception.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this date-time.\n     * The supported fields are:\n     *\n     * * {@link YEAR_OF_ERA}\n     * * {@link YEAR}\n     * * {@link ERA}\n     *\n     * All other {@link ChronoField} instances will return false.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.isSupportedBy}\n     * passing `this` as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField} field  the field to check, null returns false\n     * @return {boolean} true if the field is supported on this year, false if not\n     */\n    isSupportedField(field) {\n        if (field instanceof ChronoField) {\n            return field === ChronoField.YEAR || field === ChronoField.YEAR_OF_ERA || field === ChronoField.ERA;\n        }\n        return field != null && field.isSupportedBy(this);\n    }\n\n    isSupportedUnit(unit) {\n        if (unit instanceof ChronoUnit) {\n            return unit === ChronoUnit.YEARS || unit === ChronoUnit.DECADES || unit === ChronoUnit.CENTURIES || unit === ChronoUnit.MILLENNIA || unit === ChronoUnit.ERAS;\n        }\n        return unit != null && unit.isSupportedBy(this);\n    }\n\n    /**\n     * Gets the range of valid values for the specified field.\n     *\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This year is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return\n     * appropriate range instances.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.rangeRefinedBy}\n     * passing `this` as the argument.\n     * Whether the range can be obtained is determined by the field.\n     *\n     * @param {TemporalField} field  the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     */\n    range(field) {\n        if (this.isSupported(field)) {\n            return field.range();\n        } else if (field instanceof ChronoField) {\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return super.range(field);\n    }\n\n    /**\n     * Gets the value of the specified field from this year as an `int`.\n     *\n     * This queries this year for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this year.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field  the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    get(field) {\n        return this.range(field).checkValidIntValue(this.getLong(field), field);\n    }\n\n    /**\n     * Gets the value of the specified field from this year as a `long`.\n     *\n     * This queries this year for the value for the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this year.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field  the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    getLong(field) {\n        requireNonNull(field, 'field');\n        if (field instanceof ChronoField) {\n            switch (field) {\n                case ChronoField.YEAR_OF_ERA: return (this._year < 1 ? 1 - this._year : this._year);\n                case ChronoField.YEAR: return this._year;\n                case ChronoField.ERA: return (this._year < 1 ? 0 : 1);\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.getFrom(this);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if the year is a leap year, according to the ISO proleptic\n     * calendar system rules.\n     *\n     * This method applies the current rules for leap years across the whole time-line.\n     * In general, a year is a leap year if it is divisible by four without\n     * remainder. However, years divisible by 100, are not leap years, with\n     * the exception of years divisible by 400 which are.\n     *\n     * For example, 1904 is a leap year it is divisible by 4.\n     * 1900 was not a leap year as it is divisible by 100, however 2000 was a\n     * leap year as it is divisible by 400.\n     *\n     * The calculation is proleptic - applying the same rules into the far future and far past.\n     * This is historically inaccurate, but is correct for the ISO-8601 standard.\n     *\n     * @return {boolean} true if the year is leap, false otherwise\n     */\n    isLeap() {\n        return Year.isLeap(this._year);\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a copy of this year with the specified field set to a new value.\n     *\n     * This returns a new {@link Year}, based on this one, with the value\n     * for the specified field changed.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     *\n     * * {@link YEAR_OF_ERA} -\n     *   Returns a {@link Year} with the specified year-of-era\n     *   The era will be unchanged.\n     * * {@link YEAR} -\n     *   Returns a {@link Year} with the specified year.\n     *   This completely replaces the date and is equivalent to {@link of}.\n     * * {@link ERA} -\n     *   Returns a {@link Year} with the specified era.\n     *   The year-of-era will be unchanged.\n     *\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@link DateTimeException} will be thrown.\n     *\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.adjustInto}\n     * passing `this` as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalField} field  the field to set in the result, not null\n     * @param {number} newValue  the new value of the field in the result\n     * @returns {Year} based on `this` with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    _withField(field, newValue) {\n        requireNonNull(field, 'field');\n        requireInstance(field, TemporalField, 'field');\n        if (field instanceof ChronoField) {\n            field.checkValidValue(newValue);\n            switch (field) {\n                case ChronoField.YEAR_OF_ERA:\n                    return Year.of((this._year < 1 ? 1 - newValue : newValue));\n                case ChronoField.YEAR:\n                    return Year.of(newValue);\n                case ChronoField.ERA:\n                    return (this.getLong(ChronoField.ERA) === newValue ? this : Year.of(1 - this._year));\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.adjustInto(this, newValue);\n    }\n\n    /**\n     * @param {number} amountToAdd\n     * @param {TemporalUnit} unit\n     * @return {Year} based on this year with the addition made, not null\n     * @throws DateTimeException if the addition cannot be made\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    _plusUnit(amountToAdd, unit) {\n        requireNonNull(amountToAdd, 'amountToAdd');\n        requireNonNull(unit, 'unit');\n        requireInstance(unit, TemporalUnit, 'unit');\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.YEARS: return this.plusYears(amountToAdd);\n                case ChronoUnit.DECADES: return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n                case ChronoUnit.CENTURIES: return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n                case ChronoUnit.MILLENNIA: return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n                case ChronoUnit.ERAS: return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.addTo(this, amountToAdd);\n    }\n\n    /**\n     * Returns a copy of this year with the specified number of years added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} yearsToAdd  the years to add, may be negative\n     * @return {Year} based on this year with the period added, not null\n     * @throws DateTimeException if the result exceeds the supported year range\n     */\n    plusYears(yearsToAdd) {\n        if (yearsToAdd === 0) {\n            return this;\n        }\n        return Year.of(ChronoField.YEAR.checkValidIntValue(MathUtil.safeAdd(this._year, yearsToAdd)));\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a copy of this year with the specified number of years subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} yearsToSubtract  the years to subtract, may be negative\n     * @return {Year} based on this year with the period subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported year range\n     */\n    minusYears(yearsToSubtract) {\n        return (yearsToSubtract === MathUtil.MIN_SAFE_INTEGER ? this.plusYears(MathUtil.MAX_SAFE_INTEGER).plusYears(1) : this.plusYears(-yearsToSubtract));\n    }\n\n    /**\n     * Adjusts the specified temporal object to have this year.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with the year changed to be the same as this.\n     *\n     * The adjustment is equivalent to using {@link Temporal#with}\n     * passing {@link ChronoField#YEAR} as the field.\n     * If the specified temporal object does not use the ISO calendar system then\n     * a {@link DateTimeException} is thrown.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisYear.adjustInto(temporal);\n     *   temporal = temporal.with(thisYear);\n     * </pre>\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} temporal  the target object to be adjusted, not null\n     * @return {Temporal} the adjusted object, not null\n     * @throws DateTimeException if unable to make the adjustment\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    adjustInto(temporal) {\n        requireNonNull(temporal, 'temporal');\n        /* TODO: only IsoChronology for now\n         if (Chronology.from(temporal).equals(IsoChronology.INSTANCE) == false) {\n         throw new DateTimeException(\"Adjustment only supported on ISO date-time\");\n         }*/\n        return temporal.with(ChronoField.YEAR, this._year);\n    }\n\n    /**\n     * Checks if the month-day is valid for this year.\n     *\n     * This method checks whether this year and the input month and day form\n     * a valid date.\n     *\n     * @param {MonthDay} monthDay  the month-day to validate, null returns false\n     * @return {boolean} true if the month and day are valid for this year\n     */\n    isValidMonthDay(monthDay) {\n        return monthDay != null && monthDay.isValidYear(this._year);\n    }\n\n    /**\n     * Gets the length of this year in days.\n     *\n     * @return {number} the length of this year in days, 365 or 366\n     */\n    length() {\n        return this.isLeap() ? 366 : 365;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Combines this year with a day-of-year to create a {@link LocalDate}.\n     *\n     * This returns a {@link LocalDate} formed from this year and the specified day-of-year.\n     *\n     * The day-of-year value 366 is only valid in a leap year.\n     *\n     * @param {number} dayOfYear  the day-of-year to use, not null\n     * @return {LocalDate} the local date formed from this year and the specified date of year, not null\n     * @throws DateTimeException if the day of year is zero or less, 366 or greater or equal\n     *  to 366 and this is not a leap year\n     */\n    atDay(dayOfYear) {\n        return LocalDate.ofYearDay(this._year, dayOfYear);\n    }\n\n    /**\n     * function overloading for {@link Year.atMonth}\n     *\n     * if called with 1 arguments and first argument is instance of Month, then {@link Year.atMonthMonth} is executed.\n     *\n     * Otherwise {@link Year.atMonthNumber} is executed.\n     *\n     * @param {Month|number} monthOrNumber\n     * @returns {YearMonth}\n     */\n    atMonth(monthOrNumber) {\n        if (arguments.length === 1 && monthOrNumber instanceof Month) {\n            return this.atMonthMonth(monthOrNumber);\n        } else {\n            return this.atMonthNumber(monthOrNumber);\n        }\n    }\n\n    /**\n     * Combines this year with a month to create a {@link YearMonth}.\n     *\n     * This returns a {@link YearMonth} formed from this year and the specified month.\n     * All possible combinations of year and month are valid.\n     *\n     * This method can be used as part of a chain to produce a date:\n     * <pre>\n     *  LocalDate date = year.atMonth(month).atDay(day);\n     * </pre>\n     *\n     * @param {Month} month  the month-of-year to use, not null\n     * @return {YearMonth} the year-month formed from this year and the specified month, not null\n     */\n    atMonthMonth(month) {\n        requireNonNull(month, 'month');\n        requireInstance(month, Month, 'month');\n        return YearMonth.of(this._year, month);\n    }\n\n    /**\n     * Combines this year with a month to create a {@link YearMonth}.\n     *\n     * This returns a {@link YearMonth} formed from this year and the specified month.\n     * All possible combinations of year and month are valid.\n     *\n     * This method can be used as part of a chain to produce a date:\n     * <pre>\n     *  LocalDate date = year.atMonth(month).atDay(day);\n     * </pre>\n     *\n     * @param {number} month  the month-of-year to use, from 1 (January) to 12 (December)\n     * @return {YearMonth} the year-month formed from this year and the specified month, not null\n     * @throws DateTimeException if the month is invalid\n     */\n    atMonthNumber(month) {\n        requireNonNull(month, 'month');\n        return YearMonth.of(this._year, month);\n    }\n\n    /**\n     * Combines this year with a month-day to create a {@link LocalDate}.\n     *\n     * This returns a {@link LocalDate} formed from this year and the specified month-day.\n     *\n     * A month-day of February 29th will be adjusted to February 28th in the resulting\n     * date if the year is not a leap year.\n     *\n     * @param {MonthDay} monthDay  the month-day to use, not null\n     * @return {LocalDate} the local date formed from this year and the specified month-day, not null\n     */\n    atMonthDay(monthDay) {\n        requireNonNull(monthDay, 'monthDay');\n        requireInstance(monthDay, MonthDay, 'monthDay');\n        return monthDay.atYear(this._year);\n    }\n\n\n    //-----------------------------------------------------------------------\n    /**\n     * Queries this year using the specified query.\n     *\n     * This queries this year using the specified query strategy object.\n     * The {@link TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom} method on the\n     * specified query passing `this` as the argument.\n     *\n     * @param {TemporalQuery} query  the query to invoke, not null\n     * @return {*} the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query (defined by the query)\n     * @throws ArithmeticException if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        requireNonNull(query, 'query()');\n        requireInstance(query, TemporalQuery, 'query()');\n        if (query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        } else if (query === TemporalQueries.precision()) {\n            return ChronoUnit.YEARS;\n        } else if (query === TemporalQueries.localDate() || query === TemporalQueries.localTime() ||\n                query === TemporalQueries.zone() || query === TemporalQueries.zoneId() || query === TemporalQueries.offset()) {\n            return null;\n        }\n        return super.query(query);\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * Compares this year to another year.\n     *\n     * The comparison is based on the value of the year.\n     * It is \"consistent with equals\", as defined by {@link Comparable}.\n     *\n     * @param {Year} other  the other year to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     */\n    compareTo(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, Year, 'other');\n        return this._year - other._year;\n    }\n\n    /**\n     * Is this year after the specified year.\n     *\n     * @param {Year} other  the other year to compare to, not null\n     * @return {boolean} true if this is after the specified year\n     */\n    isAfter(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, Year, 'other');\n        return this._year > other._year;\n    }\n\n    /**\n     * Is this year before the specified year.\n     *\n     * @param {Year} other  the other year to compare to, not null\n     * @return {boolean} true if this point is before the specified year\n     */\n    isBefore(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, Year, 'other');\n        return this._year < other._year;\n    }\n    /**\n     * Outputs this year as a string using the formatter.\n     *\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {String} the formatted year string, not null\n     * @throws DateTimeException if an error occurs during printing\n     */\n    format(formatter) {\n        requireNonNull(formatter, 'formatter');\n        requireInstance(formatter, DateTimeFormatter, 'formatter');\n        return formatter.format(this);\n    }\n\n    /**\n     * Checks if this year is equal to the specified {@link Year}.\n     *\n     * The comparison is based on the value\n     *\n     * @param {*} other - the other year, null returns false\n     * @return {boolean} true if the other duration is equal to this one\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof Year) {\n            return this.value() === other.value();\n        }\n        return false;\n    }\n    /**\n     * Outputs this year as a string.\n     *\n     * @return {String} a string representation of this year, not null\n     */\n    toString() {\n        return `${this._year}`;\n    }\n\n    /**\n     * toJSON() use by JSON.stringify\n     * delegates to toString()\n     *\n     * @return {string}\n     */\n    toJSON() {\n        return this.toString();\n    }\n\n    /**\n     * Calculates the amount of time until another temporal in terms of the specified unit.\n     * This calculates the amount of time between two temporal objects in terms of a single {@link TemporalUnit}. The start and end points are this and the specified temporal. The end point is converted to be of the same type as the start point if different. The result will be negative if the end is before the start. For example, the amount in hours between two temporal objects can be calculated using `startTime.until(endTime, HOURS)`.\n     *\n     * The calculation returns a whole number, representing the number of complete units between the two temporals. For example, the amount in hours between the times 11:30 and 13:29 will only be one hour as it is one minute short of two hours.\n     *\n     * There are two equivalent ways of using this method. The first is to invoke this method directly. The second is to use `TemporalUnit.between(Temporal, Temporal)`:\n     *\n     * <pre>\n     *    // these two lines are equivalent\n     *    temporal = start.until(end, unit);\n     *    temporal = unit.between(start, end);\n     * </pre>\n     *\n     * The choice should be made based on which makes the code more readable.\n     * For example, this method allows the number of days between two dates to be calculated:\n     *\n     * <pre>\n     *   daysBetween = start.until(end, DAYS);\n     *   // or alternatively\n     *   daysBetween = DAYS.between(start, end);\n     * </pre>\n     *\n     * ### Implementation Requirements:\n     * Implementations must begin by checking to ensure that the input temporal object is of the same observable type as the implementation. They must then perform the calculation for all instances of {@link ChronoUnit}. An {@link UnsupportedTemporalTypeException} must be thrown for {@link ChronoUnit} instances that are unsupported.\n     * If the unit is not a {@link ChronoUnit}, then the result of this method is obtained by invoking `TemporalUnit.between(Temporal, Temporal)` passing this as the first argument and the converted input temporal as the second argument.\n     *\n     * In summary, implementations must behave in a manner equivalent to this pseudo-code:\n     *\n     * <pre>\n     *   // convert the end temporal to the same type as this class\n     *   if (unit instanceof ChronoUnit) {\n     *     // if unit is supported, then calculate and return result\n     *     // else throw UnsupportedTemporalTypeException for unsupported units\n     *   }\n     *   return unit.between(this, convertedEndTemporal);\n     * </pre>\n     *\n     * Note that the unit's between method must only be invoked if the two temporal objects have exactly the same type evaluated by `getClass()`.\n     *\n     * Implementations must ensure that no observable state is altered when this read-only method is invoked.\n     *\n     * @param {Temporal} endExclusive - the end temporal, exclusive, converted to be of the same type as this object, not null\n     * @param {TemporalUnit} unit - the unit to measure the amount in, not null\n     * @return {number} the amount of time between this temporal object and the specified one in terms of the unit; positive if the specified object is later than this one, negative if it is earlier than this one\n     * @throws DateTimeException - if the amount cannot be calculated, or the end temporal cannot be converted to the same type as this temporal\n     * @throws UnsupportedTemporalTypeException - if the unit is not supported\n     * @throws ArithmeticException - if numeric overflow occurs\n     */\n    until(endExclusive, unit) {\n        const end = Year.from(endExclusive);\n\n        if (unit instanceof ChronoUnit) {\n            const yearsUntil = end.value() - this.value();\n            switch (unit) {\n                case ChronoUnit.YEARS:\n                    return yearsUntil;\n                case ChronoUnit.DECADES:\n                    return MathUtil.intDiv(yearsUntil, 10);\n                case ChronoUnit.CENTURIES:\n                    return MathUtil.intDiv(yearsUntil, 100);\n                case ChronoUnit.MILLENNIA:\n                    return MathUtil.intDiv(yearsUntil, 1000);\n                case ChronoUnit.ERAS:\n                    return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.between(this, end);\n    }\n}\n\nlet PARSER;\n\nexport function _init() {\n\n    Year.MIN_VALUE = YearConstants.MIN_VALUE;\n    Year.MAX_VALUE = YearConstants.MAX_VALUE;\n\n    PARSER = new DateTimeFormatterBuilder()\n        .appendValue(ChronoField.YEAR, 4, 10, SignStyle.EXCEEDS_PAD)\n        .toFormatter();\n\n    Year.FROM = createTemporalQuery('Year.FROM', (temporal) => {\n        return Year.from(temporal);\n    });\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { abstractMethodFail } from '../assert';\n\n/**\n * Strategy for adjusting a temporal object.\n *\n * Adjusters are a key tool for modifying temporal objects.\n * They exist to externalize the process of adjustment, permitting different\n * approaches, as per the strategy design pattern.\n * Examples might be an adjuster that sets the date avoiding weekends, or one that\n * sets the date to the last day of the month.\n *\n * There are two equivalent ways of using a {@link TemporalAdjuster}.\n * The first is to invoke the method on this interface directly.\n * The second is to use {@link Temporal#with}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   temporal = thisAdjuster.adjustInto(temporal);\n *   temporal = temporal.with(thisAdjuster);\n * </pre>\n * It is recommended to use the second approach, {@link with},\n * as it is a lot clearer to read in code.\n *\n * See {@link TemporalAdjusters} for a standard set of adjusters, including finding the\n * last day of the month.\n * Adjusters may also be defined by applications.\n *\n * ### Specification for implementors\n *\n * This interface places no restrictions on the mutability of implementations,\n * however immutability is strongly recommended.\n *\n * @interface\n */\nexport class TemporalAdjuster {\n\n    /**\n     * Adjusts the specified temporal object.\n     *\n     * This adjusts the specified temporal object using the logic\n     * encapsulated in the implementing class.\n     * Examples might be an adjuster that sets the date avoiding weekends, or one that\n     * sets the date to the last day of the month.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method directly.\n     * The second is to use {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisAdjuster.adjustInto(temporal);\n     *   temporal = temporal.with(thisAdjuster);\n     * </pre>\n     * It is recommended to use the second approach, {@link with},\n     * as it is a lot clearer to read in code.\n     *\n     * ### Specification for implementors\n     *\n     * The implementation must take the input object and adjust it.\n     * The implementation defines the logic of the adjustment and is responsible for\n     * documenting that logic. It may use any method on {@link Temporal} to\n     * query the temporal object and perform the adjustment.\n     * The returned object must have the same observable type as the input object\n     *\n     * The input object must not be altered.\n     * Instead, an adjusted copy of the original must be returned.\n     * This provides equivalent, safe behavior for immutable and mutable temporal objects.\n     *\n     * The input temporal object may be in a calendar system other than ISO.\n     * Implementations may choose to document compatibility with other calendar systems,\n     * or reject non-ISO temporal objects by querying the chronology (see {@link TemporalQueries#chronology}).\n     *\n     * This method may be called from multiple threads in parallel.\n     * It must be thread-safe when invoked.\n     *\n     * @param {Temporal} temporal  the temporal object to adjust, not null\n     * @return {Temporal} an object of the same observable type with the adjustment made, not null\n     * @throws DateTimeException if unable to make the adjustment\n     * @throws ArithmeticException if numeric overflow occurs\n     *\n     * @abstract\n     */\n    // eslint-disable-next-line no-unused-vars\n    adjustInto(temporal){\n        abstractMethodFail('adjustInto');\n    }\n\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull } from '../assert';\nimport { IllegalStateException } from '../errors';\n\nimport { TemporalAdjuster } from './TemporalAdjuster';\nimport { ChronoField } from '../temporal/ChronoField';\nimport { ChronoUnit } from '../temporal/ChronoUnit';\nimport { MathUtil } from '../MathUtil';\n\n/**\n * Common implementations of {@link TemporalAdjuster}.\n *\n * This class provides common implementations of {@link TemporalAdjuster}.\n * They are especially useful to document the intent of business logic and\n * often link well to requirements.\n * For example, these two pieces of code do the same thing, but the second\n * one is clearer (assuming that there is a static import of this class):\n * <pre>\n *  // direct manipulation\n *  date.withDayOfMonth(1).plusMonths(1).minusDays(1);\n *  // use of an adjuster from this class\n *  date.with(lastDayOfMonth());\n * </pre>\n * There are two equivalent ways of using a {@link TemporalAdjuster}.\n * The first is to invoke the method on the interface directly.\n * The second is to use {@link Temporal#with}:\n * <pre>\n *   // these two lines are equivalent, but the second approach is recommended\n *   dateTime = adjuster.adjustInto(dateTime);\n *   dateTime = dateTime.with(adjuster);\n * </pre>\n * It is recommended to use the second approach, {@link with},\n * as it is a lot clearer to read in code.\n *\n * ### Specification for implementors\n *\n * This is a thread-safe utility class.\n * All returned adjusters are immutable and thread-safe.\n *\n * The JDK 8 ofDateAdjuster(UnaryOperator) method is not backported.\n */\nexport class TemporalAdjusters {\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the 'first day of month' adjuster, which returns a new date set to\n     * the first day of the current month.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-01-15 will return 2011-01-01.\n     * * The input 2011-02-15 will return 2011-02-01.\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It is equivalent to:\n     * <pre>\n     *  temporal.with(DAY_OF_MONTH, 1);\n     * </pre>\n     *\n     * @return {TemporalAdjuster} the first day-of-month adjuster, not null\n     */\n    static firstDayOfMonth() {\n        return Impl.FIRST_DAY_OF_MONTH;\n    }\n\n    /**\n     * Returns the 'last day of month' adjuster, which returns a new date set to\n     * the last day of the current month.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-01-15 will return 2011-01-31.\n     * * The input 2011-02-15 will return 2011-02-28.\n     * * The input 2012-02-15 will return 2012-02-29 (leap year).\n     * * The input 2011-04-15 will return 2011-04-30.\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It is equivalent to:\n     * <pre>\n     *  long lastDay = temporal.range(DAY_OF_MONTH).getMaximum();\n     *  temporal.with(DAY_OF_MONTH, lastDay);\n     * </pre>\n     *\n     * @return {TemporalAdjuster} the last day-of-month adjuster, not null\n     */\n    static lastDayOfMonth() {\n        return Impl.LAST_DAY_OF_MONTH;\n    }\n\n    /**\n     * Returns the 'first day of next month' adjuster, which returns a new date set to\n     * the first day of the next month.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-01-15 will return 2011-02-01.\n     * * The input 2011-02-15 will return 2011-03-01.\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It is equivalent to:\n     * <pre>\n     *  temporal.with(DAY_OF_MONTH, 1).plus(1, MONTHS);\n     * </pre>\n     *\n     * @return {TemporalAdjuster} the first day of next month adjuster, not null\n     */\n    static firstDayOfNextMonth() {\n        return Impl.FIRST_DAY_OF_NEXT_MONTH;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the 'first day of year' adjuster, which returns a new date set to\n     * the first day of the current year.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-01-15 will return 2011-01-01.\n     * * The input 2011-02-15 will return 2011-01-01.\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It is equivalent to:\n     * <pre>\n     *  temporal.with(DAY_OF_YEAR, 1);\n     * </pre>\n     *\n     * @return {TemporalAdjuster} the first day-of-year adjuster, not null\n     */\n    static firstDayOfYear() {\n        return Impl.FIRST_DAY_OF_YEAR;\n    }\n\n    /**\n     * Returns the 'last day of year' adjuster, which returns a new date set to\n     * the last day of the current year.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-01-15 will return 2011-12-31.\n     * * The input 2011-02-15 will return 2011-12-31.\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It is equivalent to:\n     * <pre>\n     *  long lastDay = temporal.range(DAY_OF_YEAR).getMaximum();\n     *  temporal.with(DAY_OF_YEAR, lastDay);\n     * </pre>\n     *\n     * @return {TemporalAdjuster} the last day-of-year adjuster, not null\n     */\n    static lastDayOfYear() {\n        return Impl.LAST_DAY_OF_YEAR;\n    }\n\n    /**\n     * Returns the 'first day of next year' adjuster, which returns a new date set to\n     * the first day of the next year.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-01-15 will return 2012-01-01.\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It is equivalent to:\n     * <pre>\n     *  temporal.with(DAY_OF_YEAR, 1).plus(1, YEARS);\n     * </pre>\n     *\n     * @return {TemporalAdjuster} the first day of next month adjuster, not null\n     */\n    static firstDayOfNextYear() {\n        return Impl.FIRST_DAY_OF_NEXT_YEAR;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the first in month adjuster, which returns a new date\n     * in the same month with the first matching day-of-week.\n     * This is used for expressions like 'first Tuesday in March'.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-12-15 for (MONDAY) will return 2011-12-05.\n     * * The input 2011-12-15 for (FRIDAY) will return 2011-12-02.\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It uses the {@link DAY_OF_WEEK} and {@link DAY_OF_MONTH} fields\n     * and the {@link DAYS} unit, and assumes a seven day week.\n     *\n     * @param {DayOfWeek} dayOfWeek  the day-of-week, not null\n     * @return {TemporalAdjuster} the first in month adjuster, not null\n     */\n    static firstInMonth(dayOfWeek) {\n        requireNonNull(dayOfWeek, 'dayOfWeek');\n        return new DayOfWeekInMonth(1, dayOfWeek);\n    }\n\n    /**\n     * Returns the last in month adjuster, which returns a new date\n     * in the same month with the last matching day-of-week.\n     * This is used for expressions like 'last Tuesday in March'.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-12-15 for (MONDAY) will return 2011-12-26.\n     * * The input 2011-12-15 for (FRIDAY) will return 2011-12-30.\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It uses the {@link DAY_OF_WEEK} and {@link DAY_OF_MONTH} fields\n     * and the {@link DAYS} unit, and assumes a seven day week.\n     *\n     * @param {DayOfWeek} dayOfWeek  the day-of-week, not null\n     * @return {TemporalAdjuster} the first in month adjuster, not null\n     */\n    static lastInMonth(dayOfWeek) {\n        requireNonNull(dayOfWeek, 'dayOfWeek');\n        return new DayOfWeekInMonth(-1, dayOfWeek);\n    }\n\n    /**\n     * Returns the day-of-week in month adjuster, which returns a new date\n     * in the same month with the ordinal day-of-week.\n     * This is used for expressions like the 'second Tuesday in March'.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-12-15 for (1,TUESDAY) will return 2011-12-06.\n     * * The input 2011-12-15 for (2,TUESDAY) will return 2011-12-13.\n     * * The input 2011-12-15 for (3,TUESDAY) will return 2011-12-20.\n     * * The input 2011-12-15 for (4,TUESDAY) will return 2011-12-27.\n     * * The input 2011-12-15 for (5,TUESDAY) will return 2012-01-03.\n     * * The input 2011-12-15 for (-1,TUESDAY) will return 2011-12-27 (last in month).\n     * * The input 2011-12-15 for (-4,TUESDAY) will return 2011-12-06 (3 weeks before last in month).\n     * * The input 2011-12-15 for (-5,TUESDAY) will return 2011-11-29 (4 weeks before last in month).\n     * * The input 2011-12-15 for (0,TUESDAY) will return 2011-11-29 (last in previous month).\n     *\n     * For a positive or zero ordinal, the algorithm is equivalent to finding the first\n     * day-of-week that matches within the month and then adding a number of weeks to it.\n     * For a negative ordinal, the algorithm is equivalent to finding the last\n     * day-of-week that matches within the month and then subtracting a number of weeks to it.\n     * The ordinal number of weeks is not validated and is interpreted leniently\n     * according to this algorithm. This definition means that an ordinal of zero finds\n     * the last matching day-of-week in the previous month.\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It uses the {@link DAY_OF_WEEK} and {@link DAY_OF_MONTH} fields\n     * and the {@link DAYS} unit, and assumes a seven day week.\n     *\n     * @param {Number} ordinal  the week within the month, unbounded but typically from -5 to 5\n     * @param {DayOfWeek} dayOfWeek  the day-of-week, not null\n     * @return {TemporalAdjuster} the day-of-week in month adjuster, not null\n     */\n    static dayOfWeekInMonth(ordinal, dayOfWeek) {\n        requireNonNull(dayOfWeek, 'dayOfWeek');\n        return new DayOfWeekInMonth(ordinal, dayOfWeek);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns the next day-of-week adjuster, which adjusts the date to the\n     * first occurrence of the specified day-of-week after the date being adjusted.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-17 (two days later).\n     * * The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-19 (four days later).\n     * * The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-22 (seven days later).\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It uses the {@link DAY_OF_WEEK} field and the {@link DAYS} unit,\n     * and assumes a seven day week.\n     *\n     * @param {DayOfWeek} dayOfWeek  the day-of-week to move the date to, not null\n     * @return {TemporalAdjuster} the next day-of-week adjuster, not null\n     */\n    static next(dayOfWeek) {\n        return new RelativeDayOfWeek(2, dayOfWeek);\n    }\n\n    /**\n     * Returns the next-or-same day-of-week adjuster, which adjusts the date to the\n     * first occurrence of the specified day-of-week after the date being adjusted\n     * unless it is already on that day in which case the same object is returned.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-17 (two days later).\n     * * The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-19 (four days later).\n     * * The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-15 (same as input).\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It uses the {@link DAY_OF_WEEK} field and the {@link DAYS} unit,\n     * and assumes a seven day week.\n     *\n     * @param {DayOfWeek} dayOfWeek  the day-of-week to check for or move the date to, not null\n     * @return {TemporalAdjuster} the next-or-same day-of-week adjuster, not null\n     */\n    static nextOrSame(dayOfWeek) {\n        return new RelativeDayOfWeek(0, dayOfWeek);\n    }\n\n    /**\n     * Returns the previous day-of-week adjuster, which adjusts the date to the\n     * first occurrence of the specified day-of-week before the date being adjusted.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-10 (five days earlier).\n     * * The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-12 (three days earlier).\n     * * The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-08 (seven days earlier).\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It uses the {@link DAY_OF_WEEK} field and the {@link DAYS} unit,\n     * and assumes a seven day week.\n     *\n     * @param {DayOfWeek} dayOfWeek  the day-of-week to move the date to, not null\n     * @return {TemporalAdjuster} the previous day-of-week adjuster, not null\n     */\n    static previous(dayOfWeek) {\n        return new RelativeDayOfWeek(3, dayOfWeek);\n    }\n\n    /**\n     * Returns the previous-or-same day-of-week adjuster, which adjusts the date to the\n     * first occurrence of the specified day-of-week before the date being adjusted\n     * unless it is already on that day in which case the same object is returned.\n     *\n     * The ISO calendar system behaves as follows:\n     *\n     * * The input 2011-01-15 (a Saturday) for parameter (MONDAY) will return 2011-01-10 (five days earlier).\n     * * The input 2011-01-15 (a Saturday) for parameter (WEDNESDAY) will return 2011-01-12 (three days earlier).\n     * * The input 2011-01-15 (a Saturday) for parameter (SATURDAY) will return 2011-01-15 (same as input).\n     *\n     * The behavior is suitable for use with most calendar systems.\n     * It uses the {@link DAY_OF_WEEK} field and the {@link DAYS} unit,\n     * and assumes a seven day week.\n     *\n     * @param {DayOfWeek} dayOfWeek the day-of-week to check for or move the date to, not null\n     * @return {TemporalAdjuster} the previous-or-same day-of-week adjuster, not null\n     */\n    static previousOrSame(dayOfWeek) {\n        return new RelativeDayOfWeek(1, dayOfWeek);\n    }\n\n}\n\n//-----------------------------------------------------------------------\n/**\n * Enum implementing the adjusters.\n */\nclass Impl extends TemporalAdjuster {\n\n    /**\n     *\n     * @param ordinal\n     * @private\n     */\n    constructor(ordinal) {\n        super();\n        this._ordinal = ordinal;\n    }\n\n    adjustInto(temporal) {\n        switch (this._ordinal) {\n            case 0: return temporal.with(ChronoField.DAY_OF_MONTH, 1);\n            case 1: return temporal.with(ChronoField.DAY_OF_MONTH, temporal.range(ChronoField.DAY_OF_MONTH).maximum());\n            case 2: return temporal.with(ChronoField.DAY_OF_MONTH, 1).plus(1, ChronoUnit.MONTHS);\n            case 3: return temporal.with(ChronoField.DAY_OF_YEAR, 1);\n            case 4: return temporal.with(ChronoField.DAY_OF_YEAR, temporal.range(ChronoField.DAY_OF_YEAR).maximum());\n            case 5: return temporal.with(ChronoField.DAY_OF_YEAR, 1).plus(1, ChronoUnit.YEARS);\n        }\n        throw new IllegalStateException('Unreachable');\n    }\n\n}\n\n/** First day of month adjuster. */\nImpl.FIRST_DAY_OF_MONTH = new Impl(0);\n/** Last day of month adjuster. */\nImpl.LAST_DAY_OF_MONTH = new Impl(1);\n/** First day of next month adjuster. */\nImpl.FIRST_DAY_OF_NEXT_MONTH = new Impl(2);\n/** First day of year adjuster. */\nImpl.FIRST_DAY_OF_YEAR = new Impl(3);\n/** Last day of year adjuster. */\nImpl.LAST_DAY_OF_YEAR = new Impl(4);\n/** First day of next month adjuster. */\nImpl.FIRST_DAY_OF_NEXT_YEAR = new Impl(5);\n\n\n/**\n * Class implementing day-of-week in month adjuster.\n */\nclass DayOfWeekInMonth extends TemporalAdjuster {\n\n    /**\n     *\n     * @param ordinal\n     * @param dow\n     * @private\n     */\n    constructor(ordinal, dow) {\n        super();\n        this._ordinal = ordinal;\n        this._dowValue = dow.value();\n    }\n\n    adjustInto(temporal) {\n        if (this._ordinal >= 0) {\n            const temp = temporal.with(ChronoField.DAY_OF_MONTH, 1);\n            const curDow = temp.get(ChronoField.DAY_OF_WEEK);\n            let dowDiff = MathUtil.intMod((this._dowValue - curDow + 7), 7);\n            dowDiff += (this._ordinal - 1) * 7;  // safe from overflow\n            return temp.plus(dowDiff, ChronoUnit.DAYS);\n        } else {\n            const temp = temporal.with(ChronoField.DAY_OF_MONTH, temporal.range(ChronoField.DAY_OF_MONTH).maximum());\n            const curDow = temp.get(ChronoField.DAY_OF_WEEK);\n            let daysDiff = this._dowValue - curDow;\n            daysDiff = (daysDiff === 0 ? 0 : (daysDiff > 0 ? daysDiff - 7 : daysDiff));\n            daysDiff -= (-this._ordinal - 1) * 7;  // safe from overflow\n            return temp.plus(daysDiff, ChronoUnit.DAYS);\n        }\n    }\n}\n\n/**\n * Implementation of next, previous or current day-of-week.\n */\nclass RelativeDayOfWeek extends TemporalAdjuster {\n\n    /**\n     *\n     * @param relative\n     * @param dayOfWeek\n     * @private\n     */\n    constructor(relative, dayOfWeek) {\n        super();\n        requireNonNull(dayOfWeek, 'dayOfWeek');\n        /** Whether the current date is a valid answer. */\n        this._relative = relative;\n        /** The day-of-week value, from 1 to 7. */\n        this._dowValue = dayOfWeek.value();\n    }\n\n    adjustInto(temporal) {\n        const calDow = temporal.get(ChronoField.DAY_OF_WEEK);\n        if (this._relative < 2 && calDow === this._dowValue) {\n            return temporal;\n        }\n        if ((this._relative & 1) === 0) {\n            const daysDiff = calDow - this._dowValue;\n            return temporal.plus(daysDiff >= 0 ? 7 - daysDiff : -daysDiff, ChronoUnit.DAYS);\n        } else {\n            const daysDiff = this._dowValue - calDow;\n            return temporal.minus(daysDiff >= 0 ? 7 - daysDiff : -daysDiff, ChronoUnit.DAYS);\n        }\n    }\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { Enum } from '../Enum';\nimport { requireNonNull } from '../assert';\nimport { DateTimeException } from '../errors';\nimport { MathUtil } from '../MathUtil';\n\nimport { DayOfWeek } from '../DayOfWeek';\nimport { LocalDate } from '../LocalDate';\nimport { Month } from '../Month';\nimport { Year } from '../Year';\n\nimport { ChronoField } from '../temporal/ChronoField';\nimport { ResolverStyle } from '../format/ResolverStyle';\nimport { TemporalAdjusters } from '../temporal/TemporalAdjusters';\n\nexport class IsoChronology extends Enum{\n    /**\n     * Checks if the year is a leap year, according to the ISO proleptic\n     * calendar system rules.\n     *\n     * This method applies the current rules for leap years across the whole time-line.\n     * In general, a year is a leap year if it is divisible by four without\n     * remainder. However, years divisible by 100, are not leap years, with\n     * the exception of years divisible by 400 which are.\n     *\n     * For example, 1904 is a leap year it is divisible by 4.\n     * 1900 was not a leap year as it is divisible by 100, however 2000 was a\n     * leap year as it is divisible by 400.\n     *\n     * The calculation is proleptic - applying the same rules into the far future and far past.\n     * This is historically inaccurate, but is correct for the ISO-8601 standard.\n     *\n     * @param {number} prolepticYear - the ISO proleptic year to check\n     * @return {boolean} true if the year is leap, false otherwise\n     */\n    static isLeapYear(prolepticYear) {\n        return ((prolepticYear & 3) === 0) && ((prolepticYear % 100) !== 0 || (prolepticYear % 400) === 0);\n    }\n\n    /**\n     * Updates the map of field-values during resolution.\n     *\n     * @param {EnumMap} fieldValues  the fieldValues map to update, not null\n     * @param {ChronoField} field  the field to update, not null\n     * @param {number} value  the value to update, not null\n     * @throws DateTimeException if a conflict occurs\n     */\n    _updateResolveMap(fieldValues, field, value) {\n        // TODO: this function is in Chronology in threetenbp, maybe needs to be moved?\n        requireNonNull(fieldValues, 'fieldValues');\n        requireNonNull(field, 'field');\n        const current = fieldValues.get(field);\n        if (current != null && current !== value) {\n            throw new DateTimeException(`Invalid state, field: ${field} ${current} conflicts with ${field} ${value}`);\n        }\n        fieldValues.put(field, value);\n    }\n\n    resolveDate(fieldValues, resolverStyle) {\n        if (fieldValues.containsKey(ChronoField.EPOCH_DAY)) {\n            return LocalDate.ofEpochDay(fieldValues.remove(ChronoField.EPOCH_DAY));\n        }\n\n        // normalize fields\n        const prolepticMonth = fieldValues.remove(ChronoField.PROLEPTIC_MONTH);\n        if (prolepticMonth != null) {\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.PROLEPTIC_MONTH.checkValidValue(prolepticMonth);\n            }\n            this._updateResolveMap(fieldValues, ChronoField.MONTH_OF_YEAR, MathUtil.floorMod(prolepticMonth, 12) + 1);\n            this._updateResolveMap(fieldValues, ChronoField.YEAR, MathUtil.floorDiv(prolepticMonth, 12));\n        }\n\n        // eras\n        const yoeLong = fieldValues.remove(ChronoField.YEAR_OF_ERA);\n        if (yoeLong != null) {\n            if (resolverStyle !== ResolverStyle.LENIENT) {\n                ChronoField.YEAR_OF_ERA.checkValidValue(yoeLong);\n            }\n            const era = fieldValues.remove(ChronoField.ERA);\n            if (era == null) {\n                const year = fieldValues.get(ChronoField.YEAR);\n                if (resolverStyle === ResolverStyle.STRICT) {\n                    // do not invent era if strict, but do cross-check with year\n                    if (year != null) {\n                        this._updateResolveMap(fieldValues, ChronoField.YEAR, (year > 0 ? yoeLong: MathUtil.safeSubtract(1, yoeLong)));\n                    } else {\n                        // reinstate the field removed earlier, no cross-check issues\n                        fieldValues.put(ChronoField.YEAR_OF_ERA, yoeLong);\n                    }\n                } else {\n                    // invent era\n                    this._updateResolveMap(fieldValues, ChronoField.YEAR, (year == null || year > 0 ? yoeLong: MathUtil.safeSubtract(1, yoeLong)));\n                }\n            } else if (era === 1) {\n                this._updateResolveMap(fieldValues, ChronoField.YEAR, yoeLong);\n            } else if (era === 0) {\n                this._updateResolveMap(fieldValues, ChronoField.YEAR, MathUtil.safeSubtract(1, yoeLong));\n            } else {\n                throw new DateTimeException(`Invalid value for era: ${era}`);\n            }\n        } else if (fieldValues.containsKey(ChronoField.ERA)) {\n            ChronoField.ERA.checkValidValue(fieldValues.get(ChronoField.ERA));  // always validated\n        }\n\n        // build date\n        if (fieldValues.containsKey(ChronoField.YEAR)) {\n            if (fieldValues.containsKey(ChronoField.MONTH_OF_YEAR)) {\n                if (fieldValues.containsKey(ChronoField.DAY_OF_MONTH)) {\n                    const y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n                    const moy = fieldValues.remove(ChronoField.MONTH_OF_YEAR);\n                    let dom = fieldValues.remove(ChronoField.DAY_OF_MONTH);\n                    if (resolverStyle === ResolverStyle.LENIENT) {\n                        const months = moy - 1;\n                        const days = dom - 1;\n                        return LocalDate.of(y, 1, 1).plusMonths(months).plusDays(days);\n                    } else if (resolverStyle === ResolverStyle.SMART){\n                        ChronoField.DAY_OF_MONTH.checkValidValue(dom);\n                        if (moy === 4 || moy === 6 || moy === 9 || moy === 11) {\n                            dom = Math.min(dom, 30);\n                        } else if (moy === 2) {\n                            dom = Math.min(dom, Month.FEBRUARY.length(Year.isLeap(y)));\n                        }\n                        return LocalDate.of(y, moy, dom);\n                    } else {\n                        return LocalDate.of(y, moy, dom);\n                    }\n                }\n                /*\n                if (fieldValues.containsKey(ALIGNED_WEEK_OF_MONTH)) {\n                    if (fieldValues.containsKey(ALIGNED_DAY_OF_WEEK_IN_MONTH)) {\n                        int y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n                        if (resolverStyle == ResolverStyle.LENIENT) {\n                            long months = Jdk8Methods.safeSubtract(fieldValues.remove(ChronoField.MONTH_OF_YEAR), 1);\n                            long weeks = Jdk8Methods.safeSubtract(fieldValues.remove(ALIGNED_WEEK_OF_MONTH), 1);\n                            long days = Jdk8Methods.safeSubtract(fieldValues.remove(ALIGNED_DAY_OF_WEEK_IN_MONTH), 1);\n                            return LocalDate.of(y, 1, 1).plusMonths(months).plusWeeks(weeks).plusDays(days);\n                        }\n                        int moy = ChronoField.MONTH_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.MONTH_OF_YEAR));\n                        int aw = ALIGNED_WEEK_OF_MONTH.checkValidIntValue(fieldValues.remove(ALIGNED_WEEK_OF_MONTH));\n                        int ad = ALIGNED_DAY_OF_WEEK_IN_MONTH.checkValidIntValue(fieldValues.remove(ALIGNED_DAY_OF_WEEK_IN_MONTH));\n                        LocalDate date = LocalDate.of(y, moy, 1).plusDays((aw - 1) * 7 + (ad - 1));\n                        if (resolverStyle == ResolverStyle.STRICT && date.get(ChronoField.MONTH_OF_YEAR) != moy) {\n                            throw new DateTimeException(\"Strict mode rejected date parsed to a different month\");\n                        }\n                        return date;\n                    }\n                    if (fieldValues.containsKey(DAY_OF_WEEK)) {\n                        int y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n                        if (resolverStyle == ResolverStyle.LENIENT) {\n                            long months = Jdk8Methods.safeSubtract(fieldValues.remove(ChronoField.MONTH_OF_YEAR), 1);\n                            long weeks = Jdk8Methods.safeSubtract(fieldValues.remove(ALIGNED_WEEK_OF_MONTH), 1);\n                            long days = Jdk8Methods.safeSubtract(fieldValues.remove(DAY_OF_WEEK), 1);\n                            return LocalDate.of(y, 1, 1).plusMonths(months).plusWeeks(weeks).plusDays(days);\n                        }\n                        int moy = ChronoField.MONTH_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.MONTH_OF_YEAR));\n                        int aw = ALIGNED_WEEK_OF_MONTH.checkValidIntValue(fieldValues.remove(ALIGNED_WEEK_OF_MONTH));\n                        int dow = DAY_OF_WEEK.checkValidIntValue(fieldValues.remove(DAY_OF_WEEK));\n                        LocalDate date = LocalDate.of(y, moy, 1).plusWeeks(aw - 1).with(nextOrSame(DayOfWeek.of(dow)));\n                        if (resolverStyle == ResolverStyle.STRICT && date.get(ChronoField.MONTH_OF_YEAR) != moy) {\n                            throw new DateTimeException(\"Strict mode rejected date parsed to a different month\");\n                        }\n                        return date;\n                    }\n                }\n*/\n            }\n            if (fieldValues.containsKey(ChronoField.DAY_OF_YEAR)) {\n                const y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n                if (resolverStyle === ResolverStyle.LENIENT) {\n                    const days = MathUtil.safeSubtract(fieldValues.remove(ChronoField.DAY_OF_YEAR), 1);\n                    return LocalDate.ofYearDay(y, 1).plusDays(days);\n                }\n                const doy = ChronoField.DAY_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.DAY_OF_YEAR));\n                return LocalDate.ofYearDay(y, doy);\n            }\n            if (fieldValues.containsKey(ChronoField.ALIGNED_WEEK_OF_YEAR)) {\n                if (fieldValues.containsKey(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR)) {\n                    const y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n                    if (resolverStyle === ResolverStyle.LENIENT) {\n                        const weeks = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR), 1);\n                        const days = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR), 1);\n                        return LocalDate.of(y, 1, 1).plusWeeks(weeks).plusDays(days);\n                    }\n                    const aw = ChronoField.ALIGNED_WEEK_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR));\n                    const ad = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));\n                    const date = LocalDate.of(y, 1, 1).plusDays((aw - 1) * 7 + (ad - 1));\n                    if (resolverStyle === ResolverStyle.STRICT && date.get(ChronoField.YEAR) !== y) {\n                        throw new DateTimeException('Strict mode rejected date parsed to a different year');\n                    }\n                    return date;\n                }\n                if (fieldValues.containsKey(ChronoField.DAY_OF_WEEK)) {\n                    const y = ChronoField.YEAR.checkValidIntValue(fieldValues.remove(ChronoField.YEAR));\n                    if (resolverStyle === ResolverStyle.LENIENT) {\n                        const weeks = MathUtil.safeSubtract(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR), 1);\n                        const days = MathUtil.safeSubtract(fieldValues.remove(ChronoField.DAY_OF_WEEK), 1);\n                        return LocalDate.of(y, 1, 1).plusWeeks(weeks).plusDays(days);\n                    }\n                    const aw = ChronoField.ALIGNED_WEEK_OF_YEAR.checkValidIntValue(fieldValues.remove(ChronoField.ALIGNED_WEEK_OF_YEAR));\n                    const dow = ChronoField.DAY_OF_WEEK.checkValidIntValue(fieldValues.remove(ChronoField.DAY_OF_WEEK));\n                    const date = LocalDate.of(y, 1, 1).plusWeeks(aw - 1).with(TemporalAdjusters.nextOrSame(DayOfWeek.of(dow)));\n                    if (resolverStyle === ResolverStyle.STRICT && date.get(ChronoField.YEAR) !== y) {\n                        throw new DateTimeException('Strict mode rejected date parsed to a different month');\n                    }\n                    return date;\n                }\n            }\n        }\n        return null;\n    }\n\n    /**\n     * Obtains an ISO local date from another date-time object.\n     * <p>\n     * This is equivalent to {@link LocalDate#from(TemporalAccessor)}.\n     *\n     * @param temporal  the date-time object to convert, not null\n     * @return the ISO local date, not null\n     * @throws DateTimeException if unable to create the date\n     */\n    date(temporal) {\n        return LocalDate.from(temporal);\n    }\n\n}\n\nexport function _init() {\n    IsoChronology.INSTANCE = new IsoChronology('IsoChronology');\n}\n", "/**\n * @copyright (c) 2016-present, Philipp Thürwächter & Pattrick Hüper  & js-joda contributors\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { Temporal } from './temporal/Temporal';\nimport { Clock } from './Clock';\nimport { DateTimeException, UnsupportedTemporalTypeException } from './errors';\nimport { DateTimeFormatter } from './format/DateTimeFormatter';\nimport { Instant, LocalTime } from './js-joda';\nimport { MathUtil } from './MathUtil';\nimport { OffsetDateTime } from './OffsetDateTime';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { ZoneId } from './ZoneId';\nimport { ZoneOffset } from './ZoneOffset';\n\nimport { createTemporalQuery } from './temporal/TemporalQuery';\nimport { requireInstance, requireNonNull } from './assert';\n\n/**\n * A time with an offset from UTC/Greenwich in the ISO-8601 calendar system, such as 10:15:30+01:00.\n */\nexport class OffsetTime extends Temporal {\n    /**\n     * @param {!TemporalAccessor} temporal\n     * @return {OffsetTime}\n     */\n    static from(temporal) {\n        requireNonNull(temporal, 'temporal');\n        if (temporal instanceof OffsetTime) {\n            return temporal;\n        } else if (temporal instanceof OffsetDateTime) {\n            return temporal.toOffsetTime();\n        }\n        try {\n            const time = LocalTime.from(temporal);\n            const offset = ZoneOffset.from(temporal);\n            return new OffsetTime(time, offset);\n        } catch(ex) {\n            throw new DateTimeException(`Unable to obtain OffsetTime TemporalAccessor: ${temporal}, type ${temporal.constructor != null ? temporal.constructor.name : ''}`);\n        }\n    }\n\n    /**\n     * @param {Clock|ZoneId} clockOrZone\n     * @return {OffsetTime}\n     */\n    static now(clockOrZone) {\n        if (arguments.length === 0){\n            return OffsetTime._now(Clock.systemDefaultZone());\n        } else if (clockOrZone instanceof Clock){\n            return OffsetTime._now(clockOrZone);\n        } else {\n            return OffsetTime._now(Clock.system(clockOrZone));\n        }\n    }\n\n    /**\n     * @param {Clock} clock - the clock to use, defaults to Clock.systemDefaultZone()\n     * @return {OffsetTime} the current offset date-time, not null\n     */\n    static _now(clock) {\n        requireNonNull(clock, 'clock');\n        const now = clock.instant();\n        return OffsetTime.ofInstant(now, clock.zone().rules().offset(now));\n    }\n\n    /**\n     * @return {OffsetTime}\n     */\n    static of(){\n        if (arguments.length <= 2) {\n            return OffsetTime.ofTimeAndOffset.apply(this, arguments);\n        } else {\n            return OffsetTime.ofNumbers.apply(this, arguments);\n        }\n    }\n\n    /**\n     * @param {int} hour\n     * @param {int} minute\n     * @param {int} second\n     * @param {int} nanoOfSecond\n     * @param {ZoneOffset} offset\n     * @return {OffsetTime}\n     */\n    static ofNumbers(hour, minute, second, nanoOfSecond, offset) {\n        const time = LocalTime.of(hour, minute, second, nanoOfSecond);\n        return new OffsetTime(time, offset);\n    }\n\n    /**\n     * @param {LocalTime} time\n     * @param {ZoneOffset} offset\n     * @return {OffsetTime}\n     */\n    static ofTimeAndOffset(time, offset) {\n        return new OffsetTime(time, offset);\n    }\n\n    /**\n     * @param {!Instant} instant\n     * @param {!ZoneId} zone\n     * @return {!OffsetTime}\n     */\n    static ofInstant( instant,  zone){\n        requireNonNull(instant, 'instant');\n        requireInstance(instant, Instant, 'instant');\n        requireNonNull(zone, 'zone');\n        requireInstance(zone, ZoneId, 'zone');\n\n        const rules = zone.rules();\n        const offset = rules.offset(instant);\n        let secsOfDay = instant.epochSecond() % LocalTime.SECONDS_PER_DAY;\n        secsOfDay = (secsOfDay + offset.totalSeconds()) % LocalTime.SECONDS_PER_DAY;\n        if (secsOfDay < 0) {\n            secsOfDay += LocalTime.SECONDS_PER_DAY;\n        }\n        const time = LocalTime.ofSecondOfDay(secsOfDay, instant.nano());\n        return new OffsetTime(time, offset);\n    }\n\n    /**\n     * @param {string} text\n     * @param {DateTimeFormatter} formatter\n     * @return {OffsetTime}\n     */\n    static parse(text, formatter= DateTimeFormatter.ISO_OFFSET_TIME) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.parse(text, OffsetTime.FROM);\n    }\n    //-----------------------------------------------------------------------\n\n    /**\n     * @param {LocalTime} time\n     * @param {ZoneOffset} offset\n     * @private\n     */\n    constructor(time, offset) {\n        super();\n        requireNonNull(time, 'time');\n        requireInstance(time, LocalTime, 'time');\n        requireNonNull(offset, 'offset');\n        requireInstance(offset, ZoneOffset, 'offset');\n        this._time = time;\n        this._offset = offset;\n    }\n\n\n    /**\n     * @param {TemporalAdjuster} temporal - the target object to be adjusted, not null\n     * @return {Temporal} the adjusted object, not null\n     * @throws {DateTimeException} if unable to make the adjustment\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    adjustInto(temporal) {\n        return temporal\n            .with(ChronoField.NANO_OF_DAY, this._time.toNanoOfDay())\n            .with(ChronoField.OFFSET_SECONDS, this.offset().totalSeconds());\n    }\n\n    /**\n     * @param {LocalDate} date - the date to combine with, not null\n     * @return {OffsetDateTime} the offset date-time formed from this time and the specified date, not null\n     */\n    atDate(date) {\n        return OffsetDateTime.of(date, this._time, this._offset);\n    }\n\n    /**\n     * @param {DateTimeFormatter} formatter - the formatter to use, not null\n     * @return {string} the formatted time string, not null\n     * @throws {DateTimeException} if an error occurs during printing\n     */\n    format(formatter) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.format(this, OffsetTime.FROM);\n    }\n\n\n    /**\n     * @param {TemporalField} field - the field to get, not null\n     * @return {number} the value for the field\n     * @throws {DateTimeException} if a value for the field cannot be obtained\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    get(field) {\n        return super.get(field);\n    }\n\n    /**\n     * @param {TemporalField} field - the field to get, not null\n     * @return {number} the value for the field\n     * @throws {DateTimeException} if a value for the field cannot be obtained\n     * @trhows {UnsupportedTemporalTypeException}\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    getLong(field) {\n        if (field instanceof ChronoField) {\n            if (field === ChronoField.OFFSET_SECONDS) {\n                return this._offset.totalSeconds();\n            }\n            return this._time.getLong(field);\n        }\n        return field.getFrom(this);\n    }\n\n    /**\n     * @return {int}\n     */\n    hour() {\n        return this._time.hour();\n    }\n\n    /**\n     * @return {int}\n     */\n    minute() {\n        return this._time.minute();\n    }\n\n    /**\n     * @return {int}\n     */\n    second() {\n        return this._time.second();\n    }\n\n    /**\n     * @return {int}\n     */\n    nano() {\n        return this._time.nano();\n    }\n\n    /**\n     * @return {ZoneOffset}\n     */\n    offset() {\n        return this._offset;\n    }\n\n    /**\n     * @param {OffsetTime} other - the other time to compare to, not null\n     * @return {boolean} true if this is after the specified time\n     * @throws {NullPointerException} if `other` is null\n     */\n    isAfter(other) {\n        requireNonNull(other, 'other');\n        return this._toEpochNano() > other._toEpochNano();\n    }\n\n    /**\n     * @param {OffsetTime} other - the other time to compare to, not null\n     * @return {boolean} true if this point is before the specified time\n     * @throws {NullPointerException} if `other` is null\n     */\n    isBefore(other) {\n        requireNonNull(other, 'other');\n        return this._toEpochNano() < other._toEpochNano();\n    }\n\n    /**\n     * @param {OffsetTime} other - the other time to compare to, not null\n     * @return {boolean}\n     * @throws {NullPointerException} if `other` is null\n     */\n    isEqual(other) {\n        requireNonNull(other, 'other');\n        return this._toEpochNano() === other._toEpochNano();\n    }\n\n    /**\n     * @param {TemporalField|TemporalUnit} fieldOrUnit - the field to check, null returns false\n     * @return {boolean} true if the field is supported on this time, false if not\n     */\n    isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit.isTimeBased() || fieldOrUnit === ChronoField.OFFSET_SECONDS;\n        } else if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isTimeBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    }\n\n    /**\n     * @param {number} hours\n     * @return {OffsetTime}\n     */\n    minusHours(hours) {\n        return this._withLocalTimeOffset(this._time.minusHours(hours), this._offset);\n    }\n\n    /**\n     * @param {number} minutes\n     * @return {OffsetTime}\n     */\n    minusMinutes(minutes) {\n        return this._withLocalTimeOffset(this._time.minusMinutes(minutes), this._offset);\n    }\n\n    /**\n     * @param {number} seconds\n     * @return {OffsetTime}\n     */\n    minusSeconds(seconds) {\n        return this._withLocalTimeOffset(this._time.minusSeconds(seconds), this._offset);\n    }\n\n    /**\n     * @param {number} nanos\n     * @return {OffsetTime}\n     */\n    minusNanos(nanos) {\n        return this._withLocalTimeOffset(this._time.minusNanos(nanos), this._offset);\n    }\n\n    _minusAmount(amount) {\n        requireNonNull(amount);\n        return amount.subtractFrom(this);\n    }\n\n    _minusUnit(amountToSubtract, unit) {\n        return this.plus(-1 * amountToSubtract, unit);\n    }\n\n    _plusAmount(amount) {\n        requireNonNull(amount);\n        return amount.addTo(this);\n    }\n\n    /**\n     *\n     * @param amountToAdd\n     * @param unit\n     * @return {Temporal}\n     */\n    _plusUnit(amountToAdd, unit) {\n        if (unit instanceof ChronoUnit) {\n            return this._withLocalTimeOffset(this._time.plus(amountToAdd, unit), this._offset);\n        }\n        return unit.addTo(this, amountToAdd);\n    }\n\n    /**\n     * @param {int} hours\n     * @return {OffsetTime}\n     */\n    plusHours(hours) {\n        return this._withLocalTimeOffset(this._time.plusHours(hours), this._offset);\n    }\n\n    /**\n     * @param {int} minutes\n     * @return {OffsetTime}\n     */\n    plusMinutes(minutes) {\n        return this._withLocalTimeOffset(this._time.plusMinutes(minutes), this._offset);\n    }\n\n    /**\n     * @param {int} seconds\n     * @return {OffsetTime}\n     */\n    plusSeconds(seconds) {\n        return this._withLocalTimeOffset(this._time.plusSeconds(seconds), this._offset);\n    }\n\n    /**\n     * @param {int} nanos\n     * @return {OffsetTime}\n     */\n    plusNanos(nanos) {\n        return this._withLocalTimeOffset(this._time.plusNanos(nanos), this._offset);\n    }\n\n    /**\n     * @param {TemporalQuery} query - the query to invoke, not null\n     * @return {*} the query result, null may be returned (defined by the query)\n     * @throws {DateTimeException} if unable to query (defined by the query)\n     * @throws {ArithmeticException} if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        requireNonNull(query, 'query');\n        if (query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        } else if (query === TemporalQueries.offset() || query === TemporalQueries.zone()) {\n            return this.offset();\n        } else if (query === TemporalQueries.localTime()) {\n            return this._time;\n        } else if (query === TemporalQueries.chronology() || query === TemporalQueries.localDate() || query === TemporalQueries.zoneId()) {\n            return null;\n        }\n        return super.query(query);\n    }\n\n    /**\n     * @param {TemporalField} field - the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws {DateTimeException} if the range for the field cannot be obtained\n     */\n    range(field) {\n        if (field instanceof ChronoField) {\n            if (field === ChronoField.OFFSET_SECONDS) {\n                return field.range();\n            }\n            return this._time.range(field);\n        }\n        return field.rangeRefinedBy(this);\n    }\n\n    /**\n     * @return {LocalTime}\n     */\n    toLocalTime() {\n        return this._time;\n    }\n\n    /**\n     * @param {TemporalUnit} unit - the unit to truncate to, not null\n     * @return {OffsetTime} a {@link LocalTime} based on this time with the time truncated, not null\n     * @throws {DateTimeException} if unable to truncate\n     */\n    truncatedTo(unit) {\n        return this._withLocalTimeOffset(this._time.truncatedTo(unit), this._offset);\n    }\n\n    /**\n    * @param {Temporal} endExclusive - the end time, which is converted to a {@link LocalTime}, not null\n    * @param {TemporalUnit} unit - the unit to measure the period in, not null\n    * @return {number} the amount of the period between this time and the end time\n    * @throws {DateTimeException} if the period cannot be calculated\n    * @throws {ArithmeticException} if numeric overflow occurs\n    */\n    until(endExclusive, unit) {\n        requireNonNull(endExclusive, 'endExclusive');\n        requireNonNull(unit, 'unit');\n        const end = OffsetTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            const nanosUntil = end._toEpochNano() - this._toEpochNano(); // no overflow\n            switch (unit) {\n                case ChronoUnit.NANOS: return nanosUntil;\n                case ChronoUnit.MICROS: return MathUtil.intDiv(nanosUntil, 1000);\n                case ChronoUnit.MILLIS: return MathUtil.intDiv(nanosUntil, 1000000);\n                case ChronoUnit.SECONDS: return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_SECOND);\n                case ChronoUnit.MINUTES: return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_MINUTE);\n                case ChronoUnit.HOURS: return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_HOUR);\n                case ChronoUnit.HALF_DAYS: return MathUtil.intDiv(nanosUntil, (12 * LocalTime.NANOS_PER_HOUR));\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.between(this, end);\n    }\n\n    /**\n     * @param {int} hour\n     * @return {OffsetTime}\n     */\n    withHour(hour) {\n        return this._withLocalTimeOffset(this._time.withHour(hour), this._offset);\n    }\n\n    /**\n     * @param {int} minute\n     * @return {OffsetTime}\n     */\n    withMinute(minute) {\n        return this._withLocalTimeOffset(this._time.withMinute(minute), this._offset);\n    }\n\n    /**\n     * @param {int} second\n     * @return {OffsetTime}\n     */\n    withSecond(second) {\n        return this._withLocalTimeOffset(this._time.withSecond(second), this._offset);\n    }\n\n    /**\n     * @param {int} nano\n     * @return {OffsetTime}\n     */\n    withNano(nano) {\n        return this._withLocalTimeOffset(this._time.withNano(nano), this._offset);\n    }\n\n    /**\n     * @param {ZoneOffset} offset\n     * @return {OffsetTime}\n     */\n    withOffsetSameInstant(offset) {\n        requireNonNull(offset, 'offset');\n        if (offset.equals(this._offset)) {\n            return this;\n        }\n        const difference = offset.totalSeconds() - this._offset.totalSeconds();\n        const adjusted = this._time.plusSeconds(difference);\n        return new OffsetTime(adjusted, offset);\n    }\n\n    /**\n     * @param {ZoneOffset} offset\n     * @return {OffsetTime}\n     */\n    withOffsetSameLocal(offset) {\n        return offset != null && offset.equals(this._offset) ? this : new OffsetTime(this._time, offset);\n    }\n\n    _toEpochNano() {\n        const nod = this._time.toNanoOfDay();\n        const offsetNanos = this._offset.totalSeconds() * LocalTime.NANOS_PER_SECOND;\n        return nod - offsetNanos;\n    }\n\n    _withAdjuster(adjuster) {\n        requireNonNull(adjuster, 'adjuster');\n        // optimizations\n        if (adjuster instanceof LocalTime) {\n            return this._withLocalTimeOffset(adjuster, this._offset);\n        } else if (adjuster instanceof ZoneOffset) {\n            return this._withLocalTimeOffset(this._time, adjuster);\n        } else if (adjuster instanceof OffsetTime) {\n            return adjuster;\n        }\n        return adjuster.adjustInto(this);\n    }\n\n    _withField(field, newValue) {\n        requireNonNull(field, 'field');\n        if (field instanceof ChronoField) {\n            if (field === ChronoField.OFFSET_SECONDS) {\n                return this._withLocalTimeOffset(this._time, ZoneOffset.ofTotalSeconds(field.checkValidIntValue(newValue)));\n            }\n            return this._withLocalTimeOffset(this._time.with(field, newValue), this._offset);\n        }\n        return field.adjustInto(this, newValue);\n    }\n\n    /**\n     * @private\n     * @param {LocalTime} time\n     * @param {ZoneOffset} offset\n     * @return {OffsetTime}\n     */\n    _withLocalTimeOffset(time, offset) {\n        if (this._time === time && this._offset.equals(offset)) {\n            return this;\n        }\n        return new OffsetTime(time, offset);\n    }\n\n    //---------------------------------\n\n    /**\n     * @param {OffsetTime} other - the other time to compare to, not null\n     * @return {int} the comparator value, negative if less, positive if greater\n     * @throws {NullPointerException} if `other` is null\n     */\n    compareTo(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, OffsetTime, 'other');\n        if (this._offset.equals(other._offset)) {\n            return this._time.compareTo(other._time);\n        }\n        const compare = MathUtil.compareNumbers(this._toEpochNano(), other._toEpochNano());\n        if (compare === 0) {\n            return this._time.compareTo(other._time);\n        }\n        return compare;\n    }\n\n    /**\n     * @param {*} other - the object to check, null returns false\n     * @return {boolean} true if this is equal to the other time\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof OffsetTime) {\n            return this._time.equals(other._time) && this._offset.equals(other._offset);\n        }\n        return false;\n    }\n\n    /**\n     * @return {number}\n     */\n    hashCode() {\n        return this._time.hashCode() ^ this._offset.hashCode();\n    }\n\n    /**\n     * @return {string}\n     */\n    toString() {\n        return this._time.toString() + this._offset.toString();\n    }\n\n    /**\n     *\n     * @return {string} same as {@link LocalDateTime.toString}\n     */\n    toJSON() {\n        return this.toString();\n    }\n}\n\n\nexport function _init() {\n    OffsetTime.MIN = OffsetTime.ofNumbers(0, 0, 0,0, ZoneOffset.MAX);\n\n    OffsetTime.MAX = OffsetTime.ofNumbers(23, 59, 59,999999999, ZoneOffset.MIN);\n\n    OffsetTime.FROM = createTemporalQuery('OffsetTime.FROM', (temporal) => {\n        return OffsetTime.from(temporal);\n    });\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull } from '../assert';\nimport { Instant } from '../Instant';\nimport { LocalDate } from '../LocalDate';\nimport { MathUtil } from '../MathUtil';\n\nimport { ChronoUnit } from '../temporal/ChronoUnit';\nimport { Temporal } from '../temporal/Temporal';\nimport { TemporalQueries } from '../temporal/TemporalQueries';\n\nexport class ChronoZonedDateTime extends Temporal {\n    query(query) {\n        if (query === TemporalQueries.zoneId() || query === TemporalQueries.zone()) {\n            return this.zone();\n        } else if (query === TemporalQueries.chronology()) {\n            return this.toLocalDate().chronology();\n        } else if (query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        } else if (query === TemporalQueries.offset()) {\n            return this.offset();\n        } else if (query === TemporalQueries.localDate()) {\n            return LocalDate.ofEpochDay(this.toLocalDate().toEpochDay());\n        } else if (query === TemporalQueries.localTime()) {\n            return this.toLocalTime();\n        }\n        return super.query(query);\n    }\n\n    /**\n     * Outputs this date-time as a string using the formatter.\n     *\n     * @param {DateTimeFormatter} formatter - the formatter to use, not null\n     * @return {string} the formatted date-time string, not null\n     * @throws DateTimeException if an error occurs during printing\n     */\n    format(formatter) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.format(this);\n    }\n\n    /**\n     * Converts this date-time to an {@link Instant}.\n     *\n     * This returns an {@link Instant} representing the same point on the\n     * time-line as this date-time. The calculation combines the\n     * local date-time (see {@link toLocalDateTime}) and\n     * offset (see {@link getOffset}).\n     *\n     * @return {Instant} an {@link Instant} representing the same instant, not null\n     */\n    toInstant() {\n        return Instant.ofEpochSecond(this.toEpochSecond(), this.toLocalTime().nano());\n    }\n\n    /**\n     * Converts this date-time to the number of seconds from the epoch\n     * of 1970-01-01T00:00:00Z.\n     *\n     * This uses the local date-time (see {@link toLocalDateTime}) and\n     * offset (see {@link getOffset}) to calculate the epoch-second value,\n     * which is the number of elapsed seconds from 1970-01-01T00:00:00Z.\n     * Instants on the time-line after the epoch are positive, earlier are negative.\n     *\n     * @return {number} the number of seconds from the epoch of 1970-01-01T00:00:00Z\n     */\n    toEpochSecond() {\n        const epochDay = this.toLocalDate().toEpochDay();\n        let secs = epochDay * 86400 + this.toLocalTime().toSecondOfDay();\n        secs -= this.offset().totalSeconds();\n        return secs;\n    }\n\n    /**\n      * Compares this date-time to another date-time, including the chronology.\n      *\n      * The comparison is based first on the instant, then on the local date-time,\n      * then on the zone ID, then on the chronology.\n      * It is \"consistent with equals\", as defined by {@link Comparable}.\n      *\n      * If all the date-time objects being compared are in the same chronology, then the\n      * additional chronology stage is not required.\n      *\n      * @param {ChronoZonedDateTime} other - the other date-time to compare to, not null\n      * @return {number} the comparator value, negative if less, positive if greater\n      */\n    compareTo(other) {\n        requireNonNull(other, 'other');\n        let cmp = MathUtil.compareNumbers(this.toEpochSecond(), other.toEpochSecond());\n        if (cmp === 0) {\n            cmp = this.toLocalTime().nano() - other.toLocalTime().nano();\n            if (cmp === 0) {\n                cmp = this.toLocalDateTime().compareTo(other.toLocalDateTime());\n                if (cmp === 0) {\n                    cmp = strcmp(this.zone().id(), other.zone().id());\n                    // we only support iso for now\n                    //if (cmp === 0) {\n                    //    cmp = toLocalDate().getChronology().compareTo(other.toLocalDate().getChronology());\n                    //}\n                }\n            }\n        }\n        return cmp;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if the instant of this date-time is after that of the specified date-time.\n     *\n     * This method differs from the comparison in {@link compareTo} in that it\n     * only compares the instant of the date-time. This is equivalent to using\n     * `dateTime1.toInstant().isAfter(dateTime2.toInstant())`.\n     *\n     * @param {!ChronoZonedDateTime} other - the other date-time to compare to, not null\n     * @return {boolean} true if this is after the specified date-time\n     */\n    isAfter(other) {\n        requireNonNull(other, 'other');\n        const thisEpochSec = this.toEpochSecond();\n        const otherEpochSec = other.toEpochSecond();\n        return thisEpochSec > otherEpochSec ||\n            (thisEpochSec === otherEpochSec && this.toLocalTime().nano() > other.toLocalTime().nano());\n    }\n\n    /**\n     * Checks if the instant of this date-time is before that of the specified date-time.\n     *\n     * This method differs from the comparison in {@link compareTo} in that it\n     * only compares the instant of the date-time. This is equivalent to using\n     * `dateTime1.toInstant().isBefore(dateTime2.toInstant())`.\n     *\n     * @param {!ChronoZonedDateTime} other - the other date-time to compare to, not null\n     * @return {boolean} true if this point is before the specified date-time\n     */\n    isBefore(other) {\n        requireNonNull(other, 'other');\n        const thisEpochSec = this.toEpochSecond();\n        const otherEpochSec = other.toEpochSecond();\n        return thisEpochSec < otherEpochSec ||\n            (thisEpochSec === otherEpochSec && this.toLocalTime().nano() < other.toLocalTime().nano());\n    }\n\n    /**\n     * Checks if the instant of this date-time is equal to that of the specified date-time.\n     *\n     * This method differs from the comparison in {@link compareTo} and {@link equals}\n     * in that it only compares the instant of the date-time. This is equivalent to using\n     * `dateTime1.toInstant().equals(dateTime2.toInstant())`.\n     *\n     * @param {!ChronoZonedDateTime} other - the other date-time to compare to, not null\n     * @return {boolean} true if the instant equals the instant of the specified date-time\n     */\n    isEqual(other) {\n        requireNonNull(other, 'other');\n        return this.toEpochSecond() === other.toEpochSecond() &&\n                this.toLocalTime().nano() === other.toLocalTime().nano();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this date-time is equal to another date-time.\n     *\n     * The comparison is based on the offset date-time and the zone.\n     * To compare for the same instant on the time-line, use {@link compareTo}.\n     * Only objects of type {@link ChronoZoneDateTime} are compared, other types return false.\n     *\n     * @param {*} other  the object to check, null returns false\n     * @return {boolean} true if this is equal to the other date-time\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ChronoZonedDateTime) {\n            return this.compareTo(other) === 0;\n        }\n        return false;\n    }\n\n}\n\nfunction strcmp(a, b){\n    if (a < b) {\n        return -1;\n    }\n    if (a > b) {\n        return 1;\n    }\n    return 0;\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull } from './assert';\nimport { DateTimeException, IllegalArgumentException } from './errors';\nimport { MathUtil } from './MathUtil';\n\nimport { Clock } from './Clock';\nimport { Instant } from './Instant';\nimport { LocalDate } from './LocalDate';\nimport { LocalDateTime } from './LocalDateTime';\nimport { LocalTime } from './LocalTime';\nimport { OffsetDateTime } from './OffsetDateTime';\nimport { ZoneId } from './ZoneId';\nimport { ZoneOffset } from './ZoneOffset';\n\nimport { ChronoZonedDateTime } from './chrono/ChronoZonedDateTime';\nimport { DateTimeFormatter } from './format/DateTimeFormatter';\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { createTemporalQuery } from './temporal/TemporalQuery';\nimport { TemporalQueries } from './temporal/TemporalQueries';\n\n/**\n * A date-time with a time-zone in the ISO-8601 calendar system,\n * such as `2007-12-03T10:15:30+01:00 Europe/Paris`.\n *\n * `ZonedDateTime` is an immutable representation of a date-time with a time-zone.\n * This class stores all date and time fields, to a precision of nanoseconds,\n * and a time-zone, with a zone offset used to handle ambiguous local date-times.\n * For example, the value\n * '2nd October 2007 at 13:45.30.123456789 +02:00 in the Europe/Paris time-zone'\n * can be stored in a {@link ZonedDateTime}.\n *\n * This class handles conversion from the local time-line of {@link LocalDateTime}\n * to the instant time-line of {@link Instant}.\n * The difference between the two time-lines is the offset from UTC/Greenwich,\n * represented by a {@link ZoneOffset}.\n *\n * Converting between the two time-lines involves calculating the offset using the\n * {@link ZoneRules} rules accessed from the {@link ZoneId}.\n * Obtaining the offset for an instant is simple, as there is exactly one valid\n * offset for each instant. By contrast, obtaining the offset for a local date-time\n * is not straightforward. There are three cases:\n *\n * * Normal, with one valid offset. For the vast majority of the year, the normal\n *   case applies, where there is a single valid offset for the local date-time.\n * * Gap, with zero valid offsets. This is when clocks jump forward typically\n *   due to the spring daylight savings change from 'winter' to 'summer'.\n *   In a gap there are local date-time values with no valid offset.\n * * Overlap, with two valid offsets. This is when clocks are set back typically\n *   due to the autumn daylight savings change from 'summer' to 'winter'.\n *   In an overlap there are local date-time values with two valid offsets.\n *\n * Any method that converts directly or implicitly from a local date-time to an\n * instant by obtaining the offset has the potential to be complicated.\n *\n * For Gaps, the general strategy is that if the local date-time falls in the\n * middle of a Gap, then the resulting zoned date-time will have a local date-time\n * shifted forwards by the length of the Gap, resulting in a date-time in the later\n * offset, typically 'summer' time.\n *\n * For Overlaps, the general strategy is that if the local date-time falls in the\n * middle of an Overlap, then the previous offset will be retained. If there is no\n * previous offset, or the previous offset is invalid, then the earlier offset is\n * used, typically 'summer' time. Two additional methods,\n * {@link withEarlierOffsetAtOverlap} and {@link withLaterOffsetAtOverlap},\n * help manage the case of an overlap.\n *\n * ### Specification for implementors\n *\n * A {@link ZonedDateTime} holds state equivalent to three separate objects,\n * a {@link LocalDateTime}, a {@link ZoneId} and the resolved {@link ZoneOffset}.\n * The offset and local date-time are used to define an instant when necessary.\n * The zone ID is used to obtain the rules for how and when the offset changes.\n * The offset cannot be freely set, as the zone controls which offsets are valid.\n */\nexport class ZonedDateTime extends ChronoZonedDateTime {\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains the current date-time from the system clock in the specified time-zone or clock\n     * or default time zone.\n     *\n     * This will query the system clock (see {@link Clock#systemDefaultZone}) in the default\n     * time-zone to obtain the current date-time.\n     * The zone and offset will be set based on the time-zone in the clock.\n     *\n     * Using this method will prevent the ability to use an alternate clock for testing\n     * because the clock is hard-coded.\n     *\n     * @param {Clock|ZoneId} [clockOrZone=Clock.systemDefaultZone()]\n     * @return {ZonedDateTime} the current date-time using the system clock, not null\n     */\n    static now(clockOrZone) {\n        let clock;\n        if(clockOrZone instanceof ZoneId){\n            clock = Clock.system(clockOrZone);\n        } else {\n            clock = clockOrZone == null ? Clock.systemDefaultZone() : clockOrZone;\n        }\n        return ZonedDateTime.ofInstant(clock.instant(), clock.zone());\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for static {@link ZonedDateTime.of}\n     *\n     * if called with 2 (or less) args {@link ZonedDateTime.of2} is called,\n     * if called with 3 args and the first arg is an instance of LocalDate {@link ZonedDateTime.of3} is called,\n     * otherwise {@link ZonedDateTime.of8} is called.\n     */\n    static of(){\n        if(arguments.length <= 2){\n            return ZonedDateTime.of2.apply(this, arguments);\n        } else if (arguments.length === 3 && arguments[0] instanceof LocalDate){\n            return ZonedDateTime.of3.apply(this, arguments);\n        } else {\n            return ZonedDateTime.of8.apply(this, arguments);\n        }\n    }\n    /**\n     * Obtains an instance of {@link ZonedDateTime} from a local date and time.\n     *\n     * This creates a zoned date-time matching the input local date and time as closely as possible.\n     * Time-zone rules, such as daylight savings, mean that not every local date-time\n     * is valid for the specified zone, thus the local date-time may be adjusted.\n     *\n     * The local date time and first combined to form a local date-time.\n     * The local date-time is then resolved to a single instant on the time-line.\n     * This is achieved by finding a valid offset from UTC/Greenwich for the local\n     * date-time as defined by the {@link ZoneRules} of the zone ID.\n     *\n     * In most cases, there is only one valid offset for a local date-time.\n     * In the case of an overlap, when clocks are set back, there are two valid offsets.\n     * This method uses the earlier offset typically corresponding to 'summer'.\n     *\n     * In the case of a gap, when clocks jump forward, there is no valid offset.\n     * Instead, the local date-time is adjusted to be later by the length of the gap.\n     * For a typical one hour daylight savings change, the local date-time will be\n     * moved one hour later into the offset typically corresponding to 'summer'.\n     *\n     * @param {LocalDate} date - the local date, not null\n     * @param {LocalTime} time - the local time, not null\n     * @param {ZoneId} zone - the time-zone, not null\n     * @return {ZonedDateTime} the offset date-time, not null\n     */\n    static of3(date, time, zone) {\n        return ZonedDateTime.of2(LocalDateTime.of(date, time), zone);\n    }\n\n    /**\n     * Obtains an instance of {@link ZonedDateTime} from a local date-time.\n     *\n     * This creates a zoned date-time matching the input local date-time as closely as possible.\n     * Time-zone rules, such as daylight savings, mean that not every local date-time\n     * is valid for the specified zone, thus the local date-time may be adjusted.\n     *\n     * The local date-time is resolved to a single instant on the time-line.\n     * This is achieved by finding a valid offset from UTC/Greenwich for the local\n     * date-time as defined by the {@link ZoneRules} of the zone ID.\n     *\n     * In most cases, there is only one valid offset for a local date-time.\n     * In the case of an overlap, when clocks are set back, there are two valid offsets.\n     * This method uses the earlier offset typically corresponding to 'summer'.\n     *\n     * In the case of a gap, when clocks jump forward, there is no valid offset.\n     * Instead, the local date-time is adjusted to be later by the length of the gap.\n     * For a typical one hour daylight savings change, the local date-time will be\n     * moved one hour later into the offset typically corresponding to 'summer'.\n     *\n     * @param {!LocalDateTime} localDateTime - the local date-time, not null\n     * @param {!ZoneId} zone - the time-zone, not null\n     * @return {ZonedDateTime} the zoned date-time, not null\n     */\n    static of2(localDateTime, zone) {\n        return ZonedDateTime.ofLocal(localDateTime, zone, null);\n    }\n\n    /**\n     * Obtains an instance of {@link ZonedDateTime} from a year, month, day,\n     * hour, minute, second, nanosecond and time-zone.\n     *\n     * This creates a zoned date-time matching the local date-time of the seven\n     * specified fields as closely as possible.\n     * Time-zone rules, such as daylight savings, mean that not every local date-time\n     * is valid for the specified zone, thus the local date-time may be adjusted.\n     *\n     * The local date-time is resolved to a single instant on the time-line.\n     * This is achieved by finding a valid offset from UTC/Greenwich for the local\n     * date-time as defined by the {@link ZoneRules} of the zone ID.\n     *\n     * In most cases, there is only one valid offset for a local date-time.\n     * In the case of an overlap, when clocks are set back, there are two valid offsets.\n     * This method uses the earlier offset typically corresponding to 'summer'.\n     *\n     * In the case of a gap, when clocks jump forward, there is no valid offset.\n     * Instead, the local date-time is adjusted to be later by the length of the gap.\n     * For a typical one hour daylight savings change, the local date-time will be\n     * moved one hour later into the offset typically corresponding to 'summer'.\n     *\n     * This method exists primarily for writing test cases.\n     * Non test-code will typically use other methods to create an offset time.\n     * {@link LocalDateTime} has five additional convenience variants of the\n     * equivalent factory method taking fewer arguments.\n     * They are not provided here to reduce the footprint of the API.\n     *\n     * @param {number} year - the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param {number} month - the month-of-year to represent, from 1 (January) to 12 (December)\n     * @param {number} dayOfMonth - the day-of-month to represent, from 1 to 31\n     * @param {number} hour - the hour-of-day to represent, from 0 to 23\n     * @param {number} minute - the minute-of-hour to represent, from 0 to 59\n     * @param {number} second - the second-of-minute to represent, from 0 to 59\n     * @param {number} nanoOfSecond - the nano-of-second to represent, from 0 to 999,999,999\n     * @param {ZoneId} zone - the time-zone, not null\n     * @return {ZonedDateTime } the offset date-time, not null\n     * @throws DateTimeException if the value of any field is out of range, or\n     *  if the day-of-month is invalid for the month-year\n     */\n    static of8(\n        year, month, dayOfMonth,\n        hour, minute, second, nanoOfSecond, zone) {\n        const dt = LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, nanoOfSecond);\n        return ZonedDateTime.ofLocal(dt, zone, null);\n    }\n\n    /**\n     * Obtains an instance of {@link ZonedDateTime} from a local date-time\n     * using the preferred offset if possible.\n     *\n     * The local date-time is resolved to a single instant on the time-line.\n     * This is achieved by finding a valid offset from UTC/Greenwich for the local\n     * date-time as defined by the {@link ZoneRules} of the zone ID.\n     *\n     * In most cases, there is only one valid offset for a local date-time.\n     * In the case of an overlap, where clocks are set back, there are two valid offsets.\n     * If the preferred offset is one of the valid offsets then it is used.\n     * Otherwise the earlier valid offset is used, typically corresponding to 'summer'.\n     *\n     * In the case of a gap, where clocks jump forward, there is no valid offset.\n     * Instead, the local date-time is adjusted to be later by the length of the gap.\n     * For a typical one hour daylight savings change, the local date-time will be\n     * moved one hour later into the offset typically corresponding to 'summer'.\n     *\n     * @param {!LocalDateTime} localDateTime - the local date-time, not null\n     * @param {!ZoneId} zone - the time-zone, not null\n     * @param {ZoneOffset} preferredOffset - the zone offset, null if no preference\n     * @return {ZonedDateTime} the zoned date-time, not null\n     */\n    static ofLocal(localDateTime, zone, preferredOffset) {\n        requireNonNull(localDateTime, 'localDateTime');\n        requireNonNull(zone, 'zone');\n        if (zone instanceof ZoneOffset) {\n            return new ZonedDateTime(localDateTime, zone, zone);\n        }\n        let offset = null;\n        const rules = zone.rules();\n        const validOffsets = rules.validOffsets(localDateTime);\n        if (validOffsets.length === 1) {\n            offset = validOffsets[0];\n        } else if (validOffsets.length === 0) {\n            const trans = rules.transition(localDateTime);\n            localDateTime = localDateTime.plusSeconds(trans.duration().seconds());\n            offset = trans.offsetAfter();\n        } else {\n            if (preferredOffset != null &&\n                    validOffsets.some((validOffset) => {return validOffset.equals(preferredOffset);})) {\n                offset = preferredOffset;\n            } else {\n                offset = requireNonNull(validOffsets[0], 'offset');  // protect against bad ZoneRules\n            }\n        }\n\n        return new ZonedDateTime(localDateTime, offset, zone);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for {@link ZonedDateTime.ofInstant}.\n     * if called with 2 args {@link ZonedDateTime.ofInstant2} is called\n     * otherwise {@link ZonedDateTime.ofInstant3}.\n     */\n    static ofInstant(){\n        if (arguments.length === 2){\n            return ZonedDateTime.ofInstant2.apply(this, arguments);\n        } else {\n            return ZonedDateTime.ofInstant3.apply(this, arguments);\n        }\n    }\n    /**\n     * Obtains an instance of {@link ZonedDateTime} from an {@link Instant}.\n     *\n     * This creates a zoned date-time with the same instant as that specified.\n     * Calling {@link toInstant} will return an instant equal to the one used here.\n     *\n     * Converting an instant to a zoned date-time is simple as there is only one valid\n     * offset for each instant.\n     *\n     * @param {!Instant} instant - the instant to create the date-time from, not null\n     * @param {!ZoneId} zone - the time-zone, not null\n     * @return {ZonedDateTime} the zoned date-time, not null\n     * @throws DateTimeException if the result exceeds the supported range\n     */\n    static ofInstant2(instant, zone) {\n        requireNonNull(instant, 'instant');\n        requireNonNull(zone, 'zone');\n        return ZonedDateTime._create(instant.epochSecond(), instant.nano(), zone);\n    }\n\n    /**\n     * Obtains an instance of {@link ZonedDateTime} from the instant formed by combining\n     * the local date-time and offset.\n     *\n     * This creates a zoned date-time by combining the {@link LocalDateTime} and {@link ZoneOffset}.\n     * This combination uniquely specifies an instant without ambiguity.\n     *\n     * Converting an instant to a zoned date-time is simple as there is only one valid\n     * offset for each instant. If the valid offset is different to the offset specified,\n     * the the date-time and offset of the zoned date-time will differ from those specified.\n     *\n     * If the {@link ZoneId} to be used is a {@link ZoneOffset}, this method is equivalent\n     * to {@link of}.\n     *\n     * @param {LocalDateTime} localDateTime - the local date-time, not null\n     * @param {ZoneOffset} offset - the zone offset, not null\n     * @param {ZoneId} zone - the time-zone, not null\n     * @return {ZonedDateTime} the zoned date-time, not null\n     */\n    static ofInstant3(localDateTime, offset, zone) {\n        requireNonNull(localDateTime, 'localDateTime');\n        requireNonNull(offset, 'offset');\n        requireNonNull(zone, 'zone');\n        return ZonedDateTime._create(localDateTime.toEpochSecond(offset), localDateTime.nano(), zone);\n    }\n\n    /**\n     * Obtains an instance of {@link ZonedDateTime} using seconds from the\n     * epoch of 1970-01-01T00:00:00Z.\n     *\n     * @param {number} epochSecond - the number of seconds from the epoch of 1970-01-01T00:00:00Z\n     * @param {number} nanoOfSecond - the nanosecond within the second, from 0 to 999,999,999\n     * @param {ZoneId} zone - the time-zone, not null\n     * @return {ZonedDateTime} the zoned date-time, not null\n     * @throws DateTimeException if the result exceeds the supported range\n     */\n    static _create(epochSecond, nanoOfSecond, zone) {\n        const rules = zone.rules();\n        const instant = Instant.ofEpochSecond(epochSecond, nanoOfSecond);  // TODO: rules should be queryable by epochSeconds\n        const offset = rules.offset(instant);\n        const ldt = LocalDateTime.ofEpochSecond(epochSecond, nanoOfSecond, offset);\n        return new ZonedDateTime(ldt, offset, zone);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link ZonedDateTime} strictly validating the\n     * combination of local date-time, offset and zone ID.\n     *\n     * This creates a zoned date-time ensuring that the offset is valid for the\n     * local date-time according to the rules of the specified zone.\n     * If the offset is invalid, an exception is thrown.\n     *\n     * @param {LocalDateTime} localDateTime - the local date-time, not null\n     * @param {ZoneOffset} offset - the zone offset, not null\n     * @param {ZoneId} zone - the time-zone, not null\n     * @return {ZonedDateTime} the zoned date-time, not null\n     */\n    static ofStrict(localDateTime, offset, zone) {\n        requireNonNull(localDateTime, 'localDateTime');\n        requireNonNull(offset, 'offset');\n        requireNonNull(zone, 'zone');\n        const rules = zone.rules();\n        if (rules.isValidOffset(localDateTime, offset) === false) {\n            const trans = rules.transition(localDateTime);\n            if (trans != null && trans.isGap()) {\n                // error message says daylight savings for simplicity\n                // even though there are other kinds of gaps\n                throw new DateTimeException(`LocalDateTime ${localDateTime \n                } does not exist in zone ${zone \n                } due to a gap in the local time-line, typically caused by daylight savings`);\n            }\n            throw new DateTimeException(`ZoneOffset \"${offset}\" is not valid for LocalDateTime \"${ \n                localDateTime}\" in zone \"${zone}\"`);\n        }\n        return new ZonedDateTime(localDateTime, offset, zone);\n    }\n\n    /**\n     * Obtains an instance of {@link ZonedDateTime} leniently, for advanced use cases,\n     * allowing any combination of local date-time, offset and zone ID.\n     *\n     * This creates a zoned date-time with no checks other than no nulls.\n     * This means that the resulting zoned date-time may have an offset that is in conflict\n     * with the zone ID.\n     *\n     * This method is intended for advanced use cases.\n     * For example, consider the case where a zoned date-time with valid fields is created\n     * and then stored in a database or serialization-based store. At some later point,\n     * the object is then re-loaded. However, between those points in time, the government\n     * that defined the time-zone has changed the rules, such that the originally stored\n     * local date-time now does not occur. This method can be used to create the object\n     * in an 'invalid' state, despite the change in rules.\n     *\n     * @param {LocalDateTime} localDateTime - the local date-time, not null\n     * @param {ZoneOffset} offset - the zone offset, not null\n     * @param {ZoneId} zone - the time-zone, not null\n     * @return {ZonedDateTime} the zoned date-time, not null\n     */\n    static ofLenient(localDateTime, offset, zone) {\n        requireNonNull(localDateTime, 'localDateTime');\n        requireNonNull(offset, 'offset');\n        requireNonNull(zone, 'zone');\n        if (zone instanceof ZoneOffset && offset.equals(zone) === false) {\n            throw new IllegalArgumentException('ZoneId must match ZoneOffset');\n        }\n        return new ZonedDateTime(localDateTime, offset, zone);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link ZonedDateTime} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link ZonedDateTime}.\n     *\n     * The conversion will first obtain a {@link ZoneId}. It will then try to obtain an instant.\n     * If that fails it will try to obtain a local date-time.\n     * The zoned date time will either be a combination of {@link ZoneId} and instant,\n     * or {@link ZoneId} and local date-time.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used in queries via method reference, {@link ZonedDateTime::from}.\n     *\n     * @param {!TemporalAccessor} temporal - the temporal object to convert, not null\n     * @return {ZonedDateTime} the zoned date-time, not null\n     * @throws DateTimeException if unable to convert to an {@link ZonedDateTime}\n     */\n    static from(temporal) {\n        requireNonNull(temporal, 'temporal');\n        if (temporal instanceof ZonedDateTime) {\n            return temporal;\n        }\n        const zone = ZoneId.from(temporal);\n        if (temporal.isSupported(ChronoField.INSTANT_SECONDS)) {\n            const zdt = ZonedDateTime._from(temporal, zone);\n            if(zdt != null) return zdt;\n        }\n        const ldt = LocalDateTime.from(temporal);\n        return ZonedDateTime.of2(ldt, zone);\n    }\n\n    static _from(temporal, zone){\n        try {\n            return ZonedDateTime.__from(temporal, zone);\n        } catch (ex) {\n            if(!(ex instanceof DateTimeException)) throw ex;\n            // ignore\n        }\n    }\n\n    static __from(temporal, zone){\n        const epochSecond = temporal.getLong(ChronoField.INSTANT_SECONDS);\n        const nanoOfSecond = temporal.get(ChronoField.NANO_OF_SECOND);\n        return ZonedDateTime._create(epochSecond, nanoOfSecond, zone);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link ZonedDateTime} from a text string such as\n     * `2007-12-03T10:15:30+01:00[Europe/Paris]`.\n     *\n     * The string must represent a valid date-time and is parsed using\n     * {@link org.threeten.bp.format.DateTimeFormatter#ISO_ZONED_DATE_TIME}.\n     *\n     * @param {!string} text - the text to parse such as '2007-12-03T10:15:30+01:00[Europe/Paris]', not null\n     * @param {!DateTimeFormatter} [formatter=DateTimeFormatter.ISO_ZONED_DATE_TIME] - the formatter to use\n     * @return {ZonedDateTime} the parsed zoned date-time, not null\n     * @throws DateTimeParseException if the text cannot be parsed\n     */\n    static parse(text, formatter = DateTimeFormatter.ISO_ZONED_DATE_TIME) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.parse(text, ZonedDateTime.FROM);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructor.\n     *\n     * @param {LocalDateTime} dateTime - the date-time, validated as not null\n     * @param {ZoneOffset} offset - the zone offset, validated as not null\n     * @param {ZoneUd} zone - the time-zone, validated as not null\n     * @private\n     */\n    constructor(dateTime, offset, zone) {\n        requireNonNull(dateTime, 'dateTime');\n        requireNonNull(offset, 'offset');\n        requireNonNull(zone, 'zone');\n\n        super();\n\n        /**\n         * The local date-time.\n         */\n        this._dateTime = dateTime;\n        /**\n         * The offset from UTC/Greenwich.\n         */\n        this._offset = offset;\n        /**\n         * The time-zone.\n         */\n        this._zone = zone;\n    }\n\n    /**\n     * Resolves the new local date-time using this zone ID, retaining the offset if possible.\n     *\n     * @param {LocalDateTime} newDateTime - the new local date-time, not null\n     * @return {ZonedDateTime} the zoned date-time, not null\n     */\n    _resolveLocal(newDateTime) {\n        requireNonNull(newDateTime, 'newDateTime');\n        return ZonedDateTime.ofLocal(newDateTime, this._zone, this._offset);\n    }\n\n    /**\n     * Resolves the new local date-time using the offset to identify the instant.\n     *\n     * @param {LocalDateTime} newDateTime - the new local date-time, not null\n     * @return {ZonedDateTime} the zoned date-time, not null\n     */\n    _resolveInstant(newDateTime) {\n        return ZonedDateTime.ofInstant3(newDateTime, this._offset, this._zone);\n    }\n\n    /**\n     * Resolves the offset into this zoned date-time.\n     *\n     * This ignores the offset, unless it can be used in an overlap.\n     *\n     * @param {ZoneOffset} offset - the offset, not null\n     * @return {ZonedDateTime} the zoned date-time, not null\n     */\n    _resolveOffset(offset) {\n        if (offset.equals(this._offset) === false && this._zone.rules().isValidOffset(this._dateTime, offset)) {\n            return new ZonedDateTime(this._dateTime, offset, this._zone);\n        }\n        return this;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if the specified field is supported.\n     *\n     * This checks if this date-time can be queried for the specified field.\n     * If false, then calling {@link range} and {@link get} will throw an exception.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields are:\n     *\n     * * {@link NANO_OF_SECOND}\n     * * {@link NANO_OF_DAY}\n     * * {@link MICRO_OF_SECOND}\n     * * {@link MICRO_OF_DAY}\n     * * {@link MILLI_OF_SECOND}\n     * * {@link MILLI_OF_DAY}\n     * * {@link SECOND_OF_MINUTE}\n     * * {@link SECOND_OF_DAY}\n     * * {@link MINUTE_OF_HOUR}\n     * * {@link MINUTE_OF_DAY}\n     * * {@link HOUR_OF_AMPM}\n     * * {@link CLOCK_HOUR_OF_AMPM}\n     * * {@link HOUR_OF_DAY}\n     * * {@link CLOCK_HOUR_OF_DAY}\n     * * {@link AMPM_OF_DAY}\n     * * {@link DAY_OF_WEEK}\n     * * {@link ALIGNED_DAY_OF_WEEK_IN_MONTH}\n     * * {@link ALIGNED_DAY_OF_WEEK_IN_YEAR}\n     * * {@link DAY_OF_MONTH}\n     * * {@link DAY_OF_YEAR}\n     * * {@link EPOCH_DAY}\n     * * {@link ALIGNED_WEEK_OF_MONTH}\n     * * {@link ALIGNED_WEEK_OF_YEAR}\n     * * {@link MONTH_OF_YEAR}\n     * * {@link EPOCH_MONTH}\n     * * {@link YEAR_OF_ERA}\n     * * {@link YEAR}\n     * * {@link ERA}\n     * * {@link INSTANT_SECONDS}\n     * * {@link OFFSET_SECONDS}\n     *\n     * All other {@link ChronoField} instances will return false.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.isSupportedBy}\n     * passing `this` as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField|TemporalUnit} fieldOrUnit - the field to check, null returns false\n     * @return {boolean} true if the field is supported on this date-time, false if not\n     */\n    isSupported(fieldOrUnit) {\n        if(fieldOrUnit instanceof ChronoField){\n            return true;\n        } else if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n        }\n        return (fieldOrUnit != null && fieldOrUnit.isSupportedBy(this));\n    }\n\n\n    /**\n     * Gets the range of valid values for the specified field.\n     *\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This date-time is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return\n     * appropriate range instances.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.rangeRefinedBy}\n     * passing `this` as the argument.\n     * Whether the range can be obtained is determined by the field.\n     *\n     * @param {TemporalField} field - the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     */\n    range(field) {\n        if (field instanceof ChronoField) {\n            if (field === ChronoField.INSTANT_SECONDS || field === ChronoField.OFFSET_SECONDS) {\n                return field.range();\n            }\n            return this._dateTime.range(field);\n        }\n        return field.rangeRefinedBy(this);\n    }\n\n    /**\n     * Gets the value of the specified field from this date-time as an `int`.\n     *\n     * This queries this date-time for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this date-time, except {@link NANO_OF_DAY}, {@link MICRO_OF_DAY},\n     * {@link EPOCH_DAY}, {@link EPOCH_MONTH} and {@link INSTANT_SECONDS} which are too\n     * large to fit in an `int` and throw a {@link DateTimeException}.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {!TemporalField} field - the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    get(field) {\n        return this.getLong(field);\n    }\n\n    /**\n     * Gets the value of the specified field from this date-time as a `long`.\n     *\n     * This queries this date-time for the value for the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this date-time.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {!TemporalField} field  the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    getLong(field) {\n        if (field instanceof ChronoField) {\n            switch (field) {\n                case ChronoField.INSTANT_SECONDS: return this.toEpochSecond();\n                case ChronoField.OFFSET_SECONDS: return this._offset.totalSeconds();\n            }\n            return this._dateTime.getLong(field);\n        }\n        requireNonNull(field, 'field');\n        return field.getFrom(this);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the zone offset, such as '+01:00'.\n     *\n     * This is the offset of the local date-time from UTC/Greenwich.\n     *\n     * @return {ZoneOffset}the zone offset, not null\n     */\n    offset() {\n        return this._offset;\n    }\n\n    /**\n     * Returns a copy of this date-time changing the zone offset to the\n     * earlier of the two valid offsets at a local time-line overlap.\n     *\n     * This method only has any effect when the local time-line overlaps, such as\n     * at an autumn daylight savings cutover. In this scenario, there are two\n     * valid offsets for the local date-time. Calling this method will return\n     * a zoned date-time with the earlier of the two selected.\n     *\n     * If this method is called when it is not an overlap, `this`\n     * is returned.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the earlier offset, not null\n     */\n    withEarlierOffsetAtOverlap() {\n        const trans = this._zone.rules().transition(this._dateTime);\n        if (trans != null && trans.isOverlap()) {\n            const earlierOffset = trans.offsetBefore();\n            if (earlierOffset.equals(this._offset) === false) {\n                return new ZonedDateTime(this._dateTime, earlierOffset, this._zone);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * Returns a copy of this date-time changing the zone offset to the\n     * later of the two valid offsets at a local time-line overlap.\n     *\n     * This method only has any effect when the local time-line overlaps, such as\n     * at an autumn daylight savings cutover. In this scenario, there are two\n     * valid offsets for the local date-time. Calling this method will return\n     * a zoned date-time with the later of the two selected.\n     *\n     * If this method is called when it is not an overlap, `this`\n     * is returned.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the later offset, not null\n     */\n    withLaterOffsetAtOverlap() {\n        const trans = this._zone.rules().transition(this.toLocalDateTime());\n        if (trans != null) {\n            const laterOffset = trans.offsetAfter();\n            if (laterOffset.equals(this._offset) === false) {\n                return new ZonedDateTime(this._dateTime, laterOffset, this._zone);\n            }\n        }\n        return this;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the time-zone, such as 'Europe/Paris'.\n     *\n     * This returns the zone ID. This identifies the time-zone {@link ZoneRules}\n     * that determine when and how the offset from UTC/Greenwich changes.\n     *\n     * The zone ID may be same as the offset (see {@link getOffset}).\n     * If this is true, then any future calculations, such as addition or subtraction,\n     * have no complex edge cases due to time-zone rules.\n     * See also {@link withFixedOffsetZone}.\n     *\n     * @return {ZoneId} the time-zone, not null\n     */\n    zone() {\n        return this._zone;\n    }\n\n    /**\n     * Returns a copy of this date-time with a different time-zone,\n     * retaining the local date-time if possible.\n     *\n     * This method changes the time-zone and retains the local date-time.\n     * The local date-time is only changed if it is invalid for the new zone,\n     * determined using the same approach as\n     * {@link ofLocal}.\n     *\n     * To change the zone and adjust the local date-time,\n     * use {@link withZoneSameInstant}.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {ZoneId} zone - the time-zone to change to, not null\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the requested zone, not null\n     */\n    withZoneSameLocal(zone) {\n        requireNonNull(zone, 'zone');\n        return this._zone.equals(zone) ? this : ZonedDateTime.ofLocal(this._dateTime, zone, this._offset);\n    }\n\n    /**\n     * Returns a copy of this date-time with a different time-zone,\n     * retaining the instant.\n     *\n     * This method changes the time-zone and retains the instant.\n     * This normally results in a change to the local date-time.\n     *\n     * This method is based on retaining the same instant, thus gaps and overlaps\n     * in the local time-line have no effect on the result.\n     *\n     * To change the offset while keeping the local time,\n     * use {@link withZoneSameLocal}.\n     *\n     * @param {ZoneId} zone - the time-zone to change to, not null\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the requested zone, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    withZoneSameInstant(zone) {\n        requireNonNull(zone, 'zone');\n        return this._zone.equals(zone) ? this :\n            ZonedDateTime._create(this._dateTime.toEpochSecond(this._offset), this._dateTime.nano(), zone);\n    }\n\n    /**\n     * Returns a copy of this date-time with the zone ID set to the offset.\n     *\n     * This returns a zoned date-time where the zone ID is the same as {@link getOffset}.\n     * The local date-time, offset and instant of the result will be the same as in this date-time.\n     *\n     * Setting the date-time to a fixed single offset means that any future\n     * calculations, such as addition or subtraction, have no complex edge cases\n     * due to time-zone rules.\n     * This might also be useful when sending a zoned date-time across a network,\n     * as most protocols, such as ISO-8601, only handle offsets,\n     * and not region-based zone IDs.\n     *\n     * This is equivalent to {@link ZonedDateTime.of}.\n     *\n     * @return {ZonedDateTime} a {@link ZonedDateTime} with the zone ID set to the offset, not null\n     */\n    withFixedOffsetZone() {\n        return this._zone.equals(this._offset) ? this : new ZonedDateTime(this._dateTime, this._offset, this._offset);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the year field.\n     *\n     * This method returns the primitive `int` value for the year.\n     *\n     * The year returned by this method is proleptic as per {@link get}.\n     * To obtain the year-of-era, use `get(YEAR_OF_ERA)`.\n     *\n     * @return {number} the year, from MIN_YEAR to MAX_YEAR\n     */\n    year() {\n        return this._dateTime.year();\n    }\n\n    /**\n     * Gets the month-of-year field from 1 to 12.\n     *\n     * This method returns the month as an `int` from 1 to 12.\n     * Application code is frequently clearer if the enum {@link Month}\n     * is used by calling {@link getMonth}.\n     *\n     * @return {number} the month-of-year, from 1 to 12\n     * @see #month()\n     */\n    monthValue() {\n        return this._dateTime.monthValue();\n    }\n\n    /**\n     * Gets the month-of-year field using the {@link Month} enum.\n     *\n     * This method returns the enum {@link Month} for the month.\n     * This avoids confusion as to what `int` values mean.\n     * If you need access to the primitive `int` value, use {@link Month#getValue}.\n     *\n     * @return {Month} the month-of-year, not null\n     * @see #getMonthValue()\n     */\n    month() {\n        return this._dateTime.month();\n    }\n\n    /**\n     * Gets the day-of-month field.\n     *\n     * This method returns the primitive `int` value for the day-of-month.\n     *\n     * @return {number} the day-of-month, from 1 to 31\n     */\n    dayOfMonth() {\n        return this._dateTime.dayOfMonth();\n    }\n\n    /**\n     * Gets the day-of-year field.\n     *\n     * This method returns the primitive `int` value for the day-of-year.\n     *\n     * @return {number} the day-of-year, from 1 to 365, or 366 in a leap year\n     */\n    dayOfYear() {\n        return this._dateTime.dayOfYear();\n    }\n\n    /**\n     * Gets the day-of-week field, which is an enum {@link DayOfWeek}.\n     *\n     * This method returns the enum {@link DayOfWeek} for the day-of-week.\n     * This avoids confusion as to what `int` values mean.\n     * If you need access to the primitive `int` value, use {@link DayOfWeek#getValue}.\n     *\n     * Additional information can be obtained from the {@link DayOfWeek}.\n     * This includes textual names of the values.\n     *\n     * @return {DayOfWeek} the day-of-week, not null\n     */\n    dayOfWeek() {\n        return this._dateTime.dayOfWeek();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the hour-of-day field.\n     *\n     * @return {number} the hour-of-day, from 0 to 23\n     */\n    hour() {\n        return this._dateTime.hour();\n    }\n\n    /**\n     * Gets the minute-of-hour field.\n     *\n     * @return {number} the minute-of-hour, from 0 to 59\n     */\n    minute() {\n        return this._dateTime.minute();\n    }\n\n    /**\n     * Gets the second-of-minute field.\n     *\n     * @return {number} the second-of-minute, from 0 to 59\n     */\n    second() {\n        return this._dateTime.second();\n    }\n\n    /**\n     * Gets the nano-of-second field.\n     *\n     * @return {number} the nano-of-second, from 0 to 999,999,999\n     */\n    nano() {\n        return this._dateTime.nano();\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns an adjusted copy of this date-time.\n     *\n     * This returns a new {@link ZonedDateTime}, based on this one, with the date-time adjusted.\n     * The adjustment takes place using the specified adjuster strategy object.\n     * Read the documentation of the adjuster to understand what adjustment will be made.\n     *\n     * A simple adjuster might simply set the one of the fields, such as the year field.\n     * A more complex adjuster might set the date to the last day of the month.\n     * A selection of common adjustments is provided in {@link TemporalAdjusters}.\n     * These include finding the 'last day of the month' and 'next Wednesday'.\n     * Key date-time classes also implement the {@link TemporalAdjuster} interface,\n     * such as {@link Month} and {@link MonthDay}.\n     * The adjuster is responsible for handling special cases, such as the varying\n     * lengths of month and leap years.\n     *\n     * For example this code returns a date on the last day of July:\n     * <pre>\n     *  import static org.threeten.bp.Month.*;\n     *  import static org.threeten.bp.temporal.Adjusters.*;\n     *\n     *  result = zonedDateTime.with(JULY).with(lastDayOfMonth());\n     * </pre>\n     *\n     * The classes {@link LocalDate} and {@link LocalTime} implement {@link TemporalAdjuster},\n     * thus this method can be used to change the date, time or offset:\n     * <pre>\n     *  result = zonedDateTime.with(date);\n     *  result = zonedDateTime.with(time);\n     * </pre>\n     *\n     * {@link ZoneOffset} also implements {@link TemporalAdjuster} however it is less likely\n     * that setting the offset will have the effect you expect. When an offset is passed in,\n     * the local date-time is combined with the new offset to form an {@link Instant}.\n     * The instant and original zone are then used to create the result.\n     * This algorithm means that it is quite likely that the output has a different offset\n     * to the specified offset. It will however work correctly when passing in the offset\n     * applicable for the instant of the zoned date-time, and will work correctly if passing\n     * one of the two valid offsets during a daylight savings overlap when the same local time\n     * occurs twice.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalAdjuster#adjustInto} method on the\n     * specified adjuster passing `this` as the argument.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalAdjuster} adjuster - the adjuster to use, not null\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on `this` with the adjustment made, not null\n     * @throws DateTimeException if the adjustment cannot be made\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    _withAdjuster(adjuster) {\n        // optimizations\n        if (adjuster instanceof LocalDate) {\n            return this._resolveLocal(LocalDateTime.of(adjuster, this._dateTime.toLocalTime()));\n        } else if (adjuster instanceof LocalTime) {\n            return this._resolveLocal(LocalDateTime.of(this._dateTime.toLocalDate(), adjuster));\n        } else if (adjuster instanceof LocalDateTime) {\n            return this._resolveLocal(adjuster);\n        } else if (adjuster instanceof Instant) {\n            const instant = adjuster;\n            return ZonedDateTime._create(instant.epochSecond(), instant.nano(), this._zone);\n        } else if (adjuster instanceof ZoneOffset) {\n            return this._resolveOffset(adjuster);\n        }\n        return super._withAdjuster(adjuster);\n    }\n\n    /**\n     * Returns a copy of this date-time with the specified field set to a new value.\n     *\n     * This returns a {@link ZonedDateTime}, based on this one, with the value\n     * for the specified field changed.\n     * This can be used to change any supported field, such as the year, month or day-of-month.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     *\n     * In some cases, changing the specified field can cause the resulting date-time to become invalid,\n     * such as changing the month from 31st January to February would make the day-of-month invalid.\n     * In cases like this, the field is responsible for resolving the date. Typically it will choose\n     * the previous valid date, which would be the last valid day of February in this example.\n     *\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     *\n     * The {@link INSTANT_SECONDS} field will return a date-time with the specified instant.\n     * The zone and nano-of-second are unchanged.\n     * The result will have an offset derived from the new instant and original zone.\n     * If the new instant value is outside the valid range then a {@link DateTimeException} will be thrown.\n     *\n     * The {@link OFFSET_SECONDS} field will typically be ignored.\n     * The offset of a {@link ZonedDateTime} is controlled primarily by the time-zone.\n     * As such, changing the offset does not generally make sense, because there is only\n     * one valid offset for the local date-time and zone.\n     * If the zoned date-time is in a daylight savings overlap, then the offset is used\n     * to switch between the two valid offsets. In all other cases, the offset is ignored.\n     * If the new offset value is outside the valid range then a {@link DateTimeException} will be thrown.\n     *\n     * The other supported fields (see {@link isSupported}) will behave as in {@link LocalDateTime#with}.\n     * The zone is not part of the calculation and will be unchanged.\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * All other {@link ChronoField} instances will throw an {@link UnsupportedTemporalTypeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.adjustInto}\n     * passing `this` as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalField} field - the field to set in the result, not null\n     * @param {number} newValue - the new value of the field in the result\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on `this` with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws UnsupportedTemporalTypeException if the field is not supported\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    _withField(field, newValue) {\n        if (field instanceof ChronoField) {\n            switch (field) {\n                case ChronoField.INSTANT_SECONDS: return ZonedDateTime._create(newValue, this.nano(), this._zone);\n                case ChronoField.OFFSET_SECONDS: {\n                    const offset = ZoneOffset.ofTotalSeconds(field.checkValidIntValue(newValue));\n                    return this._resolveOffset(offset);\n                }\n            }\n            return this._resolveLocal(this._dateTime.with(field, newValue));\n        }\n        return field.adjustInto(this, newValue);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the year value altered.\n     *\n     * This operates on the local time-line,\n     * changing the year (see {@link LocalDateTime#withYear}) of the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} year - the year to set in the result, from MIN_YEAR to MAX_YEAR\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the requested year, not null\n     * @throws DateTimeException if the year value is invalid\n     */\n    withYear(year) {\n        return this._resolveLocal(this._dateTime.withYear(year));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the month-of-year value altered.\n     *\n     * This operates on the local time-line,\n     * changing the month (see {@link LocalDateTime#withMonth}) of the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} month - the month-of-year to set in the result, from 1 (January) to 12 (December)\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the requested month, not null\n     * @throws DateTimeException if the month-of-year value is invalid\n     */\n    withMonth(month) {\n        return this._resolveLocal(this._dateTime.withMonth(month));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the day-of-month value altered.\n     *\n     * This operates on the local time-line,\n     * changing the day-of-month (see {@link LocalDateTime#withDayOfMonth}) of the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} dayOfMonth - the day-of-month to set in the result, from 1 to 28-31\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the requested day, not null\n     * @throws DateTimeException if the day-of-month value is invalid\n     * @throws DateTimeException if the day-of-month is invalid for the month-year\n     */\n    withDayOfMonth(dayOfMonth) {\n        return this._resolveLocal(this._dateTime.withDayOfMonth(dayOfMonth));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the day-of-year altered.\n     *\n     * This operates on the local time-line,\n     * changing the day-of-year (see {@link LocalDateTime#withDayOfYear}) of the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} dayOfYear - the day-of-year to set in the result, from 1 to 365-366\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date with the requested day, not null\n     * @throws DateTimeException if the day-of-year value is invalid\n     * @throws DateTimeException if the day-of-year is invalid for the year\n     */\n    withDayOfYear(dayOfYear) {\n        return this._resolveLocal(this._dateTime.withDayOfYear(dayOfYear));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the hour-of-day value altered.\n     *\n     * This operates on the local time-line,\n     * changing the time (see {@link LocalDateTime#withHour}) of the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} hour - the hour-of-day to set in the result, from 0 to 23\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the requested hour, not null\n     * @throws DateTimeException if the hour value is invalid\n     */\n    withHour(hour) {\n        return this._resolveLocal(this._dateTime.withHour(hour));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the minute-of-hour value altered.\n     *\n     * This operates on the local time-line,\n     * changing the time (see {@link LocalDateTime#withMinute}) of the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} minute - the minute-of-hour to set in the result, from 0 to 59\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the requested minute, not null\n     * @throws DateTimeException if the minute value is invalid\n     */\n    withMinute(minute) {\n        return this._resolveLocal(this._dateTime.withMinute(minute));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the second-of-minute value altered.\n     *\n     * This operates on the local time-line,\n     * changing the time (see {@link LocalDateTime#withSecond}) of the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} second - the second-of-minute to set in the result, from 0 to 59\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the requested second, not null\n     * @throws DateTimeException if the second value is invalid\n     */\n    withSecond(second) {\n        return this._resolveLocal(this._dateTime.withSecond(second));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the nano-of-second value altered.\n     *\n     * This operates on the local time-line,\n     * changing the time (see {@link LocalDateTime#withNano}) of the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the requested nanosecond, not null\n     * @throws DateTimeException if the nano value is invalid\n     */\n    withNano(nanoOfSecond) {\n        return this._resolveLocal(this._dateTime.withNano(nanoOfSecond));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the time truncated.\n     *\n     * Truncation returns a copy of the original date-time with fields\n     * smaller than the specified unit set to zero.\n     * For example, truncating with {@link ChronoUnit#MINUTES}\n     * will set the second-of-minute and nano-of-second field to zero.\n     *\n     * The unit must have a duration (see {@link TemporalUnit#getDuration})\n     * that divides into the length of a standard day without remainder.\n     * This includes all supplied time units on {@link ChronoUnit} and\n     * {@link ChronoUnit#DAYS}. Other units throw an exception.\n     *\n     * This operates on the local time-line, truncating the underlying local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalUnit} unit - the unit to truncate to, not null\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the time truncated, not null\n     * @throws DateTimeException if unable to truncate\n     */\n    truncatedTo(unit) {\n        return this._resolveLocal(this._dateTime.truncatedTo(unit));\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a copy of this date-time with the specified period added.\n     *\n     * This method returns a new date-time based on this date-time with the specified period added.\n     * This can be used to add any period that is defined by a unit, for example to add years, months or days.\n     * The unit is responsible for the details of the calculation, including the resolution\n     * of any edge cases in the calculation.\n     *\n     * The calculation for date and time units differ.\n     *\n     * Date units operate on the local time-line.\n     * The period is first added to the local date-time, then converted back\n     * to a zoned date-time using the zone ID.\n     * The conversion uses {@link ofLocal}\n     * with the offset before the addition.\n     *\n     * Time units operate on the instant time-line.\n     * The period is first added to the local date-time, then converted back to\n     * a zoned date-time using the zone ID.\n     * The conversion uses {@link ofInstant}\n     * with the offset before the addition.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} amountToAdd - the amount of the unit to add to the result, may be negative\n     * @param {TemporalUnit} unit - the unit of the period to add, not null\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the specified period added, not null\n     * @throws DateTimeException if the unit cannot be added to this type\n     */\n    _plusUnit(amountToAdd, unit) {\n        if (unit instanceof ChronoUnit) {\n            if (unit.isDateBased()) {\n                return this._resolveLocal(this._dateTime.plus(amountToAdd, unit));\n            } else {\n                return this._resolveInstant(this._dateTime.plus(amountToAdd, unit));\n            }\n        }\n        requireNonNull(unit, 'unit');\n        return unit.addTo(this, amountToAdd);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in years added.\n     *\n     * This operates on the local time-line, adding years to the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} years - the years to add, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the years added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    plusYears(years) {\n        return this._resolveLocal(this._dateTime.plusYears(years));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in months added.\n     *\n     * This operates on the local time-line, adding months to the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months - the months to add, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the months added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    plusMonths(months) {\n        return this._resolveLocal(this._dateTime.plusMonths(months));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in weeks added.\n     *\n     * This operates on the local time-line, adding weeks to the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} weeks - the weeks to add, may be negative\n     * @return {ZonedDateTime}a {@link ZonedDateTime} based on this date-time with the weeks added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    plusWeeks(weeks) {\n        return this._resolveLocal(this._dateTime.plusWeeks(weeks));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in days added.\n     *\n     * This operates on the local time-line, adding days to the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} days - the days to add, may be negative\n     * @return {ZonedDateTime}a {@link ZonedDateTime} based on this date-time with the days added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    plusDays(days) {\n        return this._resolveLocal(this._dateTime.plusDays(days));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in hours added.\n     *\n     * This operates on the instant time-line, such that adding one hour will\n     * always be a duration of one hour later.\n     * This may cause the local date-time to change by an amount other than one hour.\n     * Note that this is a different approach to that used by days, months and years,\n     * thus adding one day is not the same as adding 24 hours.\n     *\n     * For example, consider a time-zone where the spring DST cutover means that the\n     * local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.\n     *\n     * * Adding one hour to 00:30+02:00 will result in 01:30+02:00\n     * * Adding one hour to 01:30+02:00 will result in 01:30+01:00\n     * * Adding one hour to 01:30+01:00 will result in 02:30+01:00\n     * * Adding three hours to 00:30+02:00 will result in 02:30+01:00\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} hours - the hours to add, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the hours added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    plusHours(hours) {\n        return this._resolveInstant(this._dateTime.plusHours(hours));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in minutes added.\n     *\n     * This operates on the instant time-line, such that adding one minute will\n     * always be a duration of one minute later.\n     * This may cause the local date-time to change by an amount other than one minute.\n     * Note that this is a different approach to that used by days, months and years.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} minutes - the minutes to add, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the minutes added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    plusMinutes(minutes) {\n        return this._resolveInstant(this._dateTime.plusMinutes(minutes));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in seconds added.\n     *\n     * This operates on the instant time-line, such that adding one second will\n     * always be a duration of one second later.\n     * This may cause the local date-time to change by an amount other than one second.\n     * Note that this is a different approach to that used by days, months and years.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} seconds - the seconds to add, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the seconds added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    plusSeconds(seconds) {\n        return this._resolveInstant(this._dateTime.plusSeconds(seconds));\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in nanoseconds added.\n     *\n     * This operates on the instant time-line, such that adding one nano will\n     * always be a duration of one nano later.\n     * This may cause the local date-time to change by an amount other than one nano.\n     * Note that this is a different approach to that used by days, months and years.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} nanos - the nanos to add, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the nanoseconds added, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    plusNanos(nanos) {\n        return this._resolveInstant(this._dateTime.plusNanos(nanos));\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a copy of this date-time with the specified period subtracted.\n     *\n     * This method returns a new date-time based on this date-time with the specified period subtracted.\n     * This can be used to subtract any period that is defined by a unit, for example to subtract years, months or days.\n     * The unit is responsible for the details of the calculation, including the resolution\n     * of any edge cases in the calculation.\n     *\n     * The calculation for date and time units differ.\n     *\n     * Date units operate on the local time-line.\n     * The period is first subtracted from the local date-time, then converted back\n     * to a zoned date-time using the zone ID.\n     * The conversion uses {@link ofLocal}\n     * with the offset before the subtraction.\n     *\n     * Time units operate on the instant time-line.\n     * The period is first subtracted from the local date-time, then converted back to\n     * a zoned date-time using the zone ID.\n     * The conversion uses {@link ofInstant}\n     * with the offset before the subtraction.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} amountToSubtract - the amount of the unit to subtract from the result, may be negative\n     * @param {TemporalUnit} unit - the unit of the period to subtract, not null\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the specified period subtracted, not null\n     * @throws DateTimeException if the unit cannot be added to this type\n     */\n    _minusUnit(amountToSubtract, unit) {\n        return this._plusUnit(-1 * amountToSubtract, unit);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in years subtracted.\n     *\n     * This operates on the local time-line, subtracting years from the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} years - the years to subtract, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the years subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    minusYears(years) {\n        return this.plusYears(-1 * years);\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in months subtracted.\n     *\n     * This operates on the local time-line, subtracting months from the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months - the months to subtract, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the months subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    minusMonths(months) {\n        return this.plusMonths(-1 * months);\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in weeks subtracted.\n     *\n     * This operates on the local time-line, subtracting weeks from the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} weeks - the weeks to subtract, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the weeks subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    minusWeeks(weeks) {\n        return this.plusWeeks(-1 * weeks);\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in days subtracted.\n     *\n     * This operates on the local time-line, subtracting days from the local date-time.\n     * This is then converted back to a {@link ZonedDateTime}, using the zone ID\n     * to obtain the offset.\n     *\n     * When converting back to {@link ZonedDateTime}, if the local date-time is in an overlap,\n     * then the offset will be retained if possible, otherwise the earlier offset will be used.\n     * If in a gap, the local date-time will be adjusted forward by the length of the gap.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} days - the days to subtract, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the days subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    minusDays(days) {\n        return this.plusDays(-1 * days);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in hours subtracted.\n     *\n     * This operates on the instant time-line, such that subtracting one hour will\n     * always be a duration of one hour earlier.\n     * This may cause the local date-time to change by an amount other than one hour.\n     * Note that this is a different approach to that used by days, months and years,\n     * thus subtracting one day is not the same as adding 24 hours.\n     *\n     * For example, consider a time-zone where the spring DST cutover means that the\n     * local times 01:00 to 01:59 occur twice changing from offset +02:00 to +01:00.\n     *\n     * * Subtracting one hour from 02:30+01:00 will result in 01:30+02:00\n     * * Subtracting one hour from 01:30+01:00 will result in 01:30+02:00\n     * * Subtracting one hour from 01:30+02:00 will result in 00:30+01:00\n     * * Subtracting three hours from 02:30+01:00 will result in 00:30+02:00\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} hours - the hours to subtract, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the hours subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    minusHours(hours) {\n        return this.plusHours(-1 * hours);\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in minutes subtracted.\n     *\n     * This operates on the instant time-line, such that subtracting one minute will\n     * always be a duration of one minute earlier.\n     * This may cause the local date-time to change by an amount other than one minute.\n     * Note that this is a different approach to that used by days, months and years.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} minutes - the minutes to subtract, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the minutes subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    minusMinutes(minutes) {\n        return this.plusMinutes(-1 * minutes);\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in seconds subtracted.\n     *\n     * This operates on the instant time-line, such that subtracting one second will\n     * always be a duration of one second earlier.\n     * This may cause the local date-time to change by an amount other than one second.\n     * Note that this is a different approach to that used by days, months and years.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} seconds - the seconds to subtract, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the seconds subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    minusSeconds(seconds) {\n        return this.plusSeconds(-1 * seconds);\n    }\n\n    /**\n     * Returns a copy of this {@link ZonedDateTime} with the specified period in nanoseconds subtracted.\n     *\n     * This operates on the instant time-line, such that subtracting one nano will\n     * always be a duration of one nano earlier.\n     * This may cause the local date-time to change by an amount other than one nano.\n     * Note that this is a different approach to that used by days, months and years.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} nanos - the nanos to subtract, may be negative\n     * @return {ZonedDateTime} a {@link ZonedDateTime} based on this date-time with the nanoseconds subtracted, not null\n     * @throws DateTimeException if the result exceeds the supported date range\n     */\n    minusNanos(nanos) {\n        return this.plusNanos(-1 * nanos);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Queries this date-time using the specified query.\n     *\n     * This queries this date-time using the specified query strategy object.\n     * The {@link TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom} method on the\n     * specified query passing `this` as the argument.\n     *\n     * @param {TemporalQuery} query - the query to invoke, not null\n     * @return {*} the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query (defined by the query)\n     * @throws ArithmeticException if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        if (query === TemporalQueries.localDate()) {\n            return this.toLocalDate();\n        }\n        requireNonNull(query, 'query');\n        return super.query(query);\n    }\n\n    /**\n     * Calculates the period between this date-time and another date-time in\n     * terms of the specified unit.\n     *\n     * This calculates the period between two date-times in terms of a single unit.\n     * The start and end points are `this` and the specified date-time.\n     * The result will be negative if the end is before the start.\n     * For example, the period in days between two date-times can be calculated\n     * using {@link startDateTime.until}.\n     *\n     * The {@link Temporal} passed to this method must be a {@link ZonedDateTime}.\n     * If the time-zone differs between the two zoned date-times, the specified\n     * end date-time is normalized to have the same zone as this date-time.\n     *\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two date-times.\n     * For example, the period in months between 2012-06-15T00:00Z and 2012-08-14T23:59Z\n     * will only be one month as it is one minute short of two months.\n     *\n     * This method operates in association with {@link TemporalUnit#between}.\n     * The result of this method is a `long` representing the amount of\n     * the specified unit. By contrast, the result of {@link between} is an\n     * object that can be used directly in addition/subtraction:\n     * <pre>\n     *   long period = start.until(end, MONTHS);   // this method\n     *   dateTime.plus(MONTHS.between(start, end));      // use in plus/minus\n     * </pre>\n     *\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@link NANOS}, {@link MICROS}, {@link MILLIS}, {@link SECONDS},\n     * {@link MINUTES}, {@link HOURS} and {@link HALF_DAYS}, {@link DAYS},\n     * {@link WEEKS}, {@link MONTHS}, {@link YEARS}, {@link DECADES},\n     * {@link CENTURIES}, {@link MILLENNIA} and {@link ERAS} are supported.\n     * Other {@link ChronoUnit} values will throw an exception.\n     *\n     * The calculation for date and time units differ.\n     *\n     * Date units operate on the local time-line, using the local date-time.\n     * For example, the period from noon on day 1 to noon the following day\n     * in days will always be counted as exactly one day, irrespective of whether\n     * there was a daylight savings change or not.\n     *\n     * Time units operate on the instant time-line.\n     * The calculation effectively converts both zoned date-times to instants\n     * and then calculates the period between the instants.\n     * For example, the period from noon on day 1 to noon the following day\n     * in hours may be 23, 24 or 25 hours (or some other amount) depending on\n     * whether there was a daylight savings change or not.\n     *\n     * If the unit is not a {@link ChronoUnit}, then the result of this method\n     * is obtained by invoking {@link TemporalUnit.between}\n     * passing `this` as the first argument and the input temporal as\n     * the second argument.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} endExclusive  the end date-time, which is converted to a {@link ZonedDateTime}, not null\n     * @param {TemporalUnit} unit  the unit to measure the period in, not null\n     * @return {number} the amount of the period between this date-time and the end date-time\n     * @throws DateTimeException if the period cannot be calculated\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    until(endExclusive, unit) {\n        let end = ZonedDateTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            end = end.withZoneSameInstant(this._zone);\n            if (unit.isDateBased()) {\n                return this._dateTime.until(end._dateTime, unit);\n            } else {\n                const difference = this._offset.totalSeconds() - end._offset.totalSeconds();\n                const adjustedEnd = end._dateTime.plusSeconds(difference);\n                return this._dateTime.until(adjustedEnd, unit);\n            }\n        }\n        return unit.between(this, end);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the {@link LocalDateTime} part of this date-time.\n     *\n     * This returns a {@link LocalDateTime} with the same year, month, day and time\n     * as this date-time.\n     *\n     * @return {LocalDateTime} the local date-time part of this date-time, not null\n     */\n    toLocalDateTime() {\n        return this._dateTime;\n    }\n\n    /**\n     * Gets the {@link LocalDate} part of this date-time.\n     *\n     * This returns a {@link LocalDate} with the same year, month and day\n     * as this date-time.\n     *\n     * @return {LocalDate} the date part of this date-time, not null\n     */\n    toLocalDate() {\n        return this._dateTime.toLocalDate();\n    }\n\n    /**\n     * Gets the {@link LocalTime} part of this date-time.\n     *\n     * This returns a {@link LocalTime} with the same hour, minute, second and\n     * nanosecond as this date-time.\n     *\n     * @return {LocalTime} the time part of this date-time, not null\n     */\n    toLocalTime() {\n        return this._dateTime.toLocalTime();\n    }\n\n    /**\n     * Converts this date-time to an {@link OffsetDateTime}.\n     *\n     * This creates an offset date-time using the local date-time and offset.\n     * The zone ID is ignored.\n     *\n     * @return {OffsetDateTime} an offset date-time representing the same local date-time and offset, not null\n     */\n    toOffsetDateTime() {\n        return OffsetDateTime.of(this._dateTime, this._offset);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this date-time is equal to another date-time.\n     *\n     * The comparison is based on the offset date-time and the zone.\n     * Only objects of type {@link ZonedDateTime} are compared, other types return false.\n     *\n     * @param {*} other  the object to check, null returns false\n     * @return {boolean} true if this is equal to the other date-time\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof ZonedDateTime) {\n            return this._dateTime.equals(other._dateTime) &&\n                this._offset.equals(other._offset) &&\n                this._zone.equals(other._zone);\n        }\n        return false;\n    }\n\n    /**\n     * A hash code for this date-time.\n     *\n     * @return {number} a suitable hash code\n     */\n    hashCode() {\n        return MathUtil.hashCode(this._dateTime.hashCode(), this._offset.hashCode(), this._zone.hashCode());\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Outputs this date-time as a string, such as\n     * `2007-12-03T10:15:30+01:00[Europe/Paris]`.\n     *\n     * The format consists of the {@link LocalDateTime} followed by the {@link ZoneOffset}.\n     * If the {@link ZoneId} is not the same as the offset, then the ID is output.\n     * The output is compatible with ISO-8601 if the offset and ID are the same.\n     *\n     * @return {string} a string representation of this date-time, not null\n     */\n    toString() {\n        let str = this._dateTime.toString() + this._offset.toString();\n        if (this._offset !== this._zone) {\n            str += `[${this._zone.toString()}]`;\n        }\n        return str;\n    }\n\n    /**\n     *\n     * @return {string} same as {@link ZonedDateTime.toString}\n     */\n    toJSON() {\n        return this.toString();\n    }\n\n    /**\n     * Outputs this date-time as a string using the formatter.\n     *\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {string} the formatted date-time string, not null\n     * @throws DateTimeException if an error occurs during printing\n     */\n    format(formatter) {\n        return super.format(formatter);\n    }\n\n}\n\nexport function _init(){\n    ZonedDateTime.FROM = createTemporalQuery('ZonedDateTime.FROM', (temporal) => {\n        return ZonedDateTime.from(temporal);\n    });\n}\n", "/**\n * @copyright (c) 2016-present, Philipp Thürwächter & Pattrick Hüper  & js-joda contributors\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { Temporal } from './temporal/Temporal';\nimport { Clock } from './Clock';\nimport { DateTimeFormatter } from './format/DateTimeFormatter';\nimport { Instant } from './Instant';\nimport { IsoChronology } from './chrono/IsoChronology';\nimport { LocalDateTime } from './LocalDateTime';\nimport { LocalDate } from './LocalDate';\nimport { LocalTime } from './LocalTime';\nimport { MathUtil } from './MathUtil';\nimport { OffsetTime } from './OffsetTime';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { ZonedDateTime } from './ZonedDateTime';\nimport { ZoneId } from './ZoneId';\nimport { ZoneOffset } from './ZoneOffset';\nimport { DateTimeException, IllegalArgumentException } from './errors';\n\nimport { createTemporalQuery } from './temporal/TemporalQuery';\nimport { requireInstance, requireNonNull } from './assert';\n\n/**\n * A date-time with an offset from UTC/Greenwich in the ISO-8601 calendar system,\n * such as 2007-12-23T10:15:30+01:00.\n */\nexport class OffsetDateTime extends Temporal {\n    /**\n     * @param {TemporaroAccessor} temporal\n     * @return {OffsetDateTime}\n     */\n    static from(temporal) {\n        requireNonNull(temporal, 'temporal');\n        if (temporal instanceof OffsetDateTime) {\n            return temporal;\n        }\n        try {\n            const offset = ZoneOffset.from(temporal);\n            try {\n                const ldt = LocalDateTime.from(temporal);\n                return OffsetDateTime.of(ldt, offset);\n            } catch (_) {\n                const instant = Instant.from(temporal);\n                return OffsetDateTime.ofInstant(instant, offset);\n            }\n        } catch (ex) {\n            throw new DateTimeException(`Unable to obtain OffsetDateTime TemporalAccessor: ${temporal}, type ${temporal.constructor != null ? temporal.constructor.name : ''}`);\n        }\n    }\n\n    /**\n     * @param {Clock|ZoneId|null} clockOrZone\n     * @return {OffsetDateTime}\n     */\n    static now(clockOrZone) {\n        if (arguments.length === 0) {\n            return OffsetDateTime.now(Clock.systemDefaultZone());\n        } else {\n            requireNonNull(clockOrZone, 'clockOrZone');\n            if (clockOrZone instanceof ZoneId) {\n                return OffsetDateTime.now(Clock.system(clockOrZone));\n            } else if (clockOrZone instanceof Clock) {\n                const now = clockOrZone.instant(); // called once\n                return OffsetDateTime.ofInstant(now, clockOrZone.zone().rules().offset(now));\n            } else {\n                throw new IllegalArgumentException('clockOrZone must be an instance of ZoneId or Clock');\n            }\n        }\n    }\n\n    /**\n     * @return {OffsetDateTime}\n     */\n    static of() {\n        if (arguments.length <= 2) {\n            return OffsetDateTime.ofDateTime.apply(this, arguments);\n        } else if (arguments.length === 3) {\n            return OffsetDateTime.ofDateAndTime.apply(this, arguments);\n        } else {\n            return OffsetDateTime.ofNumbers.apply(this, arguments);\n        }\n    }\n\n    static ofDateTime(dateTime, offset) {\n        return new OffsetDateTime(dateTime, offset);\n    }\n\n    static ofDateAndTime(date, time, offset) {\n        const dt = LocalDateTime.of(date, time);\n        return new OffsetDateTime(dt, offset);\n    }\n\n    static ofNumbers(year, month, dayOfMonth, hour=0, minute=0, second=0, nanoOfSecond=0, offset) {\n        const dt = LocalDateTime.of(year, month, dayOfMonth, hour, minute, second, nanoOfSecond);\n        return new OffsetDateTime(dt, offset);\n    }\n\n    /**\n     * @param {Instant} instant\n     * @param {ZoneId} zone\n     * @return {OffsetDateTime}\n     */\n    static ofInstant(instant,  zone){\n        requireNonNull(instant, 'instant');\n        requireNonNull(zone, 'zone');\n        const rules = zone.rules();\n        const offset = rules.offset(instant);\n        const ldt = LocalDateTime.ofEpochSecond(instant.epochSecond(), instant.nano(), offset);\n        return new OffsetDateTime(ldt, offset);\n    }\n\n    /**\n     * @param {string} text\n     * @param {DateTimeFormatter|undefined} formatter\n     * @return {OffsetTime}\n     */\n    static parse(text, formatter = DateTimeFormatter.ISO_OFFSET_DATE_TIME){\n        requireNonNull(formatter, 'formatter');\n        return formatter.parse(text, OffsetDateTime.FROM);\n    }\n\n    // TODO: Need java.util.Comparater interface.\n    // static timeLineOrder() {\n    //\n    // }\n\n    //-----------------------------------------------------------------------\n\n\n    /**\n     * @param {LocalDateTime} dateTime\n     * @param {ZoneOffset} offset\n     * @private\n     */\n    constructor(dateTime, offset) {\n        super();\n        requireNonNull(dateTime, 'dateTime');\n        requireInstance(dateTime, LocalDateTime, 'dateTime');\n        requireNonNull(offset, 'offset');\n        requireInstance(offset, ZoneOffset, 'offset');\n        this._dateTime = dateTime;\n        this._offset = offset;\n    }\n\n    /**\n     *\n     * @param {Temporal} temporal\n     * @return {Temporal}\n     */\n    adjustInto(temporal) {\n        return temporal\n            .with(ChronoField.EPOCH_DAY, this.toLocalDate().toEpochDay())\n            .with(ChronoField.NANO_OF_DAY, this.toLocalTime().toNanoOfDay())\n            .with(ChronoField.OFFSET_SECONDS, this.offset().totalSeconds());\n    }\n\n    until(endExclusive, unit) {\n        let end = OffsetDateTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            end = end.withOffsetSameInstant(this._offset);\n            return this._dateTime.until(end._dateTime, unit);\n        }\n        return unit.between(this, end);\n    }\n\n    /**\n     * @param {ZoneId} zone\n     * @return {ZonedDateTime}\n     */\n    atZoneSameInstant(zone) {\n        return ZonedDateTime.ofInstant(this._dateTime, this._offset, zone);\n    }\n\n    /**\n     * @param {ZoneId} zone\n     * @return {ZonedDateTime}\n     */\n    atZoneSimilarLocal(zone) {\n        return ZonedDateTime.ofLocal(this._dateTime, zone, this._offset);\n    }\n\n    query(query) {\n        requireNonNull(query, 'query');\n        if (query === TemporalQueries.chronology()) {\n            return IsoChronology.INSTANCE;\n        } else if (query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        } else if (query === TemporalQueries.offset() || query === TemporalQueries.zone()) {\n            return this.offset();\n        } else if (query === TemporalQueries.localDate()) {\n            return this.toLocalDate();\n        } else if (query === TemporalQueries.localTime()) {\n            return this.toLocalTime();\n        } else if (query === TemporalQueries.zoneId()) {\n            return null;\n        }\n        return super.query(query);\n    }\n\n    get(field) {\n        if (field instanceof ChronoField) {\n            switch (field) {\n                case ChronoField.INSTANT_SECONDS: throw new DateTimeException(`Field too large for an int: ${field}`);\n                case ChronoField.OFFSET_SECONDS: return this.offset().totalSeconds();\n            }\n            return this._dateTime.get(field);\n        }\n        return super.get(field);\n    }\n\n    getLong(field) {\n        if (field instanceof ChronoField) {\n            switch (field) {\n                case ChronoField.INSTANT_SECONDS: return this.toEpochSecond();\n                case ChronoField.OFFSET_SECONDS: return this.offset().totalSeconds();\n            }\n            return this._dateTime.getLong(field);\n        }\n        return field.getFrom(this);\n    }\n\n    /**\n     * @return {ZoneOffset}\n     */\n    offset() {\n        return this._offset;\n    }\n\n    /**\n     * @return {number} the year, from MIN_YEAR to MAX_YEAR\n     */\n    year() {\n        return this._dateTime.year();\n    }\n\n    /**\n     * @return {number} the month-of-year, from 1 to 12\n     * @see #month()\n     */\n    monthValue() {\n        return this._dateTime.monthValue();\n    }\n\n    /**\n     * @return {{number} }the month-of-year, not null\n     * @see #monthValue()\n     */\n    month() {\n        return this._dateTime.month();\n    }\n\n    /**\n     * @return {number} the day-of-month, from 1 to 31\n     */\n    dayOfMonth() {\n        return this._dateTime.dayOfMonth();\n    }\n\n    /**\n     * @return {number} the day-of-year, from 1 to 365, or 366 in a leap year\n     */\n    dayOfYear() {\n        return this._dateTime.dayOfYear();\n    }\n\n    /**\n     * @return {number} the day-of-week, not null\n     */\n    dayOfWeek() {\n        return this._dateTime.dayOfWeek();\n    }\n\n    /**\n     * @return {number} the hour-of-day, from 0 to 23\n     */\n    hour() {\n        return this._dateTime.hour();\n    }\n\n    /**\n     * @return {number} the minute-of-hour, from 0 to 59\n     */\n    minute() {\n        return this._dateTime.minute();\n    }\n\n    /**\n     * @return {number} the second-of-minute, from 0 to 59\n     */\n    second() {\n        return this._dateTime.second();\n    }\n\n    /**\n     * @return {number} the nano-of-second, from 0 to 999,999,999\n     */\n    nano() {\n        return this._dateTime.nano();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * @return {LocalDateTime}the local date-time part of this date-time, not null\n     */\n    toLocalDateTime() {\n        return this._dateTime;\n    }\n\n    /**\n     * @return {LocalDate} the date part of this date-time, not null\n     */\n    toLocalDate() {\n        return this._dateTime.toLocalDate();\n    }\n\n    /**\n     * @return {LocalTime} the time part of this date-time, not null\n     */\n    toLocalTime() {\n        return this._dateTime.toLocalTime();\n    }\n\n    /**\n     * @return {OffsetTime} an OffsetTime representing the time and offset, not null\n     */\n    toOffsetTime() {\n        return OffsetTime.of(this._dateTime.toLocalTime(), this._offset);\n    }\n\n    /**\n     * @return {ZonedDateTime}a zoned date-time representing the same local date-time and offset, not null\n     */\n    toZonedDateTime() {\n        return ZonedDateTime.of(this._dateTime, this._offset);\n    }\n\n    /**\n     * @return {Instant} an {@code Instant} representing the same instant, not null\n     */\n    toInstant() {\n        return this._dateTime.toInstant(this._offset);\n    }\n\n    /**\n     * @return {number} the number of seconds from the epoch of 1970-01-01T00:00:00Z\n     */\n    toEpochSecond() {\n        return this._dateTime.toEpochSecond(this._offset);\n    }\n\n    isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n        }\n        if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    }\n\n    range(field) {\n        if (field instanceof ChronoField) {\n            if (field === ChronoField.INSTANT_SECONDS || field === ChronoField.OFFSET_SECONDS) {\n                return field.range();\n            }\n            return this._dateTime.range(field);\n        }\n        return field.rangeRefinedBy(this);\n    }\n\n    _withAdjuster(adjuster) {\n        requireNonNull(adjuster);\n        // optimizations\n        if (adjuster instanceof LocalDate || adjuster instanceof LocalTime || adjuster instanceof LocalDateTime) {\n            return this._withDateTimeOffset(this._dateTime.with(adjuster), this._offset);\n        } else if (adjuster instanceof Instant) {\n            return OffsetDateTime.ofInstant(adjuster, this._offset);\n        } else if (adjuster instanceof ZoneOffset) {\n            return this._withDateTimeOffset(this._dateTime, adjuster);\n        } else if (adjuster instanceof OffsetDateTime) {\n            return adjuster;\n        }\n        return adjuster.adjustInto(this);\n    }\n\n    _withField(field, newValue) {\n        requireNonNull(field);\n        if (field instanceof ChronoField) {\n            const f = field;\n            switch (f) {\n                case ChronoField.INSTANT_SECONDS: return OffsetDateTime.ofInstant(Instant.ofEpochSecond(newValue, this.nano()), this._offset);\n                case ChronoField.OFFSET_SECONDS: {\n                    return this._withDateTimeOffset(this._dateTime, ZoneOffset.ofTotalSeconds(f.checkValidIntValue(newValue)));\n                }\n            }\n            return this._withDateTimeOffset(this._dateTime.with(field, newValue), this._offset);\n        }\n        return field.adjustInto(this, newValue);\n    }\n\n    _withDateTimeOffset(dateTime, offset) {\n        if (this._dateTime === dateTime && this._offset.equals(offset)) {\n            return this;\n        }\n        return new OffsetDateTime(dateTime, offset);\n    }\n\n    /**\n     * @param {int} year\n     * @return {OffsetDateTime}\n     */\n    withYear(year) {\n        return this._withDateTimeOffset(this._dateTime.withYear(year), this._offset);\n    }\n\n    /**\n     * @param {int} month\n     * @return {OffsetDateTime}\n     */\n    withMonth(month) {\n        return this._withDateTimeOffset(this._dateTime.withMonth(month), this._offset);\n    }\n\n    /**\n     * @param {int} dayOfMonth\n     * @return {OffsetDateTime}\n     */\n    withDayOfMonth(dayOfMonth) {\n        return this._withDateTimeOffset(this._dateTime.withDayOfMonth(dayOfMonth), this._offset);\n    }\n\n    /**\n     * @param {int} dayOfYear\n     * @return {OffsetDateTime}\n     */\n    withDayOfYear(dayOfYear) {\n        return this._withDateTimeOffset(this._dateTime.withDayOfYear(dayOfYear), this._offset);\n    }\n\n    /**\n     * @param {int} hour\n     * @return {OffsetDateTime}\n     */\n    withHour(hour) {\n        return this._withDateTimeOffset(this._dateTime.withHour(hour), this._offset);\n    }\n\n    /**\n     * @param {int} minute\n     * @return {OffsetDateTime}\n     */\n    withMinute(minute) {\n        return this._withDateTimeOffset(this._dateTime.withMinute(minute), this._offset);\n    }\n\n    /**\n     * @param {int} second\n     * @return {OffsetDateTime}\n     */\n    withSecond(second) {\n        return this._withDateTimeOffset(this._dateTime.withSecond(second), this._offset);\n    }\n\n    /**\n     * @param {int} nanoOfSecond\n     * @return {OffsetDateTime}\n     */\n    withNano(nanoOfSecond) {\n        return this._withDateTimeOffset(this._dateTime.withNano(nanoOfSecond), this._offset);\n    }\n\n    /**\n     * @param {ZoneOffset} offset\n     * @return {OffsetDateTime}\n     */\n    withOffsetSameLocal(offset) {\n        requireNonNull(offset, 'offset');\n        return this._withDateTimeOffset(this._dateTime, offset);\n    }\n\n    /**\n     * @param {ZoneOffset} offset\n     * @return {OffsetDateTime}\n     */\n    withOffsetSameInstant(offset) {\n        requireNonNull(offset, 'offset');\n        if (offset.equals(this._offset)) {\n            return this;\n        }\n        const difference = offset.totalSeconds() - this._offset.totalSeconds();\n        const adjusted = this._dateTime.plusSeconds(difference);\n        return new OffsetDateTime(adjusted, offset);\n    }\n\n    /**\n     * @param {TemporalUnit} unit\n     * @return {OffsetDateTime}\n     */\n    truncatedTo(unit) {\n        return this._withDateTimeOffset(this._dateTime.truncatedTo(unit), this._offset);\n    }\n\n    _plusAmount(amount) {\n        requireNonNull(amount, 'amount');\n        return amount.addTo(this);\n    }\n\n    _plusUnit(amountToAdd, unit) {\n        if (unit instanceof ChronoUnit) {\n            return this._withDateTimeOffset(this._dateTime.plus(amountToAdd, unit), this._offset);\n        }\n        return unit.addTo(this, amountToAdd);\n    }\n\n    /**\n     * @param {int} years\n     * @return {OffsetTime}\n     */\n    plusYears(years) {\n        return this._withDateTimeOffset(this._dateTime.plusYears(years), this._offset);\n    }\n\n    /**\n     * @param {int} months\n     * @return {OffsetTime}\n     */\n    plusMonths(months) {\n        return this._withDateTimeOffset(this._dateTime.plusMonths(months), this._offset);\n    }\n\n    /**\n     * @param {int} weeks\n     * @return {OffsetTime}\n     */\n    plusWeeks(weeks) {\n        return this._withDateTimeOffset(this._dateTime.plusWeeks(weeks), this._offset);\n    }\n\n    /**\n     * @param {int} days\n     * @return {OffsetTime}\n     */\n    plusDays(days) {\n        return this._withDateTimeOffset(this._dateTime.plusDays(days), this._offset);\n    }\n\n    /**\n     * @param {int} hours\n     * @return {OffsetTime}\n     */\n    plusHours(hours) {\n        return this._withDateTimeOffset(this._dateTime.plusHours(hours), this._offset);\n    }\n\n    /**\n     * @param {int} minutes\n     * @return {OffsetTime}\n     */\n    plusMinutes(minutes) {\n        return this._withDateTimeOffset(this._dateTime.plusMinutes(minutes), this._offset);\n    }\n\n    /**\n     * @param {int} seconds\n     * @return {OffsetTime}\n     */\n    plusSeconds(seconds) {\n        return this._withDateTimeOffset(this._dateTime.plusSeconds(seconds), this._offset);\n    }\n\n    /**\n     * @param {int} nanos\n     * @return {OffsetTime}\n     */\n    plusNanos(nanos) {\n        return this._withDateTimeOffset(this._dateTime.plusNanos(nanos), this._offset);\n    }\n\n    _minusAmount(amount) {\n        requireNonNull(amount);\n        return amount.subtractFrom(this);\n    }\n\n    _minusUnit(amountToSubtract, unit) {\n        return this.plus(-1 * amountToSubtract, unit);\n    }\n\n    /**\n     * @param {int} years\n     * @return {OffsetTime}\n     */\n    minusYears(years) {\n        return this._withDateTimeOffset(this._dateTime.minusYears(years), this._offset);\n    }\n\n    /**\n     * @param {int} months\n     * @return {OffsetTime}\n     */\n    minusMonths(months) {\n        return this._withDateTimeOffset(this._dateTime.minusMonths(months), this._offset);\n    }\n\n    /**\n     * @param {int} weeks\n     * @return {OffsetTime}\n     */\n    minusWeeks(weeks) {\n        return this._withDateTimeOffset(this._dateTime.minusWeeks(weeks), this._offset);\n    }\n\n    /**\n     * @param {int} days\n     * @return {OffsetTime}\n     */\n    minusDays(days) {\n        return this._withDateTimeOffset(this._dateTime.minusDays(days), this._offset);\n    }\n\n    /**\n     * @param {int} hours\n     * @return {OffsetTime}\n     */\n    minusHours(hours) {\n        return this._withDateTimeOffset(this._dateTime.minusHours(hours), this._offset);\n    }\n\n    /**\n     * @param {int} minutes\n     * @return {OffsetTime}\n     */\n    minusMinutes(minutes) {\n        return this._withDateTimeOffset(this._dateTime.minusMinutes(minutes), this._offset);\n    }\n\n    /**\n     * @param {int} seconds\n     * @return {OffsetTime}\n     */\n    minusSeconds(seconds) {\n        return this._withDateTimeOffset(this._dateTime.minusSeconds(seconds), this._offset);\n    }\n\n    /**\n     * @param {int} nanos\n     * @return {OffsetTime}\n     */\n    minusNanos(nanos) {\n        return this._withDateTimeOffset(this._dateTime.minusNanos(nanos), this._offset);\n    }\n\n    compareTo(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, OffsetDateTime, 'other');\n        if (this.offset().equals(other.offset())) {\n            return this.toLocalDateTime().compareTo(other.toLocalDateTime());\n        }\n        let cmp = MathUtil.compareNumbers(this.toEpochSecond(), other.toEpochSecond());\n        if (cmp === 0) {\n            cmp = this.toLocalTime().nano() - other.toLocalTime().nano();\n            if (cmp === 0) {\n                cmp = this.toLocalDateTime().compareTo(other.toLocalDateTime());\n            }\n        }\n        return cmp;\n    }\n\n    /**\n     * @param {OffsetDateTime} other\n     * @return {boolean}\n     */\n    isAfter(other) {\n        requireNonNull(other, 'other');\n        const thisEpochSec = this.toEpochSecond();\n        const otherEpochSec = other.toEpochSecond();\n        return thisEpochSec > otherEpochSec || (thisEpochSec === otherEpochSec && this.toLocalTime().nano() > other.toLocalTime().nano());\n    }\n\n    /**\n     * @param {OffsetDateTime} other\n     * @return {boolean}\n     */\n    isBefore(other) {\n        requireNonNull(other, 'other');\n        const thisEpochSec = this.toEpochSecond();\n        const otherEpochSec = other.toEpochSecond();\n        return thisEpochSec < otherEpochSec || (thisEpochSec === otherEpochSec && this.toLocalTime().nano() < other.toLocalTime().nano());\n    }\n\n    /**\n     * @param {OffsetDateTime} other\n     * @return {boolean}\n     */\n    isEqual(other) {\n        requireNonNull(other, 'other');\n        return this.toEpochSecond() === other.toEpochSecond() && this.toLocalTime().nano() === other.toLocalTime().nano();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * @param other\n     * @return {boolean}\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof OffsetDateTime) {\n            return this._dateTime.equals(other._dateTime) && this._offset.equals(other._offset);\n        }\n        return false;\n    }\n\n    /**\n     * @return {number}\n     */\n    hashCode() {\n        return this._dateTime.hashCode() ^ this._offset.hashCode();\n    }\n\n    toString() {\n        return this._dateTime.toString() + this._offset.toString();\n    }\n\n    /**\n     *\n     * @return {string} same as {@link LocalDateTime.toString}\n     */\n    toJSON() {\n        return this.toString();\n    }\n\n    /**\n     * @param {DateTimeFormatter} formatter\n     * @return {string}\n     */\n    format(formatter) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.format(this);\n    }\n}\n\n\nexport function _init() {\n    OffsetDateTime.MIN = LocalDateTime.MIN.atOffset(ZoneOffset.MAX);\n\n    OffsetDateTime.MAX = LocalDateTime.MAX.atOffset(ZoneOffset.MIN);\n\n    OffsetDateTime.FROM = createTemporalQuery('OffsetDateTime.FROM', (temporal) => {\n        return OffsetDateTime.from(temporal);\n    });\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { assert, requireNonNull, requireInstance } from './assert';\n\nimport { MathUtil } from './MathUtil';\nimport { DateTimeException, UnsupportedTemporalTypeException, NullPointerException, IllegalArgumentException } from './errors';\n\nimport { IsoChronology } from './chrono/IsoChronology';\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { ChronoLocalDate } from './chrono/ChronoLocalDate';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { createTemporalQuery } from './temporal/TemporalQuery';\nimport { ValueRange } from './temporal/ValueRange';\nimport { DateTimeFormatter } from './format/DateTimeFormatter';\n\nimport { Clock } from './Clock';\nimport { DayOfWeek } from './DayOfWeek';\nimport { OffsetDateTime } from './OffsetDateTime';\nimport { OffsetTime } from './OffsetTime';\nimport { Month } from './Month';\nimport { Period } from './Period';\nimport { YearConstants } from './YearConstants';\nimport { LocalTime } from './LocalTime';\nimport { LocalDateTime } from './LocalDateTime';\nimport { Year } from './Year';\nimport { ZoneId } from './ZoneId';\nimport { ZoneOffset } from './ZoneOffset';\nimport { ZonedDateTime } from './ZonedDateTime';\n\n/**\n * The number of days in a 400 year cycle.\n */\nconst  DAYS_PER_CYCLE = 146097;\n\n/**\n* The number of days from year zero to year 1970.\n* There are five 400 year cycles from year zero to 2000.\n* There are 7 leap years from 1970 to 2000.\n*/\nconst  DAYS_0000_TO_1970 = (DAYS_PER_CYCLE * 5) - (30 * 365 + 7);\n\n/**\n * A date without a time-zone in the ISO-8601 calendar system,\n * such as 2007-12-03.\n *\n * LocalDate is an immutable date-time object that represents a date,\n * often viewed as year-month-day. Other date fields, such as day-of-year,\n * day-of-week and week-of-year, can also be accessed.\n * For example, the value \"2nd October 2007\" can be stored in a LocalDate.\n *\n * This class does not store or represent a time or time-zone.\n * Instead, it is a description of the date, as used for birthdays.\n * It cannot represent an instant on the time-line without additional information\n * such as an offset or time-zone.\n *\n * The ISO-8601 calendar system is the modern civil calendar system used today\n * in most of the world. It is equivalent to the proleptic Gregorian calendar\n * system, in which today's rules for leap years are applied for all time.\n * For most applications written today, the ISO-8601 rules are entirely suitable.\n * However, any application that makes use of historical dates, and requires them\n * to be accurate will find the ISO-8601 approach unsuitable.\n *\n * ### Static properties of Class {@link LocalDate}\n *\n * LocalDate.MIN = LocalDate.of(Year.MIN_VALUE, 1, 1);\n *\n * The minimum supported {@link LocalDate}\n * This could be used by an application as a \"far past\" date.\n *\n * LocalDate.MAX = LocalDate.of(Year.MAX_VALUE, 12, 31);\n *\n * The maximum supported {@link LocalDate}\n * This could be used by an application as a \"far future\" date.\n *\n * LocalDate.EPOCH_0\n *\n * The date at epoch day 0, that is 1970-01-01.\n */\n\nexport class LocalDate extends ChronoLocalDate{\n\n    /**\n     * Obtains the current date from the system clock in the default time-zone or\n     * if specified, the current date from the specified clock or\n     * if argument is a ZoneId this will query a clock with the specified ZoneId.\n     *\n     * This will query the specified clock to obtain the current date - today.\n     * Using this method allows the use of an alternate clock for testing.\n     *\n     * @param {Clock|ZoneId} [clockOrZone=Clock.systemDefaultZone()] - the clock or zone to use,\n     * if null, the system clock and default time-zone is used.\n     * @return {LocalDate} the current date, not null\n     */\n    static now(clockOrZone) {\n        let clock;\n        if(clockOrZone == null){\n            clock = Clock.systemDefaultZone();\n        } else if(clockOrZone instanceof ZoneId){\n            clock = Clock.system(clockOrZone);\n        } else {\n            clock = clockOrZone;\n        }\n        return LocalDate.ofInstant(clock.instant(), clock.zone());\n    }\n\n    /**\n     * obtain a LocalDate from an Instant in the specified time-zone or, if null\n     * in the system default time-zone\n     *\n     * @param {!Instant} instant\n     * @param {ZoneId} [zone=ZoneId.systemDefault()], defaults to ZoneId.systemDefault()\n     * @returns {LocalDate} the current date, not null\n     */\n    static ofInstant(instant, zone=ZoneId.systemDefault()){\n        requireNonNull(instant, 'instant');\n        const offset = zone.rules().offset(instant);\n        const epochSec = instant.epochSecond() + offset.totalSeconds();\n        const epochDay = MathUtil.floorDiv(epochSec, LocalTime.SECONDS_PER_DAY);\n        return LocalDate.ofEpochDay(epochDay);\n    }\n\n    /**\n     * Obtains an instance of {@link LocalDate} from a year, month and day.\n     *\n     * This returns a {@link LocalDate} with the specified year, month and day-of-month.\n     * The day must be valid for the year and month, otherwise an exception will be thrown.\n     *\n     * @param {!number} year - the year to represent, from {@link Year.MIN_VALUE} to {@link Year.MAX_VALUE}\n     * @param {!(Month|Number)} month - the month-of-year to represent, from 1 (January) to 12 (December)\n     * @param {!number} dayOfMonth - the day-of-month to represent, from 1 to 31\n     * @return {LocalDate} the local date, not null\n     * @throws {DateTimeException} if the value of any field is out of range,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    static of(year, month, dayOfMonth) {\n        return new LocalDate(year, month, dayOfMonth);\n    }\n\n    /**\n     * Obtains an instance of {@link LocalDate} from a year and day-of-year.\n     *\n     * This returns a {@link LocalDate} with the specified year and day-of-year.\n     * The day-of-year must be valid for the year, otherwise an exception will be thrown.\n     *\n     * @param {!number} year - the year to represent, from {@link Year.MIN_VALUE} to {@link Year.MAX_VALUE}\n     * @param {!number} dayOfYear - the day-of-year to represent, from 1 to 366\n     * @return {LocalDate} the local date, not null\n     * @throws {DateTimeException} if the value of any field is out of range,\n     *  or if the day-of-year is invalid for the year\n     */\n    static ofYearDay(year, dayOfYear) {\n        ChronoField.YEAR.checkValidValue(year);\n        //TODO: ChronoField.DAY_OF_YEAR.checkValidValue(dayOfYear);\n        const leap = IsoChronology.isLeapYear(year);\n        if (dayOfYear === 366 && leap === false) {\n            assert(false, `Invalid date 'DayOfYear 366' as '${year}' is not a leap year`, DateTimeException);\n        }\n        let moy = Month.of(Math.floor((dayOfYear - 1) / 31 + 1));\n        const monthEnd = moy.firstDayOfYear(leap) + moy.length(leap) - 1;\n        if (dayOfYear > monthEnd) {\n            moy = moy.plus(1);\n        }\n        const dom = dayOfYear - moy.firstDayOfYear(leap) + 1;\n        return new LocalDate(year, moy.value(), dom);\n    }\n\n    /**\n     * Obtains an instance of LocalDate from the epoch day count.\n     *\n     * This returns a LocalDate with the specified epoch-day.\n     * The {@link ChronoField.EPOCH_DAY} is a simple incrementing count\n     * of days where day 0 is 1970-01-01. Negative numbers represent earlier days.\n     *\n     * @param {number} [epochDay=0] - the Epoch Day to convert, based on the epoch 1970-01-01\n     * @return {LocalDate} the local date, not null\n     * @throws {AssertionError} if the epoch days exceeds the supported date range\n     */\n    static ofEpochDay(epochDay=0) {\n        let adjust, adjustCycles, doyEst, yearEst, zeroDay;\n        zeroDay = epochDay + DAYS_0000_TO_1970;\n        zeroDay -= 60;\n        adjust = 0;\n        if (zeroDay < 0) {\n            adjustCycles = MathUtil.intDiv(zeroDay + 1, DAYS_PER_CYCLE) - 1;\n            adjust = adjustCycles * 400;\n            zeroDay += -adjustCycles * DAYS_PER_CYCLE;\n        }\n        yearEst = MathUtil.intDiv(400 * zeroDay + 591, DAYS_PER_CYCLE);\n        doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n        if (doyEst < 0) {\n            yearEst--;\n            doyEst = zeroDay - (365 * yearEst + MathUtil.intDiv(yearEst, 4) - MathUtil.intDiv(yearEst, 100) + MathUtil.intDiv(yearEst, 400));\n        }\n        yearEst += adjust;\n        const marchDoy0 = doyEst;\n        const marchMonth0 = MathUtil.intDiv(marchDoy0 * 5 + 2, 153);\n        const month = (marchMonth0 + 2) % 12 + 1;\n        const dom = marchDoy0 - MathUtil.intDiv(marchMonth0 * 306 + 5, 10) + 1;\n        yearEst += MathUtil.intDiv(marchMonth0, 10);\n        const year = yearEst;\n        return new LocalDate(year, month, dom);\n    }\n\n    /**\n     * Obtains an instance of {@link LocalDate} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link LocalDate}.\n     *\n     * The conversion uses the {@link TemporalQueries.localDate} query, which relies\n     * on extracting the {@link ChronoField.EPOCH_DAY} field.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used as a query via method reference, {@link LocalDate::from}.\n     *\n     * @param {!TemporalAccessor} temporal - the temporal object to convert, not null\n     * @return {LocalDate} the local date, not null\n     * @throws {DateTimeException} if unable to convert to a {@link LocalDate}\n     */\n    static from(temporal) {\n        requireNonNull(temporal, 'temporal');\n        const date = temporal.query(TemporalQueries.localDate());\n        if (date == null) {\n            throw new DateTimeException(\n                `Unable to obtain LocalDate from TemporalAccessor: ${temporal}, type ${temporal.constructor != null ? temporal.constructor.name : ''}`);\n        }\n        return date;\n    }\n\n    /**\n     * Obtains an instance of {@link LocalDate} from a text string using a specific formatter.\n     *\n     * The text is parsed using the formatter, returning a date.\n     *\n     * @param {!string} text - the text to parse, not null\n     * @param {DateTimeFormatter} [formatter=DateTimeFormatter.ISO_LOCAL_DATE] - the formatter to use, default is\n     * {@link DateTimeFormatter.ISO_LOCAL_DATE}\n     * @return {LocalDate} the parsed local date, not null\n     * @throws {DateTimeParseException} if the text cannot be parsed\n     */\n    static parse(text, formatter = DateTimeFormatter.ISO_LOCAL_DATE){\n        assert(formatter != null, 'formatter', NullPointerException);\n        return formatter.parse(text, LocalDate.FROM);\n    }\n\n    /**\n     * Resolves the date, resolving days past the end of month.\n     *\n     * @param {!number} year - the year to represent, validated from {@link Year.MIN_VALUE} to {@link Year.MAX_VALUE}\n     * @param {!number} month - the month-of-year to represent, validated from 1 to 12\n     * @param {!number} day - the day-of-month to represent, validated from 1 to 31\n     * @return {LocalDate} resolved date, not null\n     */\n    static _resolvePreviousValid(year, month, day) {\n        switch (month) {\n            case 2:\n                day = Math.min(day, IsoChronology.isLeapYear(year) ? 29 : 28);\n                break;\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n                day = Math.min(day, 30);\n                break;\n        }\n        return LocalDate.of(year, month, day);\n    }\n\n    /**\n     * Do not call the constructor directly, use the of*() factories instead like {@link LocalDate.of}\n     *\n     * @param {!number} year\n     * @param {!(Month|number)} month\n     * @param {!number} dayOfMonth\n     * @private\n     */\n    constructor(year, month, dayOfMonth){\n        super();\n        requireNonNull(year, 'year');\n        requireNonNull(month, 'month');\n        requireNonNull(dayOfMonth, 'dayOfMonth');\n\n        if (month instanceof Month) {\n            month = month.value();\n        }\n        this._year = MathUtil.safeToInt(year);\n        this._month = MathUtil.safeToInt(month);\n        this._day = MathUtil.safeToInt(dayOfMonth);\n        LocalDate._validate(this._year, this._month, this._day);\n    }\n\n\n    /**\n     *\n     * @param {!number} year\n     * @param {!number} month\n     * @param {!number} dayOfMonth\n     * @throws {DateTimeException} if date values are invalid\n     * @private\n     */\n    static _validate(year, month, dayOfMonth) {\n        let dom;\n        ChronoField.YEAR.checkValidValue(year);\n        ChronoField.MONTH_OF_YEAR.checkValidValue(month);\n        ChronoField.DAY_OF_MONTH.checkValidValue(dayOfMonth);\n\n        if (dayOfMonth > 28) {\n            dom = 31;\n            switch (month) {\n                case 2:\n                    dom = IsoChronology.isLeapYear(year) ? 29 : 28;\n                    break;\n                case 4:\n                case 6:\n                case 9:\n                case 11:\n                    dom = 30;\n            }\n            if (dayOfMonth > dom) {\n                if (dayOfMonth === 29) {\n                    assert(false, `Invalid date 'February 29' as '${year}' is not a leap year`, DateTimeException);\n                } else {\n                    assert(false, `Invalid date '${year}' '${month}' '${dayOfMonth}'`, DateTimeException);\n                }\n            }\n        }\n    }\n\n    /**\n     * Checks if the specified field is supported.\n     *\n     * This checks if this date can be queried for the specified field.\n     * If false, then calling the {@link LocalDate.range} range and\n     * {@link LocalDate.get} get methods will throw an exception.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link LocalDate.isSupported} supported fields will return valid\n     * values based on this date-time.\n     * The supported fields are:\n     *\n     * * {@link ChronoField.DAY_OF_WEEK}\n     * * {@link ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH}\n     * * {@link ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR}\n     * * {@link ChronoField.DAY_OF_MONTH}\n     * * {@link ChronoField.DAY_OF_YEAR}\n     * * {@link ChronoField.EPOCH_DAY}\n     * * {@link ChronoField.ALIGNED_WEEK_OF_MONTH}\n     * * {@link ChronoField.ALIGNED_WEEK_OF_YEAR}\n     * * {@link ChronoField.MONTH_OF_YEAR}\n     * * {@link ChronoField.EPOCH_MONTH}\n     * * {@link ChronoField.YEAR_OF_ERA}\n     * * {@link ChronoField.YEAR}\n     * * {@link ChronoField.ERA}\n     *\n     * All other {@link ChronoField} instances will return false.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.isSupportedBy}\n     * passing this as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField} field  the field to check, null returns false\n     * @return {boolean} true if the field is supported on this date, false if not\n     */\n    isSupported(field) {\n        return super.isSupported(field);\n    }\n\n    /**\n     * Gets the range of valid values for the specified field.\n     *\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This date is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link LocalDate.isSupported} supported fields will return\n     * appropriate range instances.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.rangeRefinedBy}\n     * passing this as the argument.\n     * Whether the range can be obtained is determined by the field.\n     *\n     * @param {TemporalField} field  the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws {DateTimeException} if the range for the field cannot be obtained\n     */\n    range(field) {\n        if (field instanceof ChronoField) {\n            if (field.isDateBased()) {\n                switch (field) {\n                    case ChronoField.DAY_OF_MONTH: return ValueRange.of(1, this.lengthOfMonth());\n                    case ChronoField.DAY_OF_YEAR: return ValueRange.of(1, this.lengthOfYear());\n                    case ChronoField.ALIGNED_WEEK_OF_MONTH: return ValueRange.of(1, this.month() === Month.FEBRUARY && this.isLeapYear() === false ? 4 : 5);\n                    case ChronoField.YEAR_OF_ERA:\n                        return (this._year <= 0 ? ValueRange.of(1, Year.MAX_VALUE + 1) : ValueRange.of(1, Year.MAX_VALUE));\n                }\n                return field.range();\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.rangeRefinedBy(this);\n    }\n\n    /**\n     * Gets the value of the specified field from this date as an `int`.\n     *\n     * This queries this date for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The {@link LocalDate.isSupported} supported fields will return valid\n     * values based on this date, except {@link ChronoField.EPOCH_DAY} and {@link ChronoField.EPOCH_MONTH}\n     * which are too large to fit in an `int` and throw a {@link DateTimeException}.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing this as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {!TemporalField} field  the field to get, not null\n     * @return the value for the field\n     * @throws {DateTimeException} if a value for the field cannot be obtained\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    get(field) {\n        return this.getLong(field);\n    }\n\n    /**\n     * see {LocalDate.get}, get and getLong are identical in javascript, because we are only limited by\n     * {@link MathUtil.MIN_SAFE_INTEGER}/ {@link MathUtil.MAX_SAFE_INTEGER}\n     *\n     * @param {!TemporalField} field\n     * @returns {*}\n     */\n    getLong(field) {\n        assert(field != null, '', NullPointerException);\n        if (field instanceof ChronoField) {\n            return this._get0(field);\n        }\n        return field.getFrom(this);\n    }\n\n    /**\n     * TODO tests are missing for the ALIGNED_* ChronoFields\n     *\n     * @param {!TemporalField} field\n     * @returns {*}\n     * @private\n     */\n    _get0(field) {\n        switch (field) {\n            case ChronoField.DAY_OF_WEEK: return this.dayOfWeek().value();\n            case ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH: return MathUtil.intMod((this._day - 1), 7) + 1;\n            case ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR: return MathUtil.intMod((this.dayOfYear() - 1), 7) + 1;\n            case ChronoField.DAY_OF_MONTH: return this._day;\n            case ChronoField.DAY_OF_YEAR: return this.dayOfYear();\n            case ChronoField.EPOCH_DAY: return this.toEpochDay();\n            case ChronoField.ALIGNED_WEEK_OF_MONTH: return MathUtil.intDiv((this._day - 1), 7) + 1;\n            case ChronoField.ALIGNED_WEEK_OF_YEAR: return MathUtil.intDiv((this.dayOfYear() - 1), 7) + 1;\n            case ChronoField.MONTH_OF_YEAR: return this._month;\n            case ChronoField.PROLEPTIC_MONTH: return this._prolepticMonth();\n            case ChronoField.YEAR_OF_ERA: return (this._year >= 1 ? this._year : 1 - this._year);\n            case ChronoField.YEAR: return this._year;\n            case ChronoField.ERA: return (this._year >= 1 ? 1 : 0);\n        }\n        throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n    }\n\n    /**\n     *\n     * @return {number}\n     * @private\n     */\n    _prolepticMonth() {\n        return (this._year * 12) + (this._month - 1);\n    }\n\n    /**\n     * Gets the chronology of this date, which is the ISO calendar system.\n     *\n     * The {@link Chronology} represents the calendar system in use.\n     * The ISO-8601 calendar system is the modern civil calendar system used today\n     * in most of the world. It is equivalent to the proleptic Gregorian calendar\n     * system, in which today's rules for leap years are applied for all time.\n     *\n     * @return {Chronology} the ISO chronology, not null\n     */\n    chronology() {\n        return IsoChronology.INSTANCE;\n    }\n\n    /**\n     *\n     * @return {number} gets the year\n     */\n    year() {\n        return this._year;\n    }\n\n    /**\n     *\n     * @return {number} gets the month value\n     */\n    monthValue() {\n        return this._month;\n    }\n\n    /**\n     *\n     * @returns {Month} month\n     */\n    month() {\n        return Month.of(this._month);\n    }\n\n    /**\n     *\n     * @return {number} gets the day of month\n     */\n    dayOfMonth() {\n        return this._day;\n    }\n\n    /**\n      * Gets the day-of-year field.\n      *\n      * This method returns the primitive int value for the day-of-year.\n      *\n      * @return {number} the day-of-year, from 1 to 365, or 366 in a leap year\n      */\n    dayOfYear() {\n        return this.month().firstDayOfYear(this.isLeapYear()) + this._day - 1;\n    }\n\n    /**\n     * Gets the day-of-week field, which is an enum {@link DayOfWeek}.\n     *\n     * This method returns the enum {@link DayOfWeek} for the day-of-week.\n     * This avoids confusion as to what `int` values mean.\n     * If you need access to the primitive `int` value then the enum\n     * provides the {@link DayOfWeek.value} int value.\n     *\n     * Additional information can be obtained from the {@link DayOfWeek}.\n     * This includes textual names of the values.\n     *\n     * @return {DayOfWeek} the day-of-week, not null\n     */\n    dayOfWeek() {\n        const dow0 = MathUtil.floorMod(this.toEpochDay() + 3, 7);\n        return DayOfWeek.of(dow0 + 1);\n    }\n\n    /**\n     * Checks if the year is a leap year, according to the ISO proleptic\n     * calendar system rules.\n     *\n     * This method applies the current rules for leap years across the whole time-line.\n     * In general, a year is a leap year if it is divisible by four without\n     * remainder. However, years divisible by 100, are not leap years, with\n     * the exception of years divisible by 400 which are.\n     *\n     * For example, 1904 is a leap year it is divisible by 4.\n     * 1900 was not a leap year as it is divisible by 100, however 2000 was a\n     * leap year as it is divisible by 400.\n     *\n     * The calculation is proleptic - applying the same rules into the far future and far past.\n     * This is historically inaccurate, but is correct for the ISO-8601 standard.\n     *\n     * @return {boolean} true if the year is leap, false otherwise\n     */\n    isLeapYear() {\n        return IsoChronology.isLeapYear(this._year);\n    }\n\n    /**\n     * Returns the length of the month represented by this date.\n     *\n     * This returns the length of the month in days.\n     * For example, a date in January would return 31.\n     *\n     * @return {number} the length of the month in days\n     */\n    lengthOfMonth() {\n        switch (this._month) {\n            case 2:\n                return (this.isLeapYear() ? 29 : 28);\n            case 4:\n            case 6:\n            case 9:\n            case 11:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n\n    /**\n     * Returns the length of the year represented by this date.\n     *\n     * This returns the length of the year in days, either 365 or 366.\n     *\n     * @return {number} 366 if the year is leap, 365 otherwise\n     */\n    lengthOfYear() {\n        return (this.isLeapYear() ? 366 : 365);\n    }\n\n    /**\n     * Returns an adjusted copy of this date.\n     *\n     * This returns a new {@link LocalDate}, based on this one, with the date adjusted.\n     * The adjustment takes place using the specified adjuster strategy object.\n     * Read the documentation of the adjuster to understand what adjustment will be made.\n     *\n     * A simple adjuster might simply set the one of the fields, such as the year field.\n     * A more complex adjuster might set the date to the last day of the month.\n     * A selection of common adjustments is provided in {@link TemporalAdjusters}.\n     * These include finding the \"last day of the month\" and \"next Wednesday\".\n     * Key date-time classes also implement the {@link TemporalAdjuster} interface,\n     * such as {@link Month} and {@link MonthDay}.\n     * The adjuster is responsible for handling special cases, such as the varying\n     * lengths of month and leap years.\n     *\n     * For example this code returns a date on the last day of July:\n     * <pre>\n     *  import static org.threeten.bp.Month.*;\n     *  import static org.threeten.bp.temporal.Adjusters.*;\n     *\n     *  result = localDate.with(JULY).with(lastDayOfMonth());\n     * </pre>\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalAdjuster.adjustInto} method on the\n     * specified adjuster passing `this` as the argument.\n     *\n     * @param {!TemporalAdjuster} adjuster - the adjuster to use, not null\n     * @return {LocalDate} a {@link LocalDate} based on `this` with the adjustment made, not null\n     * @throws {DateTimeException} if the adjustment cannot be made\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    _withAdjuster(adjuster) {\n        requireNonNull(adjuster, 'adjuster');\n        // optimizations\n        if (adjuster instanceof LocalDate) {\n            return adjuster;\n        }\n        return super._withAdjuster(adjuster);\n    }\n\n    /**\n     * Returns a copy of this date with the specified field set to a new value.\n     *\n     * This returns a new {@link LocalDate}, based on this one, with the value\n     * for the specified field changed.\n     * This can be used to change any supported field, such as the year, month or day-of-month.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     *\n     * In some cases, changing the specified field can cause the resulting date to become invalid,\n     * such as changing the month from 31st January to February would make the day-of-month invalid.\n     * In cases like this, the field is responsible for resolving the date. Typically it will choose\n     * the previous valid date, which would be the last valid day of February in this example.\n     *\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     *\n     * * {@link DAY_OF_WEEK} -\n     *   Returns a {@link LocalDate} with the specified day-of-week.\n     *   The date is adjusted up to 6 days forward or backward within the boundary\n     *   of a Monday to Sunday week.\n     * * {@link ALIGNED_DAY_OF_WEEK_IN_MONTH} -\n     *   Returns a {@link LocalDate} with the specified aligned-day-of-week.\n     *   The date is adjusted to the specified month-based aligned-day-of-week.\n     *   Aligned weeks are counted such that the first week of a given month starts\n     *   on the first day of that month.\n     *   This may cause the date to be moved up to 6 days into the following month.\n     * * {@link ALIGNED_DAY_OF_WEEK_IN_YEAR} -\n     *   Returns a {@link LocalDate} with the specified aligned-day-of-week.\n     *   The date is adjusted to the specified year-based aligned-day-of-week.\n     *   Aligned weeks are counted such that the first week of a given year starts\n     *   on the first day of that year.\n     *   This may cause the date to be moved up to 6 days into the following year.\n     * * {@link DAY_OF_MONTH} -\n     *   Returns a {@link LocalDate} with the specified day-of-month.\n     *   The month and year will be unchanged. If the day-of-month is invalid for the\n     *   year and month, then a {@link DateTimeException} is thrown.\n     * * {@link DAY_OF_YEAR} -\n     *   Returns a {@link LocalDate} with the specified day-of-year.\n     *   The year will be unchanged. If the day-of-year is invalid for the\n     *   year, then a {@link DateTimeException} is thrown.\n     * * {@link EPOCH_DAY} -\n     *   Returns a {@link LocalDate} with the specified epoch-day.\n     *   This completely replaces the date and is equivalent to {@link ofEpochDay}.\n     * * {@link ALIGNED_WEEK_OF_MONTH} -\n     *   Returns a {@link LocalDate} with the specified aligned-week-of-month.\n     *   Aligned weeks are counted such that the first week of a given month starts\n     *   on the first day of that month.\n     *   This adjustment moves the date in whole week chunks to match the specified week.\n     *   The result will have the same day-of-week as this date.\n     *   This may cause the date to be moved into the following month.\n     * * {@link ALIGNED_WEEK_OF_YEAR} -\n     *   Returns a {@link LocalDate} with the specified aligned-week-of-year.\n     *   Aligned weeks are counted such that the first week of a given year starts\n     *   on the first day of that year.\n     *   This adjustment moves the date in whole week chunks to match the specified week.\n     *   The result will have the same day-of-week as this date.\n     *   This may cause the date to be moved into the following year.\n     * * {@link MONTH_OF_YEAR} -\n     *   Returns a {@link LocalDate} with the specified month-of-year.\n     *   The year will be unchanged. The day-of-month will also be unchanged,\n     *   unless it would be invalid for the new month and year. In that case, the\n     *   day-of-month is adjusted to the maximum valid value for the new month and year.\n     * * {@link PROLEPTIC_MONTH} -\n     *   Returns a {@link LocalDate} with the specified proleptic-month.\n     *   The day-of-month will be unchanged, unless it would be invalid for the new month\n     *   and year. In that case, the day-of-month is adjusted to the maximum valid value\n     *   for the new month and year.\n     * * {@link YEAR_OF_ERA} -\n     *   Returns a {@link LocalDate} with the specified year-of-era.\n     *   The era and month will be unchanged. The day-of-month will also be unchanged,\n     *   unless it would be invalid for the new month and year. In that case, the\n     *   day-of-month is adjusted to the maximum valid value for the new month and year.\n     * * {@link YEAR} -\n     *   Returns a {@link LocalDate} with the specified year.\n     *   The month will be unchanged. The day-of-month will also be unchanged,\n     *   unless it would be invalid for the new month and year. In that case, the\n     *   day-of-month is adjusted to the maximum valid value for the new month and year.\n     * * {@link ERA} -\n     *   Returns a {@link LocalDate} with the specified era.\n     *   The year-of-era and month will be unchanged. The day-of-month will also be unchanged,\n     *   unless it would be invalid for the new month and year. In that case, the\n     *   day-of-month is adjusted to the maximum valid value for the new month and year.\n     *\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@link DateTimeException} will be thrown.\n     *\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.adjustInto}\n     * passing `this` as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     *\n     * @param {TemporalField} field - the field to set in the result, not null\n     * @param {number} newValue - the new value of the field in the result\n     * @return {LocalDate} a {@link LocalDate} based on `this` with the specified field set, not null\n     * @throws {DateTimeException} if the field cannot be set\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    _withField(field, newValue) {\n        assert(field != null, 'field', NullPointerException);\n        if (field instanceof ChronoField) {\n            const f = field;\n            f.checkValidValue(newValue);\n            switch (f) {\n                case ChronoField.DAY_OF_WEEK: return this.plusDays(newValue - this.dayOfWeek().value());\n                case ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH: return this.plusDays(newValue - this.getLong(ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH));\n                case ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR: return this.plusDays(newValue - this.getLong(ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR));\n                case ChronoField.DAY_OF_MONTH: return this.withDayOfMonth(newValue);\n                case ChronoField.DAY_OF_YEAR: return this.withDayOfYear(newValue);\n                case ChronoField.EPOCH_DAY: return LocalDate.ofEpochDay(newValue);\n                case ChronoField.ALIGNED_WEEK_OF_MONTH: return this.plusWeeks(newValue - this.getLong(ChronoField.ALIGNED_WEEK_OF_MONTH));\n                case ChronoField.ALIGNED_WEEK_OF_YEAR: return this.plusWeeks(newValue - this.getLong(ChronoField.ALIGNED_WEEK_OF_YEAR));\n                case ChronoField.MONTH_OF_YEAR: return this.withMonth(newValue);\n                case ChronoField.PROLEPTIC_MONTH: return this.plusMonths(newValue - this.getLong(ChronoField.PROLEPTIC_MONTH));\n                case ChronoField.YEAR_OF_ERA: return this.withYear((this._year >= 1 ? newValue : 1 - newValue));\n                case ChronoField.YEAR: return this.withYear(newValue);\n                case ChronoField.ERA: return (this.getLong(ChronoField.ERA) === newValue ? this : this.withYear(1 - this._year));\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.adjustInto(this, newValue);\n    }\n\n    /**\n     * Returns a copy of this date with the year altered.\n     * If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n     *\n     * @param {!number} year  the year to set in the result, from {@link Year.MIN_VALUE} to {@link Year.MAX_VALUE}\n     * @return {LocalDate} a {@link LocalDate} based on this date with the requested year, not null\n     * @throws {DateTimeException} if the year value is invalid\n     */\n    withYear(year) {\n        if (this._year === year) {\n            return this;\n        }\n        ChronoField.YEAR.checkValidValue(year);\n        return LocalDate._resolvePreviousValid(year, this._month, this._day);\n    }\n\n    /**\n     * Returns a copy of this date with the month-of-year altered.\n     * If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n     *\n     * @param {!(Month|number)} month - the month-of-year to set in the result, from 1 (January) to 12 (December)\n     * @return {LocalDate} a {@link LocalDate} based on this date with the requested month, not null\n     * @throws {DateTimeException} if the month-of-year value is invalid\n     */\n    withMonth(month) {\n        const m = (month instanceof Month) ? month.value() : month;\n        if (this._month === m) {\n            return this;\n        }\n        ChronoField.MONTH_OF_YEAR.checkValidValue(m);\n        return LocalDate._resolvePreviousValid(this._year, m, this._day);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDate} with the day-of-month altered.\n     *\n     * If the resulting date is invalid, an exception is thrown.\n     *\n     * @param {!number} dayOfMonth - the day-of-month to set in the result, from 1 to 28-31\n     * @return {LocalDate} based on this date with the requested day, not null\n     * @throws {DateTimeException} if the day-of-month value is invalid,\n     *  or if the day-of-month is invalid for the month-year\n     */\n    withDayOfMonth(dayOfMonth) {\n        if (this._day === dayOfMonth) {\n            return this;\n        }\n        return LocalDate.of(this._year, this._month, dayOfMonth);\n    }\n\n    /**\n     * Returns a copy of this date with the day-of-year altered.\n     * If the resulting date is invalid, an exception is thrown.\n     *\n     * @param dayOfYear  the day-of-year to set in the result, from 1 to 365-366\n     * @return {LocalDate} a {@link LocalDate} based on this date with the requested day, not null\n     * @throws {DateTimeException} if the day-of-year value is invalid\n     * @throws {DateTimeException} if the day-of-year is invalid for the year\n     */\n    withDayOfYear(dayOfYear) {\n        if (this.dayOfYear() === dayOfYear) {\n            return this;\n        }\n        return LocalDate.ofYearDay(this._year, dayOfYear);\n    }\n\n    /**\n     * Returns a copy of this date with the specified period added.\n     *\n     * This method returns a new date based on this date with the specified period added.\n     * This can be used to add any period that is defined by a unit, for example to add years, months or days.\n     * The unit is responsible for the details of the calculation, including the resolution\n     * of any edge cases in the calculation.\n     *\n     * @param {!number} amountToAdd - the amount of the unit to add to the result, may be negative\n     * @param {!TemporalUnit} unit - the unit of the period to add, not null\n     * @return {LocalDate} a {@link LocalDate} based on this date with the specified period added, not null\n     * @throws {DateTimeException} if the unit cannot be added to this type\n     */\n    _plusUnit(amountToAdd, unit) {\n        requireNonNull(amountToAdd, 'amountToAdd');\n        requireNonNull(unit, 'unit');\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.DAYS: return this.plusDays(amountToAdd);\n                case ChronoUnit.WEEKS: return this.plusWeeks(amountToAdd);\n                case ChronoUnit.MONTHS: return this.plusMonths(amountToAdd);\n                case ChronoUnit.YEARS: return this.plusYears(amountToAdd);\n                case ChronoUnit.DECADES: return this.plusYears(MathUtil.safeMultiply(amountToAdd, 10));\n                case ChronoUnit.CENTURIES: return this.plusYears(MathUtil.safeMultiply(amountToAdd, 100));\n                case ChronoUnit.MILLENNIA: return this.plusYears(MathUtil.safeMultiply(amountToAdd, 1000));\n                case ChronoUnit.ERAS: return this.with(ChronoField.ERA, MathUtil.safeAdd(this.getLong(ChronoField.ERA), amountToAdd));\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.addTo(this, amountToAdd);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDate} with the specified period in years added.\n     *\n     * This method adds the specified amount to the years field in three steps:\n     *\n     * 1. Add the input years to the year field\n     * 2. Check if the resulting date would be invalid\n     * 3. Adjust the day-of-month to the last valid day if necessary\n     *\n     * For example, 2008-02-29 (leap year) plus one year would result in the\n     * invalid date 2009-02-29 (standard year). Instead of returning an invalid\n     * result, the last valid day of the month, 2009-02-28, is selected instead.\n     *\n     * @param {!number} yearsToAdd - the years to add, may be negative\n     * @return {LocalDate} a {@link LocalDate} based on this date with the years added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusYears(yearsToAdd) {\n        if (yearsToAdd === 0) {\n            return this;\n        }\n        const newYear = ChronoField.YEAR.checkValidIntValue(this._year + yearsToAdd);  // safe overflow\n        return LocalDate._resolvePreviousValid(newYear, this._month, this._day);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDate} with the specified period in months added.\n     *\n     * This method adds the specified amount to the months field in three steps:\n     *\n     * 1. Add the input months to the month-of-year field\n     * 2. Check if the resulting date would be invalid\n     * 3. Adjust the day-of-month to the last valid day if necessary\n     *\n     * For example, 2007-03-31 plus one month would result in the invalid date\n     * 2007-04-31. Instead of returning an invalid result, the last valid day\n     * of the month, 2007-04-30, is selected instead.\n     *\n     * @param {number} monthsToAdd - the months to add, may be negative\n     * @return {LocalDate} a {@link LocalDate} based on this date with the months added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusMonths(monthsToAdd) {\n        if (monthsToAdd === 0) {\n            return this;\n        }\n        const monthCount = this._year * 12 + (this._month - 1);\n        const calcMonths = monthCount + monthsToAdd;  // safe overflow\n        const newYear = ChronoField.YEAR.checkValidIntValue(MathUtil.floorDiv(calcMonths, 12));\n        const newMonth = MathUtil.floorMod(calcMonths, 12) + 1;\n        return LocalDate._resolvePreviousValid(newYear, newMonth, this._day);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDate} with the specified period in weeks added.\n     *\n     * This method adds the specified amount in weeks to the days field incrementing\n     * the month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     *\n     * For example, 2008-12-31 plus one week would result in 2009-01-07.\n     *\n     * @param {!number} weeksToAdd - the weeks to add, may be negative\n     * @return {LocalDate} a {@link LocalDate} based on this date with the weeks added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusWeeks(weeksToAdd) {\n        return this.plusDays(MathUtil.safeMultiply(weeksToAdd, 7));\n    }\n\n\n    /**\n     * Returns a copy of this LocalDate with the specified number of days added.\n     *\n     * This method adds the specified amount to the days field incrementing the\n     * month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     *\n     * For example, 2008-12-31 plus one day would result in 2009-01-01.\n     *\n     * @param {number} daysToAdd - the days to add, may be negative\n     * @return {LocalDate} a LocalDate based on this date with the days added, not null\n     * @throws AssertionError if the result exceeds the supported date range\n     */\n    plusDays(daysToAdd) {\n        if (daysToAdd === 0) {\n            return this;\n        }\n        const mjDay = MathUtil.safeAdd(this.toEpochDay(), daysToAdd);\n        return LocalDate.ofEpochDay(mjDay);\n    }\n\n    /**\n     * Returns a copy of this date with the specified period subtracted.\n     *\n     * This method returns a new date based on this date with the specified period subtracted.\n     * This can be used to subtract any period that is defined by a unit, for example to subtract years, months or days.\n     * The unit is responsible for the details of the calculation, including the resolution\n     * of any edge cases in the calculation.\n     *\n     * @param {!number} amountToSubtract - the amount of the unit to subtract from the result, may be negative\n     * @param {!TemporalUnit} unit  the unit of the period to subtract, not null\n     * @return {LocalDate} a {@link LocalDate} based on this date with the specified period subtracted, not null\n     * @throws {DateTimeException} if the unit cannot be added to this type\n     */\n    _minusUnit(amountToSubtract, unit) {\n        requireNonNull(amountToSubtract, 'amountToSubtract');\n        requireNonNull(unit, 'unit');\n        return this._plusUnit(-1 * amountToSubtract, unit);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDate} with the specified period in years subtracted.\n     *\n     * This method subtracts the specified amount from the years field in three steps:\n     *\n     * 1. Subtract the input years to the year field\n     * 2. Check if the resulting date would be invalid\n     * 3. Adjust the day-of-month to the last valid day if necessary\n     *\n     * For example, 2008-02-29 (leap year) minus one year would result in the\n     * invalid date 2007-02-29 (standard year). Instead of returning an invalid\n     * result, the last valid day of the month, 2007-02-28, is selected instead.\n     *\n     * @param {!number} yearsToSubtract - the years to subtract, may be negative\n     * @return {LocalDate} a {@link LocalDate} based on this date with the years subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusYears(yearsToSubtract) {\n        return this.plusYears(yearsToSubtract * -1);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDate} with the specified period in months subtracted.\n     *\n     * This method subtracts the specified amount from the months field in three steps:\n     *\n     * 1. Subtract the input months to the month-of-year field\n     * 2. Check if the resulting date would be invalid\n     * 3. Adjust the day-of-month to the last valid day if necessary\n     *\n     * For example, 2007-03-31 minus one month would result in the invalid date\n     * 2007-02-31. Instead of returning an invalid result, the last valid day\n     * of the month, 2007-02-28, is selected instead.\n     *\n     * @param {!number} monthsToSubtract - the months to subtract, may be negative\n     * @return {LocalDate} a {@link LocalDate} based on this date with the months subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusMonths(monthsToSubtract) {\n        return this.plusMonths(monthsToSubtract * -1);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDate} with the specified period in weeks subtracted.\n     *\n     * This method subtracts the specified amount in weeks from the days field decrementing\n     * the month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     *\n     * For example, 2009-01-07 minus one week would result in 2008-12-31.\n     *\n     * @param {!number} weeksToSubtract - the weeks to subtract, may be negative\n     * @return {LocalDate} a {@link LocalDate} based on this date with the weeks subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusWeeks(weeksToSubtract) {\n        return this.plusWeeks(weeksToSubtract * -1);\n    }\n\n    /*\n     * Returns a copy of this LocalDate with the specified number of days subtracted.\n     *\n     * This method subtracts the specified amount from the days field decrementing the\n     * month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     *\n     * For example, 2009-01-01 minus one day would result in 2008-12-31.\n     *\n     * @param {number} daysToSubtract - the days to subtract, may be negative\n     * @return {LocalDate} a LocalDate based on this date with the days subtracted, not null\n     * @throws AssertionError if the result exceeds the supported date range\n     */\n    minusDays(daysToSubtract) {\n        return this.plusDays(daysToSubtract * -1);\n    }\n\n    /**\n     * Queries this date using the specified query.\n     *\n     * This queries this date using the specified query strategy object.\n     * The {@link TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom} method on the\n     * specified query passing `this` as the argument.\n     *\n     * @param {TemporalQuery} query - the query to invoke, not null\n     * @return the query result, null may be returned (defined by the query)\n     * @throws {DateTimeException} if unable to query (defined by the query)\n     * @throws {ArithmeticException} if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        requireNonNull(query, 'query');\n        if (query === TemporalQueries.localDate()) {\n            return this;\n        }\n        return super.query(query);\n    }\n\n    /**\n     * Adjusts the specified temporal object to have the same date as this object.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with the date changed to be the same as this.\n     *\n     * The adjustment is equivalent to using {@link Temporal#with}\n     * passing {@link ChronoField.EPOCH_DAY} as the field.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisLocalDate.adjustInto(temporal);\n     *   temporal = temporal.with(thisLocalDate);\n     * </pre>\n     *\n     * @param {!TemporalAdjuster} temporal - the target object to be adjusted, not null\n     * @return the adjusted object, not null\n     * @throws {DateTimeException} if unable to make the adjustment\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    adjustInto(temporal) {\n        return super.adjustInto(temporal);\n    }\n\n    /**\n     * function overloading for {@link LocalDate.until}\n     *\n     * called with 1 (or less) arguments {{@link LocalDate.until1}} is called\n     * otherwise {@link LocalDate.until2}\n     *\n     * @param {!TemporalAccessor} p1\n     * @param {TemporalUnit} p2 - not null if called with 2 arguments\n     * @return {number|Period}\n     */\n    until(p1, p2){\n        if(arguments.length < 2){\n            return this.until1(p1);\n        } else {\n            return this.until2(p1, p2);\n        }\n    }\n\n    /**\n     * Calculates the period between this date and another date in\n     * terms of the specified unit.\n     *\n     * This calculates the period between two dates in terms of a single unit.\n     * The start and end points are `this` and the specified date.\n     * The result will be negative if the end is before the start.\n     * The {@link Temporal} passed to this method must be a {@link LocalDate}.\n     * For example, the period in days between two dates can be calculated\n     * using {@link startDate.until}.\n     *\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two dates.\n     * For example, the period in months between 2012-06-15 and 2012-08-14\n     * will only be one month as it is one day short of two months.\n     *\n     * This method operates in association with {@link TemporalUnit#between}.\n     * The result of this method is a `long` representing the amount of\n     * the specified unit. By contrast, the result of {@link between} is an\n     * object that can be used directly in addition/subtraction:\n     * <pre>\n     *   long period = start.until(end, MONTHS);   // this method\n     *   dateTime.plus(MONTHS.between(start, end));      // use in plus/minus\n     * </pre>\n     *\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@link DAYS}, {@link WEEKS}, {@link MONTHS}, {@link YEARS},\n     * {@link DECADES}, {@link CENTURIES}, {@link MILLENNIA} and {@link ERAS}\n     * are supported. Other {@link ChronoUnit} values will throw an exception.\n     *\n     * If the unit is not a {@link ChronoUnit}, then the result of this method\n     * is obtained by invoking {@link TemporalUnit.between}\n     * passing `this` as the first argument and the input temporal as\n     * the second argument.\n     *\n     * @param {!TemporalAccessor} endExclusive - the end date, which is converted to a {@link LocalDate}, not null\n     * @param {!TemporalUnit} unit - the unit to measure the period in, not null\n     * @return {number} the amount of the period between this date and the end date\n     * @throws {DateTimeException} if the period cannot be calculated\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    until2(endExclusive, unit) {\n        const end = LocalDate.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.DAYS: return this.daysUntil(end);\n                case ChronoUnit.WEEKS: return MathUtil.intDiv(this.daysUntil(end), 7);\n                case ChronoUnit.MONTHS: return this._monthsUntil(end);\n                case ChronoUnit.YEARS: return MathUtil.intDiv(this._monthsUntil(end), 12);\n                case ChronoUnit.DECADES: return MathUtil.intDiv(this._monthsUntil(end), 120);\n                case ChronoUnit.CENTURIES: return MathUtil.intDiv(this._monthsUntil(end), 1200);\n                case ChronoUnit.MILLENNIA: return MathUtil.intDiv(this._monthsUntil(end), 12000);\n                case ChronoUnit.ERAS: return end.getLong(ChronoField.ERA) - this.getLong(ChronoField.ERA);\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.between(this, end);\n    }\n\n    /**\n     *\n     * @param {!LocalDate} end\n     * @returns {number}\n     * @protected\n     */\n    daysUntil(end) {\n        return end.toEpochDay() - this.toEpochDay();  // no overflow\n    }\n\n    /**\n     *\n     * @param {!LocalDate} end\n     * @returns {number}\n     * @private\n     */\n    _monthsUntil(end) {\n        const packed1 = this._prolepticMonth() * 32 + this.dayOfMonth();  // no overflow\n        const packed2 = end._prolepticMonth() * 32 + end.dayOfMonth();  // no overflow\n        return MathUtil.intDiv((packed2 - packed1), 32);\n    }\n\n    /**\n     * Calculates the period between this date and another date as a {@link Period}.\n     *\n     * This calculates the period between two dates in terms of years, months and days.\n     * The start and end points are `this` and the specified date.\n     * The result will be negative if the end is before the start.\n     *\n     * The calculation is performed using the ISO calendar system.\n     * If necessary, the input date will be converted to ISO.\n     *\n     * The start date is included, but the end date is not.\n     * The period is calculated by removing complete months, then calculating\n     * the remaining number of days, adjusting to ensure that both have the same sign.\n     * The number of months is then normalized into years and months based on a 12 month year.\n     * A month is considered to be complete if the end day-of-month is greater\n     * than or equal to the start day-of-month.\n     * For example, from `2010-01-15` to `2011-03-18` is \"1 year, 2 months and 3 days\".\n     *\n     * The result of this method can be a negative period if the end is before the start.\n     * The negative sign will be the same in each of year, month and day.\n     *\n     * There are two equivalent ways of using this method.\n     * The first is to invoke this method.\n     * The second is to use {@link Period#between}:\n     * <pre>\n     *   // these two lines are equivalent\n     *   period = start.until(end);\n     *   period = Period.between(start, end);\n     * </pre>\n     * The choice should be made based on which makes the code more readable.\n     *\n     * @param {!TemporalAccessor} endDate - the end date, exclusive, which may be in any chronology, not null\n     * @return {Period} the period between this date and the end date, not null\n     */\n    until1(endDate) {\n        const end = LocalDate.from(endDate);\n        let totalMonths = end._prolepticMonth() - this._prolepticMonth();  // safe\n        let days = end._day - this._day;\n        if (totalMonths > 0 && days < 0) {\n            totalMonths--;\n            const calcDate = this.plusMonths(totalMonths);\n            days = (end.toEpochDay() - calcDate.toEpochDay());  // safe\n        } else if (totalMonths < 0 && days > 0) {\n            totalMonths++;\n            days -= end.lengthOfMonth();\n        }\n        const years = MathUtil.intDiv(totalMonths, 12);  // safe\n        const months = MathUtil.intMod(totalMonths, 12);  // safe\n        return Period.of(years, months, days);\n    }\n\n\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for {@link LocalDate.atTime}\n     *\n     * if called with 1 argument {@link LocalDate.atTime1} is called\n     * otherwise {@link LocalDate.atTime4}\n     *\n     * @return {LocalDateTime|OffsetDateTime} the local date-time formed from this date and the specified params\n     */\n    atTime(){\n        if(arguments.length===1){\n            return this.atTime1.apply(this, arguments);\n        } else {\n            return this.atTime4.apply(this, arguments);\n        }\n    }\n\n    /**\n     * Combines this date with a time to create a {@link LocalDateTime}.\n     *\n     * This returns a {@link LocalDateTime} formed from this date at the specified time.\n     * All possible combinations of date and time are valid.\n     *\n     * @param {LocalTime} time - the time to combine with, not null\n     * @return {LocalDateTime|OffsetDateTime} the date-time formed from this date and the specified time, not null\n     */\n    atTime1(time) {\n        requireNonNull(time, 'time');\n        if (time instanceof LocalTime) {\n            return LocalDateTime.of(this, time);\n        } else if (time instanceof OffsetTime) {\n            return this._atTimeOffsetTime(time);\n        } else {\n            throw new IllegalArgumentException(`time must be an instance of LocalTime or OffsetTime${ \n                time && time.constructor && time.constructor.name ? `, but is ${time.constructor.name}` : ''}`);\n        }\n    }\n\n    /**\n     * Combines this date with a time to create a {@link LocalDateTime}.\n     *\n     * This returns a {@link LocalDateTime} formed from this date at the\n     * specified hour, minute, second and nanosecond.\n     * The individual time fields must be within their valid range.\n     * All possible combinations of date and time are valid.\n     *\n     * @param {!number} hour - the hour-of-day to use, from 0 to 23\n     * @param {!number} minute - the minute-of-hour to use, from 0 to 59\n     * @param {number} [second=0] - the second-of-minute to represent, from 0 to 59\n     * @param {number} [nanoOfSecond=0] - the nano-of-second to represent, from 0 to 999,999,999\n     * @return {LocalDateTime} the local date-time formed from this date and the specified time, not null\n     * @throws {DateTimeException} if the value of any field is out of range\n     */\n    atTime4(hour, minute, second=0, nanoOfSecond=0) {\n        return this.atTime1(LocalTime.of(hour, minute, second, nanoOfSecond));\n    }\n\n    /**\n     * Combines this date with an offset time to create an {@link OffsetDateTime}.\n     *\n     * This returns an {@link OffsetDateTime} formed from this date at the specified time.\n     * All possible combinations of date and time are valid.\n     *\n     * @param {OffsetTime} time - the time to combine with, not null\n     * @return {OffsetDateTime} the offset date-time formed from this date and the specified time, not null\n     */\n    _atTimeOffsetTime(time) { // atTime(offsetTime)\n        return OffsetDateTime.of(LocalDateTime.of(this, time.toLocalTime()), time.offset());\n    }\n\n    /**\n     * Combines this date with the time of midnight to create a {@link LocalDateTime}\n     * at the start of this date.\n     *\n     * This returns a {@link LocalDateTime} formed from this date at the time of\n     * midnight, 00:00, at the start of this date.\n     *\n     * If zone is not null, this returns a {@link ZonedDateTime} formed from this date at the\n     * specified zone, with the time set to be the earliest valid time according\n     * to the rules in the time-zone.\n     *\n     * Time-zone rules, such as daylight savings, mean that not every local date-time\n     * is valid for the specified zone, thus the local date-time may not be midnight.\n     *\n     * In most cases, there is only one valid offset for a local date-time.\n     * In the case of an overlap, there are two valid offsets, and the earlier one is used,\n     * corresponding to the first occurrence of midnight on the date.\n     * In the case of a gap, the zoned date-time will represent the instant just after the gap.\n     *\n     * If the zone ID is a {@link ZoneOffset}, then the result always has a time of midnight.\n     *\n     * To convert to a specific time in a given time-zone call {@link atTime}\n     * followed by {@link LocalDateTime#atZone}.\n     *\n     * @param {ZoneId} zone - optional ZoneId or ZoneOffset\n     * @return {LocalDateTime|ZonedDateTime} the local date-time of midnight at the start of this date, not null\n     */\n    atStartOfDay(zone) {\n        if(zone != null){\n            return this._atStartOfDayWithZone(zone);\n        } else {\n            return LocalDateTime.of(this, LocalTime.MIDNIGHT);\n        }\n    }\n\n    /**\n     * Combines this date with a time-zone to create a {@link ZonedDateTime}\n     * at the start of the day\n     *\n     * This returns a {@link ZonedDateTime} formed from this date at the\n     * specified zone, with the time set to be the earliest valid time according\n     * to the rules in the time-zone.\n     *\n     * Time-zone rules, such as daylight savings, mean that not every local date-time\n     * is valid for the specified zone, thus the local date-time may not be midnight.\n     *\n     * In most cases, there is only one valid offset for a local date-time.\n     * In the case of an overlap, there are two valid offsets, and the earlier one is used,\n     * corresponding to the first occurrence of midnight on the date.\n     * In the case of a gap, the zoned date-time will represent the instant just after the gap.\n     *\n     * If the zone ID is a {@link ZoneOffset}, then the result always has a time of midnight.\n     *\n     * To convert to a specific time in a given time-zone call {@link atTime}\n     * followed by {@link LocalDateTime#atZone}.\n     *\n     * @param {!ZoneId} zone - the zone ID to use, not null\n     * @return {ZonedDateTime} the zoned date-time formed from this date and the earliest valid time for the zone, not null\n     */\n    _atStartOfDayWithZone(zone) {\n        requireNonNull(zone, 'zone');\n        let ldt = this.atTime(LocalTime.MIDNIGHT);\n        // need to handle case where there is a gap from 11:30 to 00:30\n        // standard ZDT factory would result in 01:00 rather than 00:30\n        if (zone instanceof ZoneOffset === false) {\n            const trans = zone.rules().transition(ldt);\n            if (trans != null && trans.isGap()) {\n                ldt = trans.dateTimeAfter();\n            }\n        }\n        return ZonedDateTime.of(ldt, zone);\n    }\n\n\n    /**\n     * Converts this date to the Epoch Day.\n     *\n     * The Epoch Day count is a simple incrementing count of days where day 0 is 1970-01-01 (ISO).\n     * This definition is the same for all chronologies, enabling conversion.\n     *\n     * @return {number} the Epoch Day equivalent to this date\n     */\n    toEpochDay() {\n        const y = this._year;\n        const m = this._month;\n        let total = 0;\n        total += 365 * y;\n        if (y >= 0) {\n            total += MathUtil.intDiv(y + 3, 4) - MathUtil.intDiv(y + 99, 100) + MathUtil.intDiv(y + 399, 400);\n        } else {\n            total -= MathUtil.intDiv(y, -4) - MathUtil.intDiv(y, -100) + MathUtil.intDiv(y, -400);\n        }\n        total += MathUtil.intDiv(367 * m - 362, 12);\n        total += this.dayOfMonth() - 1;\n        if (m > 2) {\n            total--;\n            if (!IsoChronology.isLeapYear(y)) {\n                total--;\n            }\n        }\n        return total - DAYS_0000_TO_1970;\n    }\n\n    /**\n     * Compares this date to another date.\n     *\n     * The comparison is primarily based on the date, from earliest to latest.\n     * It is \"consistent with equals\", as defined by {@link Comparable}.\n     *\n     * If all the dates being compared are instances of {@link LocalDate},\n     * then the comparison will be entirely based on the date.\n     * If some dates being compared are in different chronologies, then the\n     * chronology is also considered, see {@link ChronoLocalDate.compareTo}.\n     *\n     * @param {!LocalDate} other - the other date to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     */\n    compareTo(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, LocalDate, 'other');\n        return this._compareTo0(other);\n        // return super.compareTo(other);  if not instanceof LocalDate\n    }\n\n    /**\n     *\n     * @param {!LocalDate} otherDate\n     * @returns {number}\n     * @private\n     */\n    _compareTo0(otherDate) {\n        let cmp = (this._year - otherDate._year);\n        if (cmp === 0) {\n            cmp = (this._month - otherDate._month);\n            if (cmp === 0) {\n                cmp = (this._day - otherDate._day);\n            }\n        }\n        return cmp;\n    }\n\n    /**\n     * Checks if this date is after the specified date.\n     *\n     * This checks to see if this date represents a point on the\n     * local time-line after the other date.\n     * <pre>\n     *   LocalDate a = LocalDate.of(2012, 6, 30);\n     *   LocalDate b = LocalDate.of(2012, 7, 1);\n     *   a.isAfter(b) == false\n     *   a.isAfter(a) == false\n     *   b.isAfter(a) == true\n     * </pre>\n     *\n     * This method only considers the position of the two dates on the local time-line.\n     * It does not take into account the chronology, or calendar system.\n     * This is different from the comparison in {@link compareTo},\n     * but is the same approach as {@link DATE_COMPARATOR}.\n     *\n     * @param {!LocalDate} other - the other date to compare to, not null\n     * @return {boolean} true if this date is after the specified date\n     */\n    isAfter(other) {\n        return this.compareTo(other) > 0;\n        // return super.isAfter(other) if not instanceof LocalDate\n    }\n\n    /**\n     * Checks if this date is before the specified date.\n     *\n     * This checks to see if this date represents a point on the\n     * local time-line before the other date.\n     * <pre>\n     *   LocalDate a = LocalDate.of(2012, 6, 30);\n     *   LocalDate b = LocalDate.of(2012, 7, 1);\n     *   a.isBefore(b) == true\n     *   a.isBefore(a) == false\n     *   b.isBefore(a) == false\n     * </pre>\n     *\n     * This method only considers the position of the two dates on the local time-line.\n     * It does not take into account the chronology, or calendar system.\n     * This is different from the comparison in {@link compareTo},\n     * but is the same approach as {@link DATE_COMPARATOR}.\n     *\n     * @param {!LocalDate} other - the other date to compare to, not null\n     * @return {boolean} true if this date is before the specified date\n     */\n    isBefore(other) {\n        return this.compareTo(other) < 0;\n        // return super.isBefore(other) if not instanceof LocalDate\n    }\n\n    /**\n     * Checks if this date is equal to the specified date.\n     *\n     * This checks to see if this date represents the same point on the\n     * local time-line as the other date.\n     * <pre>\n     *   LocalDate a = LocalDate.of(2012, 6, 30);\n     *   LocalDate b = LocalDate.of(2012, 7, 1);\n     *   a.isEqual(b) == false\n     *   a.isEqual(a) == true\n     *   b.isEqual(a) == false\n     * </pre>\n     *\n     * This method only considers the position of the two dates on the local time-line.\n     * It does not take into account the chronology, or calendar system.\n     * This is different from the comparison in {@link compareTo}\n     * but is the same approach as {@link DATE_COMPARATOR}.\n     *\n     * @param {!LocalDate} other - the other date to compare to, not null\n     * @return {boolean} true if this date is equal to the specified date\n     */\n    isEqual(other) {\n        return this.compareTo(other) === 0;\n        // return super.isEqual(other) if not instanceof LocalDate\n    }\n\n    /**\n     * Checks if this date is equal to another date.\n     *\n     * Compares this LocalDate with another ensuring that the date is the same.\n     *\n     * Only objects of type LocalDate are compared, other types return false.\n     *\n     * @param {*} other - the object to check, null returns false\n     * @return {boolean} true if this is equal to the other date\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof LocalDate) {\n            return this._compareTo0(other) === 0;\n        }\n        return false;\n    }\n\n    /**\n     * A hash code for this date.\n     *\n     * @return {number} a suitable hash code\n     */\n    hashCode() {\n        const yearValue = this._year;\n        const monthValue = this._month;\n        const dayValue = this._day;\n        return MathUtil.hash((yearValue & 0xFFFFF800) ^ ((yearValue << 11) + (monthValue << 6) + (dayValue)));\n    }\n\n    /**\n     * Outputs this date as a String, such as 2007-12-03.\n     * The output will be in the ISO-8601 format uuuu-MM-dd.\n     *\n     * @return {string} a string representation of this date, not null\n     */\n    toString() {\n        let dayString, monthString, yearString;\n\n        const yearValue = this._year;\n        const monthValue = this._month;\n        const dayValue = this._day;\n\n        const absYear = Math.abs(yearValue);\n\n        if (absYear < 1000) {\n            if (yearValue < 0) {\n                yearString = `-${(`${yearValue - 10000}`).slice(-4)}`;\n            } else {\n                yearString = (`${yearValue + 10000}`).slice(-4);\n            }\n        } else {\n            if (yearValue > 9999) {\n                yearString = `+${yearValue}`;\n            } else {\n                yearString = `${yearValue}`;\n            }\n        }\n\n        if (monthValue < 10) {\n            monthString = `-0${monthValue}`;\n        } else {\n            monthString = `-${monthValue}`;\n        }\n\n        if (dayValue < 10) {\n            dayString = `-0${dayValue}`;\n        } else {\n            dayString = `-${dayValue}`;\n        }\n\n        return yearString + monthString + dayString;\n    }\n\n    /**\n     *\n     * @return {string} same as {@link LocalDate.toString}\n     */\n    toJSON() {\n        return this.toString();\n    }\n\n    /**\n     * Outputs this date as a string using the formatter.\n     *\n     * @param {DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {String} the formatted date string, not null\n     * @throws DateTimeException if an error occurs during printing\n     */\n    format(formatter) {\n        requireNonNull(formatter, 'formatter');\n        requireInstance(formatter, DateTimeFormatter, 'formatter');\n        return super.format(formatter);\n    }\n}\n\nexport function _init() {\n    /**\n     * The minimum supported {@link LocalDate}\n     * This could be used by an application as a \"far past\" date.\n     */\n    LocalDate.MIN = LocalDate.of(YearConstants.MIN_VALUE, 1, 1);\n    /**\n     * The maximum supported {@link LocalDate}\n     * This could be used by an application as a \"far future\" date.\n     */\n    LocalDate.MAX = LocalDate.of(YearConstants.MAX_VALUE, 12, 31);\n    /**\n     * The date at epoch day 0, that is 1970-01-01.\n     */\n    LocalDate.EPOCH_0 = LocalDate.ofEpochDay(0);\n\n    LocalDate.FROM = createTemporalQuery('LocalDate.FROM', (temporal) => {\n        return LocalDate.from(temporal);\n    });\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull, requireInstance } from '../assert';\nimport { MathUtil } from '../MathUtil';\n\nimport { LocalDate } from '../LocalDate';\nimport { Instant } from '../Instant';\nimport { ZoneOffset } from '../ZoneOffset';\nimport { ChronoUnit } from '../temporal/ChronoUnit';\nimport { ChronoField } from '../temporal/ChronoField';\nimport { Temporal } from '../temporal/Temporal';\nimport { TemporalQueries } from '../temporal/TemporalQueries';\n\n/**\n * A date-time without a time-zone in an arbitrary chronology, intended\n * for advanced globalization use cases.\n *\n * **Most applications should declare method signatures, fields and variables\n * as {@link LocalDateTime}, not this interface.**\n *\n * A {@link ChronoLocalDateTime} is the abstract representation of a local date-time\n * where the {@link Chronology}, or calendar system, is pluggable.\n * The date-time is defined in terms of fields expressed by {@link TemporalField},\n * where most common implementations are defined in {@link ChronoField}.\n * The chronology defines how the calendar system operates and the meaning of\n * the standard fields.\n *\n * #### When to use this interface\n *\n * The design of the API encourages the use of {@link LocalDateTime} rather than this\n * interface, even in the case where the application needs to deal with multiple\n * calendar systems. The rationale for this is explored in detail in {@link ChronoLocalDate}.\n *\n * Ensure that the discussion in {@link ChronoLocalDate} has been read and understood\n * before using this interface.\n *\n * ### Specification for implementors\n *\n * This interface must be implemented with care to ensure other classes operate correctly.\n * All implementations that can be instantiated must be final, immutable and thread-safe.\n * Subclasses should be Serializable wherever possible.\n *\n * In JDK 8, this is an interface with default methods.\n * Since there are no default methods in JDK 7, an abstract class is used.\n *\n * @param D the date type\n */\nexport class ChronoLocalDateTime extends Temporal {\n    /* <D extends ChronoLocalDate>\n        extends DefaultInterfaceTemporal\n        implements Temporal, TemporalAdjuster, Comparable<ChronoLocalDateTime<?>> */\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the chronology of this date-time.\n     *\n     * The {@link Chronology} represents the calendar system in use.\n     * The era and other fields in {@link ChronoField} are defined by the chronology.\n     *\n     * @return the chronology, not null\n     */\n    chronology() {\n        return this.toLocalDate().chronology();\n    }\n\n    /**\n     *\n     * @param {TemporalQuery} query\n     * @returns {*}\n     */\n    query(query) {\n        if (query === TemporalQueries.chronology()) {\n            return this.chronology();\n        } else if (query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        } else if (query === TemporalQueries.localDate()) {\n            return LocalDate.ofEpochDay(this.toLocalDate().toEpochDay());\n        } else if (query === TemporalQueries.localTime()) {\n            return this.toLocalTime();\n        } else if (query === TemporalQueries.zone() || query === TemporalQueries.zoneId() || query === TemporalQueries.offset()) {\n            return null;\n        }\n        return super.query(query);\n    }\n\n    adjustInto(temporal) {\n        return temporal\n            .with(ChronoField.EPOCH_DAY, this.toLocalDate().toEpochDay())\n            .with(ChronoField.NANO_OF_DAY, this.toLocalTime().toNanoOfDay());\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Converts this date-time to an {@link Instant}.\n     *\n     * This combines this local date-time and the specified offset to form\n     * an {@link Instant}.\n     *\n     * @param {ZoneOffset} offset  the offset to use for the conversion, not null\n     * @return {Instant} an {@link Instant} representing the same instant, not null\n     */\n    toInstant(offset) {\n        requireInstance(offset, ZoneOffset, 'zoneId');\n        return Instant.ofEpochSecond(this.toEpochSecond(offset), this.toLocalTime().nano());\n    }\n\n    /**\n     * Converts this date-time to the number of seconds from the epoch\n     * of 1970-01-01T00:00:00Z.\n     *\n     * This combines this local date-time and the specified offset to calculate the\n     * epoch-second value, which is the number of elapsed seconds from 1970-01-01T00:00:00Z.\n     * Instants on the time-line after the epoch are positive, earlier are negative.\n     *\n     * @param {ZoneOffset} offset  the offset to use for the conversion, not null\n     * @return {number} the number of seconds from the epoch of 1970-01-01T00:00:00Z\n     */\n    toEpochSecond(offset) {\n        requireNonNull(offset, 'offset');\n        const epochDay = this.toLocalDate().toEpochDay();\n        let secs = epochDay * 86400 + this.toLocalTime().toSecondOfDay();\n        secs -= offset.totalSeconds();\n        return MathUtil.safeToInt(secs);\n    }\n\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { MathUtil } from './MathUtil';\nimport { requireNonNull, requireInstance } from './assert';\nimport { DateTimeException, UnsupportedTemporalTypeException } from './errors';\n\nimport { Clock } from './Clock';\nimport { Instant } from './Instant';\nimport { LocalDate } from './LocalDate';\nimport { LocalTime } from './LocalTime';\nimport { OffsetDateTime } from './OffsetDateTime';\nimport { ZonedDateTime } from './ZonedDateTime';\nimport { ZoneId } from './ZoneId';\nimport { ZoneOffset } from './ZoneOffset';\n\n\nimport { DateTimeFormatter } from './format/DateTimeFormatter';\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { createTemporalQuery } from './temporal/TemporalQuery';\n\nimport { ChronoLocalDateTime } from './chrono/ChronoLocalDateTime';\n\n/**\n * A date-time without a time-zone in the ISO-8601 calendar system,\n * such as `2007-12-03T10:15:30`.\n *\n * {@link LocalDateTime} is an immutable date-time object that represents a date-time,\n * often viewed as year-month-day-hour-minute-second. Other date and time fields,\n * such as day-of-year, day-of-week and week-of-year, can also be accessed.\n * Time is represented to nanosecond precision.\n * For example, the value '2nd October 2007 at 13:45.30.123456789' can be\n * stored in a {@link LocalDateTime}.\n *\n * This class does not store or represent a time-zone.\n * Instead, it is a description of the date, as used for birthdays, combined with\n * the local time as seen on a wall clock.\n * It cannot represent an instant on the time-line without additional information\n * such as an offset or time-zone.\n *\n * The ISO-8601 calendar system is the modern civil calendar system used today\n * in most of the world. It is equivalent to the proleptic Gregorian calendar\n * system, in which today's rules for leap years are applied for all time.\n * For most applications written today, the ISO-8601 rules are entirely suitable.\n * However, any application that makes use of historical dates, and requires them\n * to be accurate will find the ISO-8601 approach unsuitable.\n *\n * ### Static properties of Class {@link LocalTime}\n *\n * LocalDateTime.MIN\n *\n * The minimum supported {@link LocalDateTime}, '-999999999-01-01T00:00:00'.\n * This is the local date-time of midnight at the start of the minimum date.\n * This combines {@link LocalDate#MIN} and {@link LocalTime#MIN}.\n * This could be used by an application as a 'far past' date-time.\n *\n * LocalDateTime.MAX\n *\n * The maximum supported {@link LocalDateTime}, '+999999999-12-31T23:59:59.999999999'.\n * This is the local date-time just before midnight at the end of the maximum date.\n * This combines {@link LocalDate#MAX} and {@link LocalTime#MAX}.\n * This could be used by an application as a 'far future' date-time.\n *\n */\nexport class LocalDateTime extends ChronoLocalDateTime\n/** extends ChronoLocalDateTime<LocalDate>\nimplements Temporal, TemporalAdjuster, Serializable */ {\n\n\n    /**\n     * Obtains the current date-time from from the specified clock or the system clock in the specified time-zone.\n     *\n     * If the argument is an instance of Clock this will query the specified clock to obtain the current date-time.\n     * Using this method allows the use of an alternate clock for testing.\n     * The alternate clock may be introduced using dependency injection.\n     *\n     * If the argument is an instance of ZoneId this will query the system clock (see {@link Clock#system}) to obtain the current date-time.\n     * Specifying the time-zone avoids dependence on the default time-zone.\n     *\n     * If nor argument is applied, the system default time zone is used to obtain the current date-time.\n     *\n     * Using this method will prevent the ability to use an alternate clock for testing\n     * because the clock is hard-coded.\n     *\n     * @param {Clock|ZoneId} clockOrZone - the zone ID or clock to use, if null Clock.systemDefaultZone() is used.\n     * @return {LocalDateTime} the current date-time using the system clock, not null\n     */\n    static now(clockOrZone) {\n        if (clockOrZone == null){\n            return LocalDateTime._now(Clock.systemDefaultZone());\n        } else if (clockOrZone instanceof Clock){\n            return LocalDateTime._now(clockOrZone);\n        } else {\n            return LocalDateTime._now(Clock.system(clockOrZone));\n        }\n    }\n\n    /**\n     * Obtains the current date-time from the specified clock.\n     *\n     * This will query the specified clock to obtain the current date-time.\n     * Using this method allows the use of an alternate clock for testing.\n     * The alternate clock may be introduced using dependency injection.\n     *\n     * @param {Clock} clock - the clock to use, defaults to Clock.systemDefaultZone()\n     * @return {LocalDateTime} the current date-time, not null\n     */\n    static _now(clock) {\n        requireNonNull(clock, 'clock');\n        return LocalDateTime.ofInstant(clock.instant(), clock.zone());\n\n        // this is an alternative implementation with better performance.\n        // const epochMilli = clock.millis();\n        // const offset = clock.zone().rules().offsetOfEpochMilli(epochMilli);\n        // return LocalDateTime._ofEpochMillis(epochMilli, offset);\n\n    }\n\n    /**\n     * @see comment at {LocalDateTime._now}\n     * @param {number} epochMilli\n     * @param {ZoneOffset} offset\n     * @return {LocalDateTime} the  date-time, not null\n     *\n     */\n    static _ofEpochMillis(epochMilli, offset){\n        const localSecond = MathUtil.floorDiv(epochMilli, 1000) + offset.totalSeconds();\n        const localEpochDay = MathUtil.floorDiv(localSecond, LocalTime.SECONDS_PER_DAY);\n        const secsOfDay = MathUtil.floorMod(localSecond, LocalTime.SECONDS_PER_DAY);\n        const nanoOfSecond = MathUtil.floorMod(epochMilli, 1000) * 1000000;\n        const date = LocalDate.ofEpochDay(localEpochDay);\n        const time = LocalTime.ofSecondOfDay(secsOfDay, nanoOfSecond);\n        return new LocalDateTime(date, time);\n\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * function overloading for {@link LocalDateTime.of}\n     *\n     * if called with 2 arguments and first argument is an instance of LocalDate and second is an\n     * instance of LocalTime, then {@link LocalDateTime.ofDateAndTime} is executed.\n     *\n     * Otherwise {@link LocalDateTime.ofNumbers} is executed.\n     *\n     * @returns {LocalDateTime}\n     */\n    static of(){\n        if (arguments.length <= 2){\n            return LocalDateTime.ofDateAndTime.apply(this, arguments);\n        } else {\n            return LocalDateTime.ofNumbers.apply(this, arguments);\n        }\n    }\n    /**\n     * Obtains an instance of {@link LocalDateTime} from year, month,\n     * day, hour, minute, second and nanosecond.\n     *\n     * The day must be valid for the year and month, otherwise an exception will be thrown.\n     *\n     * @param {number} [year] - the year to represent, from MIN_YEAR to MAX_YEAR\n     * @param {number} [month] - the month-of-year to represent, from 1 to 12 or from a Month\n     * @param {number} [dayOfMonth] - the day-of-month to represent, from 1 to 31\n     * @param {number} [hour=0] - the hour-of-day to represent, from 0 to 23\n     * @param {number} [minute=0] - the minute-of-hour to represent, from 0 to 59\n     * @param {number} [second=0] - the second-of-minute to represent, from 0 to 59\n     * @param {number} [nanoOfSecond=0] - the nano-of-second to represent, from 0 to 999,999,999\n     * @return {LocalDateTime} the local date-time, not null\n     * @throws {DateTimeException} if the value of any field is out of range\n     * @throws {DateTimeException} if the day-of-month is invalid for the month-year\n     */\n    static ofNumbers(year, month, dayOfMonth, hour=0, minute=0, second=0, nanoOfSecond=0) {\n        const date = LocalDate.of(year, month, dayOfMonth);\n        const time = LocalTime.of(hour, minute, second, nanoOfSecond);\n        return new LocalDateTime(date, time);\n    }\n\n    /**\n     * Obtains an instance of {@link LocalDateTime} from a date and time.\n     *\n     * @param {!LocalDate} date - the local date, not null\n     * @param {!LocalTime} time - the local time, not null\n     * @return {LocalDateTime} the local date-time, not null\n     */\n    static ofDateAndTime(date, time) {\n        requireNonNull(date, 'date');\n        requireNonNull(time, 'time');\n        return new LocalDateTime(date, time);\n    }\n\n    //-------------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link LocalDateTime} from an {@link Instant} and zone ID.\n     *\n     * This creates a local date-time based on the specified instant.\n     * First, the offset from UTC/Greenwich is obtained using the zone ID and instant,\n     * which is simple as there is only one valid offset for each instant.\n     * Then, the instant and offset are used to calculate the local date-time.\n     *\n     * @param {!Instant} instant  the instant to create the date-time from, not null\n     * @param {!ZoneId} [zone=ZoneId.systemDefault()]  the time-zone, which may be an offset, defaults to ZoneId.systemDefault()\n     * @return {LocalDateTime} the local date-time, not null\n     * @throws {DateTimeException} if the result exceeds the supported range\n     */\n    static ofInstant(instant, zone=ZoneId.systemDefault()) {\n        requireNonNull(instant, 'instant');\n        requireInstance(instant, Instant, 'instant');\n        requireNonNull(zone, 'zone');\n        const offset = zone.rules().offset(instant);\n        return LocalDateTime.ofEpochSecond(instant.epochSecond(), instant.nano(), offset);\n    }\n\n    /**\n     * Obtains an instance of {@link LocalDateTime} using seconds from the\n     * epoch of 1970-01-01T00:00:00Z.\n     *\n     * This allows the {@link ChronoField.INSTANT_SECONDS} epoch-second field\n     * to be converted to a local date-time. This is primarily intended for\n     * low-level conversions rather than general application usage.\n     *\n     * @param {number} epochSecond - the number of seconds from the epoch of 1970-01-01T00:00:00Z\n     * @param {number|!ZoneOffset} nanoOfSecond - the nanosecond within the second, from 0 to 999,999,999\n     * @param {ZoneOffset} offset - the zone offset, not null if called with 3 arguments\n     * @return {LocalDateTime} the local date-time, not null\n     * @throws {DateTimeException} if the result exceeds the supported range\n     */\n    static ofEpochSecond(epochSecond=0, nanoOfSecond=0, offset) {\n        if(arguments.length === 2 && nanoOfSecond instanceof ZoneOffset){\n            offset = nanoOfSecond;\n            nanoOfSecond = 0;\n        }\n        requireNonNull(offset, 'offset');\n        const localSecond = epochSecond + offset.totalSeconds();  // overflow caught later\n        const localEpochDay = MathUtil.floorDiv(localSecond, LocalTime.SECONDS_PER_DAY);\n        const secsOfDay = MathUtil.floorMod(localSecond, LocalTime.SECONDS_PER_DAY);\n        const date = LocalDate.ofEpochDay(localEpochDay);\n        const time = LocalTime.ofSecondOfDay(secsOfDay, nanoOfSecond);\n        return new LocalDateTime(date, time);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link LocalDateTime} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link LocalDateTime}.\n     *\n     * The conversion extracts and combines {@link LocalDate} and {@link LocalTime}.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used as a query via method reference, {@link LocalDateTime::from}.\n     *\n     * @param {!TemporalAccessor} temporal - the temporal object to convert, not null\n     * @return {LocalDateTime} {LocalDateTime} the local date-time, not null\n     * @throws {DateTimeException} if unable to convert to a {@link LocalDateTime}\n     */\n    static from(temporal) {\n        requireNonNull(temporal, 'temporal');\n        if (temporal instanceof LocalDateTime) {\n            return temporal;\n        } else if (temporal instanceof ZonedDateTime) {\n            return temporal.toLocalDateTime();\n        }\n        try {\n            const date = LocalDate.from(temporal);\n            const time = LocalTime.from(temporal);\n            return new LocalDateTime(date, time);\n        } catch (ex) {\n            throw new DateTimeException(`Unable to obtain LocalDateTime TemporalAccessor: ${temporal}, type ${temporal.constructor != null ? temporal.constructor.name : ''}`);\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link LocalDateTime} from a text string using a specific formatter.\n     *\n     * The text is parsed using the formatter, returning a date-time.\n     *\n     * @param {!string} text - the text to parse, not null\n     * @param {DateTimeFormatter} [formatter=DateTimeFormatter.ISO_LOCAL_DATE_TIME] - the formatter to use,\n     * defaults to DateTimeFormatter.ISO_LOCAL_DATE_TIME\n     * @return {LocalDateTime} the parsed local date-time, not null\n     * @throws {DateTimeParseException} if the text cannot be parsed\n     */\n    static parse(text, formatter = DateTimeFormatter.ISO_LOCAL_DATE_TIME) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.parse(text, LocalDateTime.FROM);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Constructor.\n     *\n     * @param {LocalDate} date - the date part of the date-time, validated not null\n     * @param {LocalTime} time - the time part of the date-time, validated not null\n     * @private\n     */\n    constructor(date, time) {\n        super();\n        requireInstance(date, LocalDate, 'date');\n        requireInstance(time, LocalTime, 'time');\n        this._date = date;\n        this._time = time;\n    }\n\n    /**\n     * Returns a copy of this date-time with the new date and time, checking\n     * to see if a new object is in fact required.\n     *\n     * @param {LocalDate} newDate - the date of the new date-time, not null\n     * @param {LocalTime} newTime - the time of the new date-time, not null\n     * @return {LocalDateTime} the date-time, not null\n     */\n    _withDateTime(newDate, newTime) {\n        if (this._date.equals(newDate) && this._time.equals(newTime)) {\n            return this;\n        }\n        return new LocalDateTime(newDate, newTime);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if the specified field is supported.\n     *\n     * This checks if this date-time can be queried for the specified field.\n     * If false, then calling the {@link LocalDateTime.range} range and\n     * {@link LocalDateTime.get} get methods will throw an exception.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields are:\n     *\n     * * {@link ChronoField.NANO_OF_SECOND}\n     * * {@link ChronoField.NANO_OF_DAY}\n     * * {@link ChronoField.MICRO_OF_SECOND}\n     * * {@link ChronoField.MICRO_OF_DAY}\n     * * {@link ChronoField.MILLI_OF_SECOND}\n     * * {@link ChronoField.MILLI_OF_DAY}\n     * * {@link ChronoField.SECOND_OF_MINUTE}\n     * * {@link ChronoField.SECOND_OF_DAY}\n     * * {@link ChronoField.MINUTE_OF_HOUR}\n     * * {@link ChronoField.MINUTE_OF_DAY}\n     * * {@link ChronoField.HOUR_OF_AMPM}\n     * * {@link ChronoField.CLOCK_HOUR_OF_AMPM}\n     * * {@link ChronoField.HOUR_OF_DAY}\n     * * {@link ChronoField.CLOCK_HOUR_OF_DAY}\n     * * {@link ChronoField.AMPM_OF_DAY}\n     * * {@link ChronoField.DAY_OF_WEEK}\n     * * {@link ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH}\n     * * {@link ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR}\n     * * {@link ChronoField.DAY_OF_MONTH}\n     * * {@link ChronoField.DAY_OF_YEAR}\n     * * {@link ChronoField.EPOCH_DAY}\n     * * {@link ChronoField.ALIGNED_WEEK_OF_MONTH}\n     * * {@link ChronoField.ALIGNED_WEEK_OF_YEAR}\n     * * {@link ChronoField.MONTH_OF_YEAR}\n     * * {@link ChronoField.EPOCH_MONTH}\n     * * {@link ChronoField.YEAR_OF_ERA}\n     * * {@link ChronoField.YEAR}\n     * * {@link ChronoField.ERA}\n     *\n     * All other {@link ChronoField} instances will return false.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.isSupportedBy}\n     * passing `this` as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField|TemporalUnit} fieldOrUnit - the field to check, null returns false\n     * @return {boolean} true if the field is supported on this date-time, false if not\n     */\n    isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n        } else if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isDateBased() || fieldOrUnit.isTimeBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    }\n\n    /**\n     * Gets the range of valid values for the specified field.\n     *\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This date-time is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return\n     * appropriate range instances.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.rangeRefinedBy}\n     * passing `this` as the argument.\n     * Whether the range can be obtained is determined by the field.\n     *\n     * @param {!TemporalField} field - the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws {DateTimeException} if the range for the field cannot be obtained\n     */\n    range(field) {\n        if (field instanceof ChronoField) {\n            return (field.isTimeBased() ? this._time.range(field) : this._date.range(field));\n        }\n        return field.rangeRefinedBy(this);\n    }\n\n    /**\n     * Gets the value of the specified field from this date-time as an `int`.\n     *\n     * This queries this date-time for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this date-time, except {@link NANO_OF_DAY}, {@link MICRO_OF_DAY},\n     * {@link EPOCH_DAY} and {@link EPOCH_MONTH} which are too large to fit in\n     * an `int` and throw a {@link DateTimeException}.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {!TemporalField} field - the field to get, not null\n     * @return {number} the value for the field\n     * @throws {DateTimeException} if a value for the field cannot be obtained\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    get(field) {\n        if (field instanceof ChronoField) {\n            return (field.isTimeBased() ? this._time.get(field) : this._date.get(field));\n        }\n        return super.get(field);\n    }\n\n    /**\n     * Gets the value of the specified field from this date-time as a `long`.\n     *\n     * This queries this date-time for the value for the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this date-time.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {!TemporalField} field - the field to get, not null\n     * @return {number} the value for the field\n     * @throws {DateTimeException} if a value for the field cannot be obtained\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    getLong(field) {\n        requireNonNull(field, 'field');\n        if (field instanceof ChronoField) {\n            return (field.isTimeBased() ? this._time.getLong(field) : this._date.getLong(field));\n        }\n        return field.getFrom(this);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the year field.\n     *\n     * This method returns the primitive `int` value for the year.\n     *\n     * The year returned by this method is proleptic as per `get(YEAR)`.\n     * To obtain the year-of-era, use `get(YEAR_OF_ERA)`.\n     *\n     * @return {number} the year, from MIN_YEAR to MAX_YEAR\n     */\n    year() {\n        return this._date.year();\n    }\n\n    /**\n     * Gets the month-of-year field from 1 to 12.\n     *\n     * This method returns the month as an `int` from 1 to 12.\n     * Application code is frequently clearer if the enum {@link Month}\n     * is used by calling {@link getMonth}.\n     *\n     * @return {number} the month-of-year, from 1 to 12\n     * @see #getMonth()\n     */\n    monthValue() {\n        return this._date.monthValue();\n    }\n\n    /**\n     * Gets the month-of-year field using the {@link Month} enum.\n     *\n     * This method returns the enum {@link Month} for the month.\n     * This avoids confusion as to what `int` values mean.\n     * If you need access to the primitive `int` value, use\n     * {@link Month#getValue}.\n     *\n     * @return {Month} the month-of-year, not null\n     * @see #getMonthValue()\n     */\n    month() {\n        return this._date.month();\n    }\n\n    /**\n     * Gets the day-of-month field.\n     *\n     * This method returns the primitive `int` value for the day-of-month.\n     *\n     * @return {number} the day-of-month, from 1 to 31\n     */\n    dayOfMonth() {\n        return this._date.dayOfMonth();\n    }\n\n    /**\n     * Gets the day-of-year field.\n     *\n     * This method returns the primitive `int` value for the day-of-year.\n     *\n     * @return {number} the day-of-year, from 1 to 365, or 366 in a leap year\n     */\n    dayOfYear() {\n        return this._date.dayOfYear();\n    }\n\n    /**\n     * Gets the day-of-week field, which is an enum {@link DayOfWeek}.\n     *\n     * This method returns the enum {@link DayOfWeek} for the day-of-week.\n     * This avoids confusion as to what `int` values mean.\n     * If you need access to the primitive `int` value, use\n     * {@link DayOfWeek#getValue}.\n     *\n     * Additional information can be obtained from the {@link DayOfWeek}.\n     * This includes textual names of the values.\n     *\n     * @return {DayOfWeek} the day-of-week, not null\n     */\n    dayOfWeek() {\n        return this._date.dayOfWeek();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the hour-of-day field.\n     *\n     * @return {number} the hour-of-day, from 0 to 23\n     */\n    hour() {\n        return this._time.hour();\n    }\n\n    /**\n     * Gets the minute-of-hour field.\n     *\n     * @return {number} the minute-of-hour, from 0 to 59\n     */\n    minute() {\n        return this._time.minute();\n    }\n\n    /**\n     * Gets the second-of-minute field.\n     *\n     * @return {number} the second-of-minute, from 0 to 59\n     */\n    second() {\n        return this._time.second();\n    }\n\n    /**\n     * Gets the nano-of-second field.\n     *\n     * @return {number} the nano-of-second, from 0 to 999,999,999\n     */\n    nano() {\n        return this._time.nano();\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns an adjusted copy of this date-time.\n     *\n     * This returns a new {@link LocalDateTime}, based on this one, with the date-time adjusted.\n     * The adjustment takes place using the specified adjuster strategy object.\n     * Read the documentation of the adjuster to understand what adjustment will be made.\n     *\n     * A simple adjuster might simply set the one of the fields, such as the year field.\n     * A more complex adjuster might set the date to the last day of the month.\n     * A selection of common adjustments is provided in {@link TemporalAdjusters}.\n     * These include finding the 'last day of the month' and 'next Wednesday'.\n     * Key date-time classes also implement the {@link TemporalAdjuster} interface,\n     * such as {@link Month} and {@link MonthDay}.\n     * The adjuster is responsible for handling special cases, such as the varying\n     * lengths of month and leap years.\n     *\n     * For example this code returns a date on the last day of July:\n     * <pre>\n     *  import static org.threeten.bp.Month.*;\n     *  import static org.threeten.bp.temporal.Adjusters.*;\n     *\n     *  result = localDateTime.with(JULY).with(lastDayOfMonth());\n     * </pre>\n     *\n     * The classes {@link LocalDate} and {@link LocalTime} implement {@link TemporalAdjuster},\n     * thus this method can be used to change the date, time or offset:\n     * <pre>\n     *  result = localDateTime.with(date);\n     *  result = localDateTime.with(time);\n     * </pre>\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalAdjuster#adjustInto} method on the\n     * specified adjuster passing `this` as the argument.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalAdjuster} adjuster the adjuster to use, not null\n     * @return {LocalDateTime} a {@link LocalDateTime} based on `this` with the adjustment made, not null\n     * @throws {DateTimeException} if the adjustment cannot be made\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    _withAdjuster(adjuster) {\n        requireNonNull(adjuster, 'adjuster');\n        // optimizations\n        if (adjuster instanceof LocalDate) {\n            return this._withDateTime(adjuster, this._time);\n        } else if (adjuster instanceof LocalTime) {\n            return this._withDateTime(this._date, adjuster);\n        } else if (adjuster instanceof LocalDateTime) {\n            return adjuster;\n        }\n        return super._withAdjuster(adjuster);\n    }\n\n    /**\n     * Returns a copy of this date-time with the specified field set to a new value.\n     *\n     * This returns a new {@link LocalDateTime}, based on this one, with the value\n     * for the specified field changed.\n     * This can be used to change any supported field, such as the year, month or day-of-month.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     *\n     * In some cases, changing the specified field can cause the resulting date-time to become invalid,\n     * such as changing the month from 31st January to February would make the day-of-month invalid.\n     * In cases like this, the field is responsible for resolving the date. Typically it will choose\n     * the previous valid date, which would be the last valid day of February in this example.\n     *\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields (see {@link isSupported}) will behave as in\n     * {@link LocalDate#with} or {@link LocalTime#with}.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.adjustInto}\n     * passing `this` as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalField} field - the field to set in the result, not null\n     * @param {number} newValue - the new value of the field in the result\n     * @return {LocalDateTime} a {@link LocalDateTime} based on `this` with the specified field set, not null\n     * @throws {DateTimeException} if the field cannot be set\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    _withField(field, newValue) {\n        requireNonNull(field, 'field');\n        if (field instanceof ChronoField) {\n            if (field.isTimeBased()) {\n                return this._withDateTime(this._date, this._time.with(field, newValue));\n            } else {\n                return this._withDateTime(this._date.with(field, newValue), this._time);\n            }\n        }\n        return field.adjustInto(this, newValue);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the year altered.\n     * The time does not affect the calculation and will be the same in the result.\n     * If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} year - the year to set in the result, from MIN_YEAR to MAX_YEAR\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the requested year, not null\n     * @throws {DateTimeException} if the year value is invalid\n     */\n    withYear(year) {\n        return this._withDateTime(this._date.withYear(year), this._time);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the month-of-year altered.\n     * The time does not affect the calculation and will be the same in the result.\n     * If the day-of-month is invalid for the year, it will be changed to the last valid day of the month.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {!(number|Month)} month - the month-of-year to set in the result, from 1 (January) to 12 (December)\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the requested month, not null\n     * @throws {DateTimeException} if the month-of-year value is invalid\n     */\n    withMonth(month) {\n        return this._withDateTime(this._date.withMonth(month), this._time);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the day-of-month altered.\n     * If the resulting {@link LocalDateTime} is invalid, an exception is thrown.\n     * The time does not affect the calculation and will be the same in the result.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} dayOfMonth - the day-of-month to set in the result, from 1 to 28-31\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the requested day, not null\n     * @throws {DateTimeException} if the day-of-month value is invalid\n     * @throws {DateTimeException} if the day-of-month is invalid for the month-year\n     */\n    withDayOfMonth(dayOfMonth) {\n        return this._withDateTime(this._date.withDayOfMonth(dayOfMonth), this._time);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the day-of-year altered.\n     * If the resulting {@link LocalDateTime} is invalid, an exception is thrown.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} dayOfYear - the day-of-year to set in the result, from 1 to 365-366\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date with the requested day, not null\n     * @throws {DateTimeException} if the day-of-year value is invalid\n     * @throws {DateTimeException} if the day-of-year is invalid for the year\n     */\n    withDayOfYear(dayOfYear) {\n        return this._withDateTime(this._date.withDayOfYear(dayOfYear), this._time);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the hour-of-day value altered.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} hour - the hour-of-day to set in the result, from 0 to 23\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the requested hour, not null\n     * @throws {DateTimeException} if the hour value is invalid\n     */\n    withHour(hour) {\n        const newTime = this._time.withHour(hour);\n        return this._withDateTime(this._date, newTime);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the minute-of-hour value altered.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} minute - the minute-of-hour to set in the result, from 0 to 59\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the requested minute, not null\n     * @throws {DateTimeException} if the minute value is invalid\n     */\n    withMinute(minute) {\n        const newTime = this._time.withMinute(minute);\n        return this._withDateTime(this._date, newTime);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the second-of-minute value altered.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} second - the second-of-minute to set in the result, from 0 to 59\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the requested second, not null\n     * @throws {DateTimeException} if the second value is invalid\n     */\n    withSecond(second) {\n        const newTime = this._time.withSecond(second);\n        return this._withDateTime(this._date, newTime);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the nano-of-second value altered.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} nanoOfSecond - the nano-of-second to set in the result, from 0 to 999,999,999\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the requested nanosecond, not null\n     * @throws {DateTimeException} if the nano value is invalid\n     */\n    withNano(nanoOfSecond) {\n        const newTime = this._time.withNano(nanoOfSecond);\n        return this._withDateTime(this._date, newTime);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the time truncated.\n     *\n     * Truncation returns a copy of the original date-time with fields\n     * smaller than the specified unit set to zero.\n     * For example, truncating with {@link ChronoUnit#MINUTES}\n     * will set the second-of-minute and nano-of-second field to zero.\n     *\n     * The unit must have a duration (see {@link TemporalUnit#getDuration})\n     * that divides into the length of a standard day without remainder.\n     * This includes all supplied time units on {@link ChronoUnit} and\n     * {@link ChronoUnit#DAYS}. Other units throw an exception.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalUnit} unit - the unit to truncate to, not null\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the time truncated, not null\n     * @throws {DateTimeException} if unable to truncate\n     */\n    truncatedTo(unit) {\n        return this._withDateTime(this._date, this._time.truncatedTo(unit));\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a copy of this date-time with the specified period added.\n     *\n     * This method returns a new date-time based on this date-time with the specified period added.\n     * This can be used to add any period that is defined by a unit, for example to add years, months or days.\n     * The unit is responsible for the details of the calculation, including the resolution\n     * of any edge cases in the calculation.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} amountToAdd - the amount of the unit to add to the result, may be negative\n     * @param {!TemporalUnit} unit - the unit of the period to add, not null\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the specified period added, not null\n     * @throws {DateTimeException} if the unit cannot be added to this type\n     */\n    _plusUnit(amountToAdd, unit) {\n        requireNonNull(unit, 'unit');\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.NANOS: return this.plusNanos(amountToAdd);\n                case ChronoUnit.MICROS: return this.plusDays(MathUtil.intDiv(amountToAdd, LocalTime.MICROS_PER_DAY)).plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MICROS_PER_DAY) * 1000);\n                case ChronoUnit.MILLIS: return this.plusDays(MathUtil.intDiv(amountToAdd, LocalTime.MILLIS_PER_DAY)).plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MILLIS_PER_DAY) * 1000000);\n                case ChronoUnit.SECONDS: return this.plusSeconds(amountToAdd);\n                case ChronoUnit.MINUTES: return this.plusMinutes(amountToAdd);\n                case ChronoUnit.HOURS: return this.plusHours(amountToAdd);\n                case ChronoUnit.HALF_DAYS: return this.plusDays(MathUtil.intDiv(amountToAdd, 256)).plusHours(MathUtil.intMod(amountToAdd, 256) * 12);  // no overflow (256 is multiple of 2)\n            }\n            return this._withDateTime(this._date.plus(amountToAdd, unit), this._time);\n        }\n        return unit.addTo(this, amountToAdd);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in years added.\n     *\n     * This method adds the specified amount to the years field in three steps:\n     *\n     * 1. Add the input years to the year field\n     * 2. Check if the resulting date would be invalid\n     * 3. Adjust the day-of-month to the last valid day if necessary\n     *\n     * For example, 2008-02-29 (leap year) plus one year would result in the\n     * invalid date 2009-02-29 (standard year). Instead of returning an invalid\n     * result, the last valid day of the month, 2009-02-28, is selected instead.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} years - the years to add, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the years added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusYears(years) {\n        const newDate = this._date.plusYears(years);\n        return this._withDateTime(newDate, this._time);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in months added.\n     *\n     * This method adds the specified amount to the months field in three steps:\n     *\n     * 1. Add the input months to the month-of-year field\n     * 2. Check if the resulting date would be invalid\n     * 3. Adjust the day-of-month to the last valid day if necessary\n     *\n     * For example, 2007-03-31 plus one month would result in the invalid date\n     * 2007-04-31. Instead of returning an invalid result, the last valid day\n     * of the month, 2007-04-30, is selected instead.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months - the months to add, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the months added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusMonths(months) {\n        const newDate = this._date.plusMonths(months);\n        return this._withDateTime(newDate, this._time);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in weeks added.\n     *\n     * This method adds the specified amount in weeks to the days field incrementing\n     * the month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     *\n     * For example, 2008-12-31 plus one week would result in 2009-01-07.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} weeks - the weeks to add, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the weeks added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusWeeks(weeks) {\n        const newDate = this._date.plusWeeks(weeks);\n        return this._withDateTime(newDate, this._time);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in days added.\n     *\n     * This method adds the specified amount to the days field incrementing the\n     * month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     *\n     * For example, 2008-12-31 plus one day would result in 2009-01-01.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} days - the days to add, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the days added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusDays(days) {\n        const newDate = this._date.plusDays(days);\n        return this._withDateTime(newDate, this._time);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in hours added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} hours - the hours to add, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the hours added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusHours(hours) {\n        return this._plusWithOverflow(this._date, hours, 0, 0, 0, 1);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in minutes added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} minutes - the minutes to add, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the minutes added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusMinutes(minutes) {\n        return this._plusWithOverflow(this._date, 0, minutes, 0, 0, 1);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in seconds added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} seconds - the seconds to add, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the seconds added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusSeconds(seconds) {\n        return this._plusWithOverflow(this._date, 0, 0, seconds, 0, 1);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in nanoseconds added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} nanos - the nanos to add, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the nanoseconds added, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    plusNanos(nanos) {\n        return this._plusWithOverflow(this._date, 0, 0, 0, nanos, 1);\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a copy of this date-time with the specified period subtracted.\n     *\n     * This method returns a new date-time based on this date-time with the specified period subtracted.\n     * This can be used to subtract any period that is defined by a unit, for example to subtract years, months or days.\n     * The unit is responsible for the details of the calculation, including the resolution\n     * of any edge cases in the calculation.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} amountToSubtract - the amount of the unit to subtract from the result, may be negative\n     * @param {TemporalUnit} unit - the unit of the period to subtract, not null\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the specified period subtracted, not null\n     * @throws {DateTimeException} if the unit cannot be added to this type\n     */\n    _minusUnit(amountToSubtract, unit) {\n        requireNonNull(unit, 'unit');\n        return this._plusUnit(-1 * amountToSubtract, unit);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in years subtracted.\n     *\n     * This method subtracts the specified amount from the years field in three steps:\n     *\n     * 1. Subtract the input years from the year field\n     * 2. Check if the resulting date would be invalid\n     * 3. Adjust the day-of-month to the last valid day if necessary\n     *\n     * For example, 2008-02-29 (leap year) minus one year would result in the\n     * invalid date 2009-02-29 (standard year). Instead of returning an invalid\n     * result, the last valid day of the month, 2009-02-28, is selected instead.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} years - the years to subtract, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the years subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusYears(years) {\n        return this.plusYears(-1 * years);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in months subtracted.\n     *\n     * This method subtracts the specified amount from the months field in three steps:\n     *\n     * 1. Subtract the input months from the month-of-year field\n     * 2. Check if the resulting date would be invalid\n     * 3. Adjust the day-of-month to the last valid day if necessary\n     *\n     * For example, 2007-03-31 minus one month would result in the invalid date\n     * 2007-04-31. Instead of returning an invalid result, the last valid day\n     * of the month, 2007-04-30, is selected instead.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} months - the months to subtract, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the months subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusMonths(months) {\n        return this.plusMonths(-1 * months);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in weeks subtracted.\n     *\n     * This method subtracts the specified amount in weeks from the days field decrementing\n     * the month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     *\n     * For example, 2009-01-07 minus one week would result in 2008-12-31.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} weeks - the weeks to subtract, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the weeks subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusWeeks(weeks) {\n        return this.plusWeeks(-1 * weeks);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in days subtracted.\n     *\n     * This method subtracts the specified amount from the days field incrementing the\n     * month and year fields as necessary to ensure the result remains valid.\n     * The result is only invalid if the maximum/minimum year is exceeded.\n     *\n     * For example, 2009-01-01 minus one day would result in 2008-12-31.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} days - the days to subtract, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the days subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusDays(days) {\n        return this.plusDays(-1 * days);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in hours subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} hours - the hours to subtract, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the hours subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusHours(hours) {\n        return this._plusWithOverflow(this._date, hours, 0, 0, 0, -1);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in minutes subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} minutes - the minutes to subtract, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the minutes subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusMinutes(minutes) {\n        return this._plusWithOverflow(this._date, 0, minutes, 0, 0, -1);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in seconds subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} seconds - the seconds to subtract, may be negative\n     * @return {LocalDateTime} a {@link LocalDateTime} based on this date-time with the seconds subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusSeconds(seconds) {\n        return this._plusWithOverflow(this._date, 0, 0, seconds, 0, -1);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period in nanoseconds subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Number} nanos - the nanos to subtract, may be negative\n     * @return {LocalDateTime} based on this date-time with the nanoseconds subtracted, not null\n     * @throws {DateTimeException} if the result exceeds the supported date range\n     */\n    minusNanos(nanos) {\n        return this._plusWithOverflow(this._date, 0, 0, 0, nanos, -1);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalDateTime} with the specified period added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {LocalDate} newDate  the new date to base the calculation on, not null\n     * @param {Number} hours - the hours to add, may be negative\n     * @param {Number} minutes - the minutes to add, may be negative\n     * @param {Number} seconds - the seconds to add, may be negative\n     * @param {Number} nanos - the nanos to add, may be negative\n     * @param {Number} sign - the sign to determine add or subtract\n     * @return {LocalDateTime} the combined result, not null\n     */\n    _plusWithOverflow(newDate, hours, minutes, seconds, nanos, sign) {\n        // 9223372036854775808 long, 2147483648 int\n        if (hours === 0 && minutes === 0 && seconds === 0 && nanos === 0) {\n            return this._withDateTime(newDate, this._time);\n        }\n        let totDays = MathUtil.intDiv(nanos, LocalTime.NANOS_PER_DAY) +             //   max/24*60*60*1B\n                MathUtil.intDiv(seconds, LocalTime.SECONDS_PER_DAY) +                //   max/24*60*60\n                MathUtil.intDiv(minutes, LocalTime.MINUTES_PER_DAY) +                //   max/24*60\n                MathUtil.intDiv(hours, LocalTime.HOURS_PER_DAY);                     //   max/24\n        totDays *= sign;                                   // total max*0.4237...\n        let totNanos = MathUtil.intMod(nanos, LocalTime.NANOS_PER_DAY) +                    //   max  86400000000000\n                (MathUtil.intMod(seconds, LocalTime.SECONDS_PER_DAY)) * LocalTime.NANOS_PER_SECOND +   //   max  86400000000000\n                (MathUtil.intMod(minutes, LocalTime.MINUTES_PER_DAY)) * LocalTime.NANOS_PER_MINUTE +   //   max  86400000000000\n                (MathUtil.intMod(hours, LocalTime.HOURS_PER_DAY)) * LocalTime.NANOS_PER_HOUR;          //   max  86400000000000\n        const curNoD = this._time.toNanoOfDay();                       //   max  86400000000000\n        totNanos = totNanos * sign + curNoD;                    // total 432000000000000\n        totDays += MathUtil.floorDiv(totNanos, LocalTime.NANOS_PER_DAY);\n        const newNoD = MathUtil.floorMod(totNanos, LocalTime.NANOS_PER_DAY);\n        const newTime = (newNoD === curNoD ? this._time : LocalTime.ofNanoOfDay(newNoD));\n        return this._withDateTime(newDate.plusDays(totDays), newTime);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Queries this date-time using the specified query.\n     *\n     * This queries this date-time using the specified query strategy object.\n     * The {@link TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom} method on the\n     * specified query passing `this` as the argument.\n     *\n     * @param {TemporalQuery} query  the query to invoke, not null\n     * @return {*} the query result, null may be returned (defined by the query)\n     * @throws {DateTimeException} if unable to query (defined by the query)\n     * @throws {ArithmeticException} if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        requireNonNull(query, 'query');\n        if (query === TemporalQueries.localDate()) {\n            return this.toLocalDate();\n        }\n        return super.query(query);\n    }\n\n    /**\n     * Adjusts the specified temporal object to have the same date and time as this object.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with the date and time changed to be the same as this.\n     *\n     * The adjustment is equivalent to using {@link Temporal#with}\n     * twice, passing {@link ChronoField#EPOCH_DAY} and\n     * {@link ChronoField#NANO_OF_DAY} as the fields.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisLocalDateTime.adjustInto(temporal);\n     *   temporal = temporal.with(thisLocalDateTime);\n     * </pre>\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalAdjuster} temporal - the target object to be adjusted, not null\n     * @return {LocalDateTime} the adjusted object, not null\n     * @throws {DateTimeException} if unable to make the adjustment\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    adjustInto(temporal) {\n        return super.adjustInto(temporal);\n    }\n\n    /**\n     * Calculates the period between this date-time and another date-time in\n     * terms of the specified unit.\n     *\n     * This calculates the period between two date-times in terms of a single unit.\n     * The start and end points are `this` and the specified date-time.\n     * The result will be negative if the end is before the start.\n     * The {@link Temporal} passed to this method must be a {@link LocalDateTime}.\n     * For example, the period in days between two date-times can be calculated\n     * using `startDateTime.until(endDateTime, DAYS)`.\n     *\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two date-times.\n     * For example, the period in months between 2012-06-15T00:00 and 2012-08-14T23:59\n     * will only be one month as it is one minute short of two months.\n     *\n     * This method operates in association with {@link TemporalUnit#between}.\n     * The result of this method is a `long` representing the amount of\n     * the specified unit. By contrast, the result of {@link between} is an\n     * object that can be used directly in addition/subtraction:\n     * <pre>\n     *   long period = start.until(end, MONTHS);   // this method\n     *   dateTime.plus(MONTHS.between(start, end));      // use in plus/minus\n     * </pre>\n     *\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@link NANOS}, {@link MICROS}, {@link MILLIS}, {@link SECONDS},\n     * {@link MINUTES}, {@link HOURS} and {@link HALF_DAYS}, {@link DAYS},\n     * {@link WEEKS}, {@link MONTHS}, {@link YEARS}, {@link DECADES},\n     * {@link CENTURIES}, {@link MILLENNIA} and {@link ERAS} are supported.\n     * Other {@link ChronoUnit} values will throw an exception.\n     *\n     * If the unit is not a {@link ChronoUnit}, then the result of this method\n     * is obtained by invoking {@link TemporalUnit.between}\n     * passing `this` as the first argument and the input temporal as\n     * the second argument.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} endExclusive - the end date-time, which is converted to a {@link LocalDateTime}, not null\n     * @param {TemporalUnit} unit - the unit to measure the period in, not null\n     * @return {number} the amount of the period between this date-time and the end date-time\n     * @throws {DateTimeException} if the period cannot be calculated\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    until(endExclusive, unit) {\n        requireNonNull(endExclusive, 'endExclusive');\n        requireNonNull(unit, 'unit');\n        const end = LocalDateTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            if (unit.isTimeBased()) {\n                let daysUntil = this._date.daysUntil(end._date);\n                let timeUntil = end._time.toNanoOfDay() - this._time.toNanoOfDay();\n                if (daysUntil > 0 && timeUntil < 0) {\n                    daysUntil--;\n                    timeUntil += LocalTime.NANOS_PER_DAY;\n                } else if (daysUntil < 0 && timeUntil > 0) {\n                    daysUntil++;\n                    timeUntil -= LocalTime.NANOS_PER_DAY;\n                }\n                let amount = daysUntil;\n                switch (unit) {\n                    case ChronoUnit.NANOS:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.NANOS_PER_DAY);\n                        return MathUtil.safeAdd(amount, timeUntil);\n                    case ChronoUnit.MICROS:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.MICROS_PER_DAY);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, 1000));\n                    case ChronoUnit.MILLIS:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.MILLIS_PER_DAY);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, 1000000));\n                    case ChronoUnit.SECONDS:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.SECONDS_PER_DAY);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_SECOND));\n                    case ChronoUnit.MINUTES:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.MINUTES_PER_DAY);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_MINUTE));\n                    case ChronoUnit.HOURS:\n                        amount = MathUtil.safeMultiply(amount, LocalTime.HOURS_PER_DAY);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, LocalTime.NANOS_PER_HOUR));\n                    case ChronoUnit.HALF_DAYS:\n                        amount = MathUtil.safeMultiply(amount, 2);\n                        return MathUtil.safeAdd(amount, MathUtil.intDiv(timeUntil, (LocalTime.NANOS_PER_HOUR * 12)));\n                }\n                throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n            }\n            let endDate = end._date;\n            const endTime = end._time;\n            if (endDate.isAfter(this._date) && endTime.isBefore(this._time)) {\n                endDate = endDate.minusDays(1);\n            } else if (endDate.isBefore(this._date) && endTime.isAfter(this._time)) {\n                endDate = endDate.plusDays(1);\n            }\n            return this._date.until(endDate, unit);\n        }\n        return unit.between(this, end);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Combines this date-time with an offset to create an {@link OffsetDateTime}.\n     *\n     * This returns an {@link OffsetDateTime} formed from this date-time at the specified offset.\n     * All possible combinations of date-time and offset are valid.\n     *\n     * @param {ZoneOffset} offset  the offset to combine with, not null\n     * @return {OffsetDateTime} the offset date-time formed from this date-time and the specified offset, not null\n     */\n    atOffset(offset) {\n        return OffsetDateTime.of(this, offset);\n    }\n\n    /**\n     * Combines this date-time with a time-zone to create a {@link ZonedDateTime}.\n     *\n     * This returns a {@link ZonedDateTime} formed from this date-time at the\n     * specified time-zone. The result will match this date-time as closely as possible.\n     * Time-zone rules, such as daylight savings, mean that not every local date-time\n     * is valid for the specified zone, thus the local date-time may be adjusted.\n     *\n     * The local date-time is resolved to a single instant on the time-line.\n     * This is achieved by finding a valid offset from UTC/Greenwich for the local\n     * date-time as defined by the {@link ZoneRules} of the zone ID.\n     *\n     * In most cases, there is only one valid offset for a local date-time.\n     * In the case of an overlap, where clocks are set back, there are two valid offsets.\n     * This method uses the earlier offset typically corresponding to 'summer'.\n     *\n     * In the case of a gap, where clocks jump forward, there is no valid offset.\n     * Instead, the local date-time is adjusted to be later by the length of the gap.\n     * For a typical one hour daylight savings change, the local date-time will be\n     * moved one hour later into the offset typically corresponding to 'summer'.\n     *\n     * To obtain the later offset during an overlap, call\n     * {@link ZonedDateTime#withLaterOffsetAtOverlap} on the result of this method.\n     * To throw an exception when there is a gap or overlap, use\n     * {@link ZonedDateTime#ofStrict}.\n     *\n     * @param {ZoneId} zone  the time-zone to use, not null\n     * @return {ZonedDateTime} the zoned date-time formed from this date-time, not null\n     */\n    atZone(zone) {\n        return ZonedDateTime.of(this, zone);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the {@link LocalDate} part of this date-time.\n     *\n     * This returns a {@link LocalDate} with the same year, month and day\n     * as this date-time.\n     *\n     * @return {LocalDate} the date part of this date-time, not null\n     */\n    toLocalDate() {\n        return this._date;\n    }\n\n    /**\n     * Gets the {@link LocalTime} part of this date-time.\n     *\n     * This returns a {@link LocalTime} with the same hour, minute, second and\n     * nanosecond as this date-time.\n     *\n     * @return {LocalTime} the time part of this date-time, not null\n     */\n    toLocalTime() {\n        return this._time;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares this date-time to another date-time.\n     *\n     * The comparison is primarily based on the date-time, from earliest to latest.\n     * It is 'consistent with equals', as defined by {@link Comparable}.\n     *\n     * If all the date-times being compared are instances of {@link LocalDateTime},\n     * then the comparison will be entirely based on the date-time.\n     * If some dates being compared are in different chronologies, then the\n     * chronology is also considered, see {@link ChronoLocalDateTime#compareTo}.\n     *\n     * @param {!LocalDateTime} other - the other date-time to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     */\n    compareTo(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, LocalDateTime, 'other');\n        return this._compareTo0(other);\n        // return super.compareTo(other); if not instance of  LocalDateTime\n    }\n\n    /**\n     *\n     * @param {!LocalDateTime} other\n     * @returns {number}\n     * @private\n     */\n    _compareTo0(other) {\n        let cmp = this._date.compareTo(other.toLocalDate());\n        if (cmp === 0) {\n            cmp = this._time.compareTo(other.toLocalTime());\n        }\n        return cmp;\n    }\n\n    /**\n     * Checks if this date-time is after the specified date-time.\n     *\n     * This checks to see if this date-time represents a point on the\n     * local time-line after the other date-time.\n     * <pre>\n     *   LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);\n     *   LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);\n     *   a.isAfter(b) == false\n     *   a.isAfter(a) == false\n     *   b.isAfter(a) == true\n     * </pre>\n     *\n     * This method only considers the position of the two date-times on the local time-line.\n     * It does not take into account the chronology, or calendar system.\n     * This is different from the comparison in {@link compareTo},\n     * but is the same approach as {@link DATE_TIME_COMPARATOR}.\n     *\n     * @param {LocalDateTime} other - the other date-time to compare to, not null\n     * @return {boolean} true if this date-time is after the specified date-time\n     */\n    isAfter(other) {\n        return this.compareTo(other) > 0;\n        // return super.isAfter(other);  if not instance of LocalDateTime\n    }\n\n    /**\n     * Checks if this date-time is before the specified date-time.\n     *\n     * This checks to see if this date-time represents a point on the\n     * local time-line before the other date-time.\n     * <pre>\n     *   LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);\n     *   LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);\n     *   a.isBefore(b) == true\n     *   a.isBefore(a) == false\n     *   b.isBefore(a) == false\n     * </pre>\n     *\n     * This method only considers the position of the two date-times on the local time-line.\n     * It does not take into account the chronology, or calendar system.\n     * This is different from the comparison in {@link compareTo},\n     * but is the same approach as {@link DATE_TIME_COMPARATOR}.\n     *\n     * @param {LocalDateTime} other - the other date-time to compare to, not null\n     * @return {boolean} true if this date-time is before the specified date-time\n     */\n    isBefore(other) {\n        return this.compareTo(other) < 0;\n        // return super.isBefore(other);  if not instance of LocalDateTime\n    }\n\n    /**\n     * Checks if this date-time is equal to the specified date-time.\n     *\n     * This checks to see if this date-time represents the same point on the\n     * local time-line as the other date-time.\n     * <pre>\n     *   LocalDate a = LocalDateTime.of(2012, 6, 30, 12, 00);\n     *   LocalDate b = LocalDateTime.of(2012, 7, 1, 12, 00);\n     *   a.isEqual(b) == false\n     *   a.isEqual(a) == true\n     *   b.isEqual(a) == false\n     * </pre>\n     *\n     * This method only considers the position of the two date-times on the local time-line.\n     * It does not take into account the chronology, or calendar system.\n     * This is different from the comparison in {@link compareTo},\n     * but is the same approach as {@link DATE_TIME_COMPARATOR}.\n     *\n     * @param {LocalDateTime} other - the other date-time to compare to, not null\n     * @return {boolean} true if this date-time is equal to the specified date-time\n     */\n    isEqual(other) {\n        return this.compareTo(other) === 0;\n        // return super.isEqual(other); if not instance of LocalDateTime\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this date-time is equal to another date-time.\n     *\n     * Compares this {@link LocalDateTime} with another ensuring that the date-time is the same.\n     * Only objects of type {@link LocalDateTime} are compared, other types return false.\n     *\n     * @param {*} other - the object to check, null returns false\n     * @return {boolean} true if this is equal to the other date-time\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof LocalDateTime) {\n            return this._date.equals(other._date) && this._time.equals(other._time);\n        }\n        return false;\n    }\n\n    /**\n     * A hash code for this date-time.\n     *\n     * @return {number} a suitable hash code\n     */\n    hashCode() {\n        return this._date.hashCode() ^ this._time.hashCode();\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Outputs this date-time as a string, such as `2007-12-03T10:15:30`.\n     *\n     * The output will be one of the following ISO-8601 formats:\n     *\n     * * `yyyy-MM-dd'T'HH:mm`\n     * * `yyyy-MM-dd'T'HH:mm:ss`\n     * * `yyyy-MM-dd'T'HH:mm:ss.SSS`\n     * * `yyyy-MM-dd'T'HH:mm:ss.SSSSSS`\n     * * `yyyy-MM-dd'T'HH:mm:ss.SSSSSSSSS`\n     *\n     * The format used will be the shortest that outputs the full value of\n     * the time where the omitted parts are implied to be zero.\n     *\n     * @return {string} a string representation of this date-time, not null\n     */\n    toString() {\n        return `${this._date.toString()}T${this._time.toString()}`;\n    }\n\n    /**\n     *\n     * @return {string} same as {@link LocalDateTime.toString}\n     */\n    toJSON() {\n        return this.toString();\n    }\n\n    /**\n     * Outputs this date-time as a string using the formatter.\n     *\n     * @param {!DateTimeFormatter} formatter  the formatter to use, not null\n     * @return {String} the formatted date-time string, not null\n     * @throws {DateTimeException} if an error occurs during printing\n     */\n    format(formatter) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.format(this);\n    }\n\n}\n\nexport function _init(){\n    /**\n     * The minimum supported {@link LocalDateTime}, '-999999999-01-01T00:00:00'.\n     * This is the local date-time of midnight at the start of the minimum date.\n     * This combines {@link LocalDate#MIN} and {@link LocalTime#MIN}.\n     * This could be used by an application as a 'far past' date-time.\n     */\n    LocalDateTime.MIN = LocalDateTime.of(LocalDate.MIN, LocalTime.MIN);\n\n    /**\n     * The maximum supported {@link LocalDateTime}, '+999999999-12-31T23:59:59.999999999'.\n     * This is the local date-time just before midnight at the end of the maximum date.\n     * This combines {@link LocalDate#MAX} and {@link LocalTime#MAX}.\n     * This could be used by an application as a 'far future' date-time.\n     */\n    LocalDateTime.MAX = LocalDateTime.of(LocalDate.MAX, LocalTime.MAX);\n\n    LocalDateTime.FROM = createTemporalQuery('LocalDateTime.FROM', (temporal) => {\n        return LocalDateTime.from(temporal);\n    });\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\n\nimport { MathUtil } from './MathUtil';\nimport { requireNonNull, requireInstance } from './assert';\nimport { DateTimeException, UnsupportedTemporalTypeException } from './errors';\n\nimport { Clock } from './Clock';\nimport { LocalDateTime } from './LocalDateTime';\nimport { ZoneId } from './ZoneId';\nimport { OffsetTime } from './OffsetTime';\n\nimport { DateTimeFormatter } from './format/DateTimeFormatter';\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { Temporal } from './temporal/Temporal';\nimport { TemporalField } from './temporal/TemporalField';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { createTemporalQuery } from './temporal/TemporalQuery';\n\n/**\n * A time without time-zone in the ISO-8601 calendar system,\n * such as `10:15:30`.\n *\n * {@link LocalTime} is an immutable date-time object that represents a time,\n * often viewed as hour-minute-second.\n * Time is represented to nanosecond precision.\n * For example, the value '13:45.30.123456789' can be stored in a {@link LocalTime}.\n *\n * It does not store or represent a date or time-zone.\n * Instead, it is a description of the local time as seen on a wall clock.\n * It cannot represent an instant on the time-line without additional information\n * such as an offset or time-zone.\n *\n * The ISO-8601 calendar system is the modern civil calendar system used today\n * in most of the world. This API assumes that all calendar systems use the same\n * representation, this class, for time-of-day.\n *\n * ### Static properties of Class {@link LocalTime}\n *\n * LocalTime.MIN\n *\n * The minimum supported {@link LocalTime}, '00:00'.\n * This is the time of midnight at the start of the day.\n *\n * LocalTime.MAX\n *\n * The maximum supported {@link LocalTime}, '23:59:59.999999999'.\n * This is the time just before midnight at the end of the day.\n *\n * LocalTime.MIDNIGHT\n *\n * The time of midnight at the start of the day, '00:00'.\n *\n * LocalTime.NOON\n *\n * The time of noon in the middle of the day, '12:00'.\n *\n * LocalTime.HOURS_PER_DAY\n *\n * Hours per day.\n *\n * LocalTime.MINUTES_PER_HOUR\n *\n * Minutes per hour.\n *\n * LocalTime.MINUTES_PER_DAY\n *\n * Minutes per day.\n *\n * LocalTime.SECONDS_PER_MINUTE\n *\n * Seconds per minute.\n *\n * LocalTime.SECONDS_PER_HOUR\n *\n * Seconds per hour.\n *\n * LocalTime.SECONDS_PER_DAY\n *\n * Seconds per day.\n *\n * LocalTime.MILLIS_PER_DAY\n *\n * Milliseconds per day.\n *\n * LocalTime.MICROS_PER_DAY\n *\n * Microseconds per day.\n *\n * LocalTime.NANOS_PER_SECOND\n *\n * Nanos per second.\n *\n * LocalTime.NANOS_PER_MINUTE\n *\n * Nanos per minute.\n *\n * LocalTime.NANOS_PER_HOUR\n *\n * Nanos per hour.\n *\n * LocalTime.NANOS_PER_DAY\n *\n * Nanos per day.\n *\n */\nexport class LocalTime extends Temporal /** implements Temporal, TemporalAdjuster */ {\n    /**\n     * Obtains the current time from the specified clock.\n     * If no argument is specified the system default clock is queried,\n     * if a zone-id is passed a system clock with the specified zone is queried.\n     *\n     * This will query the specified clock to obtain the current time.\n     * Using this method allows the use of an alternate clock for testing.\n     * The alternate clock may be introduced using dependency injection.\n     *\n     * @param {Clock|ZoneId} clockOrZone - the zone ID or clock to use, if null Clock.systemDefaultZone() is used.\n     * @return {LocalTime} the current time using the system clock, not null\n     */\n    static now(clockOrZone) {\n        if (clockOrZone == null){\n            return LocalTime._now(Clock.systemDefaultZone());\n        } else if (clockOrZone instanceof Clock){\n            return LocalTime._now(clockOrZone);\n        } else {\n            return LocalTime._now(Clock.system(clockOrZone));\n        }\n    }\n\n    /**\n     * Obtains the current time from the specified clock.\n     *\n     * This will query the specified clock to obtain the current time.\n     * Using this method allows the use of an alternate clock for testing.\n     * The alternate clock may be introduced using dependency injection (see {@link Clock}).\n     *\n     * @param {Clock} [clock=Clock.systemDefaultZone()] - the clock to use, not null\n     * @return {LocalTime} the current time, not null\n     */\n    static _now(clock = Clock.systemDefaultZone()) {\n        requireNonNull(clock, 'clock');// inline OffsetTime factory to avoid creating object and InstantProvider checks\n        return LocalTime.ofInstant(clock.instant(), clock.zone());\n    }\n\n    /**\n     * obtain a LocalTime from an Instant in the specified time-zone or, if null\n     * in the system default time-zone\n     *\n     * @param {!Instant} instant\n     * @param {ZoneId} [zone=ZoneId.systemDefault()], defaults to ZoneId.systemDefault()\n     * @returns {LocalTime} the current date, not null\n     */\n    static ofInstant(instant, zone=ZoneId.systemDefault()){\n        const offset = zone.rules().offset(instant);\n        let secsOfDay = MathUtil.intMod(instant.epochSecond(), LocalTime.SECONDS_PER_DAY);\n        secsOfDay = MathUtil.intMod((secsOfDay + offset.totalSeconds()), LocalTime.SECONDS_PER_DAY);\n        if (secsOfDay < 0) {\n            secsOfDay += LocalTime.SECONDS_PER_DAY;\n        }\n        return LocalTime.ofSecondOfDay(secsOfDay, instant.nano());\n    }\n\n    /**\n     * Obtains an instance of {@link LocalTime} from an hour, minute, second and nanosecond.\n     *\n     * This factory may return a cached value, but applications must not rely on this.\n     *\n     * @param {number} [hour=0] - the hour-of-day to represent, from 0 to 23\n     * @param {number} [minute=0] - the minute-of-hour to represent, from 0 to 59\n     * @param {number} [second=0] - the second-of-minute to represent, from 0 to 59\n     * @param {number} [nanoOfSecond=0] - the nano-of-second to represent, from 0 to 999,999,999\n     * @return {LocalTime} the local time, not null\n     * @throws {DateTimeException} if the value of any field is out of range\n     */\n    static of(hour, minute, second, nanoOfSecond) {\n        return new LocalTime(hour, minute, second, nanoOfSecond);\n    }\n\n    /**\n     * Obtains an instance of {@link LocalTime} from a second-of-day value, with\n     * associated nanos of second.\n     *\n     * This factory may return a cached value, but applications must not rely on this.\n     *\n     * @param {number} [secondOfDay=0] - the second-of-day, from `0` to `24 * 60 * 60 - 1`\n     * @param {number} [nanoOfSecond=0] - the nano-of-second, from `0` to `999,999,999`\n     * @return {LocalTime} the local time, not null\n     * @throws {DateTimeException} if the either input value is invalid\n     */\n    static ofSecondOfDay(secondOfDay=0, nanoOfSecond=0) {\n        ChronoField.SECOND_OF_DAY.checkValidValue(secondOfDay);\n        ChronoField.NANO_OF_SECOND.checkValidValue(nanoOfSecond);\n        const hours = MathUtil.intDiv(secondOfDay, LocalTime.SECONDS_PER_HOUR);\n        secondOfDay -= hours * LocalTime.SECONDS_PER_HOUR;\n        const minutes = MathUtil.intDiv(secondOfDay, LocalTime.SECONDS_PER_MINUTE);\n        secondOfDay -= minutes * LocalTime.SECONDS_PER_MINUTE;\n        return new LocalTime(hours, minutes, secondOfDay, nanoOfSecond);\n    }\n\n    /**\n     * Obtains an instance of {@link LocalTime} from a nanos-of-day value.\n     *\n     * This factory may return a cached value, but applications must not rely on this.\n     *\n     * @param {number} [nanoOfDay=0] - the nano of day, from `0` to `24 * 60 * 60 * 1,000,000,000 - 1`\n     * @return {LocalTime} the local time, not null\n     * @throws {DateTimeException} if the nanos of day value is invalid\n     */\n    static ofNanoOfDay(nanoOfDay=0) {\n        ChronoField.NANO_OF_DAY.checkValidValue(nanoOfDay);\n        const hours = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_HOUR);\n        nanoOfDay -= hours * LocalTime.NANOS_PER_HOUR;\n        const minutes = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_MINUTE);\n        nanoOfDay -= minutes * LocalTime.NANOS_PER_MINUTE;\n        const seconds = MathUtil.intDiv(nanoOfDay, LocalTime.NANOS_PER_SECOND);\n        nanoOfDay -= seconds * LocalTime.NANOS_PER_SECOND;\n        return new LocalTime(hours, minutes, seconds, nanoOfDay);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance of {@link LocalTime} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link LocalTime}.\n     *\n     * The conversion uses the {@link TemporalQueries#localTime} query, which relies\n     * on extracting {@link ChronoField#NANO_OF_DAY}.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used in queries via method reference, {@link LocalTime::from}.\n     *\n     * @param {!TemporalAccessor} temporal - the temporal object to convert, not null\n     * @return {LocalTime} the local time, not null\n     * @throws {DateTimeException} if unable to convert to a {@link LocalTime}\n     */\n    static from(temporal) {\n        requireNonNull(temporal, 'temporal');\n        const time = temporal.query(TemporalQueries.localTime());\n        if (time == null) {\n            throw new DateTimeException(`Unable to obtain LocalTime TemporalAccessor: ${temporal}, type ${temporal.constructor != null ? temporal.constructor.name : ''}`);\n        }\n        return time;\n    }\n\n    /**\n     * Obtains an instance of {@link LocalTime} from a text string using a specific formatter.\n     *\n     * The text is parsed using the formatter, returning a time.\n     *\n     * @param {!String} text - the text to parse, not null\n     * @param {DateTimeFormatter} [formatter=DateTimeFormatter.ISO_LOCAL_TIME] - the formatter to use, default is\n     * {@link DateTimeFormatter.ISO_LOCAL_TIME}\n     * @return {LocalTime} the parsed local time, not null\n     * @throws {DateTimeParseException} if the text cannot be parsed\n     */\n    static parse(text, formatter=DateTimeFormatter.ISO_LOCAL_TIME) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.parse(text, LocalTime.FROM);\n    }\n\n    /**\n     * Constructor, previously validated.\n     *\n     * @param {number} [hour=0] - the hour-of-day to represent, validated from 0 to 23\n     * @param {number} [minute=0] - the minute-of-hour to represent, validated from 0 to 59\n     * @param {number} [second=0] - the second-of-minute to represent, validated from 0 to 59\n     * @param {number} [nanoOfSecond=0] - the nano-of-second to represent, validated from 0 to 999,999,999\n     * @private\n     */\n    constructor(hour=0, minute=0, second=0, nanoOfSecond=0) {\n        super();\n        const _hour = MathUtil.safeToInt(hour);\n        const _minute = MathUtil.safeToInt(minute);\n        const _second = MathUtil.safeToInt(second);\n        const _nanoOfSecond = MathUtil.safeToInt(nanoOfSecond);\n        LocalTime._validate(_hour, _minute, _second, _nanoOfSecond);\n        if (_minute === 0 && _second === 0 && _nanoOfSecond === 0) {\n            if (!LocalTime.HOURS[_hour]) {\n                this._hour = _hour;\n                this._minute = _minute;\n                this._second = _second;\n                this._nano = _nanoOfSecond;\n                LocalTime.HOURS[_hour] = this;\n            }\n            return LocalTime.HOURS[_hour];\n        }\n        this._hour = _hour;\n        this._minute = _minute;\n        this._second = _second;\n        this._nano = _nanoOfSecond;\n    }\n\n    static _validate(hour, minute, second, nanoOfSecond){\n        ChronoField.HOUR_OF_DAY.checkValidValue(hour);\n        ChronoField.MINUTE_OF_HOUR.checkValidValue(minute);\n        ChronoField.SECOND_OF_MINUTE.checkValidValue(second);\n        ChronoField.NANO_OF_SECOND.checkValidValue(nanoOfSecond);\n\n    }\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if the specified field is supported.\n     *\n     * This checks if this time can be queried for the specified field.\n     * If false, then calling {@link range} and {@link get} will throw an exception.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields are:\n     *\n     * * {@link ChronoField.NANO_OF_SECOND}\n     * * {@link ChronoField.NANO_OF_DAY}\n     * * {@link ChronoField.MICRO_OF_SECOND}\n     * * {@link ChronoField.MICRO_OF_DAY}\n     * * {@link ChronoField.MILLI_OF_SECOND}\n     * * {@link ChronoField.MILLI_OF_DAY}\n     * * {@link ChronoField.SECOND_OF_MINUTE}\n     * * {@link ChronoField.SECOND_OF_DAY}\n     * * {@link ChronoField.MINUTE_OF_HOUR}\n     * * {@link ChronoField.MINUTE_OF_DAY}\n     * * {@link ChronoField.HOUR_OF_AMPM}\n     * * {@link ChronoField.CLOCK_HOUR_OF_AMPM}\n     * * {@link ChronoField.HOUR_OF_DAY}\n     * * {@link ChronoField.CLOCK_HOUR_OF_DAY}\n     * * {@link ChronoField.AMPM_OF_DAY}\n     *\n     * All other {@link ChronoField} instances will return false.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.isSupportedBy}\n     * passing this as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {ChronoField|ChronoUnit} fieldOrUnit - the field to check, null returns false\n     * @return {boolean} true if the field is supported on this time, false if not\n     */\n    isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit.isTimeBased();\n        } else if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isTimeBased();\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    }\n\n    /**\n     * Gets the range of valid values for the specified field.\n     *\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This time is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return\n     * appropriate range instances.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.rangeRefinedBy}\n     * passing this as the argument.\n     * Whether the range can be obtained is determined by the field.\n     *\n     * @param {ChronoField} field - the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws {DateTimeException} if the range for the field cannot be obtained\n     */\n    range(field) {\n        requireNonNull(field);\n        return super.range(field);\n    }\n\n    /**\n     * Gets the value of the specified field from this time as an `int`.\n     *\n     * This queries this time for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this time, except {@link ChronoField.NANO_OF_DAY} and {@link ChronoField.MICRO_OF_DAY}\n     * which are too large to fit in an `int` and throw a {@link DateTimeException}.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing this as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {ChronoField} field - the field to get, not null\n     * @return {number} the value for the field\n     * @throws {DateTimeException} if a value for the field cannot be obtained\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    get(field) {\n        return this.getLong(field);\n    }\n\n    /**\n     * Gets the value of the specified field from this time as a `long`.\n     *\n     * This queries this time for the value for the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this time.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.from}\n     * passing this as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {ChronoField} field - the field to get, not null\n     * @return {number} the value for the field\n     * @throws {DateTimeException} if a value for the field cannot be obtained\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    getLong(field) {\n        requireNonNull(field, 'field');\n        if (field instanceof ChronoField) {\n            return this._get0(field);\n        }\n        return field.getFrom(this);\n    }\n\n    /**\n     *\n     * @param {ChronoField} field\n     * @returns {number}\n     * @private\n     */\n    _get0(field) {\n        switch (field) {\n            case ChronoField.NANO_OF_SECOND: return this._nano;\n            case ChronoField.NANO_OF_DAY: return this.toNanoOfDay();\n            case ChronoField.MICRO_OF_SECOND: return MathUtil.intDiv(this._nano, 1000);\n            case ChronoField.MICRO_OF_DAY: return MathUtil.intDiv(this.toNanoOfDay(), 1000);\n            case ChronoField.MILLI_OF_SECOND: return MathUtil.intDiv(this._nano, 1000000);\n            case ChronoField.MILLI_OF_DAY: return MathUtil.intDiv(this.toNanoOfDay(), 1000000);\n            case ChronoField.SECOND_OF_MINUTE: return this._second;\n            case ChronoField.SECOND_OF_DAY: return this.toSecondOfDay();\n            case ChronoField.MINUTE_OF_HOUR: return this._minute;\n            case ChronoField.MINUTE_OF_DAY: return this._hour * 60 + this._minute;\n            case ChronoField.HOUR_OF_AMPM: return MathUtil.intMod(this._hour, 12);\n            case ChronoField.CLOCK_HOUR_OF_AMPM: {\n                const ham = MathUtil.intMod(this._hour, 12);\n                return (ham % 12 === 0 ? 12 : ham);\n            }\n            case ChronoField.HOUR_OF_DAY: return this._hour;\n            case ChronoField.CLOCK_HOUR_OF_DAY: return (this._hour === 0 ? 24 : this._hour);\n            case ChronoField.AMPM_OF_DAY: return MathUtil.intDiv(this._hour, 12);\n        }\n        throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the hour-of-day field.\n     *\n     * @return {number} the hour-of-day, from 0 to 23\n     */\n    hour() {\n        return this._hour;\n    }\n\n    /**\n     * Gets the minute-of-hour field.\n     *\n     * @return {number} the minute-of-hour, from 0 to 59\n     */\n    minute() {\n        return this._minute;\n    }\n\n    /**\n     * Gets the second-of-minute field.\n     *\n     * @return {number} the second-of-minute, from 0 to 59\n     */\n    second() {\n        return this._second;\n    }\n\n    /**\n     * Gets the nano-of-second field.\n     *\n     * @return {number} the nano-of-second, from 0 to 999,999,999\n     */\n    nano() {\n        return this._nano;\n    }\n\n    /**\n     * Returns an adjusted copy of this time.\n     *\n     * This returns a new {@link LocalTime}, based on this one, with the time adjusted.\n     * The adjustment takes place using the specified adjuster strategy object.\n     * Read the documentation of the adjuster to understand what adjustment will be made.\n     *\n     * A simple adjuster might simply set the one of the fields, such as the hour field.\n     * A more complex adjuster might set the time to the last hour of the day.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalAdjuster.adjustInto} method on the\n     * specified adjuster passing this as the argument.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalAdjuster} adjuster - the adjuster to use, not null\n     * @return {LocalTime} a {@link LocalTime} based on this with the adjustment made, not null\n     * @throws {DateTimeException} if the adjustment cannot be made\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    _withAdjuster(adjuster) {\n        requireNonNull(adjuster, 'adjuster');\n        // optimizations\n        if (adjuster instanceof LocalTime) {\n            return adjuster;\n        }\n        return super._withAdjuster(adjuster);\n    }\n\n    /**\n     * Returns a copy of this time with the specified field set to a new value.\n     *\n     * This returns a new {@link LocalTime}, based on this one, with the value\n     * for the specified field changed.\n     * This can be used to change any supported field, such as the hour, minute or second.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     *\n     * * {@link ChronoField.NANO_OF_SECOND} -\n     *   Returns a {@link LocalTime} with the specified nano-of-second.\n     *  The hour, minute and second will be unchanged.\n     * * {@link ChronoField.NANO_OF_DAY} -\n     *   Returns a {@link LocalTime} with the specified nano-of-day.\n     *   This completely replaces the time and is equivalent to {@link ofNanoOfDay}.\n     * * {@link ChronoField.MICRO_OF_SECOND} -\n     *   Returns a {@link LocalTime} with the nano-of-second replaced by the specified\n     *   micro-of-second multiplied by 1,000.\n     *   The hour, minute and second will be unchanged.\n     * * {@link ChronoField.MICRO_OF_DAY} -\n     *   Returns a {@link LocalTime} with the specified micro-of-day.\n     *   This completely replaces the time and is equivalent to using {@link ofNanoOfDay}\n     *   with the micro-of-day multiplied by 1,000.\n     * * {@link ChronoField.MILLI_OF_SECOND} -\n     *   Returns a {@link LocalTime} with the nano-of-second replaced by the specified\n     *   milli-of-second multiplied by 1,000,000.\n     *   The hour, minute and second will be unchanged.\n     * * {@link ChronoField.MILLI_OF_DAY} -\n     *   Returns a {@link LocalTime} with the specified milli-of-day.\n     *   This completely replaces the time and is equivalent to using {@link ofNanoOfDay}\n     *   with the milli-of-day multiplied by 1,000,000.\n     * * {@link ChronoField.SECOND_OF_MINUTE} -\n     *   Returns a {@link LocalTime} with the specified second-of-minute.\n     *   The hour, minute and nano-of-second will be unchanged.\n     * * {@link ChronoField.SECOND_OF_DAY} -\n     *   Returns a {@link LocalTime} with the specified second-of-day.\n     *   The nano-of-second will be unchanged.\n     * * {@link ChronoField.MINUTE_OF_HOUR} -\n     *   Returns a {@link LocalTime} with the specified minute-of-hour.\n     *   The hour, second-of-minute and nano-of-second will be unchanged.\n     * * {@link ChronoField.MINUTE_OF_DAY} -\n     *   Returns a {@link LocalTime} with the specified minute-of-day.\n     *   The second-of-minute and nano-of-second will be unchanged.\n     * * {@link ChronoField.HOUR_OF_AMPM} -\n     *   Returns a {@link LocalTime} with the specified hour-of-am-pm.\n     *   The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged.\n     * * {@link ChronoField.CLOCK_HOUR_OF_AMPM} -\n     *   Returns a {@link LocalTime} with the specified clock-hour-of-am-pm.\n     *   The AM/PM, minute-of-hour, second-of-minute and nano-of-second will be unchanged.\n     * * {@link ChronoField.HOUR_OF_DAY} -\n     *   Returns a {@link LocalTime} with the specified hour-of-day.\n     *   The minute-of-hour, second-of-minute and nano-of-second will be unchanged.\n     * * {@link ChronoField.CLOCK_HOUR_OF_DAY} -\n     *   Returns a {@link LocalTime} with the specified clock-hour-of-day.\n     *   The minute-of-hour, second-of-minute and nano-of-second will be unchanged.\n     * * {@link ChronoField.AMPM_OF_DAY} -\n     *   Returns a {@link LocalTime} with the specified AM/PM.\n     *   The hour-of-am-pm, minute-of-hour, second-of-minute and nano-of-second will be unchanged.\n     *\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@link DateTimeException} will be thrown.\n     *\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.adjustInto}\n     * passing this as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {!TemporalField} field - the field to set in the result, not null\n     * @param {number} newValue - the new value of the field in the result\n     * @return {LocalTime} a {@link LocalTime} based on this with the specified field set, not null\n     * @throws {DateTimeException} if the field cannot be set\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    _withField(field, newValue) {\n        requireNonNull(field, 'field');\n        requireInstance(field, TemporalField, 'field');\n        if (field instanceof ChronoField) {\n            field.checkValidValue(newValue);\n            switch (field) {\n                case ChronoField.NANO_OF_SECOND: return this.withNano(newValue);\n                case ChronoField.NANO_OF_DAY: return LocalTime.ofNanoOfDay(newValue);\n                case ChronoField.MICRO_OF_SECOND: return this.withNano(newValue * 1000);\n                case ChronoField.MICRO_OF_DAY: return LocalTime.ofNanoOfDay(newValue * 1000);\n                case ChronoField.MILLI_OF_SECOND: return this.withNano( newValue * 1000000);\n                case ChronoField.MILLI_OF_DAY: return LocalTime.ofNanoOfDay(newValue * 1000000);\n                case ChronoField.SECOND_OF_MINUTE: return this.withSecond(newValue);\n                case ChronoField.SECOND_OF_DAY: return this.plusSeconds(newValue - this.toSecondOfDay());\n                case ChronoField.MINUTE_OF_HOUR: return this.withMinute(newValue);\n                case ChronoField.MINUTE_OF_DAY: return this.plusMinutes(newValue - (this._hour * 60 + this._minute));\n                case ChronoField.HOUR_OF_AMPM: return this.plusHours(newValue - MathUtil.intMod(this._hour, 12));\n                case ChronoField.CLOCK_HOUR_OF_AMPM: return this.plusHours((newValue === 12 ? 0 : newValue) - MathUtil.intMod(this._hour, 12));\n                case ChronoField.HOUR_OF_DAY: return this.withHour(newValue);\n                case ChronoField.CLOCK_HOUR_OF_DAY: return this.withHour((newValue === 24 ? 0 : newValue));\n                case ChronoField.AMPM_OF_DAY: return this.plusHours((newValue - MathUtil.intDiv(this._hour, 12)) * 12);\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.adjustInto(this, newValue);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalTime} with the hour-of-day value altered.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} [hour=0] - the hour-of-day to set in the result, from 0 to 23\n     * @return {LocalTime} a {@link LocalTime} based on this time with the requested hour, not null\n     * @throws {DateTimeException} if the hour value is invalid\n     */\n    withHour(hour=0) {\n        if (this._hour === hour) {\n            return this;\n        }\n        return new LocalTime(hour, this._minute, this._second, this._nano);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalTime} with the minute-of-hour value altered.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} [minute=0] - the minute-of-hour to set in the result, from 0 to 59\n     * @return {LocalTime} a {@link LocalTime} based on this time with the requested minute, not null\n     * @throws {DateTimeException} if the minute value is invalid\n     */\n    withMinute(minute=0) {\n        if (this._minute === minute) {\n            return this;\n        }\n        return new LocalTime(this._hour, minute, this._second, this._nano);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalTime} with the second-of-minute value altered.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} [second=0] - the second-of-minute to set in the result, from 0 to 59\n     * @return {LocalTime} a {@link LocalTime} based on this time with the requested second, not null\n     * @throws {DateTimeException} if the second value is invalid\n     */\n    withSecond(second=0) {\n        if (this._second === second) {\n            return this;\n        }\n        return new LocalTime(this._hour, this._minute, second, this._nano);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalTime} with the nano-of-second value altered.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} [nanoOfSecond=0] - the nano-of-second to set in the result, from 0 to 999,999,999\n     * @return {LocalTime} a {@link LocalTime} based on this time with the requested nanosecond, not null\n     * @throws {DateTimeException} if the nanos value is invalid\n     */\n    withNano(nanoOfSecond=0) {\n        if (this._nano === nanoOfSecond) {\n            return this;\n        }\n        return new LocalTime(this._hour, this._minute, this._second, nanoOfSecond);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalTime} with the time truncated.\n     *\n     * Truncating the time returns a copy of the original time with fields\n     * smaller than the specified unit set to zero.\n     * For example, truncating with the {@link ChronoUnit.MINUTES} minutes unit\n     * will set the second-of-minute and nano-of-second field to zero.\n     *\n     * The unit must have a duration (see {@link TemporalUnit#getDuration})\n     * that divides into the length of a standard day without remainder.\n     * This includes all supplied time units on {@link ChronoUnit} and\n     * {@link ChronoUnit.DAYS}. Other units throw an exception.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {!ChronoUnit} unit - the unit to truncate to, not null\n     * @return {LocalTime} a {@link LocalTime} based on this time with the time truncated, not null\n     * @throws {DateTimeException} if unable to truncate\n     */\n    truncatedTo(unit) {\n        requireNonNull(unit, 'unit');\n        if (unit === ChronoUnit.NANOS) {\n            return this;\n        }\n        const unitDur = unit.duration();\n        if (unitDur.seconds() > LocalTime.SECONDS_PER_DAY) {\n            throw new DateTimeException('Unit is too large to be used for truncation');\n        }\n        const dur = unitDur.toNanos();\n        if (MathUtil.intMod(LocalTime.NANOS_PER_DAY, dur) !== 0) {\n            throw new DateTimeException('Unit must divide into a standard day without remainder');\n        }\n        const nod = this.toNanoOfDay();\n        return LocalTime.ofNanoOfDay(MathUtil.intDiv(nod, dur) * dur);\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a copy of this time with the specified period added.\n     *\n     * This method returns a new time based on this time with the specified period added.\n     * This can be used to add any period that is defined by a unit, for example to add hours, minutes or seconds.\n     * The unit is responsible for the details of the calculation, including the resolution\n     * of any edge cases in the calculation.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} amountToAdd - the amount of the unit to add to the result, may be negative\n     * @param {TemporalUnit} unit - the unit of the period to add, not null\n     * @return {LocalTime} a {@link LocalTime} based on this time with the specified period added, not null\n     * @throws {DateTimeException} if the unit cannot be added to this type\n     */\n    _plusUnit(amountToAdd, unit) {\n        requireNonNull(unit, 'unit');\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.NANOS: return this.plusNanos(amountToAdd);\n                case ChronoUnit.MICROS: return this.plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MICROS_PER_DAY) * 1000);\n                case ChronoUnit.MILLIS: return this.plusNanos(MathUtil.intMod(amountToAdd, LocalTime.MILLIS_PER_DAY) * 1000000);\n                case ChronoUnit.SECONDS: return this.plusSeconds(amountToAdd);\n                case ChronoUnit.MINUTES: return this.plusMinutes(amountToAdd);\n                case ChronoUnit.HOURS: return this.plusHours(amountToAdd);\n                case ChronoUnit.HALF_DAYS: return this.plusHours(MathUtil.intMod(amountToAdd, 2) * 12);\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.addTo(this, amountToAdd);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalTime} with the specified period in hours added.\n     *\n     * This adds the specified number of hours to this time, returning a new time.\n     * The calculation wraps around midnight.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} hoursToAdd - the hours to add, may be negative\n     * @return {LocalTime} a {@link LocalTime} based on this time with the hours added, not null\n     */\n    plusHours(hoursToAdd) {\n        if (hoursToAdd === 0) {\n            return this;\n        }\n\n        const newHour = MathUtil.intMod(MathUtil.intMod(hoursToAdd, LocalTime.HOURS_PER_DAY) + this._hour + LocalTime.HOURS_PER_DAY, LocalTime.HOURS_PER_DAY);\n        return new LocalTime(newHour, this._minute, this._second, this._nano);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalTime} with the specified period in minutes added.\n     *\n     * This adds the specified number of minutes to this time, returning a new time.\n     * The calculation wraps around midnight.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} minutesToAdd - the minutes to add, may be negative\n     * @return {LocalTime} a {@link LocalTime} based on this time with the minutes added, not null\n     */\n    plusMinutes(minutesToAdd) {\n        if (minutesToAdd === 0) {\n            return this;\n        }\n        const mofd = this._hour * LocalTime.MINUTES_PER_HOUR + this._minute;\n        const newMofd = MathUtil.intMod(MathUtil.intMod(minutesToAdd, LocalTime.MINUTES_PER_DAY) + mofd + LocalTime.MINUTES_PER_DAY, LocalTime.MINUTES_PER_DAY);\n        if (mofd === newMofd) {\n            return this;\n        }\n        const newHour = MathUtil.intDiv(newMofd, LocalTime.MINUTES_PER_HOUR);\n        const newMinute = MathUtil.intMod(newMofd, LocalTime.MINUTES_PER_HOUR);\n        return new LocalTime(newHour, newMinute, this._second, this._nano);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalTime} with the specified period in seconds added.\n     *\n     * This adds the specified number of seconds to this time, returning a new time.\n     * The calculation wraps around midnight.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} secondsToAdd - the seconds to add, may be negative\n     * @return {LocalTime} a {@link LocalTime} based on this time with the seconds added, not null\n     */\n    plusSeconds(secondsToAdd) {\n        if (secondsToAdd === 0) {\n            return this;\n        }\n        const sofd = this._hour * LocalTime.SECONDS_PER_HOUR +\n                    this._minute * LocalTime.SECONDS_PER_MINUTE + this._second;\n        const newSofd = MathUtil.intMod((MathUtil.intMod(secondsToAdd, LocalTime.SECONDS_PER_DAY) + sofd + LocalTime.SECONDS_PER_DAY), LocalTime.SECONDS_PER_DAY);\n        if (sofd === newSofd) {\n            return this;\n        }\n        const newHour = MathUtil.intDiv(newSofd, LocalTime.SECONDS_PER_HOUR);\n        const newMinute = MathUtil.intMod(MathUtil.intDiv(newSofd, LocalTime.SECONDS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n        const newSecond = MathUtil.intMod(newSofd, LocalTime.SECONDS_PER_MINUTE);\n        return new LocalTime(newHour, newMinute, newSecond, this._nano);\n    }\n\n    /**\n     * Returns a copy of this {@link LocalTime} with the specified period in nanoseconds added.\n     *\n     * This adds the specified number of nanoseconds to this time, returning a new time.\n     * The calculation wraps around midnight.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} nanosToAdd - the nanos to add, may be negative\n     * @return {LocalTime} a {@link LocalTime} based on this time with the nanoseconds added, not null\n     */\n    plusNanos(nanosToAdd) {\n        if (nanosToAdd === 0) {\n            return this;\n        }\n        const nofd = this.toNanoOfDay();\n        const newNofd = MathUtil.intMod((MathUtil.intMod(nanosToAdd, LocalTime.NANOS_PER_DAY) + nofd + LocalTime.NANOS_PER_DAY), LocalTime.NANOS_PER_DAY);\n        if (nofd === newNofd) {\n            return this;\n        }\n        const newHour = MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_HOUR);\n        const newMinute = MathUtil.intMod(MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_MINUTE), LocalTime.MINUTES_PER_HOUR);\n        const newSecond = MathUtil.intMod(MathUtil.intDiv(newNofd, LocalTime.NANOS_PER_SECOND), LocalTime.SECONDS_PER_MINUTE);\n        const newNano = MathUtil.intMod(newNofd, LocalTime.NANOS_PER_SECOND);\n        return new LocalTime(newHour, newMinute, newSecond, newNano);\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * Returns a copy of this time with the specified period subtracted.\n     *\n     * This method returns a new time based on this time with the specified period subtracted.\n     * This can be used to subtract any period that is defined by a unit, for example to subtract hours, minutes or seconds.\n     * The unit is responsible for the details of the calculation, including the resolution\n     * of any edge cases in the calculation.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} amountToSubtract - the amount of the unit to subtract from the result, may be negative\n     * @param {ChronoUnit} unit - the unit of the period to subtract, not null\n     * @return {LocalTime} a {@link LocalTime} based on this time with the specified period subtracted, not null\n     * @throws {DateTimeException} if the unit cannot be added to this type\n     */\n    _minusUnit(amountToSubtract, unit) {\n        requireNonNull(unit, 'unit');\n        return this._plusUnit(-1 * amountToSubtract, unit);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link LocalTime} with the specified period in hours subtracted.\n     *\n     * This subtracts the specified number of hours from this time, returning a new time.\n     * The calculation wraps around midnight.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} hoursToSubtract - the hours to subtract, may be negative\n     * @return {LocalTime} a {@link LocalTime} based on this time with the hours subtracted, not null\n     */\n    minusHours(hoursToSubtract) {\n        return this.plusHours(-1 * MathUtil.intMod(hoursToSubtract, LocalTime.HOURS_PER_DAY));\n    }\n\n    /**\n     * Returns a copy of this {@link LocalTime} with the specified period in minutes subtracted.\n     *\n     * This subtracts the specified number of minutes from this time, returning a new time.\n     * The calculation wraps around midnight.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} minutesToSubtract - the minutes to subtract, may be negative\n     * @return {LocalTime} a {@link LocalTime} based on this time with the minutes subtracted, not null\n     */\n    minusMinutes(minutesToSubtract) {\n        return this.plusMinutes(-1 * MathUtil.intMod(minutesToSubtract, LocalTime.MINUTES_PER_DAY));\n    }\n\n    /**\n     * Returns a copy of this {@link LocalTime} with the specified period in seconds subtracted.\n     *\n     * This subtracts the specified number of seconds from this time, returning a new time.\n     * The calculation wraps around midnight.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} secondsToSubtract - the seconds to subtract, may be negative\n     * @return {LocalTime} a {@link LocalTime} based on this time with the seconds subtracted, not null\n     */\n    minusSeconds(secondsToSubtract) {\n        return this.plusSeconds(-1 * MathUtil.intMod(secondsToSubtract, LocalTime.SECONDS_PER_DAY));\n    }\n\n    /**\n     * Returns a copy of this {@link LocalTime} with the specified period in nanoseconds subtracted.\n     *\n     * This subtracts the specified number of nanoseconds from this time, returning a new time.\n     * The calculation wraps around midnight.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} nanosToSubtract - the nanos to subtract, may be negative\n     * @return {LocalTime} a {@link LocalTime} based on this time with the nanoseconds subtracted, not null\n     */\n    minusNanos(nanosToSubtract) {\n        return this.plusNanos(-1 * MathUtil.intMod(nanosToSubtract, LocalTime.NANOS_PER_DAY));\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Queries this time using the specified query.\n     *\n     * This queries this time using the specified query strategy object.\n     * The {@link TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom} method on the\n     * specified query passing this as the argument.\n     *\n     * @param {TemporalQuery} query - the query to invoke, not null\n     * @return {*} the query result, null may be returned (defined by the query)\n     * @throws {DateTimeException} if unable to query (defined by the query)\n     * @throws {ArithmeticException} if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        requireNonNull(query, 'query');\n        if (query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        } else if (query === TemporalQueries.localTime()) {\n            return this;\n        }\n        // inline TemporalAccessor.super.query(query) as an optimization\n        if (query === TemporalQueries.chronology() || query === TemporalQueries.zoneId() ||\n                query === TemporalQueries.zone() || query === TemporalQueries.offset() ||\n                query === TemporalQueries.localDate()) {\n            return null;\n        }\n        return query.queryFrom(this);\n    }\n\n    /**\n     * Adjusts the specified temporal object to have the same time as this object.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with the time changed to be the same as this.\n     *\n     * The adjustment is equivalent to using {@link Temporal.with}\n     * passing {@link ChronoField.NANO_OF_DAY} as the field.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal.with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisLocalTime.adjustInto(temporal);\n     *   temporal = temporal.with(thisLocalTime);\n     * </pre>\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalAdjuster} temporal - the target object to be adjusted, not null\n     * @return {Temporal} the adjusted object, not null\n     * @throws {DateTimeException} if unable to make the adjustment\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    adjustInto(temporal) {\n        return temporal.with(LocalTime.NANO_OF_DAY, this.toNanoOfDay());\n    }\n\n    /**\n     * Calculates the period between this time and another time in\n     * terms of the specified unit.\n     *\n     * This calculates the period between two times in terms of a single unit.\n     * The start and end points are this and the specified time.\n     * The result will be negative if the end is before the start.\n     * The {@link Temporal} passed to this method must be a {@link LocalTime}.\n     * For example, the period in hours between two times can be calculated\n     * using {@link startTime.until}.\n     *\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two times.\n     * For example, the period in hours between 11:30 and 13:29 will only\n     * be one hour as it is one minute short of two hours.\n     *\n     * This method operates in association with {@link TemporalUnit.between}.\n     * The result of this method is a `long` representing the amount of\n     * the specified unit. By contrast, the result of {@link between} is an\n     * object that can be used directly in addition/subtraction:\n     * <pre>\n     *   long period = start.until(end, HOURS);   // this method\n     *   dateTime.plus(HOURS.between(start, end));      // use in plus/minus\n     * </pre>\n     *\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@link ChronoUnit.NANOS}, {@link ChronoUnit.MICROS}, {@link ChronoUnit.MILLIS}, {@link ChronoUnit.SECONDS},\n     * {@link ChronoUnit.MINUTES}, {@link ChronoUnit.HOURS} and {@link ChronoUnit.HALF_DAYS} are supported.\n     * Other {@link ChronoUnit} values will throw an exception.\n     *\n     * If the unit is not a {@link ChronoUnit}, then the result of this method\n     * is obtained by invoking {@link TemporalUnit.between}\n     * passing this as the first argument and the input temporal as\n     * the second argument.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalAccessor} endExclusive - the end time, which is converted to a {@link LocalTime}, not null\n     * @param {TemporalUnit} unit - the unit to measure the period in, not null\n     * @return {number} the amount of the period between this time and the end time\n     * @throws {DateTimeException} if the period cannot be calculated\n     * @throws {ArithmeticException} if numeric overflow occurs\n     */\n    until(endExclusive, unit) {\n        requireNonNull(endExclusive, 'endExclusive');\n        requireNonNull(unit, 'unit');\n        const end = LocalTime.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            const nanosUntil = end.toNanoOfDay() - this.toNanoOfDay();  // no overflow\n            switch (unit) {\n                case ChronoUnit.NANOS: return nanosUntil;\n                case ChronoUnit.MICROS: return MathUtil.intDiv(nanosUntil, 1000);\n                case ChronoUnit.MILLIS: return MathUtil.intDiv(nanosUntil, 1000000);\n                case ChronoUnit.SECONDS: return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_SECOND);\n                case ChronoUnit.MINUTES: return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_MINUTE);\n                case ChronoUnit.HOURS: return MathUtil.intDiv(nanosUntil, LocalTime.NANOS_PER_HOUR);\n                case ChronoUnit.HALF_DAYS: return MathUtil.intDiv(nanosUntil, (12 * LocalTime.NANOS_PER_HOUR));\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.between(this, end);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Combines this time with a date to create a {@link LocalDateTime}.\n     *\n     * This returns a {@link LocalDateTime} formed from this time at the specified date.\n     * All possible combinations of date and time are valid.\n     *\n     * @param {LocalDate} date - the date to combine with, not null\n     * @return {LocalDateTime} the local date-time formed from this time and the specified date, not null\n     */\n    atDate(date) {\n        return LocalDateTime.of(date, this);\n    }\n\n    /**\n     * Combines this time with an offset to create an {@link OffsetTime}.\n     *\n     * This returns an {@link OffsetTime} formed from this time at the specified offset.\n     * All possible combinations of time and offset are valid.\n     *\n     * @param {OffsetTime} offset - the offset to combine with, not null\n     * @return {OffsetTime} the offset time formed from this time and the specified offset, not null\n     */\n    atOffset(offset) {\n        return OffsetTime.of(this, offset);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Extracts the time as seconds of day, from `0` to `24 * 60 * 60 - 1`.\n     *\n     * @return {number} the second-of-day equivalent to this time\n     */\n    toSecondOfDay() {\n        let total = this._hour * LocalTime.SECONDS_PER_HOUR;\n        total += this._minute * LocalTime.SECONDS_PER_MINUTE;\n        total += this._second;\n        return total;\n    }\n\n    /**\n     * Extracts the time as nanos of day, from `0` to `24 * 60 * 60 * 1,000,000,000 - 1`.\n     *\n     * @return {number} the nano of day equivalent to this time\n     */\n    toNanoOfDay() {\n        let total = this._hour * LocalTime.NANOS_PER_HOUR;\n        total += this._minute * LocalTime.NANOS_PER_MINUTE;\n        total += this._second * LocalTime.NANOS_PER_SECOND;\n        total += this._nano;\n        return total;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares this {@link LocalTime} to another time.\n     *\n     * The comparison is based on the time-line position of the local times within a day.\n     * It is 'consistent with equals', as defined by {@link Comparable}.\n     *\n     * @param {LocalTime} other - the other time to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     * @throws {NullPointerException} if `other` is null\n     */\n    compareTo(other) {\n        requireNonNull(other, 'other');\n        requireInstance(other, LocalTime, 'other');\n        let cmp = MathUtil.compareNumbers(this._hour, other._hour);\n        if (cmp === 0) {\n            cmp = MathUtil.compareNumbers(this._minute, other._minute);\n            if (cmp === 0) {\n                cmp = MathUtil.compareNumbers(this._second, other._second);\n                if (cmp === 0) {\n                    cmp = MathUtil.compareNumbers(this._nano, other._nano);\n                }\n            }\n        }\n        return cmp;\n    }\n\n    /**\n     * Checks if this {@link LocalTime} is after the specified time.\n     *\n     * The comparison is based on the time-line position of the time within a day.\n     *\n     * @param {LocalTime} other - the other time to compare to, not null\n     * @return {boolean} true if this is after the specified time\n     * @throws {NullPointerException} if `other` is null\n     */\n    isAfter(other) {\n        return this.compareTo(other) > 0;\n    }\n\n    /**\n     * Checks if this {@link LocalTime} is before the specified time.\n     *\n     * The comparison is based on the time-line position of the time within a day.\n     *\n     * @param {LocalTime} other - the other time to compare to, not null\n     * @return {boolean} true if this point is before the specified time\n     * @throws {NullPointerException} if `other` is null\n     */\n    isBefore(other) {\n        return this.compareTo(other) < 0;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this time is equal to another time.\n     *\n     * The comparison is based on the time-line position of the time within a day.\n     *\n     * Only objects of type {@link LocalTime} are compared, other types return false.\n     * To compare the date of two {@link TemporalAccessor} instances, use\n     * {@link ChronoField#NANO_OF_DAY} as a comparator.\n     *\n     * @param {*} other - the object to check, null returns false\n     * @return {boolean} true if this is equal to the other time\n     */\n    equals(other) {\n        if (this === other) {\n            return true;\n        }\n        if (other instanceof LocalTime) {\n            return this._hour === other._hour && this._minute === other._minute &&\n                this._second === other._second && this._nano === other._nano;\n        }\n        return false;\n    }\n\n    /**\n     * A hash code for this time.\n     *\n     * @return {number} a suitable hash code\n     */\n    hashCode() {\n        const nod = this.toNanoOfDay();\n        return MathUtil.hash(nod);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Outputs this time as a string, such as `10:15`.\n     *\n     * The output will be one of the following ISO-8601 formats:\n     *\n     * * {@link HH:mm}\n     * * {@link HH:mm:ss}\n     * * {@link HH:mm:ss.SSS}\n     * * {@link HH:mm:ss.SSSSSS}\n     * * {@link HH:mm:ss.SSSSSSSSS}\n     *\n     * The format used will be the shortest that outputs the full value of\n     * the time where the omitted parts are implied to be zero.\n     *\n     * @return {string} a string representation of this time, not null\n     */\n    toString() {\n        let buf = '';\n        const hourValue = this._hour;\n        const minuteValue = this._minute;\n        const secondValue = this._second;\n        const nanoValue = this._nano;\n        buf += hourValue < 10 ? '0' : '';\n        buf += hourValue;\n        buf += minuteValue < 10 ? ':0' : ':';\n        buf += minuteValue;\n        if (secondValue > 0 || nanoValue > 0) {\n            buf += secondValue < 10 ? ':0' : ':';\n            buf += secondValue;\n            if (nanoValue > 0) {\n                buf += '.';\n                if(MathUtil.intMod(nanoValue, 1000000) === 0) {\n                    buf += (`${MathUtil.intDiv(nanoValue, 1000000) + 1000}`).substring(1);\n                } else if (MathUtil.intMod(nanoValue, 1000) === 0) {\n                    buf += (`${MathUtil.intDiv(nanoValue, 1000) + 1000000}`).substring(1);\n                } else {\n                    buf += (`${nanoValue + 1000000000}`).substring(1);\n                }\n            }\n        }\n        return buf;\n    }\n\n    /**\n     *\n     * @return {string} same as {@link LocalTime.toString}\n     */\n    toJSON() {\n        return this.toString();\n    }\n\n    /**\n     * Outputs this time as a string using the formatter.\n     *\n     * @param {DateTimeFormatter} formatter - the formatter to use, not null\n     * @return {string} the formatted time string, not null\n     * @throws {DateTimeException} if an error occurs during printing\n     */\n    format(formatter) {\n        requireNonNull(formatter, 'formatter');\n        return formatter.format(this);\n    }\n}\n\nexport function _init() {\n    /**\n     * Constants for the local time of each hour.\n     */\n    LocalTime.HOURS = [];\n    for (let hour = 0; hour < 24; hour++) {\n        LocalTime.of(hour, 0, 0, 0);\n    }\n\n    /**\n     * The minimum supported {@link LocalTime}, '00:00'.\n     * This is the time of midnight at the start of the day.\n     */\n    LocalTime.MIN = LocalTime.HOURS[0];\n    /**\n     * The maximum supported {@link LocalTime}, '23:59:59.999999999'.\n     * This is the time just before midnight at the end of the day.\n     */\n    LocalTime.MAX = new LocalTime(23, 59, 59, 999999999);\n    /**\n     * The time of midnight at the start of the day, '00:00'.\n     */\n    LocalTime.MIDNIGHT = LocalTime.HOURS[0];\n    /**\n     * The time of noon in the middle of the day, '12:00'.\n     */\n    LocalTime.NOON = LocalTime.HOURS[12];\n\n    LocalTime.FROM = createTemporalQuery('LocalTime.FROM', (temporal) => {\n        return LocalTime.from(temporal);\n    });\n}\n\n/**\n * Hours per day.\n */\nLocalTime.HOURS_PER_DAY = 24;\n/**\n * Minutes per hour.\n */\nLocalTime.MINUTES_PER_HOUR = 60;\n/**\n * Minutes per day.\n */\nLocalTime.MINUTES_PER_DAY = LocalTime.MINUTES_PER_HOUR * LocalTime.HOURS_PER_DAY;\n/**\n * Seconds per minute.\n */\nLocalTime.SECONDS_PER_MINUTE = 60;\n/**\n * Seconds per hour.\n */\nLocalTime.SECONDS_PER_HOUR = LocalTime.SECONDS_PER_MINUTE * LocalTime.MINUTES_PER_HOUR;\n/**\n * Seconds per day.\n */\nLocalTime.SECONDS_PER_DAY = LocalTime.SECONDS_PER_HOUR * LocalTime.HOURS_PER_DAY;\n/**\n * Milliseconds per day.\n */\nLocalTime.MILLIS_PER_DAY = LocalTime.SECONDS_PER_DAY * 1000;\n/**\n * Microseconds per day.\n */\nLocalTime.MICROS_PER_DAY = LocalTime.SECONDS_PER_DAY * 1000000;\n/**\n * Nanos per second.\n */\nLocalTime.NANOS_PER_SECOND = 1000000000;\n/**\n * Nanos per minute.\n */\nLocalTime.NANOS_PER_MINUTE = LocalTime.NANOS_PER_SECOND * LocalTime.SECONDS_PER_MINUTE;\n/**\n * Nanos per hour.\n */\nLocalTime.NANOS_PER_HOUR = LocalTime.NANOS_PER_MINUTE * LocalTime.MINUTES_PER_HOUR;\n/**\n * Nanos per day.\n */\nLocalTime.NANOS_PER_DAY = LocalTime.NANOS_PER_HOUR * LocalTime.HOURS_PER_DAY;\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull, requireInstance } from './assert';\nimport { DateTimeException, UnsupportedTemporalTypeException } from './errors';\n\nimport { Clock } from './Clock';\nimport { LocalTime } from './LocalTime';\nimport { ZonedDateTime } from './ZonedDateTime';\nimport { MathUtil } from './MathUtil';\nimport { OffsetDateTime } from './OffsetDateTime';\n\nimport { Temporal } from './temporal/Temporal';\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { TemporalUnit } from './temporal/TemporalUnit';\nimport { createTemporalQuery } from './temporal/TemporalQuery';\nimport { DateTimeFormatter } from './format/DateTimeFormatter';\n\nconst NANOS_PER_MILLI = 1000000;\n\n/**\n * An instantaneous point on the time-line.\n *\n * This class models a single instantaneous point on the time-line.\n * This might be used to record event time-stamps in the application.\n *\n * Time-scale\n *\n * The length of the solar day is the standard way that humans measure time.\n * This has traditionally been subdivided into 24 hours of 60 minutes of 60 seconds,\n * forming a 86400 second day.\n *\n * Modern timekeeping is based on atomic clocks which precisely define an SI second\n * relative to the transitions of a Caesium atom. The length of an SI second was defined\n * to be very close to the 86400th fraction of a day.\n *\n * Unfortunately, as the Earth rotates the length of the day varies.\n * In addition, over time the average length of the day is getting longer as the Earth slows.\n * As a result, the length of a solar day in 2012 is slightly longer than 86400 SI seconds.\n * The actual length of any given day and the amount by which the Earth is slowing\n * are not predictable and can only be determined by measurement.\n * The UT1 time-scale captures the accurate length of day, but is only available some\n * time after the day has completed.\n *\n * The UTC time-scale is a standard approach to bundle up all the additional fractions\n * of a second from UT1 into whole seconds, known as *leap-seconds*.\n * A leap-second may be added or removed depending on the Earth's rotational changes.\n * As such, UTC permits a day to have 86399 SI seconds or 86401 SI seconds where\n * necessary in order to keep the day aligned with the Sun.\n *\n * The modern UTC time-scale was introduced in 1972, introducing the concept of whole leap-seconds.\n * Between 1958 and 1972, the definition of UTC was complex, with minor sub-second leaps and\n * alterations to the length of the notional second. As of 2012, discussions are underway\n * to change the definition of UTC again, with the potential to remove leap seconds or\n * introduce other changes.\n *\n * Given the complexity of accurate timekeeping described above, this Java API defines\n * its own time-scale, the *Java Time-Scale*.\n *\n * The Java Time-Scale divides each calendar day into exactly 86400\n * subdivisions, known as seconds.  These seconds may differ from the\n * SI second.  It closely matches the de facto international civil time\n * scale, the definition of which changes from time to time.\n *\n * The Java Time-Scale has slightly different definitions for different\n * segments of the time-line, each based on the consensus international\n * time scale that is used as the basis for civil time. Whenever the\n * internationally-agreed time scale is modified or replaced, a new\n * segment of the Java Time-Scale must be defined for it.  Each segment\n * must meet these requirements:\n *\n * * the Java Time-Scale shall closely match the underlying international\n *   civil time scale;\n * * the Java Time-Scale shall exactly match the international civil\n *   time scale at noon each day;\n * * the Java Time-Scale shall have a precisely-defined relationship to\n *   the international civil time scale.\n *\n * There are currently, as of 2013, two segments in the Java time-scale.\n *\n * For the segment from 1972-11-03 (exact boundary discussed below) until\n * further notice, the consensus international time scale is UTC (with\n * leap seconds).  In this segment, the Java Time-Scale is identical to\n * [UTC-SLS](http://www.cl.cam.ac.uk/~mgk25/time/utc-sls/).\n * This is identical to UTC on days that do not have a leap second.\n * On days that do have a leap second, the leap second is spread equally\n * over the last 1000 seconds of the day, maintaining the appearance of\n * exactly 86400 seconds per day.\n *\n * For the segment prior to 1972-11-03, extending back arbitrarily far,\n * the consensus international time scale is defined to be UT1, applied\n * proleptically, which is equivalent to the (mean) solar time on the\n * prime meridian (Greenwich). In this segment, the Java Time-Scale is\n * identical to the consensus international time scale. The exact\n * boundary between the two segments is the instant where UT1 = UTC\n * between 1972-11-03T00:00 and 1972-11-04T12:00.\n *\n * Implementations of the Java time-scale using the JSR-310 API are not\n * required to provide any clock that is sub-second accurate, or that\n * progresses monotonically or smoothly. Implementations are therefore\n * not required to actually perform the UTC-SLS slew or to otherwise be\n * aware of leap seconds. JSR-310 does, however, require that\n * implementations must document the approach they use when defining a\n * clock representing the current instant.\n * See {@link Clock} for details on the available clocks.\n *\n * The Java time-scale is used for all date-time classes.\n * This includes {@link Instant}, {@link LocalDate}, {@link LocalTime}, {@link OffsetDateTime},\n * {@link ZonedDateTime} and {@link Duration}.\n *\n * ### Static properties of Class {@link Instant}\n *\n * Instant.EPOCH\n *\n * Instant.MIN\n *\n * Instant.MAX\n *\n * Instant.MIN_SECONDS\n *\n * Instant.MAX_SECONDS\n *\n */\nexport class Instant extends Temporal {\n\n    /**\n     * Obtains the current instant from the system clock, or if specified\n     * the current instant from the specified clock.\n     *\n     * This will query the specified clock to obtain the current time.\n     *\n     * @param {Clock} [clock=Clock.systemUTC()] - the clock to use, defaults to the system clock\n     * @return {Instant} the current instant, not null\n     */\n    static now(clock = Clock.systemUTC()){\n        return clock.instant();\n    }\n\n    /**\n     * Obtains an instance of {@link Instant} using seconds from the\n     * epoch of 1970-01-01T00:00:00Z.\n     *\n     * @param {number} epochSecond - the number of seconds from 1970-01-01T00:00:00Z\n     * @param {number} nanoAdjustment nanoseconds start from the start of epochSecond, if null the nanosecond field is set to zero.\n     * @return {Instant} an instant, not null\n     * @throws DateTimeException if the instant exceeds the maximum or minimum instant\n     */\n    static ofEpochSecond(epochSecond, nanoAdjustment=0){\n        const secs = epochSecond + MathUtil.floorDiv(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        const nos = MathUtil.floorMod(nanoAdjustment, LocalTime.NANOS_PER_SECOND);\n        return Instant._create(secs, nos);\n    }\n\n    /**\n     * Obtains an instance of {@link Instant} using milliseconds from the\n     * epoch of 1970-01-01T00:00:00Z.\n     *\n     * The seconds and nanoseconds are extracted from the specified milliseconds.\n     *\n     * @param {number} epochMilli - the number of milliseconds from 1970-01-01T00:00:00Z\n     * @return {Instant} an instant, not null\n     * @throws DateTimeException if the instant exceeds the maximum or minimum instant\n     */\n    static ofEpochMilli(epochMilli) {\n        const secs = MathUtil.floorDiv(epochMilli, 1000);\n        const mos = MathUtil.floorMod(epochMilli, 1000);\n        return Instant._create(secs, mos * 1000000);\n    }\n\n    /**\n     * Obtains an instance of {@link Instant} using microseconds from the\n     * epoch of 1970-01-01T00:00:00Z.\n     *\n     * @param {number} epochMicro - the number of microseconds from 1970-01-01T00:00:00Z\n     * @return {Instant} an instant, not null\n     * @throws DateTimeException if the instant exceeds the maximum or minimum instant\n     */\n    static ofEpochMicro(epochMicro) {\n        const secs = MathUtil.floorDiv(epochMicro, 1000000);\n        const mos = MathUtil.floorMod(epochMicro, 1000000);\n        return Instant._create(secs, mos * 1000);\n    }\n\n    /**\n     * Obtains an instance of {@link Instant} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link Instant}.\n     *\n     * The conversion extracts the {@link ChronoField#INSTANT_SECONDS}\n     * and {@link ChronoField#NANO_OF_SECOND} fields.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used as a query via method reference, {@link Instant::from}.\n     *\n     * @param {TemporalAccessor} temporal - the temporal object to convert, not null\n     * @return {Instant} the instant, not null\n     * @throws DateTimeException if unable to convert to an {@link Instant}\n     */\n    static from(temporal) {\n        try {\n            const instantSecs = temporal.getLong(ChronoField.INSTANT_SECONDS);\n            const nanoOfSecond = temporal.get(ChronoField.NANO_OF_SECOND);\n            return Instant.ofEpochSecond(instantSecs, nanoOfSecond);\n        } catch (ex) {\n            throw new DateTimeException(`Unable to obtain Instant from TemporalAccessor: ${ \n                temporal}, type ${typeof temporal}`, ex);\n        }\n    }\n\n    /**\n     * Obtains an instance of {@link Instant} from a text string such as\n     * `2007-12-03T10:15:30.000Z`.\n     *\n     * The string must represent a valid instant in UTC and is parsed using\n     * {@link DateTimeFormatter#ISO_INSTANT}.\n     *\n     * @param {string} text - the text to parse, not null\n     * @return {Instant} the parsed instant, not null\n     * @throws DateTimeParseException if the text cannot be parsed\n     */\n    static parse(text) {\n        return DateTimeFormatter.ISO_INSTANT.parse(text, Instant.FROM);\n    }\n\n    /**\n     *\n     * @param {number} seconds\n     * @param {number} nanoOfSecond\n     * @returns {Instant}\n     * @private\n     */\n    static _create(seconds, nanoOfSecond){\n        if(seconds === 0 && nanoOfSecond === 0){\n            return Instant.EPOCH;\n        }\n        return new Instant(seconds, nanoOfSecond);\n    }\n\n    /**\n     *\n     * @param {number} seconds\n     * @param {number} nanoOfSecond\n     * @private\n     */\n    static _validate(seconds, nanoOfSecond){\n        if (seconds < Instant.MIN_SECONDS || seconds > Instant.MAX_SECONDS) {\n            throw new DateTimeException('Instant exceeds minimum or maximum instant');\n        }\n        if (nanoOfSecond < 0 || nanoOfSecond > LocalTime.NANOS_PER_SECOND) {\n            throw new DateTimeException('Instant exceeds minimum or maximum instant');\n        }\n    }\n\n    /**\n     *\n     * @param {number} seconds\n     * @param {number} nanoOfSecond\n     * @private\n     */\n    constructor(seconds, nanoOfSecond){\n        super();\n        Instant._validate(seconds, nanoOfSecond);\n        this._seconds = MathUtil.safeToInt(seconds);\n        this._nanos = MathUtil.safeToInt(nanoOfSecond);\n    }\n\n    /**\n     * Checks if the specified field is supported.\n     *\n     * This checks if this instant can be queried for the specified field.\n     * If false, then calling {@link range} and {@link get} will throw an exception.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields are:\n     *\n     * * {@link NANO_OF_SECOND}\n     * * {@link MICRO_OF_SECOND}\n     * * {@link MILLI_OF_SECOND}\n     * * {@link INSTANT_SECONDS}\n     *\n     * All other {@link ChronoField} instances will return false.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.isSupportedBy}\n     * passing `this` as the argument.\n     * Whether the field is supported is determined by the field.\n     *\n     * @param {TemporalField|TemporalUnit} fieldOrUnit - the field to check, null returns false\n     * @return {boolean} true if the field is supported on this instant, false if not\n     */\n    isSupported(fieldOrUnit) {\n        if (fieldOrUnit instanceof ChronoField) {\n            return fieldOrUnit === ChronoField.INSTANT_SECONDS || fieldOrUnit === ChronoField.NANO_OF_SECOND || fieldOrUnit === ChronoField.MICRO_OF_SECOND || fieldOrUnit === ChronoField.MILLI_OF_SECOND;\n        }\n        if (fieldOrUnit instanceof ChronoUnit) {\n            return fieldOrUnit.isTimeBased() || fieldOrUnit === ChronoUnit.DAYS;\n        }\n        return fieldOrUnit != null && fieldOrUnit.isSupportedBy(this);\n    }\n\n    /**\n     * Gets the range of valid values for the specified field.\n     *\n     * The range object expresses the minimum and maximum valid values for a field.\n     * This instant is used to enhance the accuracy of the returned range.\n     * If it is not possible to return the range, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return\n     * appropriate range instances.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.rangeRefinedBy}\n     * passing `this` as the argument.\n     * Whether the range can be obtained is determined by the field.\n     *\n     * @param {TemporalField} field - the field to query the range for, not null\n     * @return {ValueRange} the range of valid values for the field, not null\n     * @throws DateTimeException if the range for the field cannot be obtained\n     */\n    range(field) {\n        return super.range(field);\n    }\n\n    /**\n     * Gets the value of the specified field from this instant as an `int`.\n     *\n     * This queries this instant for the value for the specified field.\n     * The returned value will always be within the valid range of values for the field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this date-time, except {@link INSTANT_SECONDS} which is too\n     * large to fit in an `int` and throws a {@link DateTimeException}.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field - the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    get(field) {\n        return this.getLong(field);\n    }\n\n    /**\n     * Gets the value of the specified field from this instant as a `long`.\n     *\n     * This queries this instant for the value for the specified field.\n     * If it is not possible to return the value, because the field is not supported\n     * or for some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the query is implemented here.\n     * The supported fields (see {@link isSupported}) will return valid\n     * values based on this date-time.\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.getFrom}\n     * passing `this` as the argument. Whether the value can be obtained,\n     * and what the value represents, is determined by the field.\n     *\n     * @param {TemporalField} field - the field to get, not null\n     * @return {number} the value for the field\n     * @throws DateTimeException if a value for the field cannot be obtained\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    getLong(field) {\n        if (field instanceof ChronoField) {\n            switch (field) {\n                case ChronoField.NANO_OF_SECOND: return this._nanos;\n                case ChronoField.MICRO_OF_SECOND: return MathUtil.intDiv(this._nanos, 1000);\n                case ChronoField.MILLI_OF_SECOND: return MathUtil.intDiv(this._nanos, NANOS_PER_MILLI);\n                case ChronoField.INSTANT_SECONDS: return this._seconds;\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.getFrom(this);\n    }\n\n    /**\n     * Gets the number of seconds from the Java epoch of 1970-01-01T00:00:00Z.\n     *\n     * The epoch second count is a simple incrementing count of seconds where\n     * second 0 is 1970-01-01T00:00:00Z.\n     * The nanosecond part of the day is returned by {@link getNanosOfSecond}.\n     *\n     * @return {number} the seconds from the epoch of 1970-01-01T00:00:00Z\n     */\n    epochSecond(){\n        return this._seconds;\n    }\n\n    /**\n     * Gets the number of nanoseconds, later along the time-line, from the start\n     * of the second.\n     *\n     * The nanosecond-of-second value measures the total number of nanoseconds from\n     * the second returned by {@link getEpochSecond}.\n     *\n     * @return {number} the nanoseconds within the second, always positive, never exceeds 999,999,999\n     */\n    nano(){\n        return this._nanos;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this instant with the specified field set to a new value.\n     *\n     * This returns a new {@link Instant}, based on this one, with the value\n     * for the specified field changed.\n     * If it is not possible to set the value, because the field is not supported or for\n     * some other reason, an exception is thrown.\n     *\n     * If the field is a {@link ChronoField} then the adjustment is implemented here.\n     * The supported fields behave as follows:\n     *\n     * * {@link NANO_OF_SECOND} -\n     *  Returns an {@link Instant} with the specified nano-of-second.\n     *  The epoch-second will be unchanged.\n     * * {@link MICRO_OF_SECOND} -\n     *  Returns an {@link Instant} with the nano-of-second replaced by the specified\n     *  micro-of-second multiplied by 1,000. The epoch-second will be unchanged.\n     * * {@link MILLI_OF_SECOND} -\n     *  Returns an {@link Instant} with the nano-of-second replaced by the specified\n     *  milli-of-second multiplied by 1,000,000. The epoch-second will be unchanged.\n     * * {@link INSTANT_SECONDS} -\n     *  Returns an {@link Instant} with the specified epoch-second.\n     *  The nano-of-second will be unchanged.\n     *\n     *\n     * In all cases, if the new value is outside the valid range of values for the field\n     * then a {@link DateTimeException} will be thrown.\n     *\n     * All other {@link ChronoField} instances will throw a {@link DateTimeException}.\n     *\n     * If the field is not a {@link ChronoField}, then the result of this method\n     * is obtained by invoking {@link TemporalField.adjustInto}\n     * passing `this` as the argument. In this case, the field determines\n     * whether and how to adjust the instant.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {TemporalField} field - the field to set in the result, not null\n     * @param {number} newValue - the new value of the field in the result\n     * @return {Instant} an {@link Instant} based on `this` with the specified field set, not null\n     * @throws DateTimeException if the field cannot be set\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    _withField(field, newValue) {\n        requireNonNull(field, 'field');\n        if (field instanceof ChronoField) {\n            field.checkValidValue(newValue);\n            switch (field) {\n                case ChronoField.MILLI_OF_SECOND: {\n                    const nval = newValue * NANOS_PER_MILLI;\n                    return (nval !== this._nanos? Instant._create(this._seconds, nval) : this);\n                }\n                case ChronoField.MICRO_OF_SECOND: {\n                    const nval = newValue * 1000;\n                    return (nval !== this._nanos? Instant._create(this._seconds, nval) : this);\n                }\n                case ChronoField.NANO_OF_SECOND: return (newValue !== this._nanos? Instant._create(this._seconds, newValue) : this);\n                case ChronoField.INSTANT_SECONDS: return (newValue !== this._seconds ? Instant._create(newValue, this._nanos) : this);\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported field: ${field}`);\n        }\n        return field.adjustInto(this, newValue);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a copy of this {@link Instant} truncated to the specified unit.\n     *\n     * Truncating the instant returns a copy of the original with fields\n     * smaller than the specified unit set to zero.\n     * The fields are calculated on the basis of using a UTC offset as seen\n     * in {@link toString}.\n     * For example, truncating with {@link ChronoUnit#MINUTES} will\n     * round down to the nearest minute, setting the seconds and nanoseconds to zero.\n     *\n     * The unit must have a duration (see {@link TemporalUnit#getDuration})\n     * that divides into the length of a standard day without remainder.\n     * This includes all supplied time units on {@link ChronoUnit} and\n     * {@link ChronoUnit#DAYS}. Other units throw an exception.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {!TemporalUnit} unit - the unit to truncate to, not null\n     * @return {Instant} an {@link Instant} based on this instant with the time truncated, not null\n     * @throws DateTimeException if the unit is invalid for truncation\n     */\n    truncatedTo(unit) {\n        requireNonNull(unit, 'unit');\n        if (unit === ChronoUnit.NANOS) {\n            return this;\n        }\n        const unitDur = unit.duration();\n        if (unitDur.seconds() > LocalTime.SECONDS_PER_DAY) {\n            throw new DateTimeException('Unit is too large to be used for truncation');\n        }\n        const dur = unitDur.toNanos();\n        if (MathUtil.intMod(LocalTime.NANOS_PER_DAY, dur) !== 0) {\n            throw new DateTimeException('Unit must divide into a standard day without remainder');\n        }\n        const nod = MathUtil.intMod(this._seconds, LocalTime.SECONDS_PER_DAY) * LocalTime.NANOS_PER_SECOND + this._nanos;\n        const result = MathUtil.intDiv(nod, dur) * dur;\n        return this.plusNanos(result - nod);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * @param {!number} amountToAdd\n     * @param {!TemporalUnit} unit\n     * @return {Instant}\n     * @throws DateTimeException\n     * @throws ArithmeticException\n     */\n    _plusUnit(amountToAdd, unit) {\n        requireNonNull(amountToAdd, 'amountToAdd');\n        requireNonNull(unit, 'unit');\n        requireInstance(unit, TemporalUnit);\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.NANOS: return this.plusNanos(amountToAdd);\n                case ChronoUnit.MICROS: return this.plusMicros(amountToAdd);\n                case ChronoUnit.MILLIS: return this.plusMillis(amountToAdd);\n                case ChronoUnit.SECONDS: return this.plusSeconds(amountToAdd);\n                case ChronoUnit.MINUTES: return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_MINUTE));\n                case ChronoUnit.HOURS: return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_HOUR));\n                case ChronoUnit.HALF_DAYS: return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY / 2));\n                case ChronoUnit.DAYS: return this.plusSeconds(MathUtil.safeMultiply(amountToAdd, LocalTime.SECONDS_PER_DAY));\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.addTo(this, amountToAdd);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in seconds added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} secondsToAdd  the seconds to add, positive or negative\n     * @return {Instant} an {@link Instant} based on this instant with the specified seconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    plusSeconds(secondsToAdd) {\n        return this._plus(secondsToAdd, 0);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in milliseconds added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} millisToAdd - the milliseconds to add, positive or negative\n     * @return {Instant} an {@link Instant} based on this instant with the specified milliseconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    plusMillis(millisToAdd) {\n        return this._plus(MathUtil.intDiv(millisToAdd, 1000), MathUtil.intMod(millisToAdd, 1000) * NANOS_PER_MILLI);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in nanoseconds added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} nanosToAdd - the nanoseconds to add, positive or negative\n     * @return {Instant} an {@link Instant} based on this instant with the specified nanoseconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    plusNanos(nanosToAdd) {\n        return this._plus(0, nanosToAdd);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in microseconds added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} microsToAdd - the microseconds to add, positive or negative\n     * @return {Instant} an {@link Instant} based on this instant with the specified microseconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    plusMicros(microsToAdd) {\n        return this._plus(MathUtil.intDiv(microsToAdd, 1000000), MathUtil.intMod(microsToAdd, 1000000) * 1000);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration added.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} secondsToAdd - the seconds to add, positive or negative\n     * @param {number} nanosToAdd - the nanos to add, positive or negative\n     * @return {Instant} an {@link Instant} based on this instant with the specified seconds added, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    _plus(secondsToAdd, nanosToAdd) {\n        if (secondsToAdd === 0 && nanosToAdd === 0) {\n            return this;\n        }\n        let epochSec = this._seconds + secondsToAdd;\n        epochSec = epochSec + MathUtil.intDiv(nanosToAdd, LocalTime.NANOS_PER_SECOND);\n        const nanoAdjustment = this._nanos + nanosToAdd % LocalTime.NANOS_PER_SECOND;\n        return Instant.ofEpochSecond(epochSec, nanoAdjustment);\n    }\n\n    //-----------------------------------------------------------------------\n\n    /**\n     * @param {!number} amountToSubtract\n     * @param {!TemporalUnit} unit\n     * @return {Instant}\n     * @throws DateTimeException\n     * @throws ArithmeticException\n     */\n    _minusUnit(amountToSubtract, unit) {\n        return this._plusUnit(-1 * amountToSubtract, unit);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in seconds subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} secondsToSubtract - the seconds to subtract, positive or negative\n     * @return {Instant} an {@link Instant} based on this instant with the specified seconds subtracted, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     */\n    minusSeconds(secondsToSubtract) {\n        return this.plusSeconds(secondsToSubtract * -1);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in milliseconds subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} millisToSubtract - the milliseconds to subtract, positive or negative\n     * @return {Instant} an {@link Instant} based on this instant with the specified milliseconds subtracted, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusMillis(millisToSubtract) {\n        return this.plusMillis(-1 * millisToSubtract);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in nanoseconds subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} nanosToSubtract  the nanoseconds to subtract, positive or negative\n     * @return {Instant} an {@link Instant} based on this instant with the specified nanoseconds subtracted, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusNanos(nanosToSubtract) {\n        return this.plusNanos(-1 * nanosToSubtract);\n    }\n\n    /**\n     * Returns a copy of this instant with the specified duration in microseconds subtracted.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {number} microsToSubtract  the microseconds to subtract, positive or negative\n     * @return {Instant} an {@link Instant} based on this instant with the specified microseconds subtracted, not null\n     * @throws DateTimeException if the result exceeds the maximum or minimum instant\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    minusMicros(microsToSubtract) {\n        return this.plusMicros(-1 * microsToSubtract);\n    }\n\n    //-------------------------------------------------------------------------\n    /**\n     * Queries this instant using the specified query.\n     *\n     * This queries this instant using the specified query strategy object.\n     * The {@link TemporalQuery} object defines the logic to be used to\n     * obtain the result. Read the documentation of the query to understand\n     * what the result of this method will be.\n     *\n     * The result of this method is obtained by invoking the\n     * {@link TemporalQuery#queryFrom} method on the\n     * specified query passing `this` as the argument.\n     *\n     * @param {!TemporalQuery} query - the query to invoke, not null\n     * @return {*} the query result, null may be returned (defined by the query)\n     * @throws DateTimeException if unable to query (defined by the query)\n     * @throws ArithmeticException if numeric overflow occurs (defined by the query)\n     */\n    query(query) {\n        requireNonNull(query, 'query');\n        if (query === TemporalQueries.precision()) {\n            return ChronoUnit.NANOS;\n        }\n        // inline TemporalAccessor.super.query(query) as an optimization\n        if (query === TemporalQueries.localDate() || query === TemporalQueries.localTime() ||\n                query === TemporalQueries.chronology() || query === TemporalQueries.zoneId() ||\n                query === TemporalQueries.zone() || query === TemporalQueries.offset()) {\n            return null;\n        }\n        return query.queryFrom(this);\n    }\n\n    /**\n     * Adjusts the specified temporal object to have this instant.\n     *\n     * This returns a temporal object of the same observable type as the input\n     * with the instant changed to be the same as this.\n     *\n     * The adjustment is equivalent to using {@link Temporal#with}\n     * twice, passing {@link ChronoField#INSTANT_SECONDS} and\n     * {@link ChronoField#NANO_OF_SECOND} as the fields.\n     *\n     * In most cases, it is clearer to reverse the calling pattern by using\n     * {@link Temporal#with}:\n     * <pre>\n     *   // these two lines are equivalent, but the second approach is recommended\n     *   temporal = thisInstant.adjustInto(temporal);\n     *   temporal = temporal.with(thisInstant);\n     * </pre>\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {!Temporal} temporal - the target object to be adjusted, not null\n     * @return {Temporal} the adjusted object, not null\n     * @throws DateTimeException if unable to make the adjustment\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    adjustInto(temporal) {\n        requireNonNull(temporal, 'temporal');\n        return temporal.with(ChronoField.INSTANT_SECONDS, this._seconds).with(ChronoField.NANO_OF_SECOND, this._nanos);\n    }\n\n    /**\n     * Calculates the period between this instant and another instant in\n     * terms of the specified unit.\n     *\n     * This calculates the period between two instants in terms of a single unit.\n     * The start and end points are `this` and the specified instant.\n     * The result will be negative if the end is before the start.\n     * The calculation returns a whole number, representing the number of\n     * complete units between the two instants.\n     * The {@link Temporal} passed to this method is converted to a\n     * {@link Instant} using {@link from}.\n     * For example, the period in days between two dates can be calculated\n     * using `startInstant.until(endInstant, SECONDS)`.\n     *\n     * This method operates in association with {@link TemporalUnit#between}.\n     * The result of this method is a `long` representing the amount of\n     * the specified unit. By contrast, the result of {@link between} is an\n     * object that can be used directly in addition/subtraction:\n     * <pre>\n     *   long period = start.until(end, SECONDS);   // this method\n     *   dateTime.plus(SECONDS.between(start, end));      // use in plus/minus\n     * </pre>\n     *\n     * The calculation is implemented in this method for {@link ChronoUnit}.\n     * The units {@link NANOS}, {@link MICROS}, {@link MILLIS}, {@link SECONDS},\n     * {@link MINUTES}, {@link HOURS}, {@link HALF_DAYS} and {@link DAYS}\n     * are supported. Other {@link ChronoUnit} values will throw an exception.\n     *\n     * If the unit is not a {@link ChronoUnit}, then the result of this method\n     * is obtained by invoking {@link TemporalUnit.between}\n     * passing `this` as the first argument and the input temporal as\n     * the second argument.\n     *\n     * This instance is immutable and unaffected by this method call.\n     *\n     * @param {Temporal} endExclusive - the end date, which is converted to an {@link Instant}, not null\n     * @param {TemporalUnit} unit - the unit to measure the period in, not null\n     * @return {number} the amount of the period between this date and the end date\n     * @throws DateTimeException if the period cannot be calculated\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    until(endExclusive, unit) {\n        requireNonNull(endExclusive, 'endExclusive');\n        requireNonNull(unit, 'unit');\n        const end = Instant.from(endExclusive);\n        if (unit instanceof ChronoUnit) {\n            switch (unit) {\n                case ChronoUnit.NANOS: return this._nanosUntil(end);\n                case ChronoUnit.MICROS: return this._microsUntil(end);\n                case ChronoUnit.MILLIS: return MathUtil.safeSubtract(end.toEpochMilli(), this.toEpochMilli());\n                case ChronoUnit.SECONDS: return this._secondsUntil(end);\n                case ChronoUnit.MINUTES: return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_MINUTE);\n                case ChronoUnit.HOURS: return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_HOUR);\n                case ChronoUnit.HALF_DAYS: return MathUtil.intDiv(this._secondsUntil(end), (12 * LocalTime.SECONDS_PER_HOUR));\n                case ChronoUnit.DAYS: return MathUtil.intDiv(this._secondsUntil(end), LocalTime.SECONDS_PER_DAY);\n            }\n            throw new UnsupportedTemporalTypeException(`Unsupported unit: ${unit}`);\n        }\n        return unit.between(this, end);\n    }\n\n    /**\n     *\n     * @param {Temporal} end\n     * @returns {number}\n     * @private\n     */\n    _microsUntil(end) {\n        const secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n        const totalMicros = MathUtil.safeMultiply(secsDiff, 1000000);\n        return MathUtil.safeAdd(totalMicros, MathUtil.intDiv(end.nano() - this.nano(), 1000));\n    }\n\n    /**\n     *\n     * @param {Temporal} end\n     * @returns {number}\n     * @private\n     */\n    _nanosUntil(end) {\n        const secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n        const totalNanos = MathUtil.safeMultiply(secsDiff, LocalTime.NANOS_PER_SECOND);\n        return MathUtil.safeAdd(totalNanos, end.nano() - this.nano());\n    }\n\n    /**\n     *\n     * @param {Temporal} end\n     * @returns {number}\n     * @private\n     */\n    _secondsUntil(end) {\n        let secsDiff = MathUtil.safeSubtract(end.epochSecond(), this.epochSecond());\n        const nanosDiff = end.nano() - this.nano();\n        if (secsDiff > 0 && nanosDiff < 0) {\n            secsDiff--;\n        } else if (secsDiff < 0 && nanosDiff > 0) {\n            secsDiff++;\n        }\n        return secsDiff;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Combines this instant with an offset to create an {@link OffsetDateTime}.\n     *\n     * This returns an {@link OffsetDateTime} formed from this instant at the\n     * specified offset from UTC/Greenwich. An exception will be thrown if the\n     * instant is too large to fit into an offset date-time.\n     *\n     * This method is equivalent to {@link OffsetDateTime#ofInstant}.\n     *\n     * @param {ZoneOffset} offset - the offset to combine with, not null\n     * @return {OffsetDateTime} the offset date-time formed from this instant and the specified offset, not null\n     * @throws DateTimeException if the result exceeds the supported range\n     */\n    atOffset(offset) {\n        return OffsetDateTime.ofInstant(this, offset);\n    }\n\n    /**\n     * Combines this instant with a time-zone to create a {@link ZonedDateTime}.\n     *\n     * This returns an {@link ZonedDateTime} formed from this instant at the\n     * specified time-zone. An exception will be thrown if the instant is too\n     * large to fit into a zoned date-time.\n     *\n     * This method is equivalent to {@link ZonedDateTime#ofInstant}.\n     *\n     * @param {ZoneId} zone - the zone to combine with, not null\n     * @return {ZonedDateTime} the zoned date-time formed from this instant and the specified zone, not null\n     * @throws DateTimeException if the result exceeds the supported range\n     */\n    atZone(zone) {\n        return ZonedDateTime.ofInstant(this, zone);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Converts this instant to the number of milliseconds from the epoch\n     * of 1970-01-01T00:00:00Z.\n     *\n     * If this instant represents a point on the time-line too far in the future\n     * or past to fit in a `long` milliseconds, then an exception is thrown.\n     *\n     * If this instant has greater than millisecond precision, then the conversion\n     * will drop any excess precision information as though the amount in nanoseconds\n     * was subject to integer division by one million.\n     *\n     * @return {number} the number of milliseconds since the epoch of 1970-01-01T00:00:00Z\n     * @throws ArithmeticException if numeric overflow occurs\n     */\n    toEpochMilli() {\n        const millis = MathUtil.safeMultiply(this._seconds, 1000);\n        return millis + MathUtil.intDiv(this._nanos, NANOS_PER_MILLI);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares this instant to the specified instant.\n     *\n     * The comparison is based on the time-line position of the instants.\n     * It is \"consistent with equals\", as defined by {@link Comparable}.\n     *\n     * @param {Instant} otherInstant  the other instant to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     * @throws NullPointerException if otherInstant is null\n     */\n    compareTo(otherInstant) {\n        requireNonNull(otherInstant, 'otherInstant');\n        requireInstance(otherInstant, Instant, 'otherInstant');\n        const cmp = MathUtil.compareNumbers(this._seconds, otherInstant._seconds);\n        if (cmp !== 0) {\n            return cmp;\n        }\n        return this._nanos - otherInstant._nanos;\n    }\n\n    /**\n     * Checks if this instant is after the specified instant.\n     *\n     * The comparison is based on the time-line position of the instants.\n     *\n     * @param {Instant} otherInstant  the other instant to compare to, not null\n     * @return {boolean} true if this instant is after the specified instant\n     * @throws NullPointerException if otherInstant is null\n     */\n    isAfter(otherInstant) {\n        return this.compareTo(otherInstant) > 0;\n    }\n\n    /**\n     * Checks if this instant is before the specified instant.\n     *\n     * The comparison is based on the time-line position of the instants.\n     *\n     * @param {Instant} otherInstant  the other instant to compare to, not null\n     * @return {boolean} true if this instant is before the specified instant\n     * @throws NullPointerException if otherInstant is null\n     */\n    isBefore(otherInstant) {\n        return this.compareTo(otherInstant) < 0;\n    }\n\n    /**\n     * Checks if this instant is equal to the specified instant.\n     *\n     * The comparison is based on the time-line position of the instants.\n     *\n     * @param {*} other - the other instant, null/ undefined returns false\n     * @return {boolean} true if the other instant is equal to this one\n     */\n    equals(other) {\n        if(this === other){\n            return true;\n        }\n        if(other instanceof Instant){\n            return this.epochSecond() === other.epochSecond() &&\n                this.nano() === other.nano();\n        }\n        return false;\n    }\n\n    /**\n     * Returns a hash code for this instant.\n     *\n     * @return {number} a suitable hash code\n     */\n    hashCode() {\n        return MathUtil.hashCode(this._seconds, this._nanos);\n    }\n\n    /**\n     * A string representation of this instant using ISO-8601 representation.\n     *\n     * The format used is the same as {@link DateTimeFormatter#ISO_INSTANT}.\n     *\n     * @return {string} an ISO-8601 representation of this instant, not null\n     */\n    toString(){\n        return DateTimeFormatter.ISO_INSTANT.format(this);\n    }\n\n    /**\n     *\n     * @return {string} same as {@link LocalDate.toString}\n     */\n    toJSON() {\n        return this.toString();\n    }\n}\n\nexport function _init() {\n    Instant.MIN_SECONDS = -31619119219200; // -1000000-01-01T00:00:00Z\n    Instant.MAX_SECONDS = 31494816403199; // +1000000-12-31T23:59:59.999999999Z\n    Instant.EPOCH = new Instant(0, 0);\n    Instant.MIN = Instant.ofEpochSecond(Instant.MIN_SECONDS, 0);\n    Instant.MAX = Instant.ofEpochSecond(Instant.MAX_SECONDS, 999999999);\n    Instant.FROM = createTemporalQuery('Instant.FROM', (temporal) => {\n        return Instant.from(temporal);\n    });\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { abstractMethodFail, requireNonNull } from './assert';\nimport { Instant } from './Instant';\nimport { ZoneId } from './ZoneId';\nimport { ZoneOffset } from './ZoneOffset';\n\n/**\n * A clock providing access to the current instant, date and time using a time-zone.\n *\n * Instances of this class are used to find the current instant, which can be\n * interpreted using the stored time-zone to find the current date and time.\n * As such, a clock can be used instead of {@link System#currentTimeMillis}\n * and {@link TimeZone#getDefault}.\n *\n * Use of a {@link Clock} is optional. All key date-time classes also have a\n * `now()` factory method that uses the system clock in the default time zone.\n * The primary purpose of this abstraction is to allow alternate clocks to be\n * plugged in as and when required. Applications use an object to obtain the\n * current time rather than a static method. This can simplify testing.\n *\n * Best practice for applications is to pass a {@link Clock} into any method\n * that requires the current instant.\n *\n * This approach allows an alternate clock, such as {@link fixed}\n * or {@link offset} to be used during testing.\n *\n * The {@link system} factory methods provide clocks based on the best available\n * system clock This may use {@link System#currentTimeMillis}, or a higher\n * resolution clock if one is available.\n *\n * The javascript Clock implementation differs from the openjdk.\n *\n * Javascript only provides the UTC millis of epoch and the ZoneOffset in minutes of the system default time.\n * Javascript do not provide the system default ZoneId.\n *\n * the system default ZoneId is only guessable by the ZoneOffset, like moment-timezone does by returning one ZoneId\n * with the same ZoneOffset.\n *\n * Therefore we are doing a shortcut here, by defining a SystemUTCClock and a SystemDefaultClock, the Clock itself\n * is returning the ZoneOffset and not the ZoneRules as in the jdk. We should change it, when introducing the iana\n * timezone database and implementing the timezone domains.\n *\n */\n\nexport class Clock {\n    /**\n     * Obtains a clock that returns the current instant using the\n     * system clock, converting to date and time using the Date.getTime() UTC millis.\n     *\n     * This clock, rather than {@link systemDefaultZone}, should be used when\n     * you need the current instant without the date or time.\n     *\n     * @return {Clock} a clock that uses the system clock in the UTC zone, not null\n     */\n    static systemUTC() {\n        return new SystemClock(ZoneOffset.UTC);\n    }\n\n    /**\n     * Obtains a clock that returns the current instant using the best available\n     * system clock, converting to date and time using the default time-zone.\n     *\n     * This clock is based on the available system clock using the Date.getTime() UTC millis\n     *\n     * Using this method hard codes a dependency to the default time-zone into your application.\n     *\n     * The UTC clock (see {@link systemUTC}) should be used when you need the current instant\n     * without the date or time.\n     *\n     *\n     * @return {Clock} a clock that uses the system clock in the default zone, not null\n     * @see ZoneId#systemDefault()\n     */\n    static systemDefaultZone() {\n        return new SystemClock(ZoneId.systemDefault());\n    }\n\n    /**\n     *\n     * @param {ZoneId} zone\n     * @return {Clock} a clock that uses the specified time zone\n     */\n    static system(zone){\n        return new SystemClock(zone);\n    }\n\n    /**\n     * Obtains a clock that always returns the same instant.\n     *\n     * This clock simply returns the specified instant.\n     * As such, it is not a clock in the conventional sense.\n     * The main use case for this is in testing, where the fixed clock ensures\n     * tests are not dependent on the current clock.\n     *\n     * @param {Instant} fixedInstant  the instant to use as the clock, not null\n     * @param {ZoneId} zoneId  the zoneOffset to use as zone Offset, not null\n     * @return {Clock} a clock that always returns the same instant, not null\n     */\n    static fixed(fixedInstant, zoneId) {\n        return new FixedClock(fixedInstant, zoneId);\n    }\n    \n    /**\n     * Obtains a clock that returns instants from the specified clock with the\n     * specified duration added\n     * <p>\n     * This clock wraps another clock, returning instants that are later by the\n     * specified duration. If the duration is negative, the instants will be\n     * earlier than the current date and time.\n     * The main use case for this is to simulate running in the future or in the past.\n     * <p>\n     * A duration of zero would have no offsetting effect.\n     * Passing zero will return the underlying clock.\n     * <p>\n     * The returned implementation is immutable, thread-safe and {@code Serializable}\n     * providing that the base clock is.\n     *\n     * @param baseClock  the base clock to add the duration to, not null\n     * @param duration  the duration to add, not null\n     * @return a clock based on the base clock with the duration added, not null\n     */\n    static offset(baseClock, duration) {\n        return new OffsetClock(baseClock, duration);   \n    }\n\n    /**\n      * Gets the current millisecond instant of the clock.\n      *\n      * This returns the millisecond-based instant, measured from 1970-01-01T00:00Z (UTC).\n      * This is equivalent to the definition of {@link Date#getTime}.\n      *\n      * Most applications should avoid this method and use {@link Instant} to represent\n      * an instant on the time-line rather than a raw millisecond value.\n      * This method is provided to allow the use of the clock in high performance use cases\n      * where the creation of an object would be unacceptable.\n      *\n      * The default implementation currently calls {@link instant}.\n      *\n      * @return the current millisecond instant from this clock, measured from\n      *  the Java epoch of 1970-01-01T00:00Z (UTC), not null\n      */\n    millis(){\n        abstractMethodFail('Clock.millis');\n    }\n\n    /**\n     * Gets the current instant of the clock.\n     *\n     * This returns an instant representing the current instant as defined by the clock.\n     *\n     * @return {Instant} the current instant from this clock, not null\n     */\n    instant(){\n        abstractMethodFail('Clock.instant');\n    }\n\n    zone(){\n        abstractMethodFail('Clock.zone');\n    }\n    \n    /**\n     * Returns a copy of this clock with a different time-zone.\n     * <p>\n     * A clock will typically obtain the current instant and then convert that\n     * to a date or time using a time-zone. This method returns a clock with\n     * similar properties but using a different time-zone.\n     *\n     * @return a clock based on this clock with the specified time-zone, not null\n     */\n    withZone(){\n        abstractMethodFail('Clock.withZone');\n    }\n}\n\n/**\n * Implementation of a clock that always returns the latest time from\n * {@link Date#getTime}.\n *\n * @private\n */\nclass SystemClock extends Clock {\n    /**\n     *\n     * @param {!ZoneId} zone\n     */\n    constructor(zone){\n        requireNonNull(zone, 'zone');\n        super();\n        this._zone = zone;\n    }\n\n    /**\n     *\n     * @returns {!ZoneId}\n     */\n    zone() {\n        return this._zone;\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    millis() {\n        return new Date().getTime();\n    }\n\n    /**\n     *\n     * @returns {Instant}\n     */\n    instant() {\n        return Instant.ofEpochMilli(this.millis());\n    }\n    \n    equals(obj) {    \n        if (obj instanceof SystemClock) {            \n            return this._zone.equals(obj._zone);\n        }\n        return false;    \n    }  \n      \n    withZone(zone) {\n        if (zone.equals(this._zone)) {  // intentional NPE\n            return this;\n        }\n        return new SystemClock(zone);\n    }      \n\n    /**\n     *\n     * @returns {string}\n     */\n    toString(){\n        return `SystemClock[${this._zone.toString()}]`;\n    }\n\n}\n\n/**\n * Implementation of a clock that always returns the same instant.\n * This is typically used for testing.\n * @private\n */\nclass FixedClock extends Clock{\n    constructor(fixedInstant, zoneId) {\n        super();\n        this._instant = fixedInstant;\n        this._zoneId = zoneId;\n    }\n\n    instant() {\n        return this._instant;\n    }\n\n    millis(){\n        return this._instant.toEpochMilli();\n    }\n\n    zone() {\n        return this._zoneId;\n    }\n\n    toString(){\n        return 'FixedClock[]';\n    }\n    \n    equals(obj) {    \n        if (obj instanceof FixedClock) {            \n            return this._instant.equals(obj._instant) && this._zoneId.equals(obj._zoneId);\n        }\n        return false;    \n    }\n\n    withZone(zone) {\n        if (zone.equals(this._zoneId)) {  // intentional NPE\n            return this;\n        }\n        return new FixedClock(this._instant, zone);\n    }      \n    \n}\n\n\n/**\n * Implementation of a clock that adds an offset to an underlying clock.\n */\nclass OffsetClock extends Clock {\n    constructor(baseClock, offset) {\n        super();\n        this._baseClock = baseClock;\n        this._offset = offset;\n    }\n   \n    zone() {\n        return this._baseClock.zone();\n    }\n        \n    withZone(zone) {\n        if (zone.equals(this._baseClock.zone())) {  // intentional NPE\n            return this;\n        }\n        return new OffsetClock(this._baseClock.withZone(zone), this._offset);\n    }\n    \n    millis() {\n        return this._baseClock.millis() + this._offset.toMillis();\n    }\n    \n    instant() {\n        return this._baseClock.instant().plus(this._offset);\n    }\n        \n    equals(obj) {\n        if (obj instanceof OffsetClock) {            \n            return this._baseClock.equals(obj._baseClock) && this._offset.equals(obj._offset);\n        }\n        return false;\n    }\n    \n    toString() {\n        return `OffsetClock[${this._baseClock},${this._offset}]`;\n    }\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull } from '../assert';\nimport { IllegalArgumentException } from '../errors';\n\nimport { Duration } from '../Duration';\nimport { LocalDateTime } from '../LocalDateTime';\n\n/**\n * A transition between two offsets caused by a discontinuity in the local time-line.\n *\n * A transition between two offsets is normally the result of a daylight savings cutover.\n * The discontinuity is normally a gap in spring and an overlap in autumn.\n * {@link ZoneOffsetTransition} models the transition between the two offsets.\n *\n * Gaps occur where there are local date-times that simply do not not exist.\n * An example would be when the offset changes from `+03:00` to `+04:00`.\n * This might be described as 'the clocks will move forward one hour tonight at 1am'.\n *\n * Overlaps occur where there are local date-times that exist twice.\n * An example would be when the offset changes from `+04:00` to `+03:00`.\n * This might be described as 'the clocks will move back one hour tonight at 2am'.\n *\n */\nexport class ZoneOffsetTransition {\n\n    //-----------------------------------------------------------------------\n    /**\n     * Obtains an instance defining a transition between two offsets.\n     *\n     * Applications should normally obtain an instance from {@link ZoneRules}.\n     * This factory is only intended for use when creating {@link ZoneRules}.\n     *\n     * @param {LocalDateTime} transition - the transition date-time at the transition, which never\n     *  actually occurs, expressed local to the before offset, not null\n     * @param {ZoneOffset} offsetBefore - the offset before the transition, not null\n     * @param {ZoneOffset} offsetAfter - the offset at and after the transition, not null\n     * @return {ZoneOffsetTransition} the transition, not null\n     * @throws IllegalArgumentException if {@link offsetBefore} and {@link offsetAfter}\n     *         are equal, or {@link transition.getNano} returns non-zero value\n     */\n    static of(transition, offsetBefore, offsetAfter) {\n        return new ZoneOffsetTransition(transition, offsetBefore, offsetAfter);\n    }\n\n    /**\n     * Creates an instance defining a transition between two offsets.\n     * Creates an instance from epoch-second if transition is not a LocalDateTimeInstance\n     *\n     * @param {(LocalDateTime \\ number)} transition - the transition date-time with the offset before the transition, not null\n     * @param {ZoneOffset} offsetBefore - the offset before the transition, not null\n     * @param {ZoneOffset} offsetAfter - the offset at and after the transition, not null\n     * @private\n     */\n    constructor(transition, offsetBefore, offsetAfter) {\n        requireNonNull(transition, 'transition');\n        requireNonNull(offsetBefore, 'offsetBefore');\n        requireNonNull(offsetAfter, 'offsetAfter');\n        if (offsetBefore.equals(offsetAfter)) {\n            throw new IllegalArgumentException('Offsets must not be equal');\n        }\n        if (transition.nano() !== 0) {\n            throw new IllegalArgumentException('Nano-of-second must be zero');\n        }\n        if(transition instanceof LocalDateTime) {\n            this._transition = transition;\n        } else {\n            this._transition = LocalDateTime.ofEpochSecond(transition, 0, offsetBefore);\n        }\n        this._offsetBefore = offsetBefore;\n        this._offsetAfter = offsetAfter;\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Gets the transition instant.\n     *\n     * This is the instant of the discontinuity, which is defined as the first\n     * instant that the 'after' offset applies.\n     *\n     * The methods {@link getInstant}, {@link getDateTimeBefore} and {@link getDateTimeAfter}\n     * all represent the same instant.\n     *\n     * @return {Instant} the transition instant, not null\n     */\n    instant() {\n        return this._transition.toInstant(this._offsetBefore);\n    }\n\n    /**\n     * Gets the transition instant as an epoch second.\n     *\n     * @return {number} the transition epoch second\n     */\n    toEpochSecond() {\n        return this._transition.toEpochSecond(this._offsetBefore);\n    }\n\n    //-------------------------------------------------------------------------\n    /**\n     * Gets the local transition date-time, as would be expressed with the 'before' offset.\n     *\n     * This is the date-time where the discontinuity begins expressed with the 'before' offset.\n     * At this instant, the 'after' offset is actually used, therefore the combination of this\n     * date-time and the 'before' offset will never occur.\n     *\n     * The combination of the 'before' date-time and offset represents the same instant\n     * as the 'after' date-time and offset.\n     *\n     * @return {LocalDateTime} the transition date-time expressed with the before offset, not null\n     */\n    dateTimeBefore(){\n        return this._transition;\n    }\n\n    /**\n     * Gets the local transition date-time, as would be expressed with the 'after' offset.\n     *\n     * This is the first date-time after the discontinuity, when the new offset applies.\n     *\n     * The combination of the 'before' date-time and offset represents the same instant\n     * as the 'after' date-time and offset.\n     *\n     * @return {LocalDateTime} the transition date-time expressed with the after offset, not null\n     */\n    dateTimeAfter() {\n        return this._transition.plusSeconds(this.durationSeconds());\n    }\n\n    /**\n     * Gets the offset before the transition.\n     *\n     * This is the offset in use before the instant of the transition.\n     *\n     * @return {ZoneOffset} the offset before the transition, not null\n     */\n    offsetBefore() {\n        return this._offsetBefore;\n    }\n\n    /**\n     * Gets the offset after the transition.\n     *\n     * This is the offset in use on and after the instant of the transition.\n     *\n     * @return {ZoneOffset} the offset after the transition, not null\n     */\n    offsetAfter() {\n        return this._offsetAfter;\n    }\n\n    /**\n     * Gets the duration of the transition.\n     *\n     * In most cases, the transition duration is one hour, however this is not always the case.\n     * The duration will be positive for a gap and negative for an overlap.\n     * Time-zones are second-based, so the nanosecond part of the duration will be zero.\n     *\n     * @return {Duration} the duration of the transition, positive for gaps, negative for overlaps\n     */\n    duration() {\n        return Duration.ofSeconds(this.durationSeconds());\n    }\n\n    /**\n     * Gets the duration of the transition in seconds.\n     *\n     * @return {number} the duration in seconds\n     */\n    durationSeconds() {\n        return this._offsetAfter.totalSeconds() - this._offsetBefore.totalSeconds();\n    }\n\n    /**\n     * Does this transition represent a gap in the local time-line.\n     *\n     * Gaps occur where there are local date-times that simply do not not exist.\n     * An example would be when the offset changes from `+01:00` to `+02:00`.\n     * This might be described as 'the clocks will move forward one hour tonight at 1am'.\n     *\n     * @return {boolean} true if this transition is a gap, false if it is an overlap\n     */\n    isGap() {\n        return this._offsetAfter.totalSeconds() > this._offsetBefore.totalSeconds();\n    }\n\n    /**\n     * Does this transition represent a gap in the local time-line.\n     *\n     * Overlaps occur where there are local date-times that exist twice.\n     * An example would be when the offset changes from `+02:00` to `+01:00`.\n     * This might be described as 'the clocks will move back one hour tonight at 2am'.\n     *\n     * @return {boolean} true if this transition is an overlap, false if it is a gap\n     */\n    isOverlap() {\n        return this._offsetAfter.totalSeconds() < this._offsetBefore.totalSeconds();\n    }\n\n    /**\n     * Checks if the specified offset is valid during this transition.\n     *\n     * This checks to see if the given offset will be valid at some point in the transition.\n     * A gap will always return false.\n     * An overlap will return true if the offset is either the before or after offset.\n     *\n     * @param {ZoneOffset} offset - the offset to check, null returns false\n     * @return {boolean} true if the offset is valid during the transition\n     */\n    isValidOffset(offset) {\n        return this.isGap() ? false : (this._offsetBefore.equals(offset) || this._offsetAfter.equals(offset));\n    }\n\n    /**\n     * Gets the valid offsets during this transition.\n     *\n     * A gap will return an empty list, while an overlap will return both offsets.\n     *\n     * @return {ZoneOffset[]} the list of valid offsets\n     */\n    validOffsets() {\n        if (this.isGap()){\n            return [];\n        } else {\n            return [this._offsetBefore, this._offsetAfter];\n        }\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Compares this transition to another based on the transition instant.\n     *\n     * This compares the instants of each transition.\n     * The offsets are ignored, making this order inconsistent with equals.\n     *\n     * @param {ZoneOffsetTransition} transition - the transition to compare to, not null\n     * @return {number} the comparator value, negative if less, positive if greater\n     */\n    compareTo(transition) {\n        return this.instant().compareTo(transition.instant());\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Checks if this object equals another.\n     *\n     * The entire state of the object is compared.\n     *\n     * @param {*} other - the other object to compare to, null returns false\n     * @return true if equal\n     */\n    equals(other) {\n        if (other === this) {\n            return true;\n        }\n        if (other instanceof ZoneOffsetTransition) {\n            const d = other;\n            return this._transition.equals(d._transition) &&\n                this._offsetBefore.equals(d.offsetBefore()) && this._offsetAfter.equals(d.offsetAfter());\n        }\n        return false;\n    }\n\n    /**\n     * Returns a suitable hash code.\n     *\n     * @return {number} the hash code\n     */\n    hashCode() {\n        return this._transition.hashCode() ^ this._offsetBefore.hashCode() ^ (this._offsetAfter.hashCode()>>>16);\n    }\n\n    //-----------------------------------------------------------------------\n    /**\n     * Returns a string describing this object.\n     *\n     * @return {string} a string for debugging, not null\n     */\n    toString() {\n        return `Transition[${this.isGap() ? 'Gap' : 'Overlap' \n        } at ${this._transition.toString()}${this._offsetBefore.toString() \n        } to ${this._offsetAfter}]`;\n    }\n\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { ChronoField } from './ChronoField';\nimport { createTemporalQuery } from './TemporalQuery';\nimport { TemporalQueries } from './TemporalQueries';\n\nimport { LocalDate } from '../LocalDate';\nimport { LocalTime } from '../LocalTime';\nimport { ZoneOffset } from '../ZoneOffset';\n\n\nexport function _init() {\n    //-----------------------------------------------------------------------\n    /**\n     * A strict query for the {@link ZoneId}.\n     */\n    TemporalQueries.ZONE_ID = createTemporalQuery('ZONE_ID', (temporal) => {\n        return temporal.query(TemporalQueries.ZONE_ID);\n    });\n\n    /**\n     * A query for the {@link Chronology}.\n     */\n    TemporalQueries.CHRONO = createTemporalQuery('CHRONO', (temporal) => {\n        return temporal.query(TemporalQueries.CHRONO);\n    });\n\n    /**\n     * A query for the smallest supported unit.\n     */\n    TemporalQueries.PRECISION = createTemporalQuery('PRECISION', (temporal) => {\n        return temporal.query(TemporalQueries.PRECISION);\n    });\n\n    //-----------------------------------------------------------------------\n    /**\n     * A query for {@link ZoneOffset} returning null if not found.\n     */\n    TemporalQueries.OFFSET = createTemporalQuery('OFFSET', (temporal) => {\n        if (temporal.isSupported(ChronoField.OFFSET_SECONDS)) {\n            return ZoneOffset.ofTotalSeconds(temporal.get(ChronoField.OFFSET_SECONDS));\n        }\n        return null;\n    });\n\n    /**\n     * A lenient query for the {@link ZoneId}, falling back to the {@link ZoneOffset}.\n     */\n    TemporalQueries.ZONE = createTemporalQuery('ZONE', (temporal) => {\n        const zone = temporal.query(TemporalQueries.ZONE_ID);\n        return (zone != null ? zone : temporal.query(TemporalQueries.OFFSET));\n    });\n\n    /**\n     * A query for {@link LocalDate} returning null if not found.\n     */\n    TemporalQueries.LOCAL_DATE = createTemporalQuery('LOCAL_DATE', (temporal) => {\n        if (temporal.isSupported(ChronoField.EPOCH_DAY)) {\n            return LocalDate.ofEpochDay(temporal.getLong(ChronoField.EPOCH_DAY));\n        }\n        return null;\n    });\n\n    /**\n     * A query for {@link LocalTime} returning null if not found.\n     */\n    TemporalQueries.LOCAL_TIME = createTemporalQuery('LOCAL_TIME', (temporal) => {\n        if (temporal.isSupported(ChronoField.NANO_OF_DAY)) {\n            return LocalTime.ofNanoOfDay(temporal.getLong(ChronoField.NANO_OF_DAY));\n        }\n        return null;\n    });\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { ZoneRules } from './ZoneRules';\nimport { ZoneOffset } from '../ZoneOffset';\nimport { DateTimeException } from '../errors';\n\nexport class SystemDefaultZoneRules extends ZoneRules {\n\n    isFixedOffset(){\n        return false;\n    }\n\n    /**\n     *\n     * @param {Instant} instant\n     * @returns {ZoneOffset}\n     */\n    offsetOfInstant(instant){\n        const offsetInMinutes = new Date(instant.toEpochMilli()).getTimezoneOffset();\n        return ZoneOffset.ofTotalMinutes(offsetInMinutes * -1);\n    }\n\n    /**\n     *\n     * @param {number} epochMilli\n     * @returns {ZoneOffset}\n     */\n    offsetOfEpochMilli(epochMilli){\n        const offsetInMinutes = new Date(epochMilli).getTimezoneOffset();\n        return ZoneOffset.ofTotalMinutes(offsetInMinutes * -1);\n    }\n\n    /**\n     * This implementation is NOT returning the best value in a gap or overlap situation\n     * as specified at {@link ZoneRules.offsetOfLocalDateTime}.\n     *\n     * The calculated offset depends Date.prototype.getTimezoneOffset and its not specified\n     * at the ECMA-262 specification how to handle daylight savings gaps/ overlaps.\n     *\n     * The Chrome Browser version 49 is returning the next transition offset in a gap/overlap situation,\n     * other browsers/ engines might do it in the same way.\n     *\n     * @param {LocalDateTime} localDateTime\n     * @returns {ZoneOffset}\n     */\n    offsetOfLocalDateTime(localDateTime){\n        const epochMilli = localDateTime.toEpochSecond(ZoneOffset.UTC) * 1000;\n        const offsetInMinutesBeforePossibleTransition = new Date(epochMilli).getTimezoneOffset();\n        const epochMilliSystemZone = epochMilli + offsetInMinutesBeforePossibleTransition * 60000;\n        const offsetInMinutesAfterPossibleTransition = new Date(epochMilliSystemZone).getTimezoneOffset();\n        return ZoneOffset.ofTotalMinutes(offsetInMinutesAfterPossibleTransition * -1);\n    }\n\n    /**\n     *\n     * @param localDateTime\n     * @return {ZoneOffset[]}\n     */\n    validOffsets(localDateTime){\n        return [this.offsetOfLocalDateTime(localDateTime)];\n    }\n\n    /**\n     * @return null, not supported\n     */\n    transition(){\n        return null;\n    }\n\n    /**\n     *\n     * @param instant\n     * @return {ZoneOffset}\n     */\n    standardOffset(instant){\n        return this.offsetOfInstant(instant);\n    }\n\n    /**\n     * @throws DateTimeException not supported\n     */\n    daylightSavings(){\n        this._throwNotSupported();\n    }\n\n    /**\n     * @throws DateTimeException not supported\n     */\n    isDaylightSavings(){\n        this._throwNotSupported();\n    }\n\n    /**\n     *\n     * @param {LocalDateTime} dateTime\n     * @param {ZoneOffset} offset\n     * @return {boolean}\n     */\n    isValidOffset(dateTime, offset) {\n        return this.offsetOfLocalDateTime(dateTime).equals(offset);\n    }\n\n    /**\n     * @throws DateTimeException not supported\n     */\n    nextTransition(){\n        this._throwNotSupported();\n    }\n\n    /**\n     * @throws DateTimeException not supported\n     */\n    previousTransition(){\n        this._throwNotSupported();\n    }\n\n    /**\n     * @throws DateTimeException not supported\n     */\n    transitions(){\n        this._throwNotSupported();\n    }\n\n    /**\n     * @throws DateTimeException not supported\n     */\n    transitionRules(){\n        this._throwNotSupported();\n    }\n\n    /**\n     * @throws DateTimeException not supported\n     */\n    _throwNotSupported(){\n        throw new DateTimeException('not supported operation');\n    }\n    //-----------------------------------------------------------------------\n    /**\n     *\n     * @param {*} other\n     * @returns {boolean}\n     */\n    equals(other) {\n        if (this === other || other instanceof SystemDefaultZoneRules) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     *\n     * @returns {string}\n     */\n    toString() {\n        return 'SYSTEM';\n    }\n\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { SystemDefaultZoneRules } from './SystemDefaultZoneRules';\nimport { ZoneId } from '../ZoneId';\n\nexport class SystemDefaultZoneId extends ZoneId {\n\n    constructor(){\n        super();\n        this._rules = new SystemDefaultZoneRules();\n    }\n\n    rules(){\n        return this._rules;\n    }\n\n    equals(other){\n        if(this === other){\n            return true;\n        }\n        return false;\n    }\n\n    id(){\n        return 'SYSTEM';\n    }\n\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @copyright (c) 2007-present, Stephen Colebourne & Michael Nascimento Santos\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull } from './assert';\nimport { DateTimeException, IllegalArgumentException } from './errors';\nimport { StringUtil } from './StringUtil';\n\nimport { ZoneOffset } from './ZoneOffset';\nimport { ZoneRegion } from './ZoneRegion';\nimport { ZoneId } from './ZoneId';\n\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { SystemDefaultZoneId } from './zone/SystemDefaultZoneId';\nimport { ZoneRulesProvider } from './zone/ZoneRulesProvider';\n\n/**\n * @see {@link ZoneId}\n *\n * Helper class to avoid dependency cycles.\n * Static methods of the class ZoneIdFactory are added automatically to class ZoneId.\n * @private\n */\nexport class ZoneIdFactory {\n\n    /**\n     * Gets the system default time-zone.\n     *\n     *\n     * @return {ZoneId} the zone ID, not null\n     */\n    static systemDefault() {\n        return SYSTEM_DEFAULT_ZONE_ID_INSTANCE;\n    }\n\n    /**\n     * Gets the set of available zone IDs.\n     *\n     * This set includes the string form of all available region-based IDs.\n     * Offset-based zone IDs are not included in the returned set.\n     * The ID can be passed to {@link of} to create a {@link ZoneId}.\n     *\n     * The set of zone IDs can increase over time, although in a typical application\n     * the set of IDs is fixed. Each call to this method is thread-safe.\n     *\n     * @return {string[]} a modifiable copy of the set of zone IDs, not null\n     */\n    static getAvailableZoneIds() {\n        return ZoneRulesProvider.getAvailableZoneIds();\n    }\n\n    /**\n     * Obtains an instance of {@link ZoneId} from an ID ensuring that the\n     * ID is valid and available for use.\n     *\n     * This method parses the ID producing a {@link ZoneId} or {@link ZoneOffset}.\n     * A {@link ZoneOffset} is returned if the ID is 'Z', or starts with '+' or '-'.\n     * The result will always be a valid ID for which {@link ZoneRules} can be obtained.\n     *\n     * Parsing matches the zone ID step by step as follows.\n     *\n     * * If the zone ID equals 'Z', the result is {@link ZoneOffset.UTC}.\n     * * If the zone ID consists of a single letter, the zone ID is invalid\n     *   and {@link DateTimeException} is thrown.\n     * * If the zone ID starts with '+' or '-', the ID is parsed as a\n     *   {@link ZoneOffset} using {@link ZoneOffset#of}.\n     * * If the zone ID equals 'GMT', 'UTC' or 'UT' then the result is a {@link ZoneId}\n     *   with the same ID and rules equivalent to {@link ZoneOffset.UTC}.\n     * * If the zone ID starts with 'UTC+', 'UTC-', 'GMT+', 'GMT-', 'UT+' or 'UT-'\n     *   then the ID is a prefixed offset-based ID. The ID is split in two, with\n     *   a two or three letter prefix and a suffix starting with the sign.\n     *   The suffix is parsed as a {@link ZoneOffset}.\n     *   The result will be a {@link ZoneId} with the specified UTC/GMT/UT prefix\n     *   and the normalized offset ID as per {@link ZoneOffset#getId}.\n     *   The rules of the returned {@link ZoneId} will be equivalent to the\n     *   parsed {@link ZoneOffset}.\n     * * All other IDs are parsed as region-based zone IDs. Region IDs must\n     *   match the regular expression `[A-Za-z][A-Za-z0-9~/._+-]+`,\n     *   otherwise a {@link DateTimeException} is thrown. If the zone ID is not\n     *   in the configured set of IDs, {@link ZoneRulesException} is thrown.\n     *   The detailed format of the region ID depends on the group supplying the data.\n     *   The default set of data is supplied by the IANA Time Zone Database (TZDB).\n     *   This has region IDs of the form '{area}/{city}', such as 'Europe/Paris' or 'America/New_York'.\n     *   This is compatible with most IDs from {@link java.util.TimeZone}.\n     *\n     * @param {string} zoneId  the time-zone ID, not null\n     * @return {ZoneId} the zone ID, not null\n     * @throws DateTimeException if the zone ID has an invalid format\n     * @throws ZoneRulesException if the zone ID is a region ID that cannot be found\n     */\n    static of(zoneId) {\n        requireNonNull(zoneId, 'zoneId');\n        if (zoneId === 'Z') {\n            return ZoneOffset.UTC;\n        }\n        if (zoneId.length === 1) {\n            throw new DateTimeException(`Invalid zone: ${zoneId}`);\n        }\n        if (StringUtil.startsWith(zoneId, '+') || StringUtil.startsWith(zoneId, '-')) {\n            return ZoneOffset.of(zoneId);\n        }\n        if (zoneId === 'UTC' || zoneId === 'GMT' || zoneId === 'GMT0' || zoneId === 'UT') {\n            return new ZoneRegion(zoneId, ZoneOffset.UTC.rules());\n        }\n        if (StringUtil.startsWith(zoneId, 'UTC+') || StringUtil.startsWith(zoneId, 'GMT+') ||\n                StringUtil.startsWith(zoneId, 'UTC-') || StringUtil.startsWith(zoneId, 'GMT-')) {\n            const offset = ZoneOffset.of(zoneId.substring(3));\n            if (offset.totalSeconds() === 0) {\n                return new ZoneRegion(zoneId.substring(0, 3), offset.rules());\n            }\n            return new ZoneRegion(zoneId.substring(0, 3) + offset.id(), offset.rules());\n        }\n        if (StringUtil.startsWith(zoneId, 'UT+') || StringUtil.startsWith(zoneId, 'UT-')) {\n            const offset = ZoneOffset.of(zoneId.substring(2));\n            if (offset.totalSeconds() === 0) {\n                return new ZoneRegion('UT', offset.rules());\n            }\n            return new ZoneRegion(`UT${offset.id()}`, offset.rules());\n        }\n        // javascript special case\n        if(zoneId === 'SYSTEM'){\n            return ZoneId.systemDefault();\n        }\n        return ZoneRegion.ofId(zoneId);\n    }\n\n    /**\n     * Obtains an instance of {@link ZoneId} wrapping an offset.\n     *\n     * If the prefix is 'GMT', 'UTC', or 'UT' a {@link ZoneId}\n     * with the prefix and the non-zero offset is returned.\n     * If the prefix is empty `''` the {@link ZoneOffset} is returned.\n     *\n     * @param {string} prefix  the time-zone ID, not null\n     * @param {ZoneOffset} offset  the offset, not null\n     * @return {ZoneId} the zone ID, not null\n     * @throws IllegalArgumentException if the prefix is not one of\n     *     'GMT', 'UTC', or 'UT', or ''\n     */\n    static ofOffset(prefix, offset) {\n        requireNonNull(prefix, 'prefix');\n        requireNonNull(offset, 'offset');\n        if (prefix.length === 0) {\n            return offset;\n        }\n        if (prefix === 'GMT' || prefix === 'UTC' || prefix === 'UT') {\n            if (offset.totalSeconds() === 0) {\n                return new ZoneRegion(prefix, offset.rules());\n            }\n            return new ZoneRegion(prefix + offset.id(), offset.rules());\n        }\n        throw new IllegalArgumentException(`Invalid prefix, must be GMT, UTC or UT: ${prefix}`);\n    }\n\n\n    /**\n     * Obtains an instance of {@link ZoneId} from a temporal object.\n     *\n     * A {@link TemporalAccessor} represents some form of date and time information.\n     * This factory converts the arbitrary temporal object to an instance of {@link ZoneId}.\n     *\n     * The conversion will try to obtain the zone in a way that favours region-based\n     * zones over offset-based zones using {@link TemporalQueries#zone}.\n     *\n     * This method matches the signature of the functional interface {@link TemporalQuery}\n     * allowing it to be used in queries via method reference, {@link ZoneId::from}.\n     *\n     * @param {!TemporalAccessor} temporal - the temporal object to convert, not null\n     * @return {ZoneId} the zone ID, not null\n     * @throws DateTimeException if unable to convert to a {@link ZoneId}\n     */\n    static from(temporal) {\n        requireNonNull(temporal, 'temporal');\n        const obj = temporal.query(TemporalQueries.zone());\n        if (obj == null) {\n            throw new DateTimeException(`Unable to obtain ZoneId from TemporalAccessor: ${ \n                temporal}, type ${temporal.constructor != null ? temporal.constructor.name : ''}`);\n        }\n        return obj;\n    }\n}\n\nlet SYSTEM_DEFAULT_ZONE_ID_INSTANCE = null;\n\nexport function _init(){\n    SYSTEM_DEFAULT_ZONE_ID_INSTANCE = new SystemDefaultZoneId();\n\n    // a bit magic to stay a bit more to the threeten bp impl.\n    ZoneId.systemDefault = ZoneIdFactory.systemDefault;\n    ZoneId.getAvailableZoneIds = ZoneIdFactory.getAvailableZoneIds;\n    ZoneId.of = ZoneIdFactory.of;\n    ZoneId.ofOffset = ZoneIdFactory.ofOffset;\n    ZoneId.from = ZoneIdFactory.from;\n    ZoneOffset.from = ZoneIdFactory.from;\n\n    // short cut\n    ZoneId.SYSTEM = SYSTEM_DEFAULT_ZONE_ID_INSTANCE;\n    ZoneId.UTC = ZoneOffset.ofTotalSeconds(0);\n}\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { _init as ZoneOffsetInit } from './ZoneOffset';\nimport { _init as DayOfWeekInit } from './DayOfWeek';\nimport { _init as DurationInit } from './Duration';\nimport { _init as InstantInit } from './Instant';\nimport { _init as LocalDateInit } from './LocalDate';\nimport { _init as LocalTimeInit } from './LocalTime';\nimport { _init as LocalDateTimeInit } from './LocalDateTime';\nimport { _init as MonthInit } from './Month';\nimport { _init as MonthDayInit } from './MonthDay';\nimport { _init as OffsetDateTimeInit } from './OffsetDateTime';\nimport { _init as OffsetTimeInit } from './OffsetTime';\nimport { _init as PeriodInit } from './Period';\nimport { _init as YearInit } from './Year';\nimport { _init as YearConstantsInit } from './YearConstants';\nimport { _init as YearMonthInit } from './YearMonth';\nimport { _init as ZonedDateTimeInit } from './ZonedDateTime';\nimport { _init as IsoChronologyInit } from './chrono/IsoChronology';\nimport { _init as DateTimeFormatterInit } from './format/DateTimeFormatter';\nimport { _init as ChronoFieldInit } from './temporal/ChronoField';\nimport { _init as ChronoUnitInit } from './temporal/ChronoUnit';\nimport { _init as IsoFieldsInit } from './temporal/IsoFields';\nimport { _init as DateTimeFormatterBuilderInit } from './format/DateTimeFormatterBuilder';\n\nimport { _init as TemporalQueriesInit } from './temporal/TemporalQueriesFactory';\nimport { _init as ZoneIdInit } from './ZoneIdFactory';\n\nlet isInit = false;\n\nfunction init() {\n\n    if (isInit) {\n        return;\n    }\n\n    isInit = true;\n\n    YearConstantsInit();\n    DurationInit();\n    ChronoUnitInit();\n    ChronoFieldInit();\n    LocalTimeInit();\n    IsoFieldsInit();\n    TemporalQueriesInit();\n    DayOfWeekInit();\n    InstantInit();\n    LocalDateInit();\n    LocalDateTimeInit();\n    YearInit();\n    MonthInit();\n    YearMonthInit();\n    MonthDayInit();\n    PeriodInit();\n    ZoneOffsetInit();\n    ZonedDateTimeInit();\n    ZoneIdInit();\n    IsoChronologyInit();\n    DateTimeFormatterInit();\n    DateTimeFormatterBuilderInit();\n    OffsetDateTimeInit();\n    OffsetTimeInit();\n}\n\ninit();\n", "/*\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { IllegalArgumentException } from './errors';\n\nimport { LocalDate } from './LocalDate';\nimport { LocalDateTime } from './LocalDateTime';\nimport { ZonedDateTime } from './ZonedDateTime';\nimport { ZoneId } from './ZoneId';\nimport { Instant } from './Instant';\n\nclass ToNativeJsConverter {\n    /**\n     * @param {!(LocalDate|LocalDateTime|ZonedDateTime|Instant)} temporal - a joda temporal instance\n     * @param {ZoneId} [zone] - the zone of the temporal,\n     *  the default value for LocalDate and LocalDateTime is ZoneId.systemDefault().\n     */\n    constructor(temporal, zone){\n        let zonedDateTime;\n\n        if(temporal instanceof Instant) {\n            this.instant = temporal;\n            return;\n        } else if(temporal instanceof LocalDate) {\n            zone = zone == null ?  ZoneId.systemDefault() : zone;\n            zonedDateTime = temporal.atStartOfDay(zone);\n        } else if (temporal instanceof LocalDateTime) {\n            zone = zone == null ? ZoneId.systemDefault() : zone;\n            zonedDateTime = temporal.atZone(zone);\n        } else if (temporal instanceof ZonedDateTime) {\n            if (zone == null) {\n                zonedDateTime = temporal;\n            } else {\n                zonedDateTime = temporal.withZoneSameInstant(zone);\n            }\n        } else {\n            throw new IllegalArgumentException(`unsupported instance for convert operation:${temporal}`);\n        }\n\n        this.instant = zonedDateTime.toInstant();\n    }\n\n    /**\n     *\n     * @returns {Date}\n     */\n    toDate() {\n        return new Date(this.instant.toEpochMilli());\n    }\n\n    /**\n     *\n     * @returns {number}\n     */\n    toEpochMilli() {\n        return this.instant.toEpochMilli();\n    }\n}\n\n/**\n * converts a LocalDate, LocalDateTime or ZonedDateTime to a native Javascript Date.\n *\n * In a first step the temporal is converted to an Instant by adding implicit values.\n * \n * A LocalDate is implicit set to a LocalDateTime at start of day. \n * A LocalDateTime is implicit set to a ZonedDateTime with \n * the passed zone or if null, with the system default time zone. \n * A ZonedDateTime is converted to an Instant, if a zone is specified the zonedDateTime is adjusted to this \n * zone, keeping the same Instant.\n *\n * In a second step the instant is converted to a native Javascript Date\n *\n * default zone for LocalDate and LocalDateTime is ZoneId.systemDefault().\n *\n * @example\n * convert(localDate).toDate() // returns a javascript Date\n * convert(localDate).toEpochMilli()   // returns the epochMillis\n *\n * @param {!(LocalDate|LocalDateTime|ZonedDateTime)} temporal - a joda temporal instance\n * @param {ZoneId} [zone] - the zone of the temporal\n * @returns {ToNativeJsConverter}\n */\nexport function convert(temporal, zone){\n    return new ToNativeJsConverter(temporal, zone);\n}\n", "/*\n * @copyright (c) 2015-present, Philipp Thürwächter, Pattrick Hüper & js-joda contributors\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport { requireNonNull } from './assert';\nimport { IllegalArgumentException } from './errors';\nimport { Instant, ZoneId } from './js-joda';\n\n/**\n * Creates ZonedDateTime from a javascript Date or a moment instance.\n * @param {!(Date|moment)} date - a javascript Date or a moment instance\n * @param {ZoneId} [zone = ZoneId.systemDefault()] - the zone of the returned ZonedDateTime, defaults to ZoneId.systemDefault()\n * @returns {ZonedDateTime}\n */\nexport function nativeJs(date, zone = ZoneId.systemDefault()) {\n    requireNonNull(date, 'date');\n    requireNonNull(zone, 'zone');\n    if(date instanceof Date) {\n        return Instant.ofEpochMilli(date.getTime()).atZone(zone);\n    } else if(typeof date.toDate === 'function' &&  date.toDate() instanceof Date) {\n        return Instant.ofEpochMilli(date.toDate().getTime()).atZone(zone);\n    }\n    throw new IllegalArgumentException('date must be a javascript Date or a moment instance');\n}\n", "/**\n * @private\n *\n * @param jsJoda\n * @returns { function(jsJoda: JsJoda) }\n */\nexport function bindUse(jsJoda) {\n    const used = [];\n\n    /**\n     * use\n     *\n     * Provides a way to extend the internals of js-joda\n     *\n     * @param {function} fn - function to extend js-joda public api\n     * @returns {this} for chaining\n     */\n    return function use(fn) {\n        if (!~used.indexOf(fn)) {\n            fn(jsJoda);\n            used.push(fn);\n        }\n        return jsJoda;\n    };\n}\n", "/**\n * @copyright (c) 2016, Philipp Thürwächter & Pattrick Hüper\n * @license BSD-3-Clause (see LICENSE in the root directory of this source tree)\n */\n\nimport {\n    ArithmeticException,\n    DateTimeException,\n    DateTimeParseException,\n    IllegalArgumentException,\n    IllegalStateException,\n    UnsupportedTemporalTypeException,\n    NullPointerException\n} from './errors';\n\nimport { Clock } from './Clock';\nimport { DayOfWeek } from './DayOfWeek';\nimport { Duration } from './Duration';\nimport { Instant } from './Instant';\nimport { LocalDate } from './LocalDate';\nimport { LocalTime } from './LocalTime';\nimport { LocalDateTime } from './LocalDateTime';\nimport { Month } from './Month';\nimport { MonthDay } from './MonthDay';\nimport { OffsetDateTime } from './OffsetDateTime';\nimport { OffsetTime } from './OffsetTime';\nimport { Period } from './Period';\nimport { Year } from './Year';\nimport { YearConstants } from './YearConstants';\nimport { YearMonth } from './YearMonth';\nimport { ZonedDateTime } from './ZonedDateTime';\nimport { ZoneOffset } from './ZoneOffset';\nimport { ZoneId } from './ZoneId';\nimport { ZoneRegion } from './ZoneRegion';\n\nimport { ZoneOffsetTransition } from './zone/ZoneOffsetTransition';\nimport { ZoneRules } from './zone/ZoneRules';\nimport { ZoneRulesProvider } from './zone/ZoneRulesProvider';\n\nimport { ChronoLocalDate } from './chrono/ChronoLocalDate';\nimport { ChronoLocalDateTime } from './chrono/ChronoLocalDateTime';\nimport { ChronoZonedDateTime } from './chrono/ChronoZonedDateTime';\nimport { IsoChronology } from './chrono/IsoChronology';\n\nimport { ChronoField } from './temporal/ChronoField';\nimport { ChronoUnit } from './temporal/ChronoUnit';\nimport { IsoFields } from './temporal/IsoFields';\nimport { Temporal } from './temporal/Temporal';\nimport { TemporalAccessor } from './temporal/TemporalAccessor';\nimport { TemporalAdjuster } from './temporal/TemporalAdjuster';\nimport { TemporalAdjusters } from './temporal/TemporalAdjusters';\nimport { TemporalAmount } from './temporal/TemporalAmount';\nimport { TemporalField } from './temporal/TemporalField';\nimport { TemporalQueries } from './temporal/TemporalQueries';\nimport { TemporalQuery } from './temporal/TemporalQuery';\nimport { TemporalUnit } from './temporal/TemporalUnit';\nimport { ValueRange } from './temporal/ValueRange';\n\nimport { DateTimeFormatter } from './format/DateTimeFormatter';\nimport { DateTimeFormatterBuilder } from './format/DateTimeFormatterBuilder';\nimport { DecimalStyle } from './format/DecimalStyle';\nimport { ParsePosition } from './format/ParsePosition';\nimport { ResolverStyle } from './format/ResolverStyle';\nimport { SignStyle } from './format/SignStyle';\nimport { TextStyle } from './format/TextStyle';\n\n// init static properties\nimport './_init';\n\n// private/internal exports, e.g. for use in plugins\nimport { MathUtil } from './MathUtil';\nimport { StringUtil } from './StringUtil';\nimport { DateTimeBuilder } from './format/DateTimeBuilder';\nimport { DateTimeParseContext } from './format/DateTimeParseContext';\nimport { DateTimePrintContext } from './format/DateTimePrintContext';\nimport { StringBuilder } from './format/StringBuilder';\nimport * as assert from './assert';\n\nimport { convert } from './convert';\nimport { nativeJs } from './nativeJs';\nimport { bindUse } from './use';\n\nconst _ = {\n    assert,\n    DateTimeBuilder,\n    DateTimeParseContext,\n    DateTimePrintContext,\n    MathUtil,\n    StringUtil,\n    StringBuilder,\n};\n\nconst jsJodaExports = {\n    _,\n    convert,\n    nativeJs,\n    ArithmeticException,\n    DateTimeException,\n    DateTimeParseException,\n    IllegalArgumentException,\n    IllegalStateException,\n    UnsupportedTemporalTypeException,\n    NullPointerException,\n    Clock,\n    DayOfWeek,\n    Duration,\n    Instant,\n    LocalDate,\n    LocalTime,\n    LocalDateTime,\n    OffsetTime,\n    OffsetDateTime,\n    Month,\n    MonthDay,\n    ParsePosition,\n    Period,\n    Year,\n    YearConstants,\n    YearMonth,\n    ZonedDateTime,\n    ZoneOffset,\n    ZoneId,\n    ZoneRegion,\n    ZoneOffsetTransition,\n    ZoneRules,\n    ZoneRulesProvider,\n    ChronoLocalDate,\n    ChronoLocalDateTime,\n    ChronoZonedDateTime,\n    IsoChronology,\n    ChronoField,\n    ChronoUnit,\n    IsoFields,\n    Temporal,\n    TemporalAccessor,\n    TemporalAdjuster,\n    TemporalAdjusters,\n    TemporalAmount,\n    TemporalField,\n    TemporalQueries,\n    TemporalQuery,\n    TemporalUnit,\n    ValueRange,\n    DateTimeFormatter,\n    DateTimeFormatterBuilder,\n    DecimalStyle,\n    ResolverStyle,\n    SignStyle,\n    TextStyle,\n};\n\n/**\n * @private\n *\n * @type { function(function(jsJoda: JsJoda) }\n */\nconst use = bindUse(jsJodaExports);\njsJodaExports.use = use;\n\nexport {\n    _,\n    use,\n    convert,\n    nativeJs,\n    ArithmeticException,\n    DateTimeException,\n    DateTimeParseException,\n    IllegalArgumentException,\n    IllegalStateException,\n    UnsupportedTemporalTypeException,\n    NullPointerException,\n    Clock,\n    DayOfWeek,\n    Duration,\n    Instant,\n    LocalDate,\n    LocalTime,\n    LocalDateTime,\n    Month,\n    MonthDay,\n    OffsetTime,\n    OffsetDateTime,\n    Period,\n    ParsePosition,\n    Year,\n    YearConstants,\n    YearMonth,\n    ZonedDateTime,\n    ZoneOffset,\n    ZoneId,\n    ZoneRegion,\n    ZoneOffsetTransition,\n    ZoneRules,\n    ZoneRulesProvider,\n    ChronoLocalDate,\n    ChronoLocalDateTime,\n    ChronoZonedDateTime,\n    IsoChronology,\n    ChronoField,\n    ChronoUnit,\n    IsoFields,\n    Temporal,\n    TemporalAccessor,\n    TemporalAdjuster,\n    TemporalAdjusters,\n    TemporalAmount,\n    TemporalField,\n    TemporalQueries,\n    TemporalQuery,\n    TemporalUnit,\n    ValueRange,\n    DateTimeFormatter,\n    DateTimeFormatterBuilder,\n    DecimalStyle,\n    ResolverStyle,\n    SignStyle,\n    TextStyle,\n};\n", "import { type DataType } from '../data-type';\nimport DateTimeN from './datetimen';\nimport { ChronoUnit, LocalDate } from '@js-joda/core';\n\nconst EPOCH_DATE = LocalDate.ofYearDay(1900, 1);\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x08]);\n\nconst DateTime: DataType = {\n  id: 0x3D,\n  type: 'DATETIME',\n  name: 'DateTime',\n\n  declaration: function() {\n    return 'datetime';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([DateTimeN.id, 0x08]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  generateParameterData: function*(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n\n    let date: LocalDate;\n    if (options.useUTC) {\n      date = LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    } else {\n      date = LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n    }\n\n    let days = EPOCH_DATE.until(date, ChronoUnit.DAYS);\n\n    let milliseconds, threeHundredthsOfSecond;\n    if (options.useUTC) {\n      let seconds = value.getUTCHours() * 60 * 60;\n      seconds += value.getUTCMinutes() * 60;\n      seconds += value.getUTCSeconds();\n      milliseconds = (seconds * 1000) + value.getUTCMilliseconds();\n    } else {\n      let seconds = value.getHours() * 60 * 60;\n      seconds += value.getMinutes() * 60;\n      seconds += value.getSeconds();\n      milliseconds = (seconds * 1000) + value.getMilliseconds();\n    }\n\n    threeHundredthsOfSecond = milliseconds / (3 + (1 / 3));\n    threeHundredthsOfSecond = Math.round(threeHundredthsOfSecond);\n\n    // 25920000 equals one day\n    if (threeHundredthsOfSecond === 25920000) {\n      days += 1;\n      threeHundredthsOfSecond = 0;\n    }\n\n    const buffer = Buffer.alloc(8);\n    buffer.writeInt32LE(days, 0);\n    buffer.writeUInt32LE(threeHundredthsOfSecond, 4);\n    yield buffer;\n  },\n\n  // TODO: type 'any' needs to be revisited.\n  validate: function(value: any, collation, options): null | number {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    value = value as Date;\n\n    let year;\n    if (options && options.useUTC) {\n      year = value.getUTCFullYear();\n    } else {\n      year = value.getFullYear();\n    }\n\n    if (year < 1753 || year > 9999) {\n      throw new TypeError('Out of range.');\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\n\nexport default DateTime;\nmodule.exports = DateTime;\n", "import { type DataType } from '../data-type';\nimport FloatN from './floatn';\n\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst Float: DataType = {\n  id: 0x3E,\n  type: 'FLT8',\n  name: 'Float',\n\n  declaration: function() {\n    return 'float';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([FloatN.id, 0x08]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return Buffer.from([0x08]);\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = Buffer.alloc(8);\n    buffer.writeDoubleLE(parseFloat(parameter.value), 0);\n    yield buffer;\n  },\n\n  validate: function(value): number | null {\n    if (value == null) {\n      return null;\n    }\n    value = parseFloat(value);\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n    return value;\n  }\n};\n\nexport default Float;\nmodule.exports = Float;\n", "import { type DataType } from '../data-type';\n\nconst DecimalN: DataType = {\n  id: 0x6A,\n  type: 'DECIMALN',\n  name: 'DecimalN',\n\n  declaration() {\n    throw new Error('not implemented');\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default DecimalN;\nmodule.exports = DecimalN;\n", "import { type DataType } from '../data-type';\nimport DecimalN from './decimaln';\nimport WritableTrackingBuffer from '../tracking-buffer/writable-tracking-buffer';\n\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst Decimal: DataType & { resolvePrecision: NonNullable<DataType['resolvePrecision']>, resolveScale: NonNullable<DataType['resolveScale']> } = {\n  id: 0x37,\n  type: 'DECIMAL',\n  name: 'Decimal',\n\n  declaration: function(parameter) {\n    return 'decimal(' + (this.resolvePrecision(parameter)) + ', ' + (this.resolveScale(parameter)) + ')';\n  },\n\n  resolvePrecision: function(parameter) {\n    if (parameter.precision != null) {\n      return parameter.precision;\n    } else if (parameter.value === null) {\n      return 1;\n    } else {\n      return 18;\n    }\n  },\n\n  resolveScale: function(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else {\n      return 0;\n    }\n  },\n\n  generateTypeInfo(parameter, _options) {\n    let precision;\n    if (parameter.precision! <= 9) {\n      precision = 0x05;\n    } else if (parameter.precision! <= 19) {\n      precision = 0x09;\n    } else if (parameter.precision! <= 28) {\n      precision = 0x0D;\n    } else {\n      precision = 0x11;\n    }\n\n    return Buffer.from([DecimalN.id, precision, parameter.precision!, parameter.scale!]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const precision = parameter.precision!;\n    if (precision <= 9) {\n      return Buffer.from([0x05]);\n    } else if (precision <= 19) {\n      return Buffer.from([0x09]);\n    } else if (precision <= 28) {\n      return Buffer.from([0x0D]);\n    } else {\n      return Buffer.from([0x11]);\n    }\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const sign = parameter.value < 0 ? 0 : 1;\n    const value = Math.round(Math.abs(parameter.value * Math.pow(10, parameter.scale!)));\n    const precision = parameter.precision!;\n    if (precision <= 9) {\n      const buffer = Buffer.alloc(5);\n      buffer.writeUInt8(sign, 0);\n      buffer.writeUInt32LE(value, 1);\n      yield buffer;\n    } else if (precision <= 19) {\n      const buffer = new WritableTrackingBuffer(9);\n      buffer.writeUInt8(sign);\n      buffer.writeUInt64LE(value);\n      yield buffer.data;\n    } else if (precision <= 28) {\n      const buffer = new WritableTrackingBuffer(13);\n      buffer.writeUInt8(sign);\n      buffer.writeUInt64LE(value);\n      buffer.writeUInt32LE(0x00000000);\n      yield buffer.data;\n    } else {\n      const buffer = new WritableTrackingBuffer(17);\n      buffer.writeUInt8(sign);\n      buffer.writeUInt64LE(value);\n      buffer.writeUInt32LE(0x00000000);\n      buffer.writeUInt32LE(0x00000000);\n      yield buffer.data;\n    }\n  },\n\n  validate: function(value): number | null {\n    if (value == null) {\n      return null;\n    }\n    value = parseFloat(value);\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n    return value;\n  }\n};\n\nexport default Decimal;\nmodule.exports = Decimal;\n", "import { type DataType } from '../data-type';\n\nconst NumericN: DataType = {\n  id: 0x6C,\n  type: 'NUMERICN',\n  name: 'NumericN',\n\n  declaration() {\n    throw new Error('not implemented');\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default NumericN;\nmodule.exports = NumericN;\n", "import { type DataType } from '../data-type';\nimport NumericN from './numericn';\nimport WritableTrackingBuffer from '../tracking-buffer/writable-tracking-buffer';\n\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst Numeric: DataType & { resolveScale: NonNullable<DataType['resolveScale']>, resolvePrecision: NonNullable<DataType['resolvePrecision']> } = {\n  id: 0x3F,\n  type: 'NUMERIC',\n  name: 'Numeric',\n\n  declaration: function(parameter) {\n    return 'numeric(' + (this.resolvePrecision(parameter)) + ', ' + (this.resolveScale(parameter)) + ')';\n  },\n\n  resolvePrecision: function(parameter) {\n    if (parameter.precision != null) {\n      return parameter.precision;\n    } else if (parameter.value === null) {\n      return 1;\n    } else {\n      return 18;\n    }\n  },\n\n  resolveScale: function(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else {\n      return 0;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    let precision;\n    if (parameter.precision! <= 9) {\n      precision = 0x05;\n    } else if (parameter.precision! <= 19) {\n      precision = 0x09;\n    } else if (parameter.precision! <= 28) {\n      precision = 0x0D;\n    } else {\n      precision = 0x11;\n    }\n\n    return Buffer.from([NumericN.id, precision, parameter.precision!, parameter.scale!]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const precision = parameter.precision!;\n    if (precision <= 9) {\n      return Buffer.from([0x05]);\n    } else if (precision <= 19) {\n      return Buffer.from([0x09]);\n    } else if (precision <= 28) {\n      return Buffer.from([0x0D]);\n    } else {\n      return Buffer.from([0x11]);\n    }\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const sign = parameter.value < 0 ? 0 : 1;\n    const value = Math.round(Math.abs(parameter.value * Math.pow(10, parameter.scale!)));\n    if (parameter.precision! <= 9) {\n      const buffer = Buffer.alloc(5);\n      buffer.writeUInt8(sign, 0);\n      buffer.writeUInt32LE(value, 1);\n      yield buffer;\n    } else if (parameter.precision! <= 19) {\n      const buffer = new WritableTrackingBuffer(10);\n      buffer.writeUInt8(sign);\n      buffer.writeUInt64LE(value);\n      yield buffer.data;\n    } else if (parameter.precision! <= 28) {\n      const buffer = new WritableTrackingBuffer(14);\n      buffer.writeUInt8(sign);\n      buffer.writeUInt64LE(value);\n      buffer.writeUInt32LE(0x00000000);\n      yield buffer.data;\n    } else {\n      const buffer = new WritableTrackingBuffer(18);\n      buffer.writeUInt8(sign);\n      buffer.writeUInt64LE(value);\n      buffer.writeUInt32LE(0x00000000);\n      buffer.writeUInt32LE(0x00000000);\n      yield buffer.data;\n    }\n  },\n\n  validate: function(value): null | number {\n    if (value == null) {\n      return null;\n    }\n    value = parseFloat(value);\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n    return value;\n  }\n};\n\nexport default Numeric;\nmodule.exports = Numeric;\n", "import { type DataType } from '../data-type';\nimport MoneyN from './moneyn';\n\nconst DATA_LENGTH = Buffer.from([0x04]);\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst SmallMoney: DataType = {\n  id: 0x7A,\n  type: 'MONEY4',\n  name: 'SmallMoney',\n\n  declaration: function() {\n    return 'smallmoney';\n  },\n\n  generateTypeInfo: function() {\n    return Buffer.from([MoneyN.id, 0x04]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32LE(parameter.value * 10000, 0);\n    yield buffer;\n  },\n\n  validate: function(value): null | number {\n    if (value == null) {\n      return null;\n    }\n    value = parseFloat(value);\n    if (isNaN(value)) {\n      throw new TypeError('Invalid number.');\n    }\n    if (value < -214748.3648 || value > 214748.3647) {\n      throw new TypeError('Value must be between -214748.3648 and 214748.3647.');\n    }\n    return value;\n  }\n};\n\nexport default SmallMoney;\nmodule.exports = SmallMoney;\n", "import { type DataType } from '../data-type';\nimport IntN from './intn';\nimport WritableTrackingBuffer from '../tracking-buffer/writable-tracking-buffer';\n\nconst DATA_LENGTH = Buffer.from([0x08]);\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst MAX_SAFE_BIGINT = 9223372036854775807n;\nconst MIN_SAFE_BIGINT = -9223372036854775808n;\n\nconst BigInt: DataType = {\n  id: 0x7F,\n  type: 'INT8',\n  name: 'BigInt',\n\n  declaration: function() {\n    return 'bigint';\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([IntN.id, 0x08]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = new WritableTrackingBuffer(8);\n    buffer.writeInt64LE(Number(parameter.value));\n    yield buffer.data;\n  },\n\n  validate: function(value): null | bigint {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'bigint') {\n      value = globalThis.BigInt(value);\n    }\n\n    if (value < MIN_SAFE_BIGINT || value > MAX_SAFE_BIGINT) {\n      throw new TypeError(`Value must be between ${MIN_SAFE_BIGINT} and ${MAX_SAFE_BIGINT}, inclusive.`);\n    }\n\n    return value;\n  }\n};\n\nexport default BigInt;\nmodule.exports = BigInt;\n", "import { type DataType } from '../data-type';\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF]);\n\nconst Image: DataType = {\n  id: 0x22,\n  type: 'IMAGE',\n  name: 'Image',\n  hasTableName: true,\n\n  declaration: function() {\n    return 'image';\n  },\n\n  resolveLength: function(parameter) {\n    if (parameter.value != null) {\n      const value = parameter.value as any; // TODO: Temporary solution. Replace 'any' more with specific type;\n      return value.length;\n    } else {\n      return -1;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(5);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeInt32LE(parameter.length!, 1);\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32LE(parameter.value.length!, 0);\n    return buffer;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield parameter.value;\n  },\n\n  validate: function(value): null | Buffer {\n    if (value == null) {\n      return null;\n    }\n    if (!Buffer.isBuffer(value)) {\n      throw new TypeError('Invalid buffer.');\n    }\n    return value;\n  }\n};\n\nexport default Image;\nmodule.exports = Image;\n", "/* eslint-disable node/no-deprecated-api */\n\n'use strict'\n\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\nvar safer = {}\n\nvar key\n\nfor (key in buffer) {\n  if (!buffer.hasOwnProperty(key)) continue\n  if (key === 'SlowBuffer' || key === 'Buffer') continue\n  safer[key] = buffer[key]\n}\n\nvar Safer = safer.Buffer = {}\nfor (key in Buffer) {\n  if (!Buffer.hasOwnProperty(key)) continue\n  if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue\n  Safer[key] = Buffer[key]\n}\n\nsafer.Buffer.prototype = Buffer.prototype\n\nif (!Safer.from || Safer.from === Uint8Array.from) {\n  Safer.from = function (value, encodingOrOffset, length) {\n    if (typeof value === 'number') {\n      throw new TypeError('The \"value\" argument must not be of type number. Received type ' + typeof value)\n    }\n    if (value && typeof value.length === 'undefined') {\n      throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value)\n    }\n    return Buffer(value, encodingOrOffset, length)\n  }\n}\n\nif (!Safer.alloc) {\n  Safer.alloc = function (size, fill, encoding) {\n    if (typeof size !== 'number') {\n      throw new TypeError('The \"size\" argument must be of type number. Received type ' + typeof size)\n    }\n    if (size < 0 || size >= 2 * (1 << 30)) {\n      throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"')\n    }\n    var buf = Buffer(size)\n    if (!fill || fill.length === 0) {\n      buf.fill(0)\n    } else if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n    return buf\n  }\n}\n\nif (!safer.kStringMaxLength) {\n  try {\n    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength\n  } catch (e) {\n    // we can't determine kStringMaxLength in environments where process.binding\n    // is unsupported, so let's not set it\n  }\n}\n\nif (!safer.constants) {\n  safer.constants = {\n    MAX_LENGTH: safer.kMaxLength\n  }\n  if (safer.kStringMaxLength) {\n    safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength\n  }\n}\n\nmodule.exports = safer\n", "\"use strict\";\n\nvar BOMChar = '\\uFEFF';\n\nexports.PrependBOM = PrependBOMWrapper\nfunction PrependBOMWrapper(encoder, options) {\n    this.encoder = encoder;\n    this.addBOM = true;\n}\n\nPrependBOMWrapper.prototype.write = function(str) {\n    if (this.addBOM) {\n        str = BOMChar + str;\n        this.addBOM = false;\n    }\n\n    return this.encoder.write(str);\n}\n\nPrependBOMWrapper.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n//------------------------------------------------------------------------------\n\nexports.StripBOM = StripBOMWrapper;\nfunction StripBOMWrapper(decoder, options) {\n    this.decoder = decoder;\n    this.pass = false;\n    this.options = options || {};\n}\n\nStripBOMWrapper.prototype.write = function(buf) {\n    var res = this.decoder.write(buf);\n    if (this.pass || !res)\n        return res;\n\n    if (res[0] === BOMChar) {\n        res = res.slice(1);\n        if (typeof this.options.stripBOM === 'function')\n            this.options.stripBOM();\n    }\n\n    this.pass = true;\n    return res;\n}\n\nStripBOMWrapper.prototype.end = function() {\n    return this.decoder.end();\n}\n\n", "\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Export Node.js internal encodings.\n\nmodule.exports = {\n    // Encodings\n    utf8:   { type: \"_internal\", bomAware: true},\n    cesu8:  { type: \"_internal\", bomAware: true},\n    unicode11utf8: \"utf8\",\n\n    ucs2:   { type: \"_internal\", bomAware: true},\n    utf16le: \"ucs2\",\n\n    binary: { type: \"_internal\" },\n    base64: { type: \"_internal\" },\n    hex:    { type: \"_internal\" },\n\n    // Codec.\n    _internal: InternalCodec,\n};\n\n//------------------------------------------------------------------------------\n\nfunction InternalCodec(codecOptions, iconv) {\n    this.enc = codecOptions.encodingName;\n    this.bomAware = codecOptions.bomAware;\n\n    if (this.enc === \"base64\")\n        this.encoder = InternalEncoderBase64;\n    else if (this.enc === \"cesu8\") {\n        this.enc = \"utf8\"; // Use utf8 for decoding.\n        this.encoder = InternalEncoderCesu8;\n\n        // Add decoder for versions of Node not supporting CESU-8\n        if (Buffer.from('eda0bdedb2a9', 'hex').toString() !== '💩') {\n            this.decoder = InternalDecoderCesu8;\n            this.defaultCharUnicode = iconv.defaultCharUnicode;\n        }\n    }\n}\n\nInternalCodec.prototype.encoder = InternalEncoder;\nInternalCodec.prototype.decoder = InternalDecoder;\n\n//------------------------------------------------------------------------------\n\n// We use node.js internal decoder. Its signature is the same as ours.\nvar StringDecoder = require('string_decoder').StringDecoder;\n\nif (!StringDecoder.prototype.end) // Node v0.8 doesn't have this method.\n    StringDecoder.prototype.end = function() {};\n\n\nfunction InternalDecoder(options, codec) {\n    this.decoder = new StringDecoder(codec.enc);\n}\n\nInternalDecoder.prototype.write = function(buf) {\n    if (!Buffer.isBuffer(buf)) {\n        buf = Buffer.from(buf);\n    }\n\n    return this.decoder.write(buf);\n}\n\nInternalDecoder.prototype.end = function() {\n    return this.decoder.end();\n}\n\n\n//------------------------------------------------------------------------------\n// Encoder is mostly trivial\n\nfunction InternalEncoder(options, codec) {\n    this.enc = codec.enc;\n}\n\nInternalEncoder.prototype.write = function(str) {\n    return Buffer.from(str, this.enc);\n}\n\nInternalEncoder.prototype.end = function() {\n}\n\n\n//------------------------------------------------------------------------------\n// Except base64 encoder, which must keep its state.\n\nfunction InternalEncoderBase64(options, codec) {\n    this.prevStr = '';\n}\n\nInternalEncoderBase64.prototype.write = function(str) {\n    str = this.prevStr + str;\n    var completeQuads = str.length - (str.length % 4);\n    this.prevStr = str.slice(completeQuads);\n    str = str.slice(0, completeQuads);\n\n    return Buffer.from(str, \"base64\");\n}\n\nInternalEncoderBase64.prototype.end = function() {\n    return Buffer.from(this.prevStr, \"base64\");\n}\n\n\n//------------------------------------------------------------------------------\n// CESU-8 encoder is also special.\n\nfunction InternalEncoderCesu8(options, codec) {\n}\n\nInternalEncoderCesu8.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length * 3), bufIdx = 0;\n    for (var i = 0; i < str.length; i++) {\n        var charCode = str.charCodeAt(i);\n        // Naive implementation, but it works because CESU-8 is especially easy\n        // to convert from UTF-16 (which all JS strings are encoded in).\n        if (charCode < 0x80)\n            buf[bufIdx++] = charCode;\n        else if (charCode < 0x800) {\n            buf[bufIdx++] = 0xC0 + (charCode >>> 6);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n        else { // charCode will always be < 0x10000 in javascript.\n            buf[bufIdx++] = 0xE0 + (charCode >>> 12);\n            buf[bufIdx++] = 0x80 + ((charCode >>> 6) & 0x3f);\n            buf[bufIdx++] = 0x80 + (charCode & 0x3f);\n        }\n    }\n    return buf.slice(0, bufIdx);\n}\n\nInternalEncoderCesu8.prototype.end = function() {\n}\n\n//------------------------------------------------------------------------------\n// CESU-8 decoder is not implemented in Node v4.0+\n\nfunction InternalDecoderCesu8(options, codec) {\n    this.acc = 0;\n    this.contBytes = 0;\n    this.accBytes = 0;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n}\n\nInternalDecoderCesu8.prototype.write = function(buf) {\n    var acc = this.acc, contBytes = this.contBytes, accBytes = this.accBytes, \n        res = '';\n    for (var i = 0; i < buf.length; i++) {\n        var curByte = buf[i];\n        if ((curByte & 0xC0) !== 0x80) { // Leading byte\n            if (contBytes > 0) { // Previous code is invalid\n                res += this.defaultCharUnicode;\n                contBytes = 0;\n            }\n\n            if (curByte < 0x80) { // Single-byte code\n                res += String.fromCharCode(curByte);\n            } else if (curByte < 0xE0) { // Two-byte code\n                acc = curByte & 0x1F;\n                contBytes = 1; accBytes = 1;\n            } else if (curByte < 0xF0) { // Three-byte code\n                acc = curByte & 0x0F;\n                contBytes = 2; accBytes = 1;\n            } else { // Four or more are not supported for CESU-8.\n                res += this.defaultCharUnicode;\n            }\n        } else { // Continuation byte\n            if (contBytes > 0) { // We're waiting for it.\n                acc = (acc << 6) | (curByte & 0x3f);\n                contBytes--; accBytes++;\n                if (contBytes === 0) {\n                    // Check for overlong encoding, but support Modified UTF-8 (encoding NULL as C0 80)\n                    if (accBytes === 2 && acc < 0x80 && acc > 0)\n                        res += this.defaultCharUnicode;\n                    else if (accBytes === 3 && acc < 0x800)\n                        res += this.defaultCharUnicode;\n                    else\n                        // Actually add character.\n                        res += String.fromCharCode(acc);\n                }\n            } else { // Unexpected continuation byte\n                res += this.defaultCharUnicode;\n            }\n        }\n    }\n    this.acc = acc; this.contBytes = contBytes; this.accBytes = accBytes;\n    return res;\n}\n\nInternalDecoderCesu8.prototype.end = function() {\n    var res = 0;\n    if (this.contBytes > 0)\n        res += this.defaultCharUnicode;\n    return res;\n}\n", "'use strict';\n\nvar Buffer = require('safer-buffer').Buffer;\n\n// == UTF32-LE/BE codec. ==========================================================\n\nexports._utf32 = Utf32Codec;\n\nfunction Utf32Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n    this.bomAware = true;\n    this.isLE = codecOptions.isLE;\n}\n\nexports.utf32le = { type: '_utf32', isLE: true };\nexports.utf32be = { type: '_utf32', isLE: false };\n\n// Aliases\nexports.ucs4le = 'utf32le';\nexports.ucs4be = 'utf32be';\n\nUtf32Codec.prototype.encoder = Utf32Encoder;\nUtf32Codec.prototype.decoder = Utf32Decoder;\n\n// -- Encoding\n\nfunction Utf32Encoder(options, codec) {\n    this.isLE = codec.isLE;\n    this.highSurrogate = 0;\n}\n\nUtf32Encoder.prototype.write = function(str) {\n    var src = Buffer.from(str, 'ucs2');\n    var dst = Buffer.alloc(src.length * 2);\n    var write32 = this.isLE ? dst.writeUInt32LE : dst.writeUInt32BE;\n    var offset = 0;\n\n    for (var i = 0; i < src.length; i += 2) {\n        var code = src.readUInt16LE(i);\n        var isHighSurrogate = (0xD800 <= code && code < 0xDC00);\n        var isLowSurrogate = (0xDC00 <= code && code < 0xE000);\n\n        if (this.highSurrogate) {\n            if (isHighSurrogate || !isLowSurrogate) {\n                // There shouldn't be two high surrogates in a row, nor a high surrogate which isn't followed by a low\n                // surrogate. If this happens, keep the pending high surrogate as a stand-alone semi-invalid character\n                // (technically wrong, but expected by some applications, like Windows file names).\n                write32.call(dst, this.highSurrogate, offset);\n                offset += 4;\n            }\n            else {\n                // Create 32-bit value from high and low surrogates;\n                var codepoint = (((this.highSurrogate - 0xD800) << 10) | (code - 0xDC00)) + 0x10000;\n\n                write32.call(dst, codepoint, offset);\n                offset += 4;\n                this.highSurrogate = 0;\n\n                continue;\n            }\n        }\n\n        if (isHighSurrogate)\n            this.highSurrogate = code;\n        else {\n            // Even if the current character is a low surrogate, with no previous high surrogate, we'll\n            // encode it as a semi-invalid stand-alone character for the same reasons expressed above for\n            // unpaired high surrogates.\n            write32.call(dst, code, offset);\n            offset += 4;\n            this.highSurrogate = 0;\n        }\n    }\n\n    if (offset < dst.length)\n        dst = dst.slice(0, offset);\n\n    return dst;\n};\n\nUtf32Encoder.prototype.end = function() {\n    // Treat any leftover high surrogate as a semi-valid independent character.\n    if (!this.highSurrogate)\n        return;\n\n    var buf = Buffer.alloc(4);\n\n    if (this.isLE)\n        buf.writeUInt32LE(this.highSurrogate, 0);\n    else\n        buf.writeUInt32BE(this.highSurrogate, 0);\n\n    this.highSurrogate = 0;\n\n    return buf;\n};\n\n// -- Decoding\n\nfunction Utf32Decoder(options, codec) {\n    this.isLE = codec.isLE;\n    this.badChar = codec.iconv.defaultCharUnicode.charCodeAt(0);\n    this.overflow = [];\n}\n\nUtf32Decoder.prototype.write = function(src) {\n    if (src.length === 0)\n        return '';\n\n    var i = 0;\n    var codepoint = 0;\n    var dst = Buffer.alloc(src.length + 4);\n    var offset = 0;\n    var isLE = this.isLE;\n    var overflow = this.overflow;\n    var badChar = this.badChar;\n\n    if (overflow.length > 0) {\n        for (; i < src.length && overflow.length < 4; i++)\n            overflow.push(src[i]);\n        \n        if (overflow.length === 4) {\n            // NOTE: codepoint is a signed int32 and can be negative.\n            // NOTE: We copied this block from below to help V8 optimize it (it works with array, not buffer).\n            if (isLE) {\n                codepoint = overflow[i] | (overflow[i+1] << 8) | (overflow[i+2] << 16) | (overflow[i+3] << 24);\n            } else {\n                codepoint = overflow[i+3] | (overflow[i+2] << 8) | (overflow[i+1] << 16) | (overflow[i] << 24);\n            }\n            overflow.length = 0;\n\n            offset = _writeCodepoint(dst, offset, codepoint, badChar);\n        }\n    }\n\n    // Main loop. Should be as optimized as possible.\n    for (; i < src.length - 3; i += 4) {\n        // NOTE: codepoint is a signed int32 and can be negative.\n        if (isLE) {\n            codepoint = src[i] | (src[i+1] << 8) | (src[i+2] << 16) | (src[i+3] << 24);\n        } else {\n            codepoint = src[i+3] | (src[i+2] << 8) | (src[i+1] << 16) | (src[i] << 24);\n        }\n        offset = _writeCodepoint(dst, offset, codepoint, badChar);\n    }\n\n    // Keep overflowing bytes.\n    for (; i < src.length; i++) {\n        overflow.push(src[i]);\n    }\n\n    return dst.slice(0, offset).toString('ucs2');\n};\n\nfunction _writeCodepoint(dst, offset, codepoint, badChar) {\n    // NOTE: codepoint is signed int32 and can be negative. We keep it that way to help V8 with optimizations.\n    if (codepoint < 0 || codepoint > 0x10FFFF) {\n        // Not a valid Unicode codepoint\n        codepoint = badChar;\n    } \n\n    // Ephemeral Planes: Write high surrogate.\n    if (codepoint >= 0x10000) {\n        codepoint -= 0x10000;\n\n        var high = 0xD800 | (codepoint >> 10);\n        dst[offset++] = high & 0xff;\n        dst[offset++] = high >> 8;\n\n        // Low surrogate is written below.\n        var codepoint = 0xDC00 | (codepoint & 0x3FF);\n    }\n\n    // Write BMP char or low surrogate.\n    dst[offset++] = codepoint & 0xff;\n    dst[offset++] = codepoint >> 8;\n\n    return offset;\n};\n\nUtf32Decoder.prototype.end = function() {\n    this.overflow.length = 0;\n};\n\n// == UTF-32 Auto codec =============================================================\n// Decoder chooses automatically from UTF-32LE and UTF-32BE using BOM and space-based heuristic.\n// Defaults to UTF-32LE. http://en.wikipedia.org/wiki/UTF-32\n// Encoder/decoder default can be changed: iconv.decode(buf, 'utf32', {defaultEncoding: 'utf-32be'});\n\n// Encoder prepends BOM (which can be overridden with (addBOM: false}).\n\nexports.utf32 = Utf32AutoCodec;\nexports.ucs4 = 'utf32';\n\nfunction Utf32AutoCodec(options, iconv) {\n    this.iconv = iconv;\n}\n\nUtf32AutoCodec.prototype.encoder = Utf32AutoEncoder;\nUtf32AutoCodec.prototype.decoder = Utf32AutoDecoder;\n\n// -- Encoding\n\nfunction Utf32AutoEncoder(options, codec) {\n    options = options || {};\n\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n\n    this.encoder = codec.iconv.getEncoder(options.defaultEncoding || 'utf-32le', options);\n}\n\nUtf32AutoEncoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n};\n\nUtf32AutoEncoder.prototype.end = function() {\n    return this.encoder.end();\n};\n\n// -- Decoding\n\nfunction Utf32AutoDecoder(options, codec) {\n    this.decoder = null;\n    this.initialBufs = [];\n    this.initialBufsLen = 0;\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf32AutoDecoder.prototype.write = function(buf) {\n    if (!this.decoder) { \n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBufs.push(buf);\n        this.initialBufsLen += buf.length;\n\n        if (this.initialBufsLen < 32) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var resStr = '';\n        for (var i = 0; i < this.initialBufs.length; i++)\n            resStr += this.decoder.write(this.initialBufs[i]);\n\n        this.initialBufs.length = this.initialBufsLen = 0;\n        return resStr;\n    }\n\n    return this.decoder.write(buf);\n};\n\nUtf32AutoDecoder.prototype.end = function() {\n    if (!this.decoder) {\n        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var resStr = '';\n        for (var i = 0; i < this.initialBufs.length; i++)\n            resStr += this.decoder.write(this.initialBufs[i]);\n\n        var trail = this.decoder.end();\n        if (trail)\n            resStr += trail;\n\n        this.initialBufs.length = this.initialBufsLen = 0;\n        return resStr;\n    }\n\n    return this.decoder.end();\n};\n\nfunction detectEncoding(bufs, defaultEncoding) {\n    var b = [];\n    var charsProcessed = 0;\n    var invalidLE = 0, invalidBE = 0;   // Number of invalid chars when decoded as LE or BE.\n    var bmpCharsLE = 0, bmpCharsBE = 0; // Number of BMP chars when decoded as LE or BE.\n\n    outer_loop:\n    for (var i = 0; i < bufs.length; i++) {\n        var buf = bufs[i];\n        for (var j = 0; j < buf.length; j++) {\n            b.push(buf[j]);\n            if (b.length === 4) {\n                if (charsProcessed === 0) {\n                    // Check BOM first.\n                    if (b[0] === 0xFF && b[1] === 0xFE && b[2] === 0 && b[3] === 0) {\n                        return 'utf-32le';\n                    }\n                    if (b[0] === 0 && b[1] === 0 && b[2] === 0xFE && b[3] === 0xFF) {\n                        return 'utf-32be';\n                    }\n                }\n\n                if (b[0] !== 0 || b[1] > 0x10) invalidBE++;\n                if (b[3] !== 0 || b[2] > 0x10) invalidLE++;\n\n                if (b[0] === 0 && b[1] === 0 && (b[2] !== 0 || b[3] !== 0)) bmpCharsBE++;\n                if ((b[0] !== 0 || b[1] !== 0) && b[2] === 0 && b[3] === 0) bmpCharsLE++;\n\n                b.length = 0;\n                charsProcessed++;\n\n                if (charsProcessed >= 100) {\n                    break outer_loop;\n                }\n            }\n        }\n    }\n\n    // Make decisions.\n    if (bmpCharsBE - invalidBE > bmpCharsLE - invalidLE)  return 'utf-32be';\n    if (bmpCharsBE - invalidBE < bmpCharsLE - invalidLE)  return 'utf-32le';\n\n    // Couldn't decide (likely all zeros or not enough data).\n    return defaultEncoding || 'utf-32le';\n}\n", "\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Note: UTF16-LE (or UCS2) codec is Node.js native. See encodings/internal.js\n\n// == UTF16-BE codec. ==========================================================\n\nexports.utf16be = Utf16BECodec;\nfunction Utf16BECodec() {\n}\n\nUtf16BECodec.prototype.encoder = Utf16BEEncoder;\nUtf16BECodec.prototype.decoder = Utf16BEDecoder;\nUtf16BECodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf16BEEncoder() {\n}\n\nUtf16BEEncoder.prototype.write = function(str) {\n    var buf = Buffer.from(str, 'ucs2');\n    for (var i = 0; i < buf.length; i += 2) {\n        var tmp = buf[i]; buf[i] = buf[i+1]; buf[i+1] = tmp;\n    }\n    return buf;\n}\n\nUtf16BEEncoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf16BEDecoder() {\n    this.overflowByte = -1;\n}\n\nUtf16BEDecoder.prototype.write = function(buf) {\n    if (buf.length == 0)\n        return '';\n\n    var buf2 = Buffer.alloc(buf.length + 1),\n        i = 0, j = 0;\n\n    if (this.overflowByte !== -1) {\n        buf2[0] = buf[0];\n        buf2[1] = this.overflowByte;\n        i = 1; j = 2;\n    }\n\n    for (; i < buf.length-1; i += 2, j+= 2) {\n        buf2[j] = buf[i+1];\n        buf2[j+1] = buf[i];\n    }\n\n    this.overflowByte = (i == buf.length-1) ? buf[buf.length-1] : -1;\n\n    return buf2.slice(0, j).toString('ucs2');\n}\n\nUtf16BEDecoder.prototype.end = function() {\n    this.overflowByte = -1;\n}\n\n\n// == UTF-16 codec =============================================================\n// Decoder chooses automatically from UTF-16LE and UTF-16BE using BOM and space-based heuristic.\n// Defaults to UTF-16LE, as it's prevalent and default in Node.\n// http://en.wikipedia.org/wiki/UTF-16 and http://encoding.spec.whatwg.org/#utf-16le\n// Decoder default can be changed: iconv.decode(buf, 'utf16', {defaultEncoding: 'utf-16be'});\n\n// Encoder uses UTF-16LE and prepends BOM (which can be overridden with addBOM: false).\n\nexports.utf16 = Utf16Codec;\nfunction Utf16Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n}\n\nUtf16Codec.prototype.encoder = Utf16Encoder;\nUtf16Codec.prototype.decoder = Utf16Decoder;\n\n\n// -- Encoding (pass-through)\n\nfunction Utf16Encoder(options, codec) {\n    options = options || {};\n    if (options.addBOM === undefined)\n        options.addBOM = true;\n    this.encoder = codec.iconv.getEncoder('utf-16le', options);\n}\n\nUtf16Encoder.prototype.write = function(str) {\n    return this.encoder.write(str);\n}\n\nUtf16Encoder.prototype.end = function() {\n    return this.encoder.end();\n}\n\n\n// -- Decoding\n\nfunction Utf16Decoder(options, codec) {\n    this.decoder = null;\n    this.initialBufs = [];\n    this.initialBufsLen = 0;\n\n    this.options = options || {};\n    this.iconv = codec.iconv;\n}\n\nUtf16Decoder.prototype.write = function(buf) {\n    if (!this.decoder) {\n        // Codec is not chosen yet. Accumulate initial bytes.\n        this.initialBufs.push(buf);\n        this.initialBufsLen += buf.length;\n        \n        if (this.initialBufsLen < 16) // We need more bytes to use space heuristic (see below)\n            return '';\n\n        // We have enough bytes -> detect endianness.\n        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var resStr = '';\n        for (var i = 0; i < this.initialBufs.length; i++)\n            resStr += this.decoder.write(this.initialBufs[i]);\n\n        this.initialBufs.length = this.initialBufsLen = 0;\n        return resStr;\n    }\n\n    return this.decoder.write(buf);\n}\n\nUtf16Decoder.prototype.end = function() {\n    if (!this.decoder) {\n        var encoding = detectEncoding(this.initialBufs, this.options.defaultEncoding);\n        this.decoder = this.iconv.getDecoder(encoding, this.options);\n\n        var resStr = '';\n        for (var i = 0; i < this.initialBufs.length; i++)\n            resStr += this.decoder.write(this.initialBufs[i]);\n\n        var trail = this.decoder.end();\n        if (trail)\n            resStr += trail;\n\n        this.initialBufs.length = this.initialBufsLen = 0;\n        return resStr;\n    }\n    return this.decoder.end();\n}\n\nfunction detectEncoding(bufs, defaultEncoding) {\n    var b = [];\n    var charsProcessed = 0;\n    var asciiCharsLE = 0, asciiCharsBE = 0; // Number of ASCII chars when decoded as LE or BE.\n\n    outer_loop:\n    for (var i = 0; i < bufs.length; i++) {\n        var buf = bufs[i];\n        for (var j = 0; j < buf.length; j++) {\n            b.push(buf[j]);\n            if (b.length === 2) {\n                if (charsProcessed === 0) {\n                    // Check BOM first.\n                    if (b[0] === 0xFF && b[1] === 0xFE) return 'utf-16le';\n                    if (b[0] === 0xFE && b[1] === 0xFF) return 'utf-16be';\n                }\n\n                if (b[0] === 0 && b[1] !== 0) asciiCharsBE++;\n                if (b[0] !== 0 && b[1] === 0) asciiCharsLE++;\n\n                b.length = 0;\n                charsProcessed++;\n\n                if (charsProcessed >= 100) {\n                    break outer_loop;\n                }\n            }\n        }\n    }\n\n    // Make decisions.\n    // Most of the time, the content has ASCII chars (U+00**), but the opposite (U+**00) is uncommon.\n    // So, we count ASCII as if it was LE or BE, and decide from that.\n    if (asciiCharsBE > asciiCharsLE) return 'utf-16be';\n    if (asciiCharsBE < asciiCharsLE) return 'utf-16le';\n\n    // Couldn't decide (likely all zeros or not enough data).\n    return defaultEncoding || 'utf-16le';\n}\n\n\n", "\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// UTF-7 codec, according to https://tools.ietf.org/html/rfc2152\n// See also below a UTF-7-IMAP codec, according to http://tools.ietf.org/html/rfc3501#section-5.1.3\n\nexports.utf7 = Utf7Codec;\nexports.unicode11utf7 = 'utf7'; // Alias UNICODE-1-1-UTF-7\nfunction Utf7Codec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7Codec.prototype.encoder = Utf7Encoder;\nUtf7Codec.prototype.decoder = Utf7Decoder;\nUtf7Codec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nvar nonDirectChars = /[^A-Za-z0-9'\\(\\),-\\.\\/:\\? \\n\\r\\t]+/g;\n\nfunction Utf7Encoder(options, codec) {\n    this.iconv = codec.iconv;\n}\n\nUtf7Encoder.prototype.write = function(str) {\n    // Naive implementation.\n    // Non-direct chars are encoded as \"+<base64>-\"; single \"+\" char is encoded as \"+-\".\n    return Buffer.from(str.replace(nonDirectChars, function(chunk) {\n        return \"+\" + (chunk === '+' ? '' : \n            this.iconv.encode(chunk, 'utf16-be').toString('base64').replace(/=+$/, '')) \n            + \"-\";\n    }.bind(this)));\n}\n\nUtf7Encoder.prototype.end = function() {\n}\n\n\n// -- Decoding\n\nfunction Utf7Decoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64Regex = /[A-Za-z0-9\\/+]/;\nvar base64Chars = [];\nfor (var i = 0; i < 256; i++)\n    base64Chars[i] = base64Regex.test(String.fromCharCode(i));\n\nvar plusChar = '+'.charCodeAt(0), \n    minusChar = '-'.charCodeAt(0),\n    andChar = '&'.charCodeAt(0);\n\nUtf7Decoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '+'\n            if (buf[i] == plusChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64Chars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) {// \"+-\" -> \"+\"\n                    res += \"+\";\n                } else {\n                    var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), \"ascii\");\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus is absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), \"ascii\");\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7Decoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n// UTF-7-IMAP codec.\n// RFC3501 Sec. 5.1.3 Modified UTF-7 (http://tools.ietf.org/html/rfc3501#section-5.1.3)\n// Differences:\n//  * Base64 part is started by \"&\" instead of \"+\"\n//  * Direct characters are 0x20-0x7E, except \"&\" (0x26)\n//  * In Base64, \",\" is used instead of \"/\"\n//  * Base64 must not be used to represent direct characters.\n//  * No implicit shift back from Base64 (should always end with '-')\n//  * String must end in non-shifted position.\n//  * \"-&\" while in base64 is not allowed.\n\n\nexports.utf7imap = Utf7IMAPCodec;\nfunction Utf7IMAPCodec(codecOptions, iconv) {\n    this.iconv = iconv;\n};\n\nUtf7IMAPCodec.prototype.encoder = Utf7IMAPEncoder;\nUtf7IMAPCodec.prototype.decoder = Utf7IMAPDecoder;\nUtf7IMAPCodec.prototype.bomAware = true;\n\n\n// -- Encoding\n\nfunction Utf7IMAPEncoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = Buffer.alloc(6);\n    this.base64AccumIdx = 0;\n}\n\nUtf7IMAPEncoder.prototype.write = function(str) {\n    var inBase64 = this.inBase64,\n        base64Accum = this.base64Accum,\n        base64AccumIdx = this.base64AccumIdx,\n        buf = Buffer.alloc(str.length*5 + 10), bufIdx = 0;\n\n    for (var i = 0; i < str.length; i++) {\n        var uChar = str.charCodeAt(i);\n        if (0x20 <= uChar && uChar <= 0x7E) { // Direct character or '&'.\n            if (inBase64) {\n                if (base64AccumIdx > 0) {\n                    bufIdx += buf.write(base64Accum.slice(0, base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n                    base64AccumIdx = 0;\n                }\n\n                buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n                inBase64 = false;\n            }\n\n            if (!inBase64) {\n                buf[bufIdx++] = uChar; // Write direct character\n\n                if (uChar === andChar)  // Ampersand -> '&-'\n                    buf[bufIdx++] = minusChar;\n            }\n\n        } else { // Non-direct character\n            if (!inBase64) {\n                buf[bufIdx++] = andChar; // Write '&', then go to base64 mode.\n                inBase64 = true;\n            }\n            if (inBase64) {\n                base64Accum[base64AccumIdx++] = uChar >> 8;\n                base64Accum[base64AccumIdx++] = uChar & 0xFF;\n\n                if (base64AccumIdx == base64Accum.length) {\n                    bufIdx += buf.write(base64Accum.toString('base64').replace(/\\//g, ','), bufIdx);\n                    base64AccumIdx = 0;\n                }\n            }\n        }\n    }\n\n    this.inBase64 = inBase64;\n    this.base64AccumIdx = base64AccumIdx;\n\n    return buf.slice(0, bufIdx);\n}\n\nUtf7IMAPEncoder.prototype.end = function() {\n    var buf = Buffer.alloc(10), bufIdx = 0;\n    if (this.inBase64) {\n        if (this.base64AccumIdx > 0) {\n            bufIdx += buf.write(this.base64Accum.slice(0, this.base64AccumIdx).toString('base64').replace(/\\//g, ',').replace(/=+$/, ''), bufIdx);\n            this.base64AccumIdx = 0;\n        }\n\n        buf[bufIdx++] = minusChar; // Write '-', then go to direct mode.\n        this.inBase64 = false;\n    }\n\n    return buf.slice(0, bufIdx);\n}\n\n\n// -- Decoding\n\nfunction Utf7IMAPDecoder(options, codec) {\n    this.iconv = codec.iconv;\n    this.inBase64 = false;\n    this.base64Accum = '';\n}\n\nvar base64IMAPChars = base64Chars.slice();\nbase64IMAPChars[','.charCodeAt(0)] = true;\n\nUtf7IMAPDecoder.prototype.write = function(buf) {\n    var res = \"\", lastI = 0,\n        inBase64 = this.inBase64,\n        base64Accum = this.base64Accum;\n\n    // The decoder is more involved as we must handle chunks in stream.\n    // It is forgiving, closer to standard UTF-7 (for example, '-' is optional at the end).\n\n    for (var i = 0; i < buf.length; i++) {\n        if (!inBase64) { // We're in direct mode.\n            // Write direct chars until '&'\n            if (buf[i] == andChar) {\n                res += this.iconv.decode(buf.slice(lastI, i), \"ascii\"); // Write direct chars.\n                lastI = i+1;\n                inBase64 = true;\n            }\n        } else { // We decode base64.\n            if (!base64IMAPChars[buf[i]]) { // Base64 ended.\n                if (i == lastI && buf[i] == minusChar) { // \"&-\" -> \"&\"\n                    res += \"&\";\n                } else {\n                    var b64str = base64Accum + this.iconv.decode(buf.slice(lastI, i), \"ascii\").replace(/,/g, '/');\n                    res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n                }\n\n                if (buf[i] != minusChar) // Minus may be absorbed after base64.\n                    i--;\n\n                lastI = i+1;\n                inBase64 = false;\n                base64Accum = '';\n            }\n        }\n    }\n\n    if (!inBase64) {\n        res += this.iconv.decode(buf.slice(lastI), \"ascii\"); // Write direct chars.\n    } else {\n        var b64str = base64Accum + this.iconv.decode(buf.slice(lastI), \"ascii\").replace(/,/g, '/');\n\n        var canBeDecoded = b64str.length - (b64str.length % 8); // Minimal chunk: 2 quads -> 2x3 bytes -> 3 chars.\n        base64Accum = b64str.slice(canBeDecoded); // The rest will be decoded in future.\n        b64str = b64str.slice(0, canBeDecoded);\n\n        res += this.iconv.decode(Buffer.from(b64str, 'base64'), \"utf16-be\");\n    }\n\n    this.inBase64 = inBase64;\n    this.base64Accum = base64Accum;\n\n    return res;\n}\n\nUtf7IMAPDecoder.prototype.end = function() {\n    var res = \"\";\n    if (this.inBase64 && this.base64Accum.length > 0)\n        res = this.iconv.decode(Buffer.from(this.base64Accum, 'base64'), \"utf16-be\");\n\n    this.inBase64 = false;\n    this.base64Accum = '';\n    return res;\n}\n\n\n", "\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Single-byte codec. Needs a 'chars' string parameter that contains 256 or 128 chars that\n// correspond to encoded bytes (if 128 - then lower half is ASCII). \n\nexports._sbcs = SBCSCodec;\nfunction SBCSCodec(codecOptions, iconv) {\n    if (!codecOptions)\n        throw new Error(\"SBCS codec is called without the data.\")\n    \n    // Prepare char buffer for decoding.\n    if (!codecOptions.chars || (codecOptions.chars.length !== 128 && codecOptions.chars.length !== 256))\n        throw new Error(\"Encoding '\"+codecOptions.type+\"' has incorrect 'chars' (must be of len 128 or 256)\");\n    \n    if (codecOptions.chars.length === 128) {\n        var asciiString = \"\";\n        for (var i = 0; i < 128; i++)\n            asciiString += String.fromCharCode(i);\n        codecOptions.chars = asciiString + codecOptions.chars;\n    }\n\n    this.decodeBuf = Buffer.from(codecOptions.chars, 'ucs2');\n    \n    // Encoding buffer.\n    var encodeBuf = Buffer.alloc(65536, iconv.defaultCharSingleByte.charCodeAt(0));\n\n    for (var i = 0; i < codecOptions.chars.length; i++)\n        encodeBuf[codecOptions.chars.charCodeAt(i)] = i;\n\n    this.encodeBuf = encodeBuf;\n}\n\nSBCSCodec.prototype.encoder = SBCSEncoder;\nSBCSCodec.prototype.decoder = SBCSDecoder;\n\n\nfunction SBCSEncoder(options, codec) {\n    this.encodeBuf = codec.encodeBuf;\n}\n\nSBCSEncoder.prototype.write = function(str) {\n    var buf = Buffer.alloc(str.length);\n    for (var i = 0; i < str.length; i++)\n        buf[i] = this.encodeBuf[str.charCodeAt(i)];\n    \n    return buf;\n}\n\nSBCSEncoder.prototype.end = function() {\n}\n\n\nfunction SBCSDecoder(options, codec) {\n    this.decodeBuf = codec.decodeBuf;\n}\n\nSBCSDecoder.prototype.write = function(buf) {\n    // Strings are immutable in JS -> we use ucs2 buffer to speed up computations.\n    var decodeBuf = this.decodeBuf;\n    var newBuf = Buffer.alloc(buf.length*2);\n    var idx1 = 0, idx2 = 0;\n    for (var i = 0; i < buf.length; i++) {\n        idx1 = buf[i]*2; idx2 = i*2;\n        newBuf[idx2] = decodeBuf[idx1];\n        newBuf[idx2+1] = decodeBuf[idx1+1];\n    }\n    return newBuf.toString('ucs2');\n}\n\nSBCSDecoder.prototype.end = function() {\n}\n", "\"use strict\";\n\n// Manually added data to be used by sbcs codec in addition to generated one.\n\nmodule.exports = {\n    // Not supported by iconv, not sure why.\n    \"10029\": \"maccenteuro\",\n    \"maccenteuro\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ\"\n    },\n\n    \"808\": \"cp808\",\n    \"ibm808\": \"cp808\",\n    \"cp808\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№€■ \"\n    },\n\n    \"mik\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя└┴┬├─┼╣║╚╔╩╦╠═╬┐░▒▓│┤№§╗╝┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n    },\n\n    \"cp720\": {\n        \"type\": \"_sbcs\",\n        \"chars\": \"\\x80\\x81éâ\\x84à\\x86çêëèïî\\x8d\\x8e\\x8f\\x90\\u0651\\u0652ô¤ـûùءآأؤ£إئابةتثجحخدذرزسشص«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ضطظعغفµقكلمنهوىي≡\\u064b\\u064c\\u064d\\u064e\\u064f\\u0650≈°∙·√ⁿ²■\\u00a0\"\n    },\n\n    // Aliases of generated encodings.\n    \"ascii8bit\": \"ascii\",\n    \"usascii\": \"ascii\",\n    \"ansix34\": \"ascii\",\n    \"ansix341968\": \"ascii\",\n    \"ansix341986\": \"ascii\",\n    \"csascii\": \"ascii\",\n    \"cp367\": \"ascii\",\n    \"ibm367\": \"ascii\",\n    \"isoir6\": \"ascii\",\n    \"iso646us\": \"ascii\",\n    \"iso646irv\": \"ascii\",\n    \"us\": \"ascii\",\n\n    \"latin1\": \"iso88591\",\n    \"latin2\": \"iso88592\",\n    \"latin3\": \"iso88593\",\n    \"latin4\": \"iso88594\",\n    \"latin5\": \"iso88599\",\n    \"latin6\": \"iso885910\",\n    \"latin7\": \"iso885913\",\n    \"latin8\": \"iso885914\",\n    \"latin9\": \"iso885915\",\n    \"latin10\": \"iso885916\",\n\n    \"csisolatin1\": \"iso88591\",\n    \"csisolatin2\": \"iso88592\",\n    \"csisolatin3\": \"iso88593\",\n    \"csisolatin4\": \"iso88594\",\n    \"csisolatincyrillic\": \"iso88595\",\n    \"csisolatinarabic\": \"iso88596\",\n    \"csisolatingreek\" : \"iso88597\",\n    \"csisolatinhebrew\": \"iso88598\",\n    \"csisolatin5\": \"iso88599\",\n    \"csisolatin6\": \"iso885910\",\n\n    \"l1\": \"iso88591\",\n    \"l2\": \"iso88592\",\n    \"l3\": \"iso88593\",\n    \"l4\": \"iso88594\",\n    \"l5\": \"iso88599\",\n    \"l6\": \"iso885910\",\n    \"l7\": \"iso885913\",\n    \"l8\": \"iso885914\",\n    \"l9\": \"iso885915\",\n    \"l10\": \"iso885916\",\n\n    \"isoir14\": \"iso646jp\",\n    \"isoir57\": \"iso646cn\",\n    \"isoir100\": \"iso88591\",\n    \"isoir101\": \"iso88592\",\n    \"isoir109\": \"iso88593\",\n    \"isoir110\": \"iso88594\",\n    \"isoir144\": \"iso88595\",\n    \"isoir127\": \"iso88596\",\n    \"isoir126\": \"iso88597\",\n    \"isoir138\": \"iso88598\",\n    \"isoir148\": \"iso88599\",\n    \"isoir157\": \"iso885910\",\n    \"isoir166\": \"tis620\",\n    \"isoir179\": \"iso885913\",\n    \"isoir199\": \"iso885914\",\n    \"isoir203\": \"iso885915\",\n    \"isoir226\": \"iso885916\",\n\n    \"cp819\": \"iso88591\",\n    \"ibm819\": \"iso88591\",\n\n    \"cyrillic\": \"iso88595\",\n\n    \"arabic\": \"iso88596\",\n    \"arabic8\": \"iso88596\",\n    \"ecma114\": \"iso88596\",\n    \"asmo708\": \"iso88596\",\n\n    \"greek\" : \"iso88597\",\n    \"greek8\" : \"iso88597\",\n    \"ecma118\" : \"iso88597\",\n    \"elot928\" : \"iso88597\",\n\n    \"hebrew\": \"iso88598\",\n    \"hebrew8\": \"iso88598\",\n\n    \"turkish\": \"iso88599\",\n    \"turkish8\": \"iso88599\",\n\n    \"thai\": \"iso885911\",\n    \"thai8\": \"iso885911\",\n\n    \"celtic\": \"iso885914\",\n    \"celtic8\": \"iso885914\",\n    \"isoceltic\": \"iso885914\",\n\n    \"tis6200\": \"tis620\",\n    \"tis62025291\": \"tis620\",\n    \"tis62025330\": \"tis620\",\n\n    \"10000\": \"macroman\",\n    \"10006\": \"macgreek\",\n    \"10007\": \"maccyrillic\",\n    \"10079\": \"maciceland\",\n    \"10081\": \"macturkish\",\n\n    \"cspc8codepage437\": \"cp437\",\n    \"cspc775baltic\": \"cp775\",\n    \"cspc850multilingual\": \"cp850\",\n    \"cspcp852\": \"cp852\",\n    \"cspc862latinhebrew\": \"cp862\",\n    \"cpgr\": \"cp869\",\n\n    \"msee\": \"cp1250\",\n    \"mscyrl\": \"cp1251\",\n    \"msansi\": \"cp1252\",\n    \"msgreek\": \"cp1253\",\n    \"msturk\": \"cp1254\",\n    \"mshebr\": \"cp1255\",\n    \"msarab\": \"cp1256\",\n    \"winbaltrim\": \"cp1257\",\n\n    \"cp20866\": \"koi8r\",\n    \"20866\": \"koi8r\",\n    \"ibm878\": \"koi8r\",\n    \"cskoi8r\": \"koi8r\",\n\n    \"cp21866\": \"koi8u\",\n    \"21866\": \"koi8u\",\n    \"ibm1168\": \"koi8u\",\n\n    \"strk10482002\": \"rk1048\",\n\n    \"tcvn5712\": \"tcvn\",\n    \"tcvn57121\": \"tcvn\",\n\n    \"gb198880\": \"iso646cn\",\n    \"cn\": \"iso646cn\",\n\n    \"csiso14jisc6220ro\": \"iso646jp\",\n    \"jisc62201969ro\": \"iso646jp\",\n    \"jp\": \"iso646jp\",\n\n    \"cshproman8\": \"hproman8\",\n    \"r8\": \"hproman8\",\n    \"roman8\": \"hproman8\",\n    \"xroman8\": \"hproman8\",\n    \"ibm1051\": \"hproman8\",\n\n    \"mac\": \"macintosh\",\n    \"csmacintosh\": \"macintosh\",\n};\n\n", "\"use strict\";\n\n// Generated data for sbcs codec. Don't edit manually. Regenerate using generation/gen-sbcs.js script.\nmodule.exports = {\n  \"437\": \"cp437\",\n  \"737\": \"cp737\",\n  \"775\": \"cp775\",\n  \"850\": \"cp850\",\n  \"852\": \"cp852\",\n  \"855\": \"cp855\",\n  \"856\": \"cp856\",\n  \"857\": \"cp857\",\n  \"858\": \"cp858\",\n  \"860\": \"cp860\",\n  \"861\": \"cp861\",\n  \"862\": \"cp862\",\n  \"863\": \"cp863\",\n  \"864\": \"cp864\",\n  \"865\": \"cp865\",\n  \"866\": \"cp866\",\n  \"869\": \"cp869\",\n  \"874\": \"windows874\",\n  \"922\": \"cp922\",\n  \"1046\": \"cp1046\",\n  \"1124\": \"cp1124\",\n  \"1125\": \"cp1125\",\n  \"1129\": \"cp1129\",\n  \"1133\": \"cp1133\",\n  \"1161\": \"cp1161\",\n  \"1162\": \"cp1162\",\n  \"1163\": \"cp1163\",\n  \"1250\": \"windows1250\",\n  \"1251\": \"windows1251\",\n  \"1252\": \"windows1252\",\n  \"1253\": \"windows1253\",\n  \"1254\": \"windows1254\",\n  \"1255\": \"windows1255\",\n  \"1256\": \"windows1256\",\n  \"1257\": \"windows1257\",\n  \"1258\": \"windows1258\",\n  \"28591\": \"iso88591\",\n  \"28592\": \"iso88592\",\n  \"28593\": \"iso88593\",\n  \"28594\": \"iso88594\",\n  \"28595\": \"iso88595\",\n  \"28596\": \"iso88596\",\n  \"28597\": \"iso88597\",\n  \"28598\": \"iso88598\",\n  \"28599\": \"iso88599\",\n  \"28600\": \"iso885910\",\n  \"28601\": \"iso885911\",\n  \"28603\": \"iso885913\",\n  \"28604\": \"iso885914\",\n  \"28605\": \"iso885915\",\n  \"28606\": \"iso885916\",\n  \"windows874\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"win874\": \"windows874\",\n  \"cp874\": \"windows874\",\n  \"windows1250\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"win1250\": \"windows1250\",\n  \"cp1250\": \"windows1250\",\n  \"windows1251\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"win1251\": \"windows1251\",\n  \"cp1251\": \"windows1251\",\n  \"windows1252\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"win1252\": \"windows1252\",\n  \"cp1252\": \"windows1252\",\n  \"windows1253\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"win1253\": \"windows1253\",\n  \"cp1253\": \"windows1253\",\n  \"windows1254\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"win1254\": \"windows1254\",\n  \"cp1254\": \"windows1254\",\n  \"windows1255\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹֺֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"win1255\": \"windows1255\",\n  \"cp1255\": \"windows1255\",\n  \"windows1256\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے\"\n  },\n  \"win1256\": \"windows1256\",\n  \"cp1256\": \"windows1256\",\n  \"windows1257\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙\"\n  },\n  \"win1257\": \"windows1257\",\n  \"cp1257\": \"windows1257\",\n  \"windows1258\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"win1258\": \"windows1258\",\n  \"cp1258\": \"windows1258\",\n  \"iso88591\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28591\": \"iso88591\",\n  \"iso88592\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ą˘Ł¤ĽŚ§¨ŠŞŤŹ­ŽŻ°ą˛ł´ľśˇ¸šşťź˝žżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙\"\n  },\n  \"cp28592\": \"iso88592\",\n  \"iso88593\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ħ˘£¤�Ĥ§¨İŞĞĴ­�Ż°ħ²³´µĥ·¸ışğĵ½�żÀÁÂ�ÄĊĈÇÈÉÊËÌÍÎÏ�ÑÒÓÔĠÖ×ĜÙÚÛÜŬŜßàáâ�äċĉçèéêëìíîï�ñòóôġö÷ĝùúûüŭŝ˙\"\n  },\n  \"cp28593\": \"iso88593\",\n  \"iso88594\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĸŖ¤ĨĻ§¨ŠĒĢŦ­Ž¯°ą˛ŗ´ĩļˇ¸šēģŧŊžŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎĪĐŅŌĶÔÕÖ×ØŲÚÛÜŨŪßāáâãäåæįčéęëėíîīđņōķôõö÷øųúûüũū˙\"\n  },\n  \"cp28594\": \"iso88594\",\n  \"iso88595\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂЃЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђѓєѕіїјљњћќ§ўџ\"\n  },\n  \"cp28595\": \"iso88595\",\n  \"iso88596\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ���¤�������،­�������������؛���؟�ءآأؤإئابةتثجحخدذرزسشصضطظعغ�����ـفقكلمنهوىيًٌٍَُِّْ�������������\"\n  },\n  \"cp28596\": \"iso88596\",\n  \"iso88597\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ‘’£€₯¦§¨©ͺ«¬­�―°±²³΄΅Ά·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�\"\n  },\n  \"cp28597\": \"iso88597\",\n  \"iso88598\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �¢£¤¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾��������������������������������‗אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�\"\n  },\n  \"cp28598\": \"iso88598\",\n  \"iso88599\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ\"\n  },\n  \"cp28599\": \"iso88599\",\n  \"iso885910\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄĒĢĪĨĶ§ĻĐŠŦŽ­ŪŊ°ąēģīĩķ·ļđšŧž―ūŋĀÁÂÃÄÅÆĮČÉĘËĖÍÎÏÐŅŌÓÔÕÖŨØŲÚÛÜÝÞßāáâãäåæįčéęëėíîïðņōóôõöũøųúûüýþĸ\"\n  },\n  \"cp28600\": \"iso885910\",\n  \"iso885911\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"cp28601\": \"iso885911\",\n  \"iso885913\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ”¢£¤„¦§Ø©Ŗ«¬­®Æ°±²³“µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž’\"\n  },\n  \"cp28603\": \"iso885913\",\n  \"iso885914\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" Ḃḃ£ĊċḊ§Ẁ©ẂḋỲ­®ŸḞḟĠġṀṁ¶ṖẁṗẃṠỳẄẅṡÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŴÑÒÓÔÕÖṪØÙÚÛÜÝŶßàáâãäåæçèéêëìíîïŵñòóôõöṫøùúûüýŷÿ\"\n  },\n  \"cp28604\": \"iso885914\",\n  \"iso885915\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥Š§š©ª«¬­®¯°±²³Žµ¶·ž¹º»ŒœŸ¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"cp28605\": \"iso885915\",\n  \"iso885916\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ĄąŁ€„Š§š©Ș«Ź­źŻ°±ČłŽ”¶·žčș»ŒœŸżÀÁÂĂÄĆÆÇÈÉÊËÌÍÎÏĐŃÒÓÔŐÖŚŰÙÚÛÜĘȚßàáâăäćæçèéêëìíîïđńòóôőöśűùúûüęțÿ\"\n  },\n  \"cp28606\": \"iso885916\",\n  \"cp437\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm437\": \"cp437\",\n  \"csibm437\": \"cp437\",\n  \"cp737\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm737\": \"cp737\",\n  \"csibm737\": \"cp737\",\n  \"cp775\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ĆüéāäģåćłēŖŗīŹÄÅÉæÆōöĢ¢ŚśÖÜø£Ø×¤ĀĪóŻżź”¦©®¬½¼Ł«»░▒▓│┤ĄČĘĖ╣║╗╝ĮŠ┐└┴┬├─┼ŲŪ╚╔╩╦╠═╬Žąčęėįšųūž┘┌█▄▌▐▀ÓßŌŃõÕµńĶķĻļņĒŅ’­±“¾¶§÷„°∙·¹³²■ \"\n  },\n  \"ibm775\": \"cp775\",\n  \"csibm775\": \"cp775\",\n  \"cp850\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm850\": \"cp850\",\n  \"csibm850\": \"cp850\",\n  \"cp852\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ \"\n  },\n  \"ibm852\": \"cp852\",\n  \"csibm852\": \"cp852\",\n  \"cp855\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ђЂѓЃёЁєЄѕЅіІїЇјЈљЉњЊћЋќЌўЎџЏюЮъЪаАбБцЦдДеЕфФгГ«»░▒▓│┤хХиИ╣║╗╝йЙ┐└┴┬├─┼кК╚╔╩╦╠═╬¤лЛмМнНоОп┘┌█▄Пя▀ЯрРсСтТуУжЖвВьЬ№­ыЫзЗшШэЭщЩчЧ§■ \"\n  },\n  \"ibm855\": \"cp855\",\n  \"csibm855\": \"cp855\",\n  \"cp856\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת�£�×����������®¬½¼�«»░▒▓│┤���©╣║╗╝¢¥┐└┴┬├─┼��╚╔╩╦╠═╬¤���������┘┌█▄¦�▀������µ�������¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm856\": \"cp856\",\n  \"csibm856\": \"cp856\",\n  \"cp857\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm857\": \"cp857\",\n  \"csibm857\": \"cp857\",\n  \"cp858\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈ€ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ \"\n  },\n  \"ibm858\": \"cp858\",\n  \"csibm858\": \"cp858\",\n  \"cp860\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâãàÁçêÊèÍÔìÃÂÉÀÈôõòÚùÌÕÜ¢£Ù₧ÓáíóúñÑªº¿Ò¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm860\": \"cp860\",\n  \"csibm860\": \"cp860\",\n  \"cp861\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm861\": \"cp861\",\n  \"csibm861\": \"cp861\",\n  \"cp862\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"אבגדהוזחטיךכלםמןנסעףפץצקרשת¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm862\": \"cp862\",\n  \"csibm862\": \"cp862\",\n  \"cp863\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâÂà¶çêëèïî‗À§ÉÈÊôËÏûù¤ÔÜ¢£ÙÛƒ¦´óú¨¸³¯Î⌐¬½¼¾«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm863\": \"cp863\",\n  \"csibm863\": \"cp863\",\n  \"cp864\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$٪&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~°·∙√▒─│┼┤┬├┴┐┌└┘β∞φ±½¼≈«»ﻷﻸ��ﻻﻼ� ­ﺂ£¤ﺄ��ﺎﺏﺕﺙ،ﺝﺡﺥ٠١٢٣٤٥٦٧٨٩ﻑ؛ﺱﺵﺹ؟¢ﺀﺁﺃﺅﻊﺋﺍﺑﺓﺗﺛﺟﺣﺧﺩﺫﺭﺯﺳﺷﺻﺿﻁﻅﻋﻏ¦¬÷×ﻉـﻓﻗﻛﻟﻣﻧﻫﻭﻯﻳﺽﻌﻎﻍﻡﹽّﻥﻩﻬﻰﻲﻐﻕﻵﻶﻝﻙﻱ■�\"\n  },\n  \"ibm864\": \"cp864\",\n  \"csibm864\": \"cp864\",\n  \"cp865\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ \"\n  },\n  \"ibm865\": \"cp865\",\n  \"csibm865\": \"cp865\",\n  \"cp866\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ \"\n  },\n  \"ibm866\": \"cp866\",\n  \"csibm866\": \"cp866\",\n  \"cp869\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"������Ά�·¬¦‘’Έ―ΉΊΪΌ��ΎΫ©Ώ²³ά£έήίϊΐόύΑΒΓΔΕΖΗ½ΘΙ«»░▒▓│┤ΚΛΜΝ╣║╗╝ΞΟ┐└┴┬├─┼ΠΡ╚╔╩╦╠═╬ΣΤΥΦΧΨΩαβγ┘┌█▄δε▀ζηθικλμνξοπρσςτ΄­±υφχ§ψ΅°¨ωϋΰώ■ \"\n  },\n  \"ibm869\": \"cp869\",\n  \"csibm869\": \"cp869\",\n  \"cp922\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§¨©ª«¬­®‾°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏŠÑÒÓÔÕÖ×ØÙÚÛÜÝŽßàáâãäåæçèéêëìíîïšñòóôõö÷øùúûüýžÿ\"\n  },\n  \"ibm922\": \"cp922\",\n  \"csibm922\": \"cp922\",\n  \"cp1046\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ﺈ×÷ﹱ■│─┐┌└┘ﹹﹻﹽﹿﹷﺊﻰﻳﻲﻎﻏﻐﻶﻸﻺﻼ ¤ﺋﺑﺗﺛﺟﺣ،­ﺧﺳ٠١٢٣٤٥٦٧٨٩ﺷ؛ﺻﺿﻊ؟ﻋءآأؤإئابةتثجحخدذرزسشصضطﻇعغﻌﺂﺄﺎﻓـفقكلمنهوىيًٌٍَُِّْﻗﻛﻟﻵﻷﻹﻻﻣﻧﻬﻩ�\"\n  },\n  \"ibm1046\": \"cp1046\",\n  \"csibm1046\": \"cp1046\",\n  \"cp1124\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ЁЂҐЄЅІЇЈЉЊЋЌ­ЎЏАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя№ёђґєѕіїјљњћќ§ўџ\"\n  },\n  \"ibm1124\": \"cp1124\",\n  \"csibm1124\": \"cp1124\",\n  \"cp1125\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёҐґЄєІіЇї·√№¤■ \"\n  },\n  \"ibm1125\": \"cp1125\",\n  \"csibm1125\": \"cp1125\",\n  \"cp1129\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£¤¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1129\": \"cp1129\",\n  \"csibm1129\": \"cp1129\",\n  \"cp1133\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ກຂຄງຈສຊຍດຕຖທນບປຜຝພຟມຢຣລວຫອຮ���ຯະາຳິີຶືຸູຼັົຽ���ເແໂໃໄ່້໊໋໌ໍໆ�ໜໝ₭����������������໐໑໒໓໔໕໖໗໘໙��¢¬¦�\"\n  },\n  \"ibm1133\": \"cp1133\",\n  \"csibm1133\": \"cp1133\",\n  \"cp1161\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������่กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู้๊๋€฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛¢¬¦ \"\n  },\n  \"ibm1161\": \"cp1161\",\n  \"csibm1161\": \"cp1161\",\n  \"cp1162\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"€…‘’“”•–— กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  },\n  \"ibm1162\": \"cp1162\",\n  \"csibm1162\": \"cp1162\",\n  \"cp1163\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ¡¢£€¥¦§œ©ª«¬­®¯°±²³Ÿµ¶·Œ¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ\"\n  },\n  \"ibm1163\": \"cp1163\",\n  \"csibm1163\": \"cp1163\",\n  \"maccroatian\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®Š™´¨≠ŽØ∞±≤≥∆µ∂∑∏š∫ªºΩžø¿¡¬√ƒ≈Ć«Č… ÀÃÕŒœĐ—“”‘’÷◊�©⁄¤‹›Æ»–·‚„‰ÂćÁčÈÍÎÏÌÓÔđÒÚÛÙıˆ˜¯πË˚¸Êæˇ\"\n  },\n  \"maccyrillic\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"macgreek\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�\"\n  },\n  \"maciceland\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macroman\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macromania\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ĂŞ∞±≤≥¥µ∂∑∏π∫ªºΩăş¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›Ţţ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macthai\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"«»…“”�•‘’� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู\uFEFF​–—฿เแโใไๅๆ็่้๊๋์ํ™๏๐๑๒๓๔๕๖๗๘๙®©����\"\n  },\n  \"macturkish\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"macukraine\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°Ґ£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµґЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤\"\n  },\n  \"koi8r\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ё╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡Ё╢╣╤╥╦╧╨╩╪╫╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8u\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґ╝╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪Ґ╬©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8ru\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"─│┌┐└┘├┤┬┴┼▀▄█▌▐░▒▓⌠■∙√≈≤≥ ⌡°²·÷═║╒ёє╔ії╗╘╙╚╛ґў╞╟╠╡ЁЄ╣ІЇ╦╧╨╩╪ҐЎ©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"koi8t\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"қғ‚Ғ„…†‡�‰ҳ‹ҲҷҶ�Қ‘’“”•–—�™�›�����ӯӮё¤ӣ¦§���«¬­®�°±²Ё�Ӣ¶·�№�»���©юабцдефгхийклмнопярстужвьызшэщчъЮАБЦДЕФГХИЙКЛМНОПЯРСТУЖВЬЫЗШЭЩЧЪ\"\n  },\n  \"armscii8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" �և։)(»«—.՝,-֊…՜՛՞ԱաԲբԳգԴդԵեԶզԷէԸըԹթԺժԻիԼլԽխԾծԿկՀհՁձՂղՃճՄմՅյՆնՇշՈոՉչՊպՋջՌռՍսՎվՏտՐրՑցՒւՓփՔքՕօՖֆ՚�\"\n  },\n  \"rk1048\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ЂЃ‚ѓ„…†‡€‰Љ‹ЊҚҺЏђ‘’“”•–—�™љ›њқһџ ҰұӘ¤Ө¦§Ё©Ғ«¬­®Ү°±Ііөµ¶·ё№ғ»әҢңүАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"tcvn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000ÚỤ\\u0003ỪỬỮ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010ỨỰỲỶỸÝỴ\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀẢÃÁẠẶẬÈẺẼÉẸỆÌỈĨÍỊÒỎÕÓỌỘỜỞỠỚỢÙỦŨ ĂÂÊÔƠƯĐăâêôơưđẶ̀̀̉̃́àảãáạẲằẳẵắẴẮẦẨẪẤỀặầẩẫấậèỂẻẽéẹềểễếệìỉỄẾỒĩíịòỔỏõóọồổỗốộờởỡớợùỖủũúụừửữứựỳỷỹýỵỐ\"\n  },\n  \"georgianacademy\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზთიკლმნოპჟრსტუფქღყშჩცძწჭხჯჰჱჲჳჴჵჶçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"georgianps\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"‚ƒ„…†‡ˆ‰Š‹Œ‘’“”•–—˜™š›œŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿აბგდევზჱთიკლმნჲოპჟრსტჳუფქღყშჩცძწჭხჴჯჰჵæçèéêëìíîïðñòóôõö÷øùúûüýþÿ\"\n  },\n  \"pt154\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ҖҒӮғ„…ҶҮҲүҠӢҢҚҺҸҗ‘’“”•–—ҳҷҡӣңқһҹ ЎўЈӨҘҰ§Ё©Ә«¬ӯ®Ҝ°ұІіҙө¶·ё№ә»јҪҫҝАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя\"\n  },\n  \"viscii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001Ẳ\\u0003\\u0004ẴẪ\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013Ỷ\\u0015\\u0016\\u0017\\u0018Ỹ\\u001a\\u001b\\u001c\\u001dỴ\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ẠẮẰẶẤẦẨẬẼẸẾỀỂỄỆỐỒỔỖỘỢỚỜỞỊỎỌỈỦŨỤỲÕắằặấầẩậẽẹếềểễệốồổỗỠƠộờởịỰỨỪỬơớƯÀÁÂÃẢĂẳẵÈÉÊẺÌÍĨỳĐứÒÓÔạỷừửÙÚỹỵÝỡưàáâãảăữẫèéêẻìíĩỉđựòóôõỏọụùúũủýợỮ\"\n  },\n  \"iso646cn\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#¥%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\\\]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"iso646jp\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"\\u0000\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\t\\n\\u000b\\f\\r\\u000e\\u000f\\u0010\\u0011\\u0012\\u0013\\u0014\\u0015\\u0016\\u0017\\u0018\\u0019\\u001a\\u001b\\u001c\\u001d\\u001e\\u001f !\\\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[¥]^_`abcdefghijklmnopqrstuvwxyz{|}‾��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"hproman8\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \" ÀÂÈÊËÎÏ´ˋˆ¨˜ÙÛ₤¯Ýý°ÇçÑñ¡¿¤£¥§ƒ¢âêôûáéóúàèòùäëöüÅîØÆåíøæÄìÖÜÉïßÔÁÃãÐðÍÌÓÒÕõŠšÚŸÿÞþ·µ¶¾—¼½ªº«■»±�\"\n  },\n  \"macintosh\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ\"\n  },\n  \"ascii\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"��������������������������������������������������������������������������������������������������������������������������������\"\n  },\n  \"tis620\": {\n    \"type\": \"_sbcs\",\n    \"chars\": \"���������������������������������กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����\"\n  }\n}", "\"use strict\";\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// Multibyte codec. In this scheme, a character is represented by 1 or more bytes.\n// Our codec supports UTF-16 surrogates, extensions for GB18030 and unicode sequences.\n// To save memory and loading time, we read table files only when requested.\n\nexports._dbcs = DBCSCodec;\n\nvar UNASSIGNED = -1,\n    GB18030_CODE = -2,\n    SEQ_START  = -10,\n    NODE_START = -1000,\n    UNASSIGNED_NODE = new Array(0x100),\n    DEF_CHAR = -1;\n\nfor (var i = 0; i < 0x100; i++)\n    UNASSIGNED_NODE[i] = UNASSIGNED;\n\n\n// Class DBCSCodec reads and initializes mapping tables.\nfunction DBCSCodec(codecOptions, iconv) {\n    this.encodingName = codecOptions.encodingName;\n    if (!codecOptions)\n        throw new Error(\"DBCS codec is called without the data.\")\n    if (!codecOptions.table)\n        throw new Error(\"Encoding '\" + this.encodingName + \"' has no data.\");\n\n    // Load tables.\n    var mappingTable = codecOptions.table();\n\n\n    // Decode tables: MBCS -> Unicode.\n\n    // decodeTables is a trie, encoded as an array of arrays of integers. Internal arrays are trie nodes and all have len = 256.\n    // Trie root is decodeTables[0].\n    // Values: >=  0 -> unicode character code. can be > 0xFFFF\n    //         == UNASSIGNED -> unknown/unassigned sequence.\n    //         == GB18030_CODE -> this is the end of a GB18030 4-byte sequence.\n    //         <= NODE_START -> index of the next node in our trie to process next byte.\n    //         <= SEQ_START  -> index of the start of a character code sequence, in decodeTableSeq.\n    this.decodeTables = [];\n    this.decodeTables[0] = UNASSIGNED_NODE.slice(0); // Create root node.\n\n    // Sometimes a MBCS char corresponds to a sequence of unicode chars. We store them as arrays of integers here. \n    this.decodeTableSeq = [];\n\n    // Actual mapping tables consist of chunks. Use them to fill up decode tables.\n    for (var i = 0; i < mappingTable.length; i++)\n        this._addDecodeChunk(mappingTable[i]);\n\n    // Load & create GB18030 tables when needed.\n    if (typeof codecOptions.gb18030 === 'function') {\n        this.gb18030 = codecOptions.gb18030(); // Load GB18030 ranges.\n\n        // Add GB18030 common decode nodes.\n        var commonThirdByteNodeIdx = this.decodeTables.length;\n        this.decodeTables.push(UNASSIGNED_NODE.slice(0));\n\n        var commonFourthByteNodeIdx = this.decodeTables.length;\n        this.decodeTables.push(UNASSIGNED_NODE.slice(0));\n\n        // Fill out the tree\n        var firstByteNode = this.decodeTables[0];\n        for (var i = 0x81; i <= 0xFE; i++) {\n            var secondByteNode = this.decodeTables[NODE_START - firstByteNode[i]];\n            for (var j = 0x30; j <= 0x39; j++) {\n                if (secondByteNode[j] === UNASSIGNED) {\n                    secondByteNode[j] = NODE_START - commonThirdByteNodeIdx;\n                } else if (secondByteNode[j] > NODE_START) {\n                    throw new Error(\"gb18030 decode tables conflict at byte 2\");\n                }\n\n                var thirdByteNode = this.decodeTables[NODE_START - secondByteNode[j]];\n                for (var k = 0x81; k <= 0xFE; k++) {\n                    if (thirdByteNode[k] === UNASSIGNED) {\n                        thirdByteNode[k] = NODE_START - commonFourthByteNodeIdx;\n                    } else if (thirdByteNode[k] === NODE_START - commonFourthByteNodeIdx) {\n                        continue;\n                    } else if (thirdByteNode[k] > NODE_START) {\n                        throw new Error(\"gb18030 decode tables conflict at byte 3\");\n                    }\n\n                    var fourthByteNode = this.decodeTables[NODE_START - thirdByteNode[k]];\n                    for (var l = 0x30; l <= 0x39; l++) {\n                        if (fourthByteNode[l] === UNASSIGNED)\n                            fourthByteNode[l] = GB18030_CODE;\n                    }\n                }\n            }\n        }\n    }\n\n    this.defaultCharUnicode = iconv.defaultCharUnicode;\n\n    \n    // Encode tables: Unicode -> DBCS.\n\n    // `encodeTable` is array mapping from unicode char to encoded char. All its values are integers for performance.\n    // Because it can be sparse, it is represented as array of buckets by 256 chars each. Bucket can be null.\n    // Values: >=  0 -> it is a normal char. Write the value (if <=256 then 1 byte, if <=65536 then 2 bytes, etc.).\n    //         == UNASSIGNED -> no conversion found. Output a default char.\n    //         <= SEQ_START  -> it's an index in encodeTableSeq, see below. The character starts a sequence.\n    this.encodeTable = [];\n    \n    // `encodeTableSeq` is used when a sequence of unicode characters is encoded as a single code. We use a tree of\n    // objects where keys correspond to characters in sequence and leafs are the encoded dbcs values. A special DEF_CHAR key\n    // means end of sequence (needed when one sequence is a strict subsequence of another).\n    // Objects are kept separately from encodeTable to increase performance.\n    this.encodeTableSeq = [];\n\n    // Some chars can be decoded, but need not be encoded.\n    var skipEncodeChars = {};\n    if (codecOptions.encodeSkipVals)\n        for (var i = 0; i < codecOptions.encodeSkipVals.length; i++) {\n            var val = codecOptions.encodeSkipVals[i];\n            if (typeof val === 'number')\n                skipEncodeChars[val] = true;\n            else\n                for (var j = val.from; j <= val.to; j++)\n                    skipEncodeChars[j] = true;\n        }\n        \n    // Use decode trie to recursively fill out encode tables.\n    this._fillEncodeTable(0, 0, skipEncodeChars);\n\n    // Add more encoding pairs when needed.\n    if (codecOptions.encodeAdd) {\n        for (var uChar in codecOptions.encodeAdd)\n            if (Object.prototype.hasOwnProperty.call(codecOptions.encodeAdd, uChar))\n                this._setEncodeChar(uChar.charCodeAt(0), codecOptions.encodeAdd[uChar]);\n    }\n\n    this.defCharSB  = this.encodeTable[0][iconv.defaultCharSingleByte.charCodeAt(0)];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = this.encodeTable[0]['?'];\n    if (this.defCharSB === UNASSIGNED) this.defCharSB = \"?\".charCodeAt(0);\n}\n\nDBCSCodec.prototype.encoder = DBCSEncoder;\nDBCSCodec.prototype.decoder = DBCSDecoder;\n\n// Decoder helpers\nDBCSCodec.prototype._getDecodeTrieNode = function(addr) {\n    var bytes = [];\n    for (; addr > 0; addr >>>= 8)\n        bytes.push(addr & 0xFF);\n    if (bytes.length == 0)\n        bytes.push(0);\n\n    var node = this.decodeTables[0];\n    for (var i = bytes.length-1; i > 0; i--) { // Traverse nodes deeper into the trie.\n        var val = node[bytes[i]];\n\n        if (val == UNASSIGNED) { // Create new node.\n            node[bytes[i]] = NODE_START - this.decodeTables.length;\n            this.decodeTables.push(node = UNASSIGNED_NODE.slice(0));\n        }\n        else if (val <= NODE_START) { // Existing node.\n            node = this.decodeTables[NODE_START - val];\n        }\n        else\n            throw new Error(\"Overwrite byte in \" + this.encodingName + \", addr: \" + addr.toString(16));\n    }\n    return node;\n}\n\n\nDBCSCodec.prototype._addDecodeChunk = function(chunk) {\n    // First element of chunk is the hex mbcs code where we start.\n    var curAddr = parseInt(chunk[0], 16);\n\n    // Choose the decoding node where we'll write our chars.\n    var writeTable = this._getDecodeTrieNode(curAddr);\n    curAddr = curAddr & 0xFF;\n\n    // Write all other elements of the chunk to the table.\n    for (var k = 1; k < chunk.length; k++) {\n        var part = chunk[k];\n        if (typeof part === \"string\") { // String, write as-is.\n            for (var l = 0; l < part.length;) {\n                var code = part.charCodeAt(l++);\n                if (0xD800 <= code && code < 0xDC00) { // Decode surrogate\n                    var codeTrail = part.charCodeAt(l++);\n                    if (0xDC00 <= codeTrail && codeTrail < 0xE000)\n                        writeTable[curAddr++] = 0x10000 + (code - 0xD800) * 0x400 + (codeTrail - 0xDC00);\n                    else\n                        throw new Error(\"Incorrect surrogate pair in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n                }\n                else if (0x0FF0 < code && code <= 0x0FFF) { // Character sequence (our own encoding used)\n                    var len = 0xFFF - code + 2;\n                    var seq = [];\n                    for (var m = 0; m < len; m++)\n                        seq.push(part.charCodeAt(l++)); // Simple variation: don't support surrogates or subsequences in seq.\n\n                    writeTable[curAddr++] = SEQ_START - this.decodeTableSeq.length;\n                    this.decodeTableSeq.push(seq);\n                }\n                else\n                    writeTable[curAddr++] = code; // Basic char\n            }\n        } \n        else if (typeof part === \"number\") { // Integer, meaning increasing sequence starting with prev character.\n            var charCode = writeTable[curAddr - 1] + 1;\n            for (var l = 0; l < part; l++)\n                writeTable[curAddr++] = charCode++;\n        }\n        else\n            throw new Error(\"Incorrect type '\" + typeof part + \"' given in \"  + this.encodingName + \" at chunk \" + chunk[0]);\n    }\n    if (curAddr > 0xFF)\n        throw new Error(\"Incorrect chunk in \"  + this.encodingName + \" at addr \" + chunk[0] + \": too long\" + curAddr);\n}\n\n// Encoder helpers\nDBCSCodec.prototype._getEncodeBucket = function(uCode) {\n    var high = uCode >> 8; // This could be > 0xFF because of astral characters.\n    if (this.encodeTable[high] === undefined)\n        this.encodeTable[high] = UNASSIGNED_NODE.slice(0); // Create bucket on demand.\n    return this.encodeTable[high];\n}\n\nDBCSCodec.prototype._setEncodeChar = function(uCode, dbcsCode) {\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n    if (bucket[low] <= SEQ_START)\n        this.encodeTableSeq[SEQ_START-bucket[low]][DEF_CHAR] = dbcsCode; // There's already a sequence, set a single-char subsequence of it.\n    else if (bucket[low] == UNASSIGNED)\n        bucket[low] = dbcsCode;\n}\n\nDBCSCodec.prototype._setEncodeSequence = function(seq, dbcsCode) {\n    \n    // Get the root of character tree according to first character of the sequence.\n    var uCode = seq[0];\n    var bucket = this._getEncodeBucket(uCode);\n    var low = uCode & 0xFF;\n\n    var node;\n    if (bucket[low] <= SEQ_START) {\n        // There's already a sequence with  - use it.\n        node = this.encodeTableSeq[SEQ_START-bucket[low]];\n    }\n    else {\n        // There was no sequence object - allocate a new one.\n        node = {};\n        if (bucket[low] !== UNASSIGNED) node[DEF_CHAR] = bucket[low]; // If a char was set before - make it a single-char subsequence.\n        bucket[low] = SEQ_START - this.encodeTableSeq.length;\n        this.encodeTableSeq.push(node);\n    }\n\n    // Traverse the character tree, allocating new nodes as needed.\n    for (var j = 1; j < seq.length-1; j++) {\n        var oldVal = node[uCode];\n        if (typeof oldVal === 'object')\n            node = oldVal;\n        else {\n            node = node[uCode] = {}\n            if (oldVal !== undefined)\n                node[DEF_CHAR] = oldVal\n        }\n    }\n\n    // Set the leaf to given dbcsCode.\n    uCode = seq[seq.length-1];\n    node[uCode] = dbcsCode;\n}\n\nDBCSCodec.prototype._fillEncodeTable = function(nodeIdx, prefix, skipEncodeChars) {\n    var node = this.decodeTables[nodeIdx];\n    var hasValues = false;\n    var subNodeEmpty = {};\n    for (var i = 0; i < 0x100; i++) {\n        var uCode = node[i];\n        var mbCode = prefix + i;\n        if (skipEncodeChars[mbCode])\n            continue;\n\n        if (uCode >= 0) {\n            this._setEncodeChar(uCode, mbCode);\n            hasValues = true;\n        } else if (uCode <= NODE_START) {\n            var subNodeIdx = NODE_START - uCode;\n            if (!subNodeEmpty[subNodeIdx]) {  // Skip empty subtrees (they are too large in gb18030).\n                var newPrefix = (mbCode << 8) >>> 0;  // NOTE: '>>> 0' keeps 32-bit num positive.\n                if (this._fillEncodeTable(subNodeIdx, newPrefix, skipEncodeChars))\n                    hasValues = true;\n                else\n                    subNodeEmpty[subNodeIdx] = true;\n            }\n        } else if (uCode <= SEQ_START) {\n            this._setEncodeSequence(this.decodeTableSeq[SEQ_START - uCode], mbCode);\n            hasValues = true;\n        }\n    }\n    return hasValues;\n}\n\n\n\n// == Encoder ==================================================================\n\nfunction DBCSEncoder(options, codec) {\n    // Encoder state\n    this.leadSurrogate = -1;\n    this.seqObj = undefined;\n    \n    // Static data\n    this.encodeTable = codec.encodeTable;\n    this.encodeTableSeq = codec.encodeTableSeq;\n    this.defaultCharSingleByte = codec.defCharSB;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSEncoder.prototype.write = function(str) {\n    var newBuf = Buffer.alloc(str.length * (this.gb18030 ? 4 : 3)),\n        leadSurrogate = this.leadSurrogate,\n        seqObj = this.seqObj, nextChar = -1,\n        i = 0, j = 0;\n\n    while (true) {\n        // 0. Get next character.\n        if (nextChar === -1) {\n            if (i == str.length) break;\n            var uCode = str.charCodeAt(i++);\n        }\n        else {\n            var uCode = nextChar;\n            nextChar = -1;    \n        }\n\n        // 1. Handle surrogates.\n        if (0xD800 <= uCode && uCode < 0xE000) { // Char is one of surrogates.\n            if (uCode < 0xDC00) { // We've got lead surrogate.\n                if (leadSurrogate === -1) {\n                    leadSurrogate = uCode;\n                    continue;\n                } else {\n                    leadSurrogate = uCode;\n                    // Double lead surrogate found.\n                    uCode = UNASSIGNED;\n                }\n            } else { // We've got trail surrogate.\n                if (leadSurrogate !== -1) {\n                    uCode = 0x10000 + (leadSurrogate - 0xD800) * 0x400 + (uCode - 0xDC00);\n                    leadSurrogate = -1;\n                } else {\n                    // Incomplete surrogate pair - only trail surrogate found.\n                    uCode = UNASSIGNED;\n                }\n                \n            }\n        }\n        else if (leadSurrogate !== -1) {\n            // Incomplete surrogate pair - only lead surrogate found.\n            nextChar = uCode; uCode = UNASSIGNED; // Write an error, then current char.\n            leadSurrogate = -1;\n        }\n\n        // 2. Convert uCode character.\n        var dbcsCode = UNASSIGNED;\n        if (seqObj !== undefined && uCode != UNASSIGNED) { // We are in the middle of the sequence\n            var resCode = seqObj[uCode];\n            if (typeof resCode === 'object') { // Sequence continues.\n                seqObj = resCode;\n                continue;\n\n            } else if (typeof resCode == 'number') { // Sequence finished. Write it.\n                dbcsCode = resCode;\n\n            } else if (resCode == undefined) { // Current character is not part of the sequence.\n\n                // Try default character for this sequence\n                resCode = seqObj[DEF_CHAR];\n                if (resCode !== undefined) {\n                    dbcsCode = resCode; // Found. Write it.\n                    nextChar = uCode; // Current character will be written too in the next iteration.\n\n                } else {\n                    // TODO: What if we have no default? (resCode == undefined)\n                    // Then, we should write first char of the sequence as-is and try the rest recursively.\n                    // Didn't do it for now because no encoding has this situation yet.\n                    // Currently, just skip the sequence and write current char.\n                }\n            }\n            seqObj = undefined;\n        }\n        else if (uCode >= 0) {  // Regular character\n            var subtable = this.encodeTable[uCode >> 8];\n            if (subtable !== undefined)\n                dbcsCode = subtable[uCode & 0xFF];\n            \n            if (dbcsCode <= SEQ_START) { // Sequence start\n                seqObj = this.encodeTableSeq[SEQ_START-dbcsCode];\n                continue;\n            }\n\n            if (dbcsCode == UNASSIGNED && this.gb18030) {\n                // Use GB18030 algorithm to find character(s) to write.\n                var idx = findIdx(this.gb18030.uChars, uCode);\n                if (idx != -1) {\n                    var dbcsCode = this.gb18030.gbChars[idx] + (uCode - this.gb18030.uChars[idx]);\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 12600); dbcsCode = dbcsCode % 12600;\n                    newBuf[j++] = 0x30 + Math.floor(dbcsCode / 1260); dbcsCode = dbcsCode % 1260;\n                    newBuf[j++] = 0x81 + Math.floor(dbcsCode / 10); dbcsCode = dbcsCode % 10;\n                    newBuf[j++] = 0x30 + dbcsCode;\n                    continue;\n                }\n            }\n        }\n\n        // 3. Write dbcsCode character.\n        if (dbcsCode === UNASSIGNED)\n            dbcsCode = this.defaultCharSingleByte;\n        \n        if (dbcsCode < 0x100) {\n            newBuf[j++] = dbcsCode;\n        }\n        else if (dbcsCode < 0x10000) {\n            newBuf[j++] = dbcsCode >> 8;   // high byte\n            newBuf[j++] = dbcsCode & 0xFF; // low byte\n        }\n        else if (dbcsCode < 0x1000000) {\n            newBuf[j++] = dbcsCode >> 16;\n            newBuf[j++] = (dbcsCode >> 8) & 0xFF;\n            newBuf[j++] = dbcsCode & 0xFF;\n        } else {\n            newBuf[j++] = dbcsCode >>> 24;\n            newBuf[j++] = (dbcsCode >>> 16) & 0xFF;\n            newBuf[j++] = (dbcsCode >>> 8) & 0xFF;\n            newBuf[j++] = dbcsCode & 0xFF;\n        }\n    }\n\n    this.seqObj = seqObj;\n    this.leadSurrogate = leadSurrogate;\n    return newBuf.slice(0, j);\n}\n\nDBCSEncoder.prototype.end = function() {\n    if (this.leadSurrogate === -1 && this.seqObj === undefined)\n        return; // All clean. Most often case.\n\n    var newBuf = Buffer.alloc(10), j = 0;\n\n    if (this.seqObj) { // We're in the sequence.\n        var dbcsCode = this.seqObj[DEF_CHAR];\n        if (dbcsCode !== undefined) { // Write beginning of the sequence.\n            if (dbcsCode < 0x100) {\n                newBuf[j++] = dbcsCode;\n            }\n            else {\n                newBuf[j++] = dbcsCode >> 8;   // high byte\n                newBuf[j++] = dbcsCode & 0xFF; // low byte\n            }\n        } else {\n            // See todo above.\n        }\n        this.seqObj = undefined;\n    }\n\n    if (this.leadSurrogate !== -1) {\n        // Incomplete surrogate pair - only lead surrogate found.\n        newBuf[j++] = this.defaultCharSingleByte;\n        this.leadSurrogate = -1;\n    }\n    \n    return newBuf.slice(0, j);\n}\n\n// Export for testing\nDBCSEncoder.prototype.findIdx = findIdx;\n\n\n// == Decoder ==================================================================\n\nfunction DBCSDecoder(options, codec) {\n    // Decoder state\n    this.nodeIdx = 0;\n    this.prevBytes = [];\n\n    // Static data\n    this.decodeTables = codec.decodeTables;\n    this.decodeTableSeq = codec.decodeTableSeq;\n    this.defaultCharUnicode = codec.defaultCharUnicode;\n    this.gb18030 = codec.gb18030;\n}\n\nDBCSDecoder.prototype.write = function(buf) {\n    var newBuf = Buffer.alloc(buf.length*2),\n        nodeIdx = this.nodeIdx, \n        prevBytes = this.prevBytes, prevOffset = this.prevBytes.length,\n        seqStart = -this.prevBytes.length, // idx of the start of current parsed sequence.\n        uCode;\n\n    for (var i = 0, j = 0; i < buf.length; i++) {\n        var curByte = (i >= 0) ? buf[i] : prevBytes[i + prevOffset];\n\n        // Lookup in current trie node.\n        var uCode = this.decodeTables[nodeIdx][curByte];\n\n        if (uCode >= 0) { \n            // Normal character, just use it.\n        }\n        else if (uCode === UNASSIGNED) { // Unknown char.\n            // TODO: Callback with seq.\n            uCode = this.defaultCharUnicode.charCodeAt(0);\n            i = seqStart; // Skip one byte ('i' will be incremented by the for loop) and try to parse again.\n        }\n        else if (uCode === GB18030_CODE) {\n            if (i >= 3) {\n                var ptr = (buf[i-3]-0x81)*12600 + (buf[i-2]-0x30)*1260 + (buf[i-1]-0x81)*10 + (curByte-0x30);\n            } else {\n                var ptr = (prevBytes[i-3+prevOffset]-0x81)*12600 + \n                          (((i-2 >= 0) ? buf[i-2] : prevBytes[i-2+prevOffset])-0x30)*1260 + \n                          (((i-1 >= 0) ? buf[i-1] : prevBytes[i-1+prevOffset])-0x81)*10 + \n                          (curByte-0x30);\n            }\n            var idx = findIdx(this.gb18030.gbChars, ptr);\n            uCode = this.gb18030.uChars[idx] + ptr - this.gb18030.gbChars[idx];\n        }\n        else if (uCode <= NODE_START) { // Go to next trie node.\n            nodeIdx = NODE_START - uCode;\n            continue;\n        }\n        else if (uCode <= SEQ_START) { // Output a sequence of chars.\n            var seq = this.decodeTableSeq[SEQ_START - uCode];\n            for (var k = 0; k < seq.length - 1; k++) {\n                uCode = seq[k];\n                newBuf[j++] = uCode & 0xFF;\n                newBuf[j++] = uCode >> 8;\n            }\n            uCode = seq[seq.length-1];\n        }\n        else\n            throw new Error(\"iconv-lite internal error: invalid decoding table value \" + uCode + \" at \" + nodeIdx + \"/\" + curByte);\n\n        // Write the character to buffer, handling higher planes using surrogate pair.\n        if (uCode >= 0x10000) { \n            uCode -= 0x10000;\n            var uCodeLead = 0xD800 | (uCode >> 10);\n            newBuf[j++] = uCodeLead & 0xFF;\n            newBuf[j++] = uCodeLead >> 8;\n\n            uCode = 0xDC00 | (uCode & 0x3FF);\n        }\n        newBuf[j++] = uCode & 0xFF;\n        newBuf[j++] = uCode >> 8;\n\n        // Reset trie node.\n        nodeIdx = 0; seqStart = i+1;\n    }\n\n    this.nodeIdx = nodeIdx;\n    this.prevBytes = (seqStart >= 0)\n        ? Array.prototype.slice.call(buf, seqStart)\n        : prevBytes.slice(seqStart + prevOffset).concat(Array.prototype.slice.call(buf));\n\n    return newBuf.slice(0, j).toString('ucs2');\n}\n\nDBCSDecoder.prototype.end = function() {\n    var ret = '';\n\n    // Try to parse all remaining chars.\n    while (this.prevBytes.length > 0) {\n        // Skip 1 character in the buffer.\n        ret += this.defaultCharUnicode;\n        var bytesArr = this.prevBytes.slice(1);\n\n        // Parse remaining as usual.\n        this.prevBytes = [];\n        this.nodeIdx = 0;\n        if (bytesArr.length > 0)\n            ret += this.write(bytesArr);\n    }\n\n    this.prevBytes = [];\n    this.nodeIdx = 0;\n    return ret;\n}\n\n// Binary search for GB18030. Returns largest i such that table[i] <= val.\nfunction findIdx(table, val) {\n    if (table[0] > val)\n        return -1;\n\n    var l = 0, r = table.length;\n    while (l < r-1) { // always table[l] <= val < table[r]\n        var mid = l + ((r-l+1) >> 1);\n        if (table[mid] <= val)\n            l = mid;\n        else\n            r = mid;\n    }\n    return l;\n}\n\n", "[\n[\"0\",\"\\u0000\",128],\n[\"a1\",\"｡\",62],\n[\"8140\",\"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈\",9,\"＋－±×\"],\n[\"8180\",\"÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓\"],\n[\"81b8\",\"∈∋⊆⊇⊂⊃∪∩\"],\n[\"81c8\",\"∧∨￢⇒⇔∀∃\"],\n[\"81da\",\"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬\"],\n[\"81f0\",\"Å‰♯♭♪†‡¶\"],\n[\"81fc\",\"◯\"],\n[\"824f\",\"０\",9],\n[\"8260\",\"Ａ\",25],\n[\"8281\",\"ａ\",25],\n[\"829f\",\"ぁ\",82],\n[\"8340\",\"ァ\",62],\n[\"8380\",\"ム\",22],\n[\"839f\",\"Α\",16,\"Σ\",6],\n[\"83bf\",\"α\",16,\"σ\",6],\n[\"8440\",\"А\",5,\"ЁЖ\",25],\n[\"8470\",\"а\",5,\"ёж\",7],\n[\"8480\",\"о\",17],\n[\"849f\",\"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂\"],\n[\"8740\",\"①\",19,\"Ⅰ\",9],\n[\"875f\",\"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡\"],\n[\"877e\",\"㍻\"],\n[\"8780\",\"〝〟№㏍℡㊤\",4,\"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪\"],\n[\"889f\",\"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭\"],\n[\"8940\",\"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円\"],\n[\"8980\",\"園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改\"],\n[\"8a40\",\"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫\"],\n[\"8a80\",\"橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄\"],\n[\"8b40\",\"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救\"],\n[\"8b80\",\"朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈\"],\n[\"8c40\",\"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨\"],\n[\"8c80\",\"劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向\"],\n[\"8d40\",\"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降\"],\n[\"8d80\",\"項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷\"],\n[\"8e40\",\"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止\"],\n[\"8e80\",\"死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周\"],\n[\"8f40\",\"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳\"],\n[\"8f80\",\"準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾\"],\n[\"9040\",\"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨\"],\n[\"9080\",\"逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線\"],\n[\"9140\",\"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻\"],\n[\"9180\",\"操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只\"],\n[\"9240\",\"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄\"],\n[\"9280\",\"逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓\"],\n[\"9340\",\"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬\"],\n[\"9380\",\"凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入\"],\n[\"9440\",\"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅\"],\n[\"9480\",\"楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美\"],\n[\"9540\",\"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷\"],\n[\"9580\",\"斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋\"],\n[\"9640\",\"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆\"],\n[\"9680\",\"摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒\"],\n[\"9740\",\"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲\"],\n[\"9780\",\"沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯\"],\n[\"9840\",\"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕\"],\n[\"989f\",\"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲\"],\n[\"9940\",\"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭\"],\n[\"9980\",\"凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨\"],\n[\"9a40\",\"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸\"],\n[\"9a80\",\"噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩\"],\n[\"9b40\",\"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀\"],\n[\"9b80\",\"它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏\"],\n[\"9c40\",\"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠\"],\n[\"9c80\",\"怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛\"],\n[\"9d40\",\"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫\"],\n[\"9d80\",\"捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼\"],\n[\"9e40\",\"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎\"],\n[\"9e80\",\"梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣\"],\n[\"9f40\",\"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯\"],\n[\"9f80\",\"麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌\"],\n[\"e040\",\"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝\"],\n[\"e080\",\"烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱\"],\n[\"e140\",\"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿\"],\n[\"e180\",\"痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬\"],\n[\"e240\",\"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰\"],\n[\"e280\",\"窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆\"],\n[\"e340\",\"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷\"],\n[\"e380\",\"縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋\"],\n[\"e440\",\"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤\"],\n[\"e480\",\"艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈\"],\n[\"e540\",\"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬\"],\n[\"e580\",\"蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞\"],\n[\"e640\",\"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧\"],\n[\"e680\",\"諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊\"],\n[\"e740\",\"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜\"],\n[\"e780\",\"轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮\"],\n[\"e840\",\"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙\"],\n[\"e880\",\"閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰\"],\n[\"e940\",\"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃\"],\n[\"e980\",\"騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈\"],\n[\"ea40\",\"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯\"],\n[\"ea80\",\"黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙\"],\n[\"ed40\",\"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏\"],\n[\"ed80\",\"塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱\"],\n[\"ee40\",\"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙\"],\n[\"ee80\",\"蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑\"],\n[\"eeef\",\"ⅰ\",9,\"￢￤＇＂\"],\n[\"f040\",\"\",62],\n[\"f080\",\"\",124],\n[\"f140\",\"\",62],\n[\"f180\",\"\",124],\n[\"f240\",\"\",62],\n[\"f280\",\"\",124],\n[\"f340\",\"\",62],\n[\"f380\",\"\",124],\n[\"f440\",\"\",62],\n[\"f480\",\"\",124],\n[\"f540\",\"\",62],\n[\"f580\",\"\",124],\n[\"f640\",\"\",62],\n[\"f680\",\"\",124],\n[\"f740\",\"\",62],\n[\"f780\",\"\",124],\n[\"f840\",\"\",62],\n[\"f880\",\"\",124],\n[\"f940\",\"\"],\n[\"fa40\",\"ⅰ\",9,\"Ⅰ\",9,\"￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊\"],\n[\"fa80\",\"兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯\"],\n[\"fb40\",\"涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神\"],\n[\"fb80\",\"祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙\"],\n[\"fc40\",\"髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑\"]\n]\n", "[\n[\"0\",\"\\u0000\",127],\n[\"8ea1\",\"｡\",62],\n[\"a1a1\",\"　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈\",9,\"＋－±×÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇\"],\n[\"a2a1\",\"◆□■△▲▽▼※〒→←↑↓〓\"],\n[\"a2ba\",\"∈∋⊆⊇⊂⊃∪∩\"],\n[\"a2ca\",\"∧∨￢⇒⇔∀∃\"],\n[\"a2dc\",\"∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬\"],\n[\"a2f2\",\"Å‰♯♭♪†‡¶\"],\n[\"a2fe\",\"◯\"],\n[\"a3b0\",\"０\",9],\n[\"a3c1\",\"Ａ\",25],\n[\"a3e1\",\"ａ\",25],\n[\"a4a1\",\"ぁ\",82],\n[\"a5a1\",\"ァ\",85],\n[\"a6a1\",\"Α\",16,\"Σ\",6],\n[\"a6c1\",\"α\",16,\"σ\",6],\n[\"a7a1\",\"А\",5,\"ЁЖ\",25],\n[\"a7d1\",\"а\",5,\"ёж\",25],\n[\"a8a1\",\"─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂\"],\n[\"ada1\",\"①\",19,\"Ⅰ\",9],\n[\"adc0\",\"㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡\"],\n[\"addf\",\"㍻〝〟№㏍℡㊤\",4,\"㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪\"],\n[\"b0a1\",\"亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭\"],\n[\"b1a1\",\"院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応\"],\n[\"b2a1\",\"押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改\"],\n[\"b3a1\",\"魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱\"],\n[\"b4a1\",\"粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄\"],\n[\"b5a1\",\"機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京\"],\n[\"b6a1\",\"供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈\"],\n[\"b7a1\",\"掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲\"],\n[\"b8a1\",\"検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向\"],\n[\"b9a1\",\"后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込\"],\n[\"baa1\",\"此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷\"],\n[\"bba1\",\"察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時\"],\n[\"bca1\",\"次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周\"],\n[\"bda1\",\"宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償\"],\n[\"bea1\",\"勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾\"],\n[\"bfa1\",\"拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾\"],\n[\"c0a1\",\"澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線\"],\n[\"c1a1\",\"繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎\"],\n[\"c2a1\",\"臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只\"],\n[\"c3a1\",\"叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵\"],\n[\"c4a1\",\"帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓\"],\n[\"c5a1\",\"邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到\"],\n[\"c6a1\",\"董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入\"],\n[\"c7a1\",\"如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦\"],\n[\"c8a1\",\"函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美\"],\n[\"c9a1\",\"鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服\"],\n[\"caa1\",\"福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋\"],\n[\"cba1\",\"法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満\"],\n[\"cca1\",\"漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒\"],\n[\"cda1\",\"諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃\"],\n[\"cea1\",\"痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯\"],\n[\"cfa1\",\"蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕\"],\n[\"d0a1\",\"弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲\"],\n[\"d1a1\",\"僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨\"],\n[\"d2a1\",\"辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨\"],\n[\"d3a1\",\"咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉\"],\n[\"d4a1\",\"圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩\"],\n[\"d5a1\",\"奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓\"],\n[\"d6a1\",\"屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏\"],\n[\"d7a1\",\"廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚\"],\n[\"d8a1\",\"悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛\"],\n[\"d9a1\",\"戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼\"],\n[\"daa1\",\"據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼\"],\n[\"dba1\",\"曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍\"],\n[\"dca1\",\"棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣\"],\n[\"dda1\",\"檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾\"],\n[\"dea1\",\"沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌\"],\n[\"dfa1\",\"漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼\"],\n[\"e0a1\",\"燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱\"],\n[\"e1a1\",\"瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰\"],\n[\"e2a1\",\"癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬\"],\n[\"e3a1\",\"磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐\"],\n[\"e4a1\",\"筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆\"],\n[\"e5a1\",\"紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺\"],\n[\"e6a1\",\"罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋\"],\n[\"e7a1\",\"隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙\"],\n[\"e8a1\",\"茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈\"],\n[\"e9a1\",\"蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙\"],\n[\"eaa1\",\"蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞\"],\n[\"eba1\",\"襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫\"],\n[\"eca1\",\"譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊\"],\n[\"eda1\",\"蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸\"],\n[\"eea1\",\"遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮\"],\n[\"efa1\",\"錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞\"],\n[\"f0a1\",\"陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰\"],\n[\"f1a1\",\"顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷\"],\n[\"f2a1\",\"髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈\"],\n[\"f3a1\",\"鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠\"],\n[\"f4a1\",\"堯槇遙瑤凜熙\"],\n[\"f9a1\",\"纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德\"],\n[\"faa1\",\"忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱\"],\n[\"fba1\",\"犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚\"],\n[\"fca1\",\"釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑\"],\n[\"fcf1\",\"ⅰ\",9,\"￢￤＇＂\"],\n[\"8fa2af\",\"˘ˇ¸˙˝¯˛˚～΄΅\"],\n[\"8fa2c2\",\"¡¦¿\"],\n[\"8fa2eb\",\"ºª©®™¤№\"],\n[\"8fa6e1\",\"ΆΈΉΊΪ\"],\n[\"8fa6e7\",\"Ό\"],\n[\"8fa6e9\",\"ΎΫ\"],\n[\"8fa6ec\",\"Ώ\"],\n[\"8fa6f1\",\"άέήίϊΐόςύϋΰώ\"],\n[\"8fa7c2\",\"Ђ\",10,\"ЎЏ\"],\n[\"8fa7f2\",\"ђ\",10,\"ўџ\"],\n[\"8fa9a1\",\"ÆĐ\"],\n[\"8fa9a4\",\"Ħ\"],\n[\"8fa9a6\",\"Ĳ\"],\n[\"8fa9a8\",\"ŁĿ\"],\n[\"8fa9ab\",\"ŊØŒ\"],\n[\"8fa9af\",\"ŦÞ\"],\n[\"8fa9c1\",\"æđðħıĳĸłŀŉŋøœßŧþ\"],\n[\"8faaa1\",\"ÁÀÄÂĂǍĀĄÅÃĆĈČÇĊĎÉÈËÊĚĖĒĘ\"],\n[\"8faaba\",\"ĜĞĢĠĤÍÌÏÎǏİĪĮĨĴĶĹĽĻŃŇŅÑÓÒÖÔǑŐŌÕŔŘŖŚŜŠŞŤŢÚÙÜÛŬǓŰŪŲŮŨǗǛǙǕŴÝŸŶŹŽŻ\"],\n[\"8faba1\",\"áàäâăǎāąåãćĉčçċďéèëêěėēęǵĝğ\"],\n[\"8fabbd\",\"ġĥíìïîǐ\"],\n[\"8fabc5\",\"īįĩĵķĺľļńňņñóòöôǒőōõŕřŗśŝšşťţúùüûŭǔűūųůũǘǜǚǖŵýÿŷźžż\"],\n[\"8fb0a1\",\"丂丄丅丌丒丟丣两丨丫丮丯丰丵乀乁乄乇乑乚乜乣乨乩乴乵乹乿亍亖亗亝亯亹仃仐仚仛仠仡仢仨仯仱仳仵份仾仿伀伂伃伈伋伌伒伕伖众伙伮伱你伳伵伷伹伻伾佀佂佈佉佋佌佒佔佖佘佟佣佪佬佮佱佷佸佹佺佽佾侁侂侄\"],\n[\"8fb1a1\",\"侅侉侊侌侎侐侒侓侔侗侙侚侞侟侲侷侹侻侼侽侾俀俁俅俆俈俉俋俌俍俏俒俜俠俢俰俲俼俽俿倀倁倄倇倊倌倎倐倓倗倘倛倜倝倞倢倧倮倰倲倳倵偀偁偂偅偆偊偌偎偑偒偓偗偙偟偠偢偣偦偧偪偭偰偱倻傁傃傄傆傊傎傏傐\"],\n[\"8fb2a1\",\"傒傓傔傖傛傜傞\",4,\"傪傯傰傹傺傽僀僃僄僇僌僎僐僓僔僘僜僝僟僢僤僦僨僩僯僱僶僺僾儃儆儇儈儋儌儍儎僲儐儗儙儛儜儝儞儣儧儨儬儭儯儱儳儴儵儸儹兂兊兏兓兕兗兘兟兤兦兾冃冄冋冎冘冝冡冣冭冸冺冼冾冿凂\"],\n[\"8fb3a1\",\"凈减凑凒凓凕凘凞凢凥凮凲凳凴凷刁刂刅划刓刕刖刘刢刨刱刲刵刼剅剉剕剗剘剚剜剟剠剡剦剮剷剸剹劀劂劅劊劌劓劕劖劗劘劚劜劤劥劦劧劯劰劶劷劸劺劻劽勀勄勆勈勌勏勑勔勖勛勜勡勥勨勩勪勬勰勱勴勶勷匀匃匊匋\"],\n[\"8fb4a1\",\"匌匑匓匘匛匜匞匟匥匧匨匩匫匬匭匰匲匵匼匽匾卂卌卋卙卛卡卣卥卬卭卲卹卾厃厇厈厎厓厔厙厝厡厤厪厫厯厲厴厵厷厸厺厽叀叅叏叒叓叕叚叝叞叠另叧叵吂吓吚吡吧吨吪启吱吴吵呃呄呇呍呏呞呢呤呦呧呩呫呭呮呴呿\"],\n[\"8fb5a1\",\"咁咃咅咈咉咍咑咕咖咜咟咡咦咧咩咪咭咮咱咷咹咺咻咿哆哊响哎哠哪哬哯哶哼哾哿唀唁唅唈唉唌唍唎唕唪唫唲唵唶唻唼唽啁啇啉啊啍啐啑啘啚啛啞啠啡啤啦啿喁喂喆喈喎喏喑喒喓喔喗喣喤喭喲喿嗁嗃嗆嗉嗋嗌嗎嗑嗒\"],\n[\"8fb6a1\",\"嗓嗗嗘嗛嗞嗢嗩嗶嗿嘅嘈嘊嘍\",5,\"嘙嘬嘰嘳嘵嘷嘹嘻嘼嘽嘿噀噁噃噄噆噉噋噍噏噔噞噠噡噢噣噦噩噭噯噱噲噵嚄嚅嚈嚋嚌嚕嚙嚚嚝嚞嚟嚦嚧嚨嚩嚫嚬嚭嚱嚳嚷嚾囅囉囊囋囏囐囌囍囙囜囝囟囡囤\",4,\"囱囫园\"],\n[\"8fb7a1\",\"囶囷圁圂圇圊圌圑圕圚圛圝圠圢圣圤圥圩圪圬圮圯圳圴圽圾圿坅坆坌坍坒坢坥坧坨坫坭\",4,\"坳坴坵坷坹坺坻坼坾垁垃垌垔垗垙垚垜垝垞垟垡垕垧垨垩垬垸垽埇埈埌埏埕埝埞埤埦埧埩埭埰埵埶埸埽埾埿堃堄堈堉埡\"],\n[\"8fb8a1\",\"堌堍堛堞堟堠堦堧堭堲堹堿塉塌塍塏塐塕塟塡塤塧塨塸塼塿墀墁墇墈墉墊墌墍墏墐墔墖墝墠墡墢墦墩墱墲壄墼壂壈壍壎壐壒壔壖壚壝壡壢壩壳夅夆夋夌夒夓夔虁夝夡夣夤夨夯夰夳夵夶夿奃奆奒奓奙奛奝奞奟奡奣奫奭\"],\n[\"8fb9a1\",\"奯奲奵奶她奻奼妋妌妎妒妕妗妟妤妧妭妮妯妰妳妷妺妼姁姃姄姈姊姍姒姝姞姟姣姤姧姮姯姱姲姴姷娀娄娌娍娎娒娓娞娣娤娧娨娪娭娰婄婅婇婈婌婐婕婞婣婥婧婭婷婺婻婾媋媐媓媖媙媜媞媟媠媢媧媬媱媲媳媵媸媺媻媿\"],\n[\"8fbaa1\",\"嫄嫆嫈嫏嫚嫜嫠嫥嫪嫮嫵嫶嫽嬀嬁嬈嬗嬴嬙嬛嬝嬡嬥嬭嬸孁孋孌孒孖孞孨孮孯孼孽孾孿宁宄宆宊宎宐宑宓宔宖宨宩宬宭宯宱宲宷宺宼寀寁寍寏寖\",4,\"寠寯寱寴寽尌尗尞尟尣尦尩尫尬尮尰尲尵尶屙屚屜屢屣屧屨屩\"],\n[\"8fbba1\",\"屭屰屴屵屺屻屼屽岇岈岊岏岒岝岟岠岢岣岦岪岲岴岵岺峉峋峒峝峗峮峱峲峴崁崆崍崒崫崣崤崦崧崱崴崹崽崿嵂嵃嵆嵈嵕嵑嵙嵊嵟嵠嵡嵢嵤嵪嵭嵰嵹嵺嵾嵿嶁嶃嶈嶊嶒嶓嶔嶕嶙嶛嶟嶠嶧嶫嶰嶴嶸嶹巃巇巋巐巎巘巙巠巤\"],\n[\"8fbca1\",\"巩巸巹帀帇帍帒帔帕帘帟帠帮帨帲帵帾幋幐幉幑幖幘幛幜幞幨幪\",4,\"幰庀庋庎庢庤庥庨庪庬庱庳庽庾庿廆廌廋廎廑廒廔廕廜廞廥廫异弆弇弈弎弙弜弝弡弢弣弤弨弫弬弮弰弴弶弻弽弿彀彄彅彇彍彐彔彘彛彠彣彤彧\"],\n[\"8fbda1\",\"彯彲彴彵彸彺彽彾徉徍徏徖徜徝徢徧徫徤徬徯徰徱徸忄忇忈忉忋忐\",4,\"忞忡忢忨忩忪忬忭忮忯忲忳忶忺忼怇怊怍怓怔怗怘怚怟怤怭怳怵恀恇恈恉恌恑恔恖恗恝恡恧恱恾恿悂悆悈悊悎悑悓悕悘悝悞悢悤悥您悰悱悷\"],\n[\"8fbea1\",\"悻悾惂惄惈惉惊惋惎惏惔惕惙惛惝惞惢惥惲惵惸惼惽愂愇愊愌愐\",4,\"愖愗愙愜愞愢愪愫愰愱愵愶愷愹慁慅慆慉慞慠慬慲慸慻慼慿憀憁憃憄憋憍憒憓憗憘憜憝憟憠憥憨憪憭憸憹憼懀懁懂懎懏懕懜懝懞懟懡懢懧懩懥\"],\n[\"8fbfa1\",\"懬懭懯戁戃戄戇戓戕戜戠戢戣戧戩戫戹戽扂扃扄扆扌扐扑扒扔扖扚扜扤扭扯扳扺扽抍抎抏抐抦抨抳抶抷抺抾抿拄拎拕拖拚拪拲拴拼拽挃挄挊挋挍挐挓挖挘挩挪挭挵挶挹挼捁捂捃捄捆捊捋捎捒捓捔捘捛捥捦捬捭捱捴捵\"],\n[\"8fc0a1\",\"捸捼捽捿掂掄掇掊掐掔掕掙掚掞掤掦掭掮掯掽揁揅揈揎揑揓揔揕揜揠揥揪揬揲揳揵揸揹搉搊搐搒搔搘搞搠搢搤搥搩搪搯搰搵搽搿摋摏摑摒摓摔摚摛摜摝摟摠摡摣摭摳摴摻摽撅撇撏撐撑撘撙撛撝撟撡撣撦撨撬撳撽撾撿\"],\n[\"8fc1a1\",\"擄擉擊擋擌擎擐擑擕擗擤擥擩擪擭擰擵擷擻擿攁攄攈攉攊攏攓攔攖攙攛攞攟攢攦攩攮攱攺攼攽敃敇敉敐敒敔敟敠敧敫敺敽斁斅斊斒斕斘斝斠斣斦斮斲斳斴斿旂旈旉旎旐旔旖旘旟旰旲旴旵旹旾旿昀昄昈昉昍昑昒昕昖昝\"],\n[\"8fc2a1\",\"昞昡昢昣昤昦昩昪昫昬昮昰昱昳昹昷晀晅晆晊晌晑晎晗晘晙晛晜晠晡曻晪晫晬晾晳晵晿晷晸晹晻暀晼暋暌暍暐暒暙暚暛暜暟暠暤暭暱暲暵暻暿曀曂曃曈曌曎曏曔曛曟曨曫曬曮曺朅朇朎朓朙朜朠朢朳朾杅杇杈杌杔杕杝\"],\n[\"8fc3a1\",\"杦杬杮杴杶杻极构枎枏枑枓枖枘枙枛枰枱枲枵枻枼枽柹柀柂柃柅柈柉柒柗柙柜柡柦柰柲柶柷桒栔栙栝栟栨栧栬栭栯栰栱栳栻栿桄桅桊桌桕桗桘桛桫桮\",4,\"桵桹桺桻桼梂梄梆梈梖梘梚梜梡梣梥梩梪梮梲梻棅棈棌棏\"],\n[\"8fc4a1\",\"棐棑棓棖棙棜棝棥棨棪棫棬棭棰棱棵棶棻棼棽椆椉椊椐椑椓椖椗椱椳椵椸椻楂楅楉楎楗楛楣楤楥楦楨楩楬楰楱楲楺楻楿榀榍榒榖榘榡榥榦榨榫榭榯榷榸榺榼槅槈槑槖槗槢槥槮槯槱槳槵槾樀樁樃樏樑樕樚樝樠樤樨樰樲\"],\n[\"8fc5a1\",\"樴樷樻樾樿橅橆橉橊橎橐橑橒橕橖橛橤橧橪橱橳橾檁檃檆檇檉檋檑檛檝檞檟檥檫檯檰檱檴檽檾檿櫆櫉櫈櫌櫐櫔櫕櫖櫜櫝櫤櫧櫬櫰櫱櫲櫼櫽欂欃欆欇欉欏欐欑欗欛欞欤欨欫欬欯欵欶欻欿歆歊歍歒歖歘歝歠歧歫歮歰歵歽\"],\n[\"8fc6a1\",\"歾殂殅殗殛殟殠殢殣殨殩殬殭殮殰殸殹殽殾毃毄毉毌毖毚毡毣毦毧毮毱毷毹毿氂氄氅氉氍氎氐氒氙氟氦氧氨氬氮氳氵氶氺氻氿汊汋汍汏汒汔汙汛汜汫汭汯汴汶汸汹汻沅沆沇沉沔沕沗沘沜沟沰沲沴泂泆泍泏泐泑泒泔泖\"],\n[\"8fc7a1\",\"泚泜泠泧泩泫泬泮泲泴洄洇洊洎洏洑洓洚洦洧洨汧洮洯洱洹洼洿浗浞浟浡浥浧浯浰浼涂涇涑涒涔涖涗涘涪涬涴涷涹涽涿淄淈淊淎淏淖淛淝淟淠淢淥淩淯淰淴淶淼渀渄渞渢渧渲渶渹渻渼湄湅湈湉湋湏湑湒湓湔湗湜湝湞\"],\n[\"8fc8a1\",\"湢湣湨湳湻湽溍溓溙溠溧溭溮溱溳溻溿滀滁滃滇滈滊滍滎滏滫滭滮滹滻滽漄漈漊漌漍漖漘漚漛漦漩漪漯漰漳漶漻漼漭潏潑潒潓潗潙潚潝潞潡潢潨潬潽潾澃澇澈澋澌澍澐澒澓澔澖澚澟澠澥澦澧澨澮澯澰澵澶澼濅濇濈濊\"],\n[\"8fc9a1\",\"濚濞濨濩濰濵濹濼濽瀀瀅瀆瀇瀍瀗瀠瀣瀯瀴瀷瀹瀼灃灄灈灉灊灋灔灕灝灞灎灤灥灬灮灵灶灾炁炅炆炔\",4,\"炛炤炫炰炱炴炷烊烑烓烔烕烖烘烜烤烺焃\",4,\"焋焌焏焞焠焫焭焯焰焱焸煁煅煆煇煊煋煐煒煗煚煜煞煠\"],\n[\"8fcaa1\",\"煨煹熀熅熇熌熒熚熛熠熢熯熰熲熳熺熿燀燁燄燋燌燓燖燙燚燜燸燾爀爇爈爉爓爗爚爝爟爤爫爯爴爸爹牁牂牃牅牎牏牐牓牕牖牚牜牞牠牣牨牫牮牯牱牷牸牻牼牿犄犉犍犎犓犛犨犭犮犱犴犾狁狇狉狌狕狖狘狟狥狳狴狺狻\"],\n[\"8fcba1\",\"狾猂猄猅猇猋猍猒猓猘猙猞猢猤猧猨猬猱猲猵猺猻猽獃獍獐獒獖獘獝獞獟獠獦獧獩獫獬獮獯獱獷獹獼玀玁玃玅玆玎玐玓玕玗玘玜玞玟玠玢玥玦玪玫玭玵玷玹玼玽玿珅珆珉珋珌珏珒珓珖珙珝珡珣珦珧珩珴珵珷珹珺珻珽\"],\n[\"8fcca1\",\"珿琀琁琄琇琊琑琚琛琤琦琨\",9,\"琹瑀瑃瑄瑆瑇瑋瑍瑑瑒瑗瑝瑢瑦瑧瑨瑫瑭瑮瑱瑲璀璁璅璆璇璉璏璐璑璒璘璙璚璜璟璠璡璣璦璨璩璪璫璮璯璱璲璵璹璻璿瓈瓉瓌瓐瓓瓘瓚瓛瓞瓟瓤瓨瓪瓫瓯瓴瓺瓻瓼瓿甆\"],\n[\"8fcda1\",\"甒甖甗甠甡甤甧甩甪甯甶甹甽甾甿畀畃畇畈畎畐畒畗畞畟畡畯畱畹\",5,\"疁疅疐疒疓疕疙疜疢疤疴疺疿痀痁痄痆痌痎痏痗痜痟痠痡痤痧痬痮痯痱痹瘀瘂瘃瘄瘇瘈瘊瘌瘏瘒瘓瘕瘖瘙瘛瘜瘝瘞瘣瘥瘦瘩瘭瘲瘳瘵瘸瘹\"],\n[\"8fcea1\",\"瘺瘼癊癀癁癃癄癅癉癋癕癙癟癤癥癭癮癯癱癴皁皅皌皍皕皛皜皝皟皠皢\",6,\"皪皭皽盁盅盉盋盌盎盔盙盠盦盨盬盰盱盶盹盼眀眆眊眎眒眔眕眗眙眚眜眢眨眭眮眯眴眵眶眹眽眾睂睅睆睊睍睎睏睒睖睗睜睞睟睠睢\"],\n[\"8fcfa1\",\"睤睧睪睬睰睲睳睴睺睽瞀瞄瞌瞍瞔瞕瞖瞚瞟瞢瞧瞪瞮瞯瞱瞵瞾矃矉矑矒矕矙矞矟矠矤矦矪矬矰矱矴矸矻砅砆砉砍砎砑砝砡砢砣砭砮砰砵砷硃硄硇硈硌硎硒硜硞硠硡硣硤硨硪确硺硾碊碏碔碘碡碝碞碟碤碨碬碭碰碱碲碳\"],\n[\"8fd0a1\",\"碻碽碿磇磈磉磌磎磒磓磕磖磤磛磟磠磡磦磪磲磳礀磶磷磺磻磿礆礌礐礚礜礞礟礠礥礧礩礭礱礴礵礻礽礿祄祅祆祊祋祏祑祔祘祛祜祧祩祫祲祹祻祼祾禋禌禑禓禔禕禖禘禛禜禡禨禩禫禯禱禴禸离秂秄秇秈秊秏秔秖秚秝秞\"],\n[\"8fd1a1\",\"秠秢秥秪秫秭秱秸秼稂稃稇稉稊稌稑稕稛稞稡稧稫稭稯稰稴稵稸稹稺穄穅穇穈穌穕穖穙穜穝穟穠穥穧穪穭穵穸穾窀窂窅窆窊窋窐窑窔窞窠窣窬窳窵窹窻窼竆竉竌竎竑竛竨竩竫竬竱竴竻竽竾笇笔笟笣笧笩笪笫笭笮笯笰\"],\n[\"8fd2a1\",\"笱笴笽笿筀筁筇筎筕筠筤筦筩筪筭筯筲筳筷箄箉箎箐箑箖箛箞箠箥箬箯箰箲箵箶箺箻箼箽篂篅篈篊篔篖篗篙篚篛篨篪篲篴篵篸篹篺篼篾簁簂簃簄簆簉簋簌簎簏簙簛簠簥簦簨簬簱簳簴簶簹簺籆籊籕籑籒籓籙\",5],\n[\"8fd3a1\",\"籡籣籧籩籭籮籰籲籹籼籽粆粇粏粔粞粠粦粰粶粷粺粻粼粿糄糇糈糉糍糏糓糔糕糗糙糚糝糦糩糫糵紃紇紈紉紏紑紒紓紖紝紞紣紦紪紭紱紼紽紾絀絁絇絈絍絑絓絗絙絚絜絝絥絧絪絰絸絺絻絿綁綂綃綅綆綈綋綌綍綑綖綗綝\"],\n[\"8fd4a1\",\"綞綦綧綪綳綶綷綹緂\",4,\"緌緍緎緗緙縀緢緥緦緪緫緭緱緵緶緹緺縈縐縑縕縗縜縝縠縧縨縬縭縯縳縶縿繄繅繇繎繐繒繘繟繡繢繥繫繮繯繳繸繾纁纆纇纊纍纑纕纘纚纝纞缼缻缽缾缿罃罄罇罏罒罓罛罜罝罡罣罤罥罦罭\"],\n[\"8fd5a1\",\"罱罽罾罿羀羋羍羏羐羑羖羗羜羡羢羦羪羭羴羼羿翀翃翈翎翏翛翟翣翥翨翬翮翯翲翺翽翾翿耇耈耊耍耎耏耑耓耔耖耝耞耟耠耤耦耬耮耰耴耵耷耹耺耼耾聀聄聠聤聦聭聱聵肁肈肎肜肞肦肧肫肸肹胈胍胏胒胔胕胗胘胠胭胮\"],\n[\"8fd6a1\",\"胰胲胳胶胹胺胾脃脋脖脗脘脜脞脠脤脧脬脰脵脺脼腅腇腊腌腒腗腠腡腧腨腩腭腯腷膁膐膄膅膆膋膎膖膘膛膞膢膮膲膴膻臋臃臅臊臎臏臕臗臛臝臞臡臤臫臬臰臱臲臵臶臸臹臽臿舀舃舏舓舔舙舚舝舡舢舨舲舴舺艃艄艅艆\"],\n[\"8fd7a1\",\"艋艎艏艑艖艜艠艣艧艭艴艻艽艿芀芁芃芄芇芉芊芎芑芔芖芘芚芛芠芡芣芤芧芨芩芪芮芰芲芴芷芺芼芾芿苆苐苕苚苠苢苤苨苪苭苯苶苷苽苾茀茁茇茈茊茋荔茛茝茞茟茡茢茬茭茮茰茳茷茺茼茽荂荃荄荇荍荎荑荕荖荗荰荸\"],\n[\"8fd8a1\",\"荽荿莀莂莄莆莍莒莔莕莘莙莛莜莝莦莧莩莬莾莿菀菇菉菏菐菑菔菝荓菨菪菶菸菹菼萁萆萊萏萑萕萙莭萯萹葅葇葈葊葍葏葑葒葖葘葙葚葜葠葤葥葧葪葰葳葴葶葸葼葽蒁蒅蒒蒓蒕蒞蒦蒨蒩蒪蒯蒱蒴蒺蒽蒾蓀蓂蓇蓈蓌蓏蓓\"],\n[\"8fd9a1\",\"蓜蓧蓪蓯蓰蓱蓲蓷蔲蓺蓻蓽蔂蔃蔇蔌蔎蔐蔜蔞蔢蔣蔤蔥蔧蔪蔫蔯蔳蔴蔶蔿蕆蕏\",4,\"蕖蕙蕜\",6,\"蕤蕫蕯蕹蕺蕻蕽蕿薁薅薆薉薋薌薏薓薘薝薟薠薢薥薧薴薶薷薸薼薽薾薿藂藇藊藋藎薭藘藚藟藠藦藨藭藳藶藼\"],\n[\"8fdaa1\",\"藿蘀蘄蘅蘍蘎蘐蘑蘒蘘蘙蘛蘞蘡蘧蘩蘶蘸蘺蘼蘽虀虂虆虒虓虖虗虘虙虝虠\",4,\"虩虬虯虵虶虷虺蚍蚑蚖蚘蚚蚜蚡蚦蚧蚨蚭蚱蚳蚴蚵蚷蚸蚹蚿蛀蛁蛃蛅蛑蛒蛕蛗蛚蛜蛠蛣蛥蛧蚈蛺蛼蛽蜄蜅蜇蜋蜎蜏蜐蜓蜔蜙蜞蜟蜡蜣\"],\n[\"8fdba1\",\"蜨蜮蜯蜱蜲蜹蜺蜼蜽蜾蝀蝃蝅蝍蝘蝝蝡蝤蝥蝯蝱蝲蝻螃\",6,\"螋螌螐螓螕螗螘螙螞螠螣螧螬螭螮螱螵螾螿蟁蟈蟉蟊蟎蟕蟖蟙蟚蟜蟟蟢蟣蟤蟪蟫蟭蟱蟳蟸蟺蟿蠁蠃蠆蠉蠊蠋蠐蠙蠒蠓蠔蠘蠚蠛蠜蠞蠟蠨蠭蠮蠰蠲蠵\"],\n[\"8fdca1\",\"蠺蠼衁衃衅衈衉衊衋衎衑衕衖衘衚衜衟衠衤衩衱衹衻袀袘袚袛袜袟袠袨袪袺袽袾裀裊\",4,\"裑裒裓裛裞裧裯裰裱裵裷褁褆褍褎褏褕褖褘褙褚褜褠褦褧褨褰褱褲褵褹褺褾襀襂襅襆襉襏襒襗襚襛襜襡襢襣襫襮襰襳襵襺\"],\n[\"8fdda1\",\"襻襼襽覉覍覐覔覕覛覜覟覠覥覰覴覵覶覷覼觔\",4,\"觥觩觫觭觱觳觶觹觽觿訄訅訇訏訑訒訔訕訞訠訢訤訦訫訬訯訵訷訽訾詀詃詅詇詉詍詎詓詖詗詘詜詝詡詥詧詵詶詷詹詺詻詾詿誀誃誆誋誏誐誒誖誗誙誟誧誩誮誯誳\"],\n[\"8fdea1\",\"誶誷誻誾諃諆諈諉諊諑諓諔諕諗諝諟諬諰諴諵諶諼諿謅謆謋謑謜謞謟謊謭謰謷謼譂\",4,\"譈譒譓譔譙譍譞譣譭譶譸譹譼譾讁讄讅讋讍讏讔讕讜讞讟谸谹谽谾豅豇豉豋豏豑豓豔豗豘豛豝豙豣豤豦豨豩豭豳豵豶豻豾貆\"],\n[\"8fdfa1\",\"貇貋貐貒貓貙貛貜貤貹貺賅賆賉賋賏賖賕賙賝賡賨賬賯賰賲賵賷賸賾賿贁贃贉贒贗贛赥赩赬赮赿趂趄趈趍趐趑趕趞趟趠趦趫趬趯趲趵趷趹趻跀跅跆跇跈跊跎跑跔跕跗跙跤跥跧跬跰趼跱跲跴跽踁踄踅踆踋踑踔踖踠踡踢\"],\n[\"8fe0a1\",\"踣踦踧踱踳踶踷踸踹踽蹀蹁蹋蹍蹎蹏蹔蹛蹜蹝蹞蹡蹢蹩蹬蹭蹯蹰蹱蹹蹺蹻躂躃躉躐躒躕躚躛躝躞躢躧躩躭躮躳躵躺躻軀軁軃軄軇軏軑軔軜軨軮軰軱軷軹軺軭輀輂輇輈輏輐輖輗輘輞輠輡輣輥輧輨輬輭輮輴輵輶輷輺轀轁\"],\n[\"8fe1a1\",\"轃轇轏轑\",4,\"轘轝轞轥辝辠辡辤辥辦辵辶辸达迀迁迆迊迋迍运迒迓迕迠迣迤迨迮迱迵迶迻迾适逄逈逌逘逛逨逩逯逪逬逭逳逴逷逿遃遄遌遛遝遢遦遧遬遰遴遹邅邈邋邌邎邐邕邗邘邙邛邠邡邢邥邰邲邳邴邶邽郌邾郃\"],\n[\"8fe2a1\",\"郄郅郇郈郕郗郘郙郜郝郟郥郒郶郫郯郰郴郾郿鄀鄄鄅鄆鄈鄍鄐鄔鄖鄗鄘鄚鄜鄞鄠鄥鄢鄣鄧鄩鄮鄯鄱鄴鄶鄷鄹鄺鄼鄽酃酇酈酏酓酗酙酚酛酡酤酧酭酴酹酺酻醁醃醅醆醊醎醑醓醔醕醘醞醡醦醨醬醭醮醰醱醲醳醶醻醼醽醿\"],\n[\"8fe3a1\",\"釂釃釅釓釔釗釙釚釞釤釥釩釪釬\",5,\"釷釹釻釽鈀鈁鈄鈅鈆鈇鈉鈊鈌鈐鈒鈓鈖鈘鈜鈝鈣鈤鈥鈦鈨鈮鈯鈰鈳鈵鈶鈸鈹鈺鈼鈾鉀鉂鉃鉆鉇鉊鉍鉎鉏鉑鉘鉙鉜鉝鉠鉡鉥鉧鉨鉩鉮鉯鉰鉵\",4,\"鉻鉼鉽鉿銈銉銊銍銎銒銗\"],\n[\"8fe4a1\",\"銙銟銠銤銥銧銨銫銯銲銶銸銺銻銼銽銿\",4,\"鋅鋆鋇鋈鋋鋌鋍鋎鋐鋓鋕鋗鋘鋙鋜鋝鋟鋠鋡鋣鋥鋧鋨鋬鋮鋰鋹鋻鋿錀錂錈錍錑錔錕錜錝錞錟錡錤錥錧錩錪錳錴錶錷鍇鍈鍉鍐鍑鍒鍕鍗鍘鍚鍞鍤鍥鍧鍩鍪鍭鍯鍰鍱鍳鍴鍶\"],\n[\"8fe5a1\",\"鍺鍽鍿鎀鎁鎂鎈鎊鎋鎍鎏鎒鎕鎘鎛鎞鎡鎣鎤鎦鎨鎫鎴鎵鎶鎺鎩鏁鏄鏅鏆鏇鏉\",4,\"鏓鏙鏜鏞鏟鏢鏦鏧鏹鏷鏸鏺鏻鏽鐁鐂鐄鐈鐉鐍鐎鐏鐕鐖鐗鐟鐮鐯鐱鐲鐳鐴鐻鐿鐽鑃鑅鑈鑊鑌鑕鑙鑜鑟鑡鑣鑨鑫鑭鑮鑯鑱鑲钄钃镸镹\"],\n[\"8fe6a1\",\"镾閄閈閌閍閎閝閞閟閡閦閩閫閬閴閶閺閽閿闆闈闉闋闐闑闒闓闙闚闝闞闟闠闤闦阝阞阢阤阥阦阬阱阳阷阸阹阺阼阽陁陒陔陖陗陘陡陮陴陻陼陾陿隁隂隃隄隉隑隖隚隝隟隤隥隦隩隮隯隳隺雊雒嶲雘雚雝雞雟雩雯雱雺霂\"],\n[\"8fe7a1\",\"霃霅霉霚霛霝霡霢霣霨霱霳靁靃靊靎靏靕靗靘靚靛靣靧靪靮靳靶靷靸靻靽靿鞀鞉鞕鞖鞗鞙鞚鞞鞟鞢鞬鞮鞱鞲鞵鞶鞸鞹鞺鞼鞾鞿韁韄韅韇韉韊韌韍韎韐韑韔韗韘韙韝韞韠韛韡韤韯韱韴韷韸韺頇頊頙頍頎頔頖頜頞頠頣頦\"],\n[\"8fe8a1\",\"頫頮頯頰頲頳頵頥頾顄顇顊顑顒顓顖顗顙顚顢顣顥顦顪顬颫颭颮颰颴颷颸颺颻颿飂飅飈飌飡飣飥飦飧飪飳飶餂餇餈餑餕餖餗餚餛餜餟餢餦餧餫餱\",4,\"餹餺餻餼饀饁饆饇饈饍饎饔饘饙饛饜饞饟饠馛馝馟馦馰馱馲馵\"],\n[\"8fe9a1\",\"馹馺馽馿駃駉駓駔駙駚駜駞駧駪駫駬駰駴駵駹駽駾騂騃騄騋騌騐騑騖騞騠騢騣騤騧騭騮騳騵騶騸驇驁驄驊驋驌驎驑驔驖驝骪骬骮骯骲骴骵骶骹骻骾骿髁髃髆髈髎髐髒髕髖髗髛髜髠髤髥髧髩髬髲髳髵髹髺髽髿\",4],\n[\"8feaa1\",\"鬄鬅鬈鬉鬋鬌鬍鬎鬐鬒鬖鬙鬛鬜鬠鬦鬫鬭鬳鬴鬵鬷鬹鬺鬽魈魋魌魕魖魗魛魞魡魣魥魦魨魪\",4,\"魳魵魷魸魹魿鮀鮄鮅鮆鮇鮉鮊鮋鮍鮏鮐鮔鮚鮝鮞鮦鮧鮩鮬鮰鮱鮲鮷鮸鮻鮼鮾鮿鯁鯇鯈鯎鯐鯗鯘鯝鯟鯥鯧鯪鯫鯯鯳鯷鯸\"],\n[\"8feba1\",\"鯹鯺鯽鯿鰀鰂鰋鰏鰑鰖鰘鰙鰚鰜鰞鰢鰣鰦\",4,\"鰱鰵鰶鰷鰽鱁鱃鱄鱅鱉鱊鱎鱏鱐鱓鱔鱖鱘鱛鱝鱞鱟鱣鱩鱪鱜鱫鱨鱮鱰鱲鱵鱷鱻鳦鳲鳷鳹鴋鴂鴑鴗鴘鴜鴝鴞鴯鴰鴲鴳鴴鴺鴼鵅鴽鵂鵃鵇鵊鵓鵔鵟鵣鵢鵥鵩鵪鵫鵰鵶鵷鵻\"],\n[\"8feca1\",\"鵼鵾鶃鶄鶆鶊鶍鶎鶒鶓鶕鶖鶗鶘鶡鶪鶬鶮鶱鶵鶹鶼鶿鷃鷇鷉鷊鷔鷕鷖鷗鷚鷞鷟鷠鷥鷧鷩鷫鷮鷰鷳鷴鷾鸊鸂鸇鸎鸐鸑鸒鸕鸖鸙鸜鸝鹺鹻鹼麀麂麃麄麅麇麎麏麖麘麛麞麤麨麬麮麯麰麳麴麵黆黈黋黕黟黤黧黬黭黮黰黱黲黵\"],\n[\"8feda1\",\"黸黿鼂鼃鼉鼏鼐鼑鼒鼔鼖鼗鼙鼚鼛鼟鼢鼦鼪鼫鼯鼱鼲鼴鼷鼹鼺鼼鼽鼿齁齃\",4,\"齓齕齖齗齘齚齝齞齨齩齭\",4,\"齳齵齺齽龏龐龑龒龔龖龗龞龡龢龣龥\"]\n]\n", "[\n[\"0\",\"\\u0000\",127,\"€\"],\n[\"8140\",\"丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪\",5,\"乲乴\",9,\"乿\",6,\"亇亊\"],\n[\"8180\",\"亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂\",6,\"伋伌伒\",4,\"伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾\",4,\"佄佅佇\",5,\"佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢\"],\n[\"8240\",\"侤侫侭侰\",4,\"侶\",8,\"俀俁係俆俇俈俉俋俌俍俒\",4,\"俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿\",11],\n[\"8280\",\"個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯\",10,\"倻倽倿偀偁偂偄偅偆偉偊偋偍偐\",4,\"偖偗偘偙偛偝\",7,\"偦\",5,\"偭\",8,\"偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎\",20,\"傤傦傪傫傭\",4,\"傳\",6,\"傼\"],\n[\"8340\",\"傽\",17,\"僐\",5,\"僗僘僙僛\",10,\"僨僩僪僫僯僰僱僲僴僶\",4,\"僼\",9,\"儈\"],\n[\"8380\",\"儉儊儌\",5,\"儓\",13,\"儢\",28,\"兂兇兊兌兎兏児兒兓兗兘兙兛兝\",4,\"兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦\",4,\"冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒\",5],\n[\"8440\",\"凘凙凚凜凞凟凢凣凥\",5,\"凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄\",5,\"剋剎剏剒剓剕剗剘\"],\n[\"8480\",\"剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳\",9,\"剾劀劃\",4,\"劉\",6,\"劑劒劔\",6,\"劜劤劥劦劧劮劯劰労\",9,\"勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務\",5,\"勠勡勢勣勥\",10,\"勱\",7,\"勻勼勽匁匂匃匄匇匉匊匋匌匎\"],\n[\"8540\",\"匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯\",9,\"匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏\"],\n[\"8580\",\"厐\",4,\"厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯\",6,\"厷厸厹厺厼厽厾叀參\",4,\"収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝\",4,\"呣呥呧呩\",7,\"呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡\"],\n[\"8640\",\"咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠\",4,\"哫哬哯哰哱哴\",5,\"哻哾唀唂唃唄唅唈唊\",4,\"唒唓唕\",5,\"唜唝唞唟唡唥唦\"],\n[\"8680\",\"唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋\",4,\"啑啒啓啔啗\",4,\"啝啞啟啠啢啣啨啩啫啯\",5,\"啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠\",6,\"喨\",8,\"喲喴営喸喺喼喿\",4,\"嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗\",4,\"嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸\",4,\"嗿嘂嘃嘄嘅\"],\n[\"8740\",\"嘆嘇嘊嘋嘍嘐\",7,\"嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀\",11,\"噏\",4,\"噕噖噚噛噝\",4],\n[\"8780\",\"噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽\",7,\"嚇\",6,\"嚐嚑嚒嚔\",14,\"嚤\",10,\"嚰\",6,\"嚸嚹嚺嚻嚽\",12,\"囋\",8,\"囕囖囘囙囜団囥\",5,\"囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國\",6],\n[\"8840\",\"園\",9,\"圝圞圠圡圢圤圥圦圧圫圱圲圴\",4,\"圼圽圿坁坃坄坅坆坈坉坋坒\",4,\"坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀\"],\n[\"8880\",\"垁垇垈垉垊垍\",4,\"垔\",6,\"垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹\",8,\"埄\",6,\"埌埍埐埑埓埖埗埛埜埞埡埢埣埥\",7,\"埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥\",4,\"堫\",4,\"報堲堳場堶\",7],\n[\"8940\",\"堾\",5,\"塅\",6,\"塎塏塐塒塓塕塖塗塙\",4,\"塟\",5,\"塦\",4,\"塭\",16,\"塿墂墄墆墇墈墊墋墌\"],\n[\"8980\",\"墍\",4,\"墔\",4,\"墛墜墝墠\",7,\"墪\",17,\"墽墾墿壀壂壃壄壆\",10,\"壒壓壔壖\",13,\"壥\",5,\"壭壯壱売壴壵壷壸壺\",7,\"夃夅夆夈\",4,\"夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻\"],\n[\"8a40\",\"夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛\",4,\"奡奣奤奦\",12,\"奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦\"],\n[\"8a80\",\"妧妬妭妰妱妳\",5,\"妺妼妽妿\",6,\"姇姈姉姌姍姎姏姕姖姙姛姞\",4,\"姤姦姧姩姪姫姭\",11,\"姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪\",6,\"娳娵娷\",4,\"娽娾娿婁\",4,\"婇婈婋\",9,\"婖婗婘婙婛\",5],\n[\"8b40\",\"婡婣婤婥婦婨婩婫\",8,\"婸婹婻婼婽婾媀\",17,\"媓\",6,\"媜\",13,\"媫媬\"],\n[\"8b80\",\"媭\",4,\"媴媶媷媹\",4,\"媿嫀嫃\",5,\"嫊嫋嫍\",4,\"嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬\",4,\"嫲\",22,\"嬊\",11,\"嬘\",25,\"嬳嬵嬶嬸\",7,\"孁\",6],\n[\"8c40\",\"孈\",7,\"孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏\"],\n[\"8c80\",\"寑寔\",8,\"寠寢寣實寧審\",4,\"寯寱\",6,\"寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧\",6,\"屰屲\",6,\"屻屼屽屾岀岃\",4,\"岉岊岋岎岏岒岓岕岝\",4,\"岤\",4],\n[\"8d40\",\"岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅\",5,\"峌\",5,\"峓\",5,\"峚\",6,\"峢峣峧峩峫峬峮峯峱\",9,\"峼\",4],\n[\"8d80\",\"崁崄崅崈\",5,\"崏\",4,\"崕崗崘崙崚崜崝崟\",4,\"崥崨崪崫崬崯\",4,\"崵\",7,\"崿\",7,\"嵈嵉嵍\",10,\"嵙嵚嵜嵞\",10,\"嵪嵭嵮嵰嵱嵲嵳嵵\",12,\"嶃\",21,\"嶚嶛嶜嶞嶟嶠\"],\n[\"8e40\",\"嶡\",21,\"嶸\",12,\"巆\",6,\"巎\",12,\"巜巟巠巣巤巪巬巭\"],\n[\"8e80\",\"巰巵巶巸\",4,\"巿帀帄帇帉帊帋帍帎帒帓帗帞\",7,\"帨\",4,\"帯帰帲\",4,\"帹帺帾帿幀幁幃幆\",5,\"幍\",6,\"幖\",4,\"幜幝幟幠幣\",14,\"幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨\",4,\"庮\",4,\"庴庺庻庼庽庿\",6],\n[\"8f40\",\"廆廇廈廋\",5,\"廔廕廗廘廙廚廜\",11,\"廩廫\",8,\"廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤\"],\n[\"8f80\",\"弨弫弬弮弰弲\",6,\"弻弽弾弿彁\",14,\"彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢\",5,\"復徫徬徯\",5,\"徶徸徹徺徻徾\",4,\"忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇\"],\n[\"9040\",\"怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰\",4,\"怶\",4,\"怽怾恀恄\",6,\"恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀\"],\n[\"9080\",\"悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽\",7,\"惇惈惉惌\",4,\"惒惓惔惖惗惙惛惞惡\",4,\"惪惱惲惵惷惸惻\",4,\"愂愃愄愅愇愊愋愌愐\",4,\"愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬\",18,\"慀\",6],\n[\"9140\",\"慇慉態慍慏慐慒慓慔慖\",6,\"慞慟慠慡慣慤慥慦慩\",6,\"慱慲慳慴慶慸\",18,\"憌憍憏\",4,\"憕\"],\n[\"9180\",\"憖\",6,\"憞\",8,\"憪憫憭\",9,\"憸\",5,\"憿懀懁懃\",4,\"應懌\",4,\"懓懕\",16,\"懧\",13,\"懶\",8,\"戀\",5,\"戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸\",4,\"扂扄扅扆扊\"],\n[\"9240\",\"扏扐払扖扗扙扚扜\",6,\"扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋\",5,\"抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁\"],\n[\"9280\",\"拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳\",5,\"挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖\",7,\"捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙\",6,\"採掤掦掫掯掱掲掵掶掹掻掽掿揀\"],\n[\"9340\",\"揁揂揃揅揇揈揊揋揌揑揓揔揕揗\",6,\"揟揢揤\",4,\"揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆\",4,\"損搎搑搒搕\",5,\"搝搟搢搣搤\"],\n[\"9380\",\"搥搧搨搩搫搮\",5,\"搵\",4,\"搻搼搾摀摂摃摉摋\",6,\"摓摕摖摗摙\",4,\"摟\",7,\"摨摪摫摬摮\",9,\"摻\",6,\"撃撆撈\",8,\"撓撔撗撘撚撛撜撝撟\",4,\"撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆\",6,\"擏擑擓擔擕擖擙據\"],\n[\"9440\",\"擛擜擝擟擠擡擣擥擧\",24,\"攁\",7,\"攊\",7,\"攓\",4,\"攙\",8],\n[\"9480\",\"攢攣攤攦\",4,\"攬攭攰攱攲攳攷攺攼攽敀\",4,\"敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數\",14,\"斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱\",7,\"斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘\",7,\"旡旣旤旪旫\"],\n[\"9540\",\"旲旳旴旵旸旹旻\",4,\"昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷\",4,\"昽昿晀時晄\",6,\"晍晎晐晑晘\"],\n[\"9580\",\"晙晛晜晝晞晠晢晣晥晧晩\",4,\"晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘\",4,\"暞\",8,\"暩\",4,\"暯\",4,\"暵暶暷暸暺暻暼暽暿\",25,\"曚曞\",7,\"曧曨曪\",5,\"曱曵曶書曺曻曽朁朂會\"],\n[\"9640\",\"朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠\",5,\"朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗\",4,\"杝杢杣杤杦杧杫杬杮東杴杶\"],\n[\"9680\",\"杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹\",7,\"柂柅\",9,\"柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵\",7,\"柾栁栂栃栄栆栍栐栒栔栕栘\",4,\"栞栟栠栢\",6,\"栫\",6,\"栴栵栶栺栻栿桇桋桍桏桒桖\",5],\n[\"9740\",\"桜桝桞桟桪桬\",7,\"桵桸\",8,\"梂梄梇\",7,\"梐梑梒梔梕梖梘\",9,\"梣梤梥梩梪梫梬梮梱梲梴梶梷梸\"],\n[\"9780\",\"梹\",6,\"棁棃\",5,\"棊棌棎棏棐棑棓棔棖棗棙棛\",4,\"棡棢棤\",9,\"棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆\",4,\"椌椏椑椓\",11,\"椡椢椣椥\",7,\"椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃\",16,\"楕楖楘楙楛楜楟\"],\n[\"9840\",\"楡楢楤楥楧楨楩楪楬業楯楰楲\",4,\"楺楻楽楾楿榁榃榅榊榋榌榎\",5,\"榖榗榙榚榝\",9,\"榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽\"],\n[\"9880\",\"榾榿槀槂\",7,\"構槍槏槑槒槓槕\",5,\"槜槝槞槡\",11,\"槮槯槰槱槳\",9,\"槾樀\",9,\"樋\",11,\"標\",5,\"樠樢\",5,\"権樫樬樭樮樰樲樳樴樶\",6,\"樿\",4,\"橅橆橈\",7,\"橑\",6,\"橚\"],\n[\"9940\",\"橜\",4,\"橢橣橤橦\",10,\"橲\",6,\"橺橻橽橾橿檁檂檃檅\",8,\"檏檒\",4,\"檘\",7,\"檡\",5],\n[\"9980\",\"檧檨檪檭\",114,\"欥欦欨\",6],\n[\"9a40\",\"欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍\",11,\"歚\",7,\"歨歩歫\",13,\"歺歽歾歿殀殅殈\"],\n[\"9a80\",\"殌殎殏殐殑殔殕殗殘殙殜\",4,\"殢\",7,\"殫\",7,\"殶殸\",6,\"毀毃毄毆\",4,\"毌毎毐毑毘毚毜\",4,\"毢\",7,\"毬毭毮毰毱毲毴毶毷毸毺毻毼毾\",6,\"氈\",4,\"氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋\",4,\"汑汒汓汖汘\"],\n[\"9b40\",\"汙汚汢汣汥汦汧汫\",4,\"汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘\"],\n[\"9b80\",\"泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟\",5,\"洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽\",4,\"涃涄涆涇涊涋涍涏涐涒涖\",4,\"涜涢涥涬涭涰涱涳涴涶涷涹\",5,\"淁淂淃淈淉淊\"],\n[\"9c40\",\"淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽\",7,\"渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵\"],\n[\"9c80\",\"渶渷渹渻\",7,\"湅\",7,\"湏湐湑湒湕湗湙湚湜湝湞湠\",10,\"湬湭湯\",14,\"満溁溂溄溇溈溊\",4,\"溑\",6,\"溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪\",5],\n[\"9d40\",\"滰滱滲滳滵滶滷滸滺\",7,\"漃漄漅漇漈漊\",4,\"漐漑漒漖\",9,\"漡漢漣漥漦漧漨漬漮漰漲漴漵漷\",6,\"漿潀潁潂\"],\n[\"9d80\",\"潃潄潅潈潉潊潌潎\",9,\"潙潚潛潝潟潠潡潣潤潥潧\",5,\"潯潰潱潳潵潶潷潹潻潽\",6,\"澅澆澇澊澋澏\",12,\"澝澞澟澠澢\",4,\"澨\",10,\"澴澵澷澸澺\",5,\"濁濃\",5,\"濊\",6,\"濓\",10,\"濟濢濣濤濥\"],\n[\"9e40\",\"濦\",7,\"濰\",32,\"瀒\",7,\"瀜\",6,\"瀤\",6],\n[\"9e80\",\"瀫\",9,\"瀶瀷瀸瀺\",17,\"灍灎灐\",13,\"灟\",11,\"灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞\",12,\"炰炲炴炵炶為炾炿烄烅烆烇烉烋\",12,\"烚\"],\n[\"9f40\",\"烜烝烞烠烡烢烣烥烪烮烰\",6,\"烸烺烻烼烾\",10,\"焋\",4,\"焑焒焔焗焛\",10,\"焧\",7,\"焲焳焴\"],\n[\"9f80\",\"焵焷\",13,\"煆煇煈煉煋煍煏\",12,\"煝煟\",4,\"煥煩\",4,\"煯煰煱煴煵煶煷煹煻煼煾\",5,\"熅\",4,\"熋熌熍熎熐熑熒熓熕熖熗熚\",4,\"熡\",6,\"熩熪熫熭\",5,\"熴熶熷熸熺\",8,\"燄\",9,\"燏\",4],\n[\"a040\",\"燖\",9,\"燡燢燣燤燦燨\",5,\"燯\",9,\"燺\",11,\"爇\",19],\n[\"a080\",\"爛爜爞\",9,\"爩爫爭爮爯爲爳爴爺爼爾牀\",6,\"牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅\",4,\"犌犎犐犑犓\",11,\"犠\",11,\"犮犱犲犳犵犺\",6,\"狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛\"],\n[\"a1a1\",\"　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈\",7,\"〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓\"],\n[\"a2a1\",\"ⅰ\",9],\n[\"a2b1\",\"⒈\",19,\"⑴\",19,\"①\",9],\n[\"a2e5\",\"㈠\",9],\n[\"a2f1\",\"Ⅰ\",11],\n[\"a3a1\",\"！＂＃￥％\",88,\"￣\"],\n[\"a4a1\",\"ぁ\",82],\n[\"a5a1\",\"ァ\",85],\n[\"a6a1\",\"Α\",16,\"Σ\",6],\n[\"a6c1\",\"α\",16,\"σ\",6],\n[\"a6e0\",\"︵︶︹︺︿﹀︽︾﹁﹂﹃﹄\"],\n[\"a6ee\",\"︻︼︷︸︱\"],\n[\"a6f4\",\"︳︴\"],\n[\"a7a1\",\"А\",5,\"ЁЖ\",25],\n[\"a7d1\",\"а\",5,\"ёж\",25],\n[\"a840\",\"ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═\",35,\"▁\",6],\n[\"a880\",\"█\",7,\"▓▔▕▼▽◢◣◤◥☉⊕〒〝〞\"],\n[\"a8a1\",\"āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ\"],\n[\"a8bd\",\"ńň\"],\n[\"a8c0\",\"ɡ\"],\n[\"a8c5\",\"ㄅ\",36],\n[\"a940\",\"〡\",8,\"㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤\"],\n[\"a959\",\"℡㈱\"],\n[\"a95c\",\"‐\"],\n[\"a960\",\"ー゛゜ヽヾ〆ゝゞ﹉\",9,\"﹔﹕﹖﹗﹙\",8],\n[\"a980\",\"﹢\",4,\"﹨﹩﹪﹫\"],\n[\"a996\",\"〇\"],\n[\"a9a4\",\"─\",75],\n[\"aa40\",\"狜狝狟狢\",5,\"狪狫狵狶狹狽狾狿猀猂猄\",5,\"猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀\",8],\n[\"aa80\",\"獉獊獋獌獎獏獑獓獔獕獖獘\",7,\"獡\",10,\"獮獰獱\"],\n[\"ab40\",\"獲\",11,\"獿\",4,\"玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣\",5,\"玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃\",4],\n[\"ab80\",\"珋珌珎珒\",6,\"珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳\",4],\n[\"ac40\",\"珸\",10,\"琄琇琈琋琌琍琎琑\",8,\"琜\",5,\"琣琤琧琩琫琭琯琱琲琷\",4,\"琽琾琿瑀瑂\",11],\n[\"ac80\",\"瑎\",6,\"瑖瑘瑝瑠\",12,\"瑮瑯瑱\",4,\"瑸瑹瑺\"],\n[\"ad40\",\"瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑\",10,\"璝璟\",7,\"璪\",15,\"璻\",12],\n[\"ad80\",\"瓈\",9,\"瓓\",8,\"瓝瓟瓡瓥瓧\",6,\"瓰瓱瓲\"],\n[\"ae40\",\"瓳瓵瓸\",6,\"甀甁甂甃甅\",7,\"甎甐甒甔甕甖甗甛甝甞甠\",4,\"甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘\"],\n[\"ae80\",\"畝\",7,\"畧畨畩畫\",6,\"畳畵當畷畺\",4,\"疀疁疂疄疅疇\"],\n[\"af40\",\"疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦\",4,\"疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇\"],\n[\"af80\",\"瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄\"],\n[\"b040\",\"癅\",6,\"癎\",5,\"癕癗\",4,\"癝癟癠癡癢癤\",6,\"癬癭癮癰\",7,\"癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛\"],\n[\"b080\",\"皜\",7,\"皥\",8,\"皯皰皳皵\",9,\"盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥\"],\n[\"b140\",\"盄盇盉盋盌盓盕盙盚盜盝盞盠\",4,\"盦\",7,\"盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎\",10,\"眛眜眝眞眡眣眤眥眧眪眫\"],\n[\"b180\",\"眬眮眰\",4,\"眹眻眽眾眿睂睄睅睆睈\",7,\"睒\",7,\"睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳\"],\n[\"b240\",\"睝睞睟睠睤睧睩睪睭\",11,\"睺睻睼瞁瞂瞃瞆\",5,\"瞏瞐瞓\",11,\"瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶\",4],\n[\"b280\",\"瞼瞾矀\",12,\"矎\",8,\"矘矙矚矝\",4,\"矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖\"],\n[\"b340\",\"矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃\",5,\"砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚\"],\n[\"b380\",\"硛硜硞\",11,\"硯\",7,\"硸硹硺硻硽\",6,\"场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚\"],\n[\"b440\",\"碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨\",7,\"碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚\",9],\n[\"b480\",\"磤磥磦磧磩磪磫磭\",4,\"磳磵磶磸磹磻\",5,\"礂礃礄礆\",6,\"础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮\"],\n[\"b540\",\"礍\",5,\"礔\",9,\"礟\",4,\"礥\",14,\"礵\",4,\"礽礿祂祃祄祅祇祊\",8,\"祔祕祘祙祡祣\"],\n[\"b580\",\"祤祦祩祪祫祬祮祰\",6,\"祹祻\",4,\"禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠\"],\n[\"b640\",\"禓\",6,\"禛\",11,\"禨\",10,\"禴\",4,\"禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙\",5,\"秠秡秢秥秨秪\"],\n[\"b680\",\"秬秮秱\",6,\"秹秺秼秾秿稁稄稅稇稈稉稊稌稏\",4,\"稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二\"],\n[\"b740\",\"稝稟稡稢稤\",14,\"稴稵稶稸稺稾穀\",5,\"穇\",9,\"穒\",4,\"穘\",16],\n[\"b780\",\"穩\",6,\"穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服\"],\n[\"b840\",\"窣窤窧窩窪窫窮\",4,\"窴\",10,\"竀\",10,\"竌\",9,\"竗竘竚竛竜竝竡竢竤竧\",5,\"竮竰竱竲竳\"],\n[\"b880\",\"竴\",4,\"竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹\"],\n[\"b940\",\"笯笰笲笴笵笶笷笹笻笽笿\",5,\"筆筈筊筍筎筓筕筗筙筜筞筟筡筣\",10,\"筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆\",6,\"箎箏\"],\n[\"b980\",\"箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹\",7,\"篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈\"],\n[\"ba40\",\"篅篈築篊篋篍篎篏篐篒篔\",4,\"篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲\",4,\"篸篹篺篻篽篿\",7,\"簈簉簊簍簎簐\",5,\"簗簘簙\"],\n[\"ba80\",\"簚\",4,\"簠\",5,\"簨簩簫\",12,\"簹\",5,\"籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖\"],\n[\"bb40\",\"籃\",9,\"籎\",36,\"籵\",5,\"籾\",9],\n[\"bb80\",\"粈粊\",6,\"粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴\",4,\"粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕\"],\n[\"bc40\",\"粿糀糂糃糄糆糉糋糎\",6,\"糘糚糛糝糞糡\",6,\"糩\",5,\"糰\",7,\"糹糺糼\",13,\"紋\",5],\n[\"bc80\",\"紑\",14,\"紡紣紤紥紦紨紩紪紬紭紮細\",6,\"肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件\"],\n[\"bd40\",\"紷\",54,\"絯\",7],\n[\"bd80\",\"絸\",32,\"健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸\"],\n[\"be40\",\"継\",12,\"綧\",6,\"綯\",42],\n[\"be80\",\"線\",32,\"尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻\"],\n[\"bf40\",\"緻\",62],\n[\"bf80\",\"縺縼\",4,\"繂\",4,\"繈\",21,\"俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀\"],\n[\"c040\",\"繞\",35,\"纃\",23,\"纜纝纞\"],\n[\"c080\",\"纮纴纻纼绖绤绬绹缊缐缞缷缹缻\",6,\"罃罆\",9,\"罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐\"],\n[\"c140\",\"罖罙罛罜罝罞罠罣\",4,\"罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂\",7,\"羋羍羏\",4,\"羕\",4,\"羛羜羠羢羣羥羦羨\",6,\"羱\"],\n[\"c180\",\"羳\",4,\"羺羻羾翀翂翃翄翆翇翈翉翋翍翏\",4,\"翖翗翙\",5,\"翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿\"],\n[\"c240\",\"翤翧翨翪翫翬翭翯翲翴\",6,\"翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫\",5,\"耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗\"],\n[\"c280\",\"聙聛\",13,\"聫\",5,\"聲\",11,\"隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫\"],\n[\"c340\",\"聾肁肂肅肈肊肍\",5,\"肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇\",4,\"胏\",6,\"胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋\"],\n[\"c380\",\"脌脕脗脙脛脜脝脟\",12,\"脭脮脰脳脴脵脷脹\",4,\"脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸\"],\n[\"c440\",\"腀\",5,\"腇腉腍腎腏腒腖腗腘腛\",4,\"腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃\",4,\"膉膋膌膍膎膐膒\",5,\"膙膚膞\",4,\"膤膥\"],\n[\"c480\",\"膧膩膫\",7,\"膴\",5,\"膼膽膾膿臄臅臇臈臉臋臍\",6,\"摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁\"],\n[\"c540\",\"臔\",14,\"臤臥臦臨臩臫臮\",4,\"臵\",5,\"臽臿舃與\",4,\"舎舏舑舓舕\",5,\"舝舠舤舥舦舧舩舮舲舺舼舽舿\"],\n[\"c580\",\"艀艁艂艃艅艆艈艊艌艍艎艐\",7,\"艙艛艜艝艞艠\",7,\"艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗\"],\n[\"c640\",\"艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸\"],\n[\"c680\",\"苺苼\",4,\"茊茋茍茐茒茓茖茘茙茝\",9,\"茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐\"],\n[\"c740\",\"茾茿荁荂荄荅荈荊\",4,\"荓荕\",4,\"荝荢荰\",6,\"荹荺荾\",6,\"莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡\",6,\"莬莭莮\"],\n[\"c780\",\"莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠\"],\n[\"c840\",\"菮華菳\",4,\"菺菻菼菾菿萀萂萅萇萈萉萊萐萒\",5,\"萙萚萛萞\",5,\"萩\",7,\"萲\",5,\"萹萺萻萾\",7,\"葇葈葉\"],\n[\"c880\",\"葊\",6,\"葒\",4,\"葘葝葞葟葠葢葤\",4,\"葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁\"],\n[\"c940\",\"葽\",4,\"蒃蒄蒅蒆蒊蒍蒏\",7,\"蒘蒚蒛蒝蒞蒟蒠蒢\",12,\"蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗\"],\n[\"c980\",\"蓘\",4,\"蓞蓡蓢蓤蓧\",4,\"蓭蓮蓯蓱\",10,\"蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳\"],\n[\"ca40\",\"蔃\",8,\"蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢\",8,\"蔭\",9,\"蔾\",4,\"蕄蕅蕆蕇蕋\",10],\n[\"ca80\",\"蕗蕘蕚蕛蕜蕝蕟\",4,\"蕥蕦蕧蕩\",8,\"蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱\"],\n[\"cb40\",\"薂薃薆薈\",6,\"薐\",10,\"薝\",6,\"薥薦薧薩薫薬薭薱\",5,\"薸薺\",6,\"藂\",6,\"藊\",4,\"藑藒\"],\n[\"cb80\",\"藔藖\",5,\"藝\",6,\"藥藦藧藨藪\",14,\"恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔\"],\n[\"cc40\",\"藹藺藼藽藾蘀\",4,\"蘆\",10,\"蘒蘓蘔蘕蘗\",15,\"蘨蘪\",13,\"蘹蘺蘻蘽蘾蘿虀\"],\n[\"cc80\",\"虁\",11,\"虒虓處\",4,\"虛虜虝號虠虡虣\",7,\"獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃\"],\n[\"cd40\",\"虭虯虰虲\",6,\"蚃\",6,\"蚎\",4,\"蚔蚖\",5,\"蚞\",4,\"蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻\",4,\"蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜\"],\n[\"cd80\",\"蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威\"],\n[\"ce40\",\"蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀\",6,\"蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚\",5,\"蝡蝢蝦\",7,\"蝯蝱蝲蝳蝵\"],\n[\"ce80\",\"蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎\",4,\"螔螕螖螘\",6,\"螠\",4,\"巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺\"],\n[\"cf40\",\"螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁\",4,\"蟇蟈蟉蟌\",4,\"蟔\",6,\"蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯\",9],\n[\"cf80\",\"蟺蟻蟼蟽蟿蠀蠁蠂蠄\",5,\"蠋\",7,\"蠔蠗蠘蠙蠚蠜\",4,\"蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓\"],\n[\"d040\",\"蠤\",13,\"蠳\",5,\"蠺蠻蠽蠾蠿衁衂衃衆\",5,\"衎\",5,\"衕衖衘衚\",6,\"衦衧衪衭衯衱衳衴衵衶衸衹衺\"],\n[\"d080\",\"衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗\",4,\"袝\",4,\"袣袥\",5,\"小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄\"],\n[\"d140\",\"袬袮袯袰袲\",4,\"袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚\",4,\"裠裡裦裧裩\",6,\"裲裵裶裷裺裻製裿褀褁褃\",5],\n[\"d180\",\"褉褋\",4,\"褑褔\",4,\"褜\",4,\"褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶\"],\n[\"d240\",\"褸\",8,\"襂襃襅\",24,\"襠\",5,\"襧\",19,\"襼\"],\n[\"d280\",\"襽襾覀覂覄覅覇\",26,\"摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐\"],\n[\"d340\",\"覢\",30,\"觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴\",6],\n[\"d380\",\"觻\",4,\"訁\",5,\"計\",21,\"印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉\"],\n[\"d440\",\"訞\",31,\"訿\",8,\"詉\",21],\n[\"d480\",\"詟\",25,\"詺\",6,\"浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧\"],\n[\"d540\",\"誁\",7,\"誋\",7,\"誔\",46],\n[\"d580\",\"諃\",32,\"铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政\"],\n[\"d640\",\"諤\",34,\"謈\",27],\n[\"d680\",\"謤謥謧\",30,\"帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑\"],\n[\"d740\",\"譆\",31,\"譧\",4,\"譭\",25],\n[\"d780\",\"讇\",24,\"讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座\"],\n[\"d840\",\"谸\",8,\"豂豃豄豅豈豊豋豍\",7,\"豖豗豘豙豛\",5,\"豣\",6,\"豬\",6,\"豴豵豶豷豻\",6,\"貃貄貆貇\"],\n[\"d880\",\"貈貋貍\",6,\"貕貖貗貙\",20,\"亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝\"],\n[\"d940\",\"貮\",62],\n[\"d980\",\"賭\",32,\"佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼\"],\n[\"da40\",\"贎\",14,\"贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸\",8,\"趂趃趆趇趈趉趌\",4,\"趒趓趕\",9,\"趠趡\"],\n[\"da80\",\"趢趤\",12,\"趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺\"],\n[\"db40\",\"跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾\",6,\"踆踇踈踋踍踎踐踑踒踓踕\",7,\"踠踡踤\",4,\"踫踭踰踲踳踴踶踷踸踻踼踾\"],\n[\"db80\",\"踿蹃蹅蹆蹌\",4,\"蹓\",5,\"蹚\",11,\"蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝\"],\n[\"dc40\",\"蹳蹵蹷\",4,\"蹽蹾躀躂躃躄躆躈\",6,\"躑躒躓躕\",6,\"躝躟\",11,\"躭躮躰躱躳\",6,\"躻\",7],\n[\"dc80\",\"軃\",10,\"軏\",21,\"堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥\"],\n[\"dd40\",\"軥\",62],\n[\"dd80\",\"輤\",32,\"荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺\"],\n[\"de40\",\"轅\",32,\"轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆\"],\n[\"de80\",\"迉\",4,\"迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖\"],\n[\"df40\",\"這逜連逤逥逧\",5,\"逰\",4,\"逷逹逺逽逿遀遃遅遆遈\",4,\"過達違遖遙遚遜\",5,\"遤遦遧適遪遫遬遯\",4,\"遶\",6,\"遾邁\"],\n[\"df80\",\"還邅邆邇邉邊邌\",4,\"邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼\"],\n[\"e040\",\"郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅\",19,\"鄚鄛鄜\"],\n[\"e080\",\"鄝鄟鄠鄡鄤\",10,\"鄰鄲\",6,\"鄺\",8,\"酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼\"],\n[\"e140\",\"酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀\",4,\"醆醈醊醎醏醓\",6,\"醜\",5,\"醤\",5,\"醫醬醰醱醲醳醶醷醸醹醻\"],\n[\"e180\",\"醼\",10,\"釈釋釐釒\",9,\"針\",8,\"帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺\"],\n[\"e240\",\"釦\",62],\n[\"e280\",\"鈥\",32,\"狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧\",5,\"饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂\"],\n[\"e340\",\"鉆\",45,\"鉵\",16],\n[\"e380\",\"銆\",7,\"銏\",24,\"恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾\"],\n[\"e440\",\"銨\",5,\"銯\",24,\"鋉\",31],\n[\"e480\",\"鋩\",32,\"洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑\"],\n[\"e540\",\"錊\",51,\"錿\",10],\n[\"e580\",\"鍊\",31,\"鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣\"],\n[\"e640\",\"鍬\",34,\"鎐\",27],\n[\"e680\",\"鎬\",29,\"鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩\"],\n[\"e740\",\"鏎\",7,\"鏗\",54],\n[\"e780\",\"鐎\",32,\"纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡\",6,\"缪缫缬缭缯\",4,\"缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬\"],\n[\"e840\",\"鐯\",14,\"鐿\",43,\"鑬鑭鑮鑯\"],\n[\"e880\",\"鑰\",20,\"钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹\"],\n[\"e940\",\"锧锳锽镃镈镋镕镚镠镮镴镵長\",7,\"門\",42],\n[\"e980\",\"閫\",32,\"椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋\"],\n[\"ea40\",\"闌\",27,\"闬闿阇阓阘阛阞阠阣\",6,\"阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗\"],\n[\"ea80\",\"陘陙陚陜陝陞陠陣陥陦陫陭\",4,\"陳陸\",12,\"隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰\"],\n[\"eb40\",\"隌階隑隒隓隕隖隚際隝\",9,\"隨\",7,\"隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖\",9,\"雡\",6,\"雫\"],\n[\"eb80\",\"雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗\",4,\"霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻\"],\n[\"ec40\",\"霡\",8,\"霫霬霮霯霱霳\",4,\"霺霻霼霽霿\",18,\"靔靕靗靘靚靜靝靟靣靤靦靧靨靪\",7],\n[\"ec80\",\"靲靵靷\",4,\"靽\",7,\"鞆\",4,\"鞌鞎鞏鞐鞓鞕鞖鞗鞙\",4,\"臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐\"],\n[\"ed40\",\"鞞鞟鞡鞢鞤\",6,\"鞬鞮鞰鞱鞳鞵\",46],\n[\"ed80\",\"韤韥韨韮\",4,\"韴韷\",23,\"怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨\"],\n[\"ee40\",\"頏\",62],\n[\"ee80\",\"顎\",32,\"睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶\",4,\"钼钽钿铄铈\",6,\"铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪\"],\n[\"ef40\",\"顯\",5,\"颋颎颒颕颙颣風\",37,\"飏飐飔飖飗飛飜飝飠\",4],\n[\"ef80\",\"飥飦飩\",30,\"铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒\",4,\"锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤\",8,\"镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔\"],\n[\"f040\",\"餈\",4,\"餎餏餑\",28,\"餯\",26],\n[\"f080\",\"饊\",9,\"饖\",12,\"饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨\",4,\"鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦\",6,\"鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙\"],\n[\"f140\",\"馌馎馚\",10,\"馦馧馩\",47],\n[\"f180\",\"駙\",32,\"瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃\"],\n[\"f240\",\"駺\",62],\n[\"f280\",\"騹\",32,\"颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒\"],\n[\"f340\",\"驚\",17,\"驲骃骉骍骎骔骕骙骦骩\",6,\"骲骳骴骵骹骻骽骾骿髃髄髆\",4,\"髍髎髏髐髒體髕髖髗髙髚髛髜\"],\n[\"f380\",\"髝髞髠髢髣髤髥髧髨髩髪髬髮髰\",8,\"髺髼\",6,\"鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋\"],\n[\"f440\",\"鬇鬉\",5,\"鬐鬑鬒鬔\",10,\"鬠鬡鬢鬤\",10,\"鬰鬱鬳\",7,\"鬽鬾鬿魀魆魊魋魌魎魐魒魓魕\",5],\n[\"f480\",\"魛\",32,\"簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤\"],\n[\"f540\",\"魼\",62],\n[\"f580\",\"鮻\",32,\"酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜\"],\n[\"f640\",\"鯜\",62],\n[\"f680\",\"鰛\",32,\"觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅\",5,\"龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞\",5,\"鲥\",4,\"鲫鲭鲮鲰\",7,\"鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋\"],\n[\"f740\",\"鰼\",62],\n[\"f780\",\"鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾\",4,\"鳈鳉鳑鳒鳚鳛鳠鳡鳌\",4,\"鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄\"],\n[\"f840\",\"鳣\",62],\n[\"f880\",\"鴢\",32],\n[\"f940\",\"鵃\",62],\n[\"f980\",\"鶂\",32],\n[\"fa40\",\"鶣\",62],\n[\"fa80\",\"鷢\",32],\n[\"fb40\",\"鸃\",27,\"鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴\",9,\"麀\"],\n[\"fb80\",\"麁麃麄麅麆麉麊麌\",5,\"麔\",8,\"麞麠\",5,\"麧麨麩麪\"],\n[\"fc40\",\"麫\",8,\"麵麶麷麹麺麼麿\",4,\"黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰\",8,\"黺黽黿\",6],\n[\"fc80\",\"鼆\",4,\"鼌鼏鼑鼒鼔鼕鼖鼘鼚\",5,\"鼡鼣\",8,\"鼭鼮鼰鼱\"],\n[\"fd40\",\"鼲\",4,\"鼸鼺鼼鼿\",4,\"齅\",10,\"齒\",38],\n[\"fd80\",\"齹\",5,\"龁龂龍\",11,\"龜龝龞龡\",4,\"郎凉秊裏隣\"],\n[\"fe40\",\"兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩\"]\n]\n", "[\n[\"a140\",\"\",62],\n[\"a180\",\"\",32],\n[\"a240\",\"\",62],\n[\"a280\",\"\",32],\n[\"a2ab\",\"\",5],\n[\"a2e3\",\"€\"],\n[\"a2ef\",\"\"],\n[\"a2fd\",\"\"],\n[\"a340\",\"\",62],\n[\"a380\",\"\",31,\"　\"],\n[\"a440\",\"\",62],\n[\"a480\",\"\",32],\n[\"a4f4\",\"\",10],\n[\"a540\",\"\",62],\n[\"a580\",\"\",32],\n[\"a5f7\",\"\",7],\n[\"a640\",\"\",62],\n[\"a680\",\"\",32],\n[\"a6b9\",\"\",7],\n[\"a6d9\",\"\",6],\n[\"a6ec\",\"\"],\n[\"a6f3\",\"\"],\n[\"a6f6\",\"\",8],\n[\"a740\",\"\",62],\n[\"a780\",\"\",32],\n[\"a7c2\",\"\",14],\n[\"a7f2\",\"\",12],\n[\"a896\",\"\",10],\n[\"a8bc\",\"ḿ\"],\n[\"a8bf\",\"ǹ\"],\n[\"a8c1\",\"\"],\n[\"a8ea\",\"\",20],\n[\"a958\",\"\"],\n[\"a95b\",\"\"],\n[\"a95d\",\"\"],\n[\"a989\",\"〾⿰\",11],\n[\"a997\",\"\",12],\n[\"a9f0\",\"\",14],\n[\"aaa1\",\"\",93],\n[\"aba1\",\"\",93],\n[\"aca1\",\"\",93],\n[\"ada1\",\"\",93],\n[\"aea1\",\"\",93],\n[\"afa1\",\"\",93],\n[\"d7fa\",\"\",4],\n[\"f8a1\",\"\",93],\n[\"f9a1\",\"\",93],\n[\"faa1\",\"\",93],\n[\"fba1\",\"\",93],\n[\"fca1\",\"\",93],\n[\"fda1\",\"\",93],\n[\"fe50\",\"⺁⺄㑳㑇⺈⺋㖞㘚㘎⺌⺗㥮㤘㧏㧟㩳㧐㭎㱮㳠⺧⺪䁖䅟⺮䌷⺳⺶⺷䎱䎬⺻䏝䓖䙡䙌\"],\n[\"fe80\",\"䜣䜩䝼䞍⻊䥇䥺䥽䦂䦃䦅䦆䦟䦛䦷䦶䲣䲟䲠䲡䱷䲢䴓\",6,\"䶮\",93],\n[\"8135f437\",\"\"]\n]\n", "{\"uChars\":[128,165,169,178,184,216,226,235,238,244,248,251,253,258,276,284,300,325,329,334,364,463,465,467,469,471,473,475,477,506,594,610,712,716,730,930,938,962,970,1026,1104,1106,8209,8215,8218,8222,8231,8241,8244,8246,8252,8365,8452,8454,8458,8471,8482,8556,8570,8596,8602,8713,8720,8722,8726,8731,8737,8740,8742,8748,8751,8760,8766,8777,8781,8787,8802,8808,8816,8854,8858,8870,8896,8979,9322,9372,9548,9588,9616,9622,9634,9652,9662,9672,9676,9680,9702,9735,9738,9793,9795,11906,11909,11913,11917,11928,11944,11947,11951,11956,11960,11964,11979,12284,12292,12312,12319,12330,12351,12436,12447,12535,12543,12586,12842,12850,12964,13200,13215,13218,13253,13263,13267,13270,13384,13428,13727,13839,13851,14617,14703,14801,14816,14964,15183,15471,15585,16471,16736,17208,17325,17330,17374,17623,17997,18018,18212,18218,18301,18318,18760,18811,18814,18820,18823,18844,18848,18872,19576,19620,19738,19887,40870,59244,59336,59367,59413,59417,59423,59431,59437,59443,59452,59460,59478,59493,63789,63866,63894,63976,63986,64016,64018,64021,64025,64034,64037,64042,65074,65093,65107,65112,65127,65132,65375,65510,65536],\"gbChars\":[0,36,38,45,50,81,89,95,96,100,103,104,105,109,126,133,148,172,175,179,208,306,307,308,309,310,311,312,313,341,428,443,544,545,558,741,742,749,750,805,819,820,7922,7924,7925,7927,7934,7943,7944,7945,7950,8062,8148,8149,8152,8164,8174,8236,8240,8262,8264,8374,8380,8381,8384,8388,8390,8392,8393,8394,8396,8401,8406,8416,8419,8424,8437,8439,8445,8482,8485,8496,8521,8603,8936,8946,9046,9050,9063,9066,9076,9092,9100,9108,9111,9113,9131,9162,9164,9218,9219,11329,11331,11334,11336,11346,11361,11363,11366,11370,11372,11375,11389,11682,11686,11687,11692,11694,11714,11716,11723,11725,11730,11736,11982,11989,12102,12336,12348,12350,12384,12393,12395,12397,12510,12553,12851,12962,12973,13738,13823,13919,13933,14080,14298,14585,14698,15583,15847,16318,16434,16438,16481,16729,17102,17122,17315,17320,17402,17418,17859,17909,17911,17915,17916,17936,17939,17961,18664,18703,18814,18962,19043,33469,33470,33471,33484,33485,33490,33497,33501,33505,33513,33520,33536,33550,37845,37921,37948,38029,38038,38064,38065,38066,38069,38075,38076,38078,39108,39109,39113,39114,39115,39116,39265,39394,189000]}", "[\n[\"0\",\"\\u0000\",127],\n[\"8141\",\"갂갃갅갆갋\",4,\"갘갞갟갡갢갣갥\",6,\"갮갲갳갴\"],\n[\"8161\",\"갵갶갷갺갻갽갾갿걁\",9,\"걌걎\",5,\"걕\"],\n[\"8181\",\"걖걗걙걚걛걝\",18,\"걲걳걵걶걹걻\",4,\"겂겇겈겍겎겏겑겒겓겕\",6,\"겞겢\",5,\"겫겭겮겱\",6,\"겺겾겿곀곂곃곅곆곇곉곊곋곍\",7,\"곖곘\",7,\"곢곣곥곦곩곫곭곮곲곴곷\",4,\"곾곿괁괂괃괅괇\",4,\"괎괐괒괓\"],\n[\"8241\",\"괔괕괖괗괙괚괛괝괞괟괡\",7,\"괪괫괮\",5],\n[\"8261\",\"괶괷괹괺괻괽\",6,\"굆굈굊\",5,\"굑굒굓굕굖굗\"],\n[\"8281\",\"굙\",7,\"굢굤\",7,\"굮굯굱굲굷굸굹굺굾궀궃\",4,\"궊궋궍궎궏궑\",10,\"궞\",5,\"궥\",17,\"궸\",7,\"귂귃귅귆귇귉\",6,\"귒귔\",7,\"귝귞귟귡귢귣귥\",18],\n[\"8341\",\"귺귻귽귾긂\",5,\"긊긌긎\",5,\"긕\",7],\n[\"8361\",\"긝\",18,\"긲긳긵긶긹긻긼\"],\n[\"8381\",\"긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗\",4,\"깞깢깣깤깦깧깪깫깭깮깯깱\",6,\"깺깾\",5,\"꺆\",5,\"꺍\",46,\"꺿껁껂껃껅\",6,\"껎껒\",5,\"껚껛껝\",8],\n[\"8441\",\"껦껧껩껪껬껮\",5,\"껵껶껷껹껺껻껽\",8],\n[\"8461\",\"꼆꼉꼊꼋꼌꼎꼏꼑\",18],\n[\"8481\",\"꼤\",7,\"꼮꼯꼱꼳꼵\",6,\"꼾꽀꽄꽅꽆꽇꽊\",5,\"꽑\",10,\"꽞\",5,\"꽦\",18,\"꽺\",5,\"꾁꾂꾃꾅꾆꾇꾉\",6,\"꾒꾓꾔꾖\",5,\"꾝\",26,\"꾺꾻꾽꾾\"],\n[\"8541\",\"꾿꿁\",5,\"꿊꿌꿏\",4,\"꿕\",6,\"꿝\",4],\n[\"8561\",\"꿢\",5,\"꿪\",5,\"꿲꿳꿵꿶꿷꿹\",6,\"뀂뀃\"],\n[\"8581\",\"뀅\",6,\"뀍뀎뀏뀑뀒뀓뀕\",6,\"뀞\",9,\"뀩\",26,\"끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞\",29,\"끾끿낁낂낃낅\",6,\"낎낐낒\",5,\"낛낝낞낣낤\"],\n[\"8641\",\"낥낦낧낪낰낲낶낷낹낺낻낽\",6,\"냆냊\",5,\"냒\"],\n[\"8661\",\"냓냕냖냗냙\",6,\"냡냢냣냤냦\",10],\n[\"8681\",\"냱\",22,\"넊넍넎넏넑넔넕넖넗넚넞\",4,\"넦넧넩넪넫넭\",6,\"넶넺\",5,\"녂녃녅녆녇녉\",6,\"녒녓녖녗녙녚녛녝녞녟녡\",22,\"녺녻녽녾녿놁놃\",4,\"놊놌놎놏놐놑놕놖놗놙놚놛놝\"],\n[\"8741\",\"놞\",9,\"놩\",15],\n[\"8761\",\"놹\",18,\"뇍뇎뇏뇑뇒뇓뇕\"],\n[\"8781\",\"뇖\",5,\"뇞뇠\",7,\"뇪뇫뇭뇮뇯뇱\",7,\"뇺뇼뇾\",5,\"눆눇눉눊눍\",6,\"눖눘눚\",5,\"눡\",18,\"눵\",6,\"눽\",26,\"뉙뉚뉛뉝뉞뉟뉡\",6,\"뉪\",4],\n[\"8841\",\"뉯\",4,\"뉶\",5,\"뉽\",6,\"늆늇늈늊\",4],\n[\"8861\",\"늏늒늓늕늖늗늛\",4,\"늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷\"],\n[\"8881\",\"늸\",15,\"닊닋닍닎닏닑닓\",4,\"닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉\",6,\"댒댖\",5,\"댝\",54,\"덗덙덚덝덠덡덢덣\"],\n[\"8941\",\"덦덨덪덬덭덯덲덳덵덶덷덹\",6,\"뎂뎆\",5,\"뎍\"],\n[\"8961\",\"뎎뎏뎑뎒뎓뎕\",10,\"뎢\",5,\"뎩뎪뎫뎭\"],\n[\"8981\",\"뎮\",21,\"돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩\",18,\"돽\",18,\"됑\",6,\"됙됚됛됝됞됟됡\",6,\"됪됬\",7,\"됵\",15],\n[\"8a41\",\"둅\",10,\"둒둓둕둖둗둙\",6,\"둢둤둦\"],\n[\"8a61\",\"둧\",4,\"둭\",18,\"뒁뒂\"],\n[\"8a81\",\"뒃\",4,\"뒉\",19,\"뒞\",5,\"뒥뒦뒧뒩뒪뒫뒭\",7,\"뒶뒸뒺\",5,\"듁듂듃듅듆듇듉\",6,\"듑듒듓듔듖\",5,\"듞듟듡듢듥듧\",4,\"듮듰듲\",5,\"듹\",26,\"딖딗딙딚딝\"],\n[\"8b41\",\"딞\",5,\"딦딫\",4,\"딲딳딵딶딷딹\",6,\"땂땆\"],\n[\"8b61\",\"땇땈땉땊땎땏땑땒땓땕\",6,\"땞땢\",8],\n[\"8b81\",\"땫\",52,\"떢떣떥떦떧떩떬떭떮떯떲떶\",4,\"떾떿뗁뗂뗃뗅\",6,\"뗎뗒\",5,\"뗙\",18,\"뗭\",18],\n[\"8c41\",\"똀\",15,\"똒똓똕똖똗똙\",4],\n[\"8c61\",\"똞\",6,\"똦\",5,\"똭\",6,\"똵\",5],\n[\"8c81\",\"똻\",12,\"뙉\",26,\"뙥뙦뙧뙩\",50,\"뚞뚟뚡뚢뚣뚥\",5,\"뚭뚮뚯뚰뚲\",16],\n[\"8d41\",\"뛃\",16,\"뛕\",8],\n[\"8d61\",\"뛞\",17,\"뛱뛲뛳뛵뛶뛷뛹뛺\"],\n[\"8d81\",\"뛻\",4,\"뜂뜃뜄뜆\",33,\"뜪뜫뜭뜮뜱\",6,\"뜺뜼\",7,\"띅띆띇띉띊띋띍\",6,\"띖\",9,\"띡띢띣띥띦띧띩\",6,\"띲띴띶\",5,\"띾띿랁랂랃랅\",6,\"랎랓랔랕랚랛랝랞\"],\n[\"8e41\",\"랟랡\",6,\"랪랮\",5,\"랶랷랹\",8],\n[\"8e61\",\"럂\",4,\"럈럊\",19],\n[\"8e81\",\"럞\",13,\"럮럯럱럲럳럵\",6,\"럾렂\",4,\"렊렋렍렎렏렑\",6,\"렚렜렞\",5,\"렦렧렩렪렫렭\",6,\"렶렺\",5,\"롁롂롃롅\",11,\"롒롔\",7,\"롞롟롡롢롣롥\",6,\"롮롰롲\",5,\"롹롺롻롽\",7],\n[\"8f41\",\"뢅\",7,\"뢎\",17],\n[\"8f61\",\"뢠\",7,\"뢩\",6,\"뢱뢲뢳뢵뢶뢷뢹\",4],\n[\"8f81\",\"뢾뢿룂룄룆\",5,\"룍룎룏룑룒룓룕\",7,\"룞룠룢\",5,\"룪룫룭룮룯룱\",6,\"룺룼룾\",5,\"뤅\",18,\"뤙\",6,\"뤡\",26,\"뤾뤿륁륂륃륅\",6,\"륍륎륐륒\",5],\n[\"9041\",\"륚륛륝륞륟륡\",6,\"륪륬륮\",5,\"륶륷륹륺륻륽\"],\n[\"9061\",\"륾\",5,\"릆릈릋릌릏\",15],\n[\"9081\",\"릟\",12,\"릮릯릱릲릳릵\",6,\"릾맀맂\",5,\"맊맋맍맓\",4,\"맚맜맟맠맢맦맧맩맪맫맭\",6,\"맶맻\",4,\"먂\",5,\"먉\",11,\"먖\",33,\"먺먻먽먾먿멁멃멄멅멆\"],\n[\"9141\",\"멇멊멌멏멐멑멒멖멗멙멚멛멝\",6,\"멦멪\",5],\n[\"9161\",\"멲멳멵멶멷멹\",9,\"몆몈몉몊몋몍\",5],\n[\"9181\",\"몓\",20,\"몪몭몮몯몱몳\",4,\"몺몼몾\",5,\"뫅뫆뫇뫉\",14,\"뫚\",33,\"뫽뫾뫿묁묂묃묅\",7,\"묎묐묒\",5,\"묙묚묛묝묞묟묡\",6],\n[\"9241\",\"묨묪묬\",7,\"묷묹묺묿\",4,\"뭆뭈뭊뭋뭌뭎뭑뭒\"],\n[\"9261\",\"뭓뭕뭖뭗뭙\",7,\"뭢뭤\",7,\"뭭\",4],\n[\"9281\",\"뭲\",21,\"뮉뮊뮋뮍뮎뮏뮑\",18,\"뮥뮦뮧뮩뮪뮫뮭\",6,\"뮵뮶뮸\",7,\"믁믂믃믅믆믇믉\",6,\"믑믒믔\",35,\"믺믻믽믾밁\"],\n[\"9341\",\"밃\",4,\"밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵\"],\n[\"9361\",\"밶밷밹\",6,\"뱂뱆뱇뱈뱊뱋뱎뱏뱑\",8],\n[\"9381\",\"뱚뱛뱜뱞\",37,\"벆벇벉벊벍벏\",4,\"벖벘벛\",4,\"벢벣벥벦벩\",6,\"벲벶\",5,\"벾벿볁볂볃볅\",7,\"볎볒볓볔볖볗볙볚볛볝\",22,\"볷볹볺볻볽\"],\n[\"9441\",\"볾\",5,\"봆봈봊\",5,\"봑봒봓봕\",8],\n[\"9461\",\"봞\",5,\"봥\",6,\"봭\",12],\n[\"9481\",\"봺\",5,\"뵁\",6,\"뵊뵋뵍뵎뵏뵑\",6,\"뵚\",9,\"뵥뵦뵧뵩\",22,\"붂붃붅붆붋\",4,\"붒붔붖붗붘붛붝\",6,\"붥\",10,\"붱\",6,\"붹\",24],\n[\"9541\",\"뷒뷓뷖뷗뷙뷚뷛뷝\",11,\"뷪\",5,\"뷱\"],\n[\"9561\",\"뷲뷳뷵뷶뷷뷹\",6,\"븁븂븄븆\",5,\"븎븏븑븒븓\"],\n[\"9581\",\"븕\",6,\"븞븠\",35,\"빆빇빉빊빋빍빏\",4,\"빖빘빜빝빞빟빢빣빥빦빧빩빫\",4,\"빲빶\",4,\"빾빿뺁뺂뺃뺅\",6,\"뺎뺒\",5,\"뺚\",13,\"뺩\",14],\n[\"9641\",\"뺸\",23,\"뻒뻓\"],\n[\"9661\",\"뻕뻖뻙\",6,\"뻡뻢뻦\",5,\"뻭\",8],\n[\"9681\",\"뻶\",10,\"뼂\",5,\"뼊\",13,\"뼚뼞\",33,\"뽂뽃뽅뽆뽇뽉\",6,\"뽒뽓뽔뽖\",44],\n[\"9741\",\"뾃\",16,\"뾕\",8],\n[\"9761\",\"뾞\",17,\"뾱\",7],\n[\"9781\",\"뾹\",11,\"뿆\",5,\"뿎뿏뿑뿒뿓뿕\",6,\"뿝뿞뿠뿢\",89,\"쀽쀾쀿\"],\n[\"9841\",\"쁀\",16,\"쁒\",5,\"쁙쁚쁛\"],\n[\"9861\",\"쁝쁞쁟쁡\",6,\"쁪\",15],\n[\"9881\",\"쁺\",21,\"삒삓삕삖삗삙\",6,\"삢삤삦\",5,\"삮삱삲삷\",4,\"삾샂샃샄샆샇샊샋샍샎샏샑\",6,\"샚샞\",5,\"샦샧샩샪샫샭\",6,\"샶샸샺\",5,\"섁섂섃섅섆섇섉\",6,\"섑섒섓섔섖\",5,\"섡섢섥섨섩섪섫섮\"],\n[\"9941\",\"섲섳섴섵섷섺섻섽섾섿셁\",6,\"셊셎\",5,\"셖셗\"],\n[\"9961\",\"셙셚셛셝\",6,\"셦셪\",5,\"셱셲셳셵셶셷셹셺셻\"],\n[\"9981\",\"셼\",8,\"솆\",5,\"솏솑솒솓솕솗\",4,\"솞솠솢솣솤솦솧솪솫솭솮솯솱\",11,\"솾\",5,\"쇅쇆쇇쇉쇊쇋쇍\",6,\"쇕쇖쇙\",6,\"쇡쇢쇣쇥쇦쇧쇩\",6,\"쇲쇴\",7,\"쇾쇿숁숂숃숅\",6,\"숎숐숒\",5,\"숚숛숝숞숡숢숣\"],\n[\"9a41\",\"숤숥숦숧숪숬숮숰숳숵\",16],\n[\"9a61\",\"쉆쉇쉉\",6,\"쉒쉓쉕쉖쉗쉙\",6,\"쉡쉢쉣쉤쉦\"],\n[\"9a81\",\"쉧\",4,\"쉮쉯쉱쉲쉳쉵\",6,\"쉾슀슂\",5,\"슊\",5,\"슑\",6,\"슙슚슜슞\",5,\"슦슧슩슪슫슮\",5,\"슶슸슺\",33,\"싞싟싡싢싥\",5,\"싮싰싲싳싴싵싷싺싽싾싿쌁\",6,\"쌊쌋쌎쌏\"],\n[\"9b41\",\"쌐쌑쌒쌖쌗쌙쌚쌛쌝\",6,\"쌦쌧쌪\",8],\n[\"9b61\",\"쌳\",17,\"썆\",7],\n[\"9b81\",\"썎\",25,\"썪썫썭썮썯썱썳\",4,\"썺썻썾\",5,\"쎅쎆쎇쎉쎊쎋쎍\",50,\"쏁\",22,\"쏚\"],\n[\"9c41\",\"쏛쏝쏞쏡쏣\",4,\"쏪쏫쏬쏮\",5,\"쏶쏷쏹\",5],\n[\"9c61\",\"쏿\",8,\"쐉\",6,\"쐑\",9],\n[\"9c81\",\"쐛\",8,\"쐥\",6,\"쐭쐮쐯쐱쐲쐳쐵\",6,\"쐾\",9,\"쑉\",26,\"쑦쑧쑩쑪쑫쑭\",6,\"쑶쑷쑸쑺\",5,\"쒁\",18,\"쒕\",6,\"쒝\",12],\n[\"9d41\",\"쒪\",13,\"쒹쒺쒻쒽\",8],\n[\"9d61\",\"쓆\",25],\n[\"9d81\",\"쓠\",8,\"쓪\",5,\"쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂\",9,\"씍씎씏씑씒씓씕\",6,\"씝\",10,\"씪씫씭씮씯씱\",6,\"씺씼씾\",5,\"앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩\",6,\"앲앶\",5,\"앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔\"],\n[\"9e41\",\"얖얙얚얛얝얞얟얡\",7,\"얪\",9,\"얶\"],\n[\"9e61\",\"얷얺얿\",4,\"엋엍엏엒엓엕엖엗엙\",6,\"엢엤엦엧\"],\n[\"9e81\",\"엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑\",6,\"옚옝\",6,\"옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉\",6,\"왒왖\",5,\"왞왟왡\",10,\"왭왮왰왲\",5,\"왺왻왽왾왿욁\",6,\"욊욌욎\",5,\"욖욗욙욚욛욝\",6,\"욦\"],\n[\"9f41\",\"욨욪\",5,\"욲욳욵욶욷욻\",4,\"웂웄웆\",5,\"웎\"],\n[\"9f61\",\"웏웑웒웓웕\",6,\"웞웟웢\",5,\"웪웫웭웮웯웱웲\"],\n[\"9f81\",\"웳\",4,\"웺웻웼웾\",5,\"윆윇윉윊윋윍\",6,\"윖윘윚\",5,\"윢윣윥윦윧윩\",6,\"윲윴윶윸윹윺윻윾윿읁읂읃읅\",4,\"읋읎읐읙읚읛읝읞읟읡\",6,\"읩읪읬\",7,\"읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛\",4,\"잢잧\",4,\"잮잯잱잲잳잵잶잷\"],\n[\"a041\",\"잸잹잺잻잾쟂\",5,\"쟊쟋쟍쟏쟑\",6,\"쟙쟚쟛쟜\"],\n[\"a061\",\"쟞\",5,\"쟥쟦쟧쟩쟪쟫쟭\",13],\n[\"a081\",\"쟻\",4,\"젂젃젅젆젇젉젋\",4,\"젒젔젗\",4,\"젞젟젡젢젣젥\",6,\"젮젰젲\",5,\"젹젺젻젽젾젿졁\",6,\"졊졋졎\",5,\"졕\",26,\"졲졳졵졶졷졹졻\",4,\"좂좄좈좉좊좎\",5,\"좕\",7,\"좞좠좢좣좤\"],\n[\"a141\",\"좥좦좧좩\",18,\"좾좿죀죁\"],\n[\"a161\",\"죂죃죅죆죇죉죊죋죍\",6,\"죖죘죚\",5,\"죢죣죥\"],\n[\"a181\",\"죦\",14,\"죶\",5,\"죾죿줁줂줃줇\",4,\"줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈\",9,\"±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢\"],\n[\"a241\",\"줐줒\",5,\"줙\",18],\n[\"a261\",\"줭\",6,\"줵\",18],\n[\"a281\",\"쥈\",7,\"쥒쥓쥕쥖쥗쥙\",6,\"쥢쥤\",7,\"쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®\"],\n[\"a341\",\"쥱쥲쥳쥵\",6,\"쥽\",10,\"즊즋즍즎즏\"],\n[\"a361\",\"즑\",6,\"즚즜즞\",16],\n[\"a381\",\"즯\",16,\"짂짃짅짆짉짋\",4,\"짒짔짗짘짛！\",58,\"￦］\",32,\"￣\"],\n[\"a441\",\"짞짟짡짣짥짦짨짩짪짫짮짲\",5,\"짺짻짽짾짿쨁쨂쨃쨄\"],\n[\"a461\",\"쨅쨆쨇쨊쨎\",5,\"쨕쨖쨗쨙\",12],\n[\"a481\",\"쨦쨧쨨쨪\",28,\"ㄱ\",93],\n[\"a541\",\"쩇\",4,\"쩎쩏쩑쩒쩓쩕\",6,\"쩞쩢\",5,\"쩩쩪\"],\n[\"a561\",\"쩫\",17,\"쩾\",5,\"쪅쪆\"],\n[\"a581\",\"쪇\",16,\"쪙\",14,\"ⅰ\",9],\n[\"a5b0\",\"Ⅰ\",9],\n[\"a5c1\",\"Α\",16,\"Σ\",6],\n[\"a5e1\",\"α\",16,\"σ\",6],\n[\"a641\",\"쪨\",19,\"쪾쪿쫁쫂쫃쫅\"],\n[\"a661\",\"쫆\",5,\"쫎쫐쫒쫔쫕쫖쫗쫚\",5,\"쫡\",6],\n[\"a681\",\"쫨쫩쫪쫫쫭\",6,\"쫵\",18,\"쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃\",7],\n[\"a741\",\"쬋\",4,\"쬑쬒쬓쬕쬖쬗쬙\",6,\"쬢\",7],\n[\"a761\",\"쬪\",22,\"쭂쭃쭄\"],\n[\"a781\",\"쭅쭆쭇쭊쭋쭍쭎쭏쭑\",6,\"쭚쭛쭜쭞\",5,\"쭥\",7,\"㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙\",9,\"㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰\",9,\"㎀\",4,\"㎺\",5,\"㎐\",4,\"Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆\"],\n[\"a841\",\"쭭\",10,\"쭺\",14],\n[\"a861\",\"쮉\",18,\"쮝\",6],\n[\"a881\",\"쮤\",19,\"쮹\",11,\"ÆÐªĦ\"],\n[\"a8a6\",\"Ĳ\"],\n[\"a8a8\",\"ĿŁØŒºÞŦŊ\"],\n[\"a8b1\",\"㉠\",27,\"ⓐ\",25,\"①\",14,\"½⅓⅔¼¾⅛⅜⅝⅞\"],\n[\"a941\",\"쯅\",14,\"쯕\",10],\n[\"a961\",\"쯠쯡쯢쯣쯥쯦쯨쯪\",18],\n[\"a981\",\"쯽\",14,\"찎찏찑찒찓찕\",6,\"찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀\",27,\"⒜\",25,\"⑴\",14,\"¹²³⁴ⁿ₁₂₃₄\"],\n[\"aa41\",\"찥찦찪찫찭찯찱\",6,\"찺찿\",4,\"챆챇챉챊챋챍챎\"],\n[\"aa61\",\"챏\",4,\"챖챚\",5,\"챡챢챣챥챧챩\",6,\"챱챲\"],\n[\"aa81\",\"챳챴챶\",29,\"ぁ\",82],\n[\"ab41\",\"첔첕첖첗첚첛첝첞첟첡\",6,\"첪첮\",5,\"첶첷첹\"],\n[\"ab61\",\"첺첻첽\",6,\"쳆쳈쳊\",5,\"쳑쳒쳓쳕\",5],\n[\"ab81\",\"쳛\",8,\"쳥\",6,\"쳭쳮쳯쳱\",12,\"ァ\",85],\n[\"ac41\",\"쳾쳿촀촂\",5,\"촊촋촍촎촏촑\",6,\"촚촜촞촟촠\"],\n[\"ac61\",\"촡촢촣촥촦촧촩촪촫촭\",11,\"촺\",4],\n[\"ac81\",\"촿\",28,\"쵝쵞쵟А\",5,\"ЁЖ\",25],\n[\"acd1\",\"а\",5,\"ёж\",25],\n[\"ad41\",\"쵡쵢쵣쵥\",6,\"쵮쵰쵲\",5,\"쵹\",7],\n[\"ad61\",\"춁\",6,\"춉\",10,\"춖춗춙춚춛춝춞춟\"],\n[\"ad81\",\"춠춡춢춣춦춨춪\",5,\"춱\",18,\"췅\"],\n[\"ae41\",\"췆\",5,\"췍췎췏췑\",16],\n[\"ae61\",\"췢\",5,\"췩췪췫췭췮췯췱\",6,\"췺췼췾\",4],\n[\"ae81\",\"츃츅츆츇츉츊츋츍\",6,\"츕츖츗츘츚\",5,\"츢츣츥츦츧츩츪츫\"],\n[\"af41\",\"츬츭츮츯츲츴츶\",19],\n[\"af61\",\"칊\",13,\"칚칛칝칞칢\",5,\"칪칬\"],\n[\"af81\",\"칮\",5,\"칶칷칹칺칻칽\",6,\"캆캈캊\",5,\"캒캓캕캖캗캙\"],\n[\"b041\",\"캚\",5,\"캢캦\",5,\"캮\",12],\n[\"b061\",\"캻\",5,\"컂\",19],\n[\"b081\",\"컖\",13,\"컦컧컩컪컭\",6,\"컶컺\",5,\"가각간갇갈갉갊감\",7,\"같\",4,\"갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆\"],\n[\"b141\",\"켂켃켅켆켇켉\",6,\"켒켔켖\",5,\"켝켞켟켡켢켣\"],\n[\"b161\",\"켥\",6,\"켮켲\",5,\"켹\",11],\n[\"b181\",\"콅\",14,\"콖콗콙콚콛콝\",6,\"콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸\"],\n[\"b241\",\"콭콮콯콲콳콵콶콷콹\",6,\"쾁쾂쾃쾄쾆\",5,\"쾍\"],\n[\"b261\",\"쾎\",18,\"쾢\",5,\"쾩\"],\n[\"b281\",\"쾪\",5,\"쾱\",18,\"쿅\",6,\"깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙\"],\n[\"b341\",\"쿌\",19,\"쿢쿣쿥쿦쿧쿩\"],\n[\"b361\",\"쿪\",5,\"쿲쿴쿶\",5,\"쿽쿾쿿퀁퀂퀃퀅\",5],\n[\"b381\",\"퀋\",5,\"퀒\",5,\"퀙\",19,\"끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫\",4,\"낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝\"],\n[\"b441\",\"퀮\",5,\"퀶퀷퀹퀺퀻퀽\",6,\"큆큈큊\",5],\n[\"b461\",\"큑큒큓큕큖큗큙\",6,\"큡\",10,\"큮큯\"],\n[\"b481\",\"큱큲큳큵\",6,\"큾큿킀킂\",18,\"뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫\",4,\"닳담답닷\",4,\"닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥\"],\n[\"b541\",\"킕\",14,\"킦킧킩킪킫킭\",5],\n[\"b561\",\"킳킶킸킺\",5,\"탂탃탅탆탇탊\",5,\"탒탖\",4],\n[\"b581\",\"탛탞탟탡탢탣탥\",6,\"탮탲\",5,\"탹\",11,\"덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸\"],\n[\"b641\",\"턅\",7,\"턎\",17],\n[\"b661\",\"턠\",15,\"턲턳턵턶턷턹턻턼턽턾\"],\n[\"b681\",\"턿텂텆\",5,\"텎텏텑텒텓텕\",6,\"텞텠텢\",5,\"텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗\"],\n[\"b741\",\"텮\",13,\"텽\",6,\"톅톆톇톉톊\"],\n[\"b761\",\"톋\",20,\"톢톣톥톦톧\"],\n[\"b781\",\"톩\",6,\"톲톴톶톷톸톹톻톽톾톿퇁\",14,\"래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩\"],\n[\"b841\",\"퇐\",7,\"퇙\",17],\n[\"b861\",\"퇫\",8,\"퇵퇶퇷퇹\",13],\n[\"b881\",\"툈툊\",5,\"툑\",24,\"륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많\",4,\"맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼\"],\n[\"b941\",\"툪툫툮툯툱툲툳툵\",6,\"툾퉀퉂\",5,\"퉉퉊퉋퉌\"],\n[\"b961\",\"퉍\",14,\"퉝\",6,\"퉥퉦퉧퉨\"],\n[\"b981\",\"퉩\",22,\"튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바\",4,\"받\",4,\"밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗\"],\n[\"ba41\",\"튍튎튏튒튓튔튖\",5,\"튝튞튟튡튢튣튥\",6,\"튭\"],\n[\"ba61\",\"튮튯튰튲\",5,\"튺튻튽튾틁틃\",4,\"틊틌\",5],\n[\"ba81\",\"틒틓틕틖틗틙틚틛틝\",6,\"틦\",9,\"틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤\"],\n[\"bb41\",\"틻\",4,\"팂팄팆\",5,\"팏팑팒팓팕팗\",4,\"팞팢팣\"],\n[\"bb61\",\"팤팦팧팪팫팭팮팯팱\",6,\"팺팾\",5,\"퍆퍇퍈퍉\"],\n[\"bb81\",\"퍊\",31,\"빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤\"],\n[\"bc41\",\"퍪\",17,\"퍾퍿펁펂펃펅펆펇\"],\n[\"bc61\",\"펈펉펊펋펎펒\",5,\"펚펛펝펞펟펡\",6,\"펪펬펮\"],\n[\"bc81\",\"펯\",4,\"펵펶펷펹펺펻펽\",6,\"폆폇폊\",5,\"폑\",5,\"샥샨샬샴샵샷샹섀섄섈섐섕서\",4,\"섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭\"],\n[\"bd41\",\"폗폙\",7,\"폢폤\",7,\"폮폯폱폲폳폵폶폷\"],\n[\"bd61\",\"폸폹폺폻폾퐀퐂\",5,\"퐉\",13],\n[\"bd81\",\"퐗\",5,\"퐞\",25,\"숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰\"],\n[\"be41\",\"퐸\",7,\"푁푂푃푅\",14],\n[\"be61\",\"푔\",7,\"푝푞푟푡푢푣푥\",7,\"푮푰푱푲\"],\n[\"be81\",\"푳\",4,\"푺푻푽푾풁풃\",4,\"풊풌풎\",5,\"풕\",8,\"쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄\",6,\"엌엎\"],\n[\"bf41\",\"풞\",10,\"풪\",14],\n[\"bf61\",\"풹\",18,\"퓍퓎퓏퓑퓒퓓퓕\"],\n[\"bf81\",\"퓖\",5,\"퓝퓞퓠\",7,\"퓩퓪퓫퓭퓮퓯퓱\",6,\"퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염\",5,\"옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨\"],\n[\"c041\",\"퓾\",5,\"픅픆픇픉픊픋픍\",6,\"픖픘\",5],\n[\"c061\",\"픞\",25],\n[\"c081\",\"픸픹픺픻픾픿핁핂핃핅\",6,\"핎핐핒\",5,\"핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응\",7,\"읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊\"],\n[\"c141\",\"핤핦핧핪핬핮\",5,\"핶핷핹핺핻핽\",6,\"햆햊햋\"],\n[\"c161\",\"햌햍햎햏햑\",19,\"햦햧\"],\n[\"c181\",\"햨\",31,\"점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓\"],\n[\"c241\",\"헊헋헍헎헏헑헓\",4,\"헚헜헞\",5,\"헦헧헩헪헫헭헮\"],\n[\"c261\",\"헯\",4,\"헶헸헺\",5,\"혂혃혅혆혇혉\",6,\"혒\"],\n[\"c281\",\"혖\",5,\"혝혞혟혡혢혣혥\",7,\"혮\",9,\"혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻\"],\n[\"c341\",\"혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝\",4],\n[\"c361\",\"홢\",4,\"홨홪\",5,\"홲홳홵\",11],\n[\"c381\",\"횁횂횄횆\",5,\"횎횏횑횒횓횕\",7,\"횞횠횢\",5,\"횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층\"],\n[\"c441\",\"횫횭횮횯횱\",7,\"횺횼\",7,\"훆훇훉훊훋\"],\n[\"c461\",\"훍훎훏훐훒훓훕훖훘훚\",5,\"훡훢훣훥훦훧훩\",4],\n[\"c481\",\"훮훯훱훲훳훴훶\",5,\"훾훿휁휂휃휅\",11,\"휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼\"],\n[\"c541\",\"휕휖휗휚휛휝휞휟휡\",6,\"휪휬휮\",5,\"휶휷휹\"],\n[\"c561\",\"휺휻휽\",6,\"흅흆흈흊\",5,\"흒흓흕흚\",4],\n[\"c581\",\"흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵\",6,\"흾흿힀힂\",5,\"힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜\"],\n[\"c641\",\"힍힎힏힑\",6,\"힚힜힞\",5],\n[\"c6a1\",\"퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁\"],\n[\"c7a1\",\"퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠\"],\n[\"c8a1\",\"혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝\"],\n[\"caa1\",\"伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕\"],\n[\"cba1\",\"匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢\"],\n[\"cca1\",\"瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械\"],\n[\"cda1\",\"棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜\"],\n[\"cea1\",\"科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾\"],\n[\"cfa1\",\"區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴\"],\n[\"d0a1\",\"鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣\"],\n[\"d1a1\",\"朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩\",5,\"那樂\",4,\"諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉\"],\n[\"d2a1\",\"納臘蠟衲囊娘廊\",4,\"乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧\",5,\"駑魯\",10,\"濃籠聾膿農惱牢磊腦賂雷尿壘\",7,\"嫩訥杻紐勒\",5,\"能菱陵尼泥匿溺多茶\"],\n[\"d3a1\",\"丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃\"],\n[\"d4a1\",\"棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅\"],\n[\"d5a1\",\"蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣\"],\n[\"d6a1\",\"煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼\"],\n[\"d7a1\",\"遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬\"],\n[\"d8a1\",\"立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅\"],\n[\"d9a1\",\"蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文\"],\n[\"daa1\",\"汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑\"],\n[\"dba1\",\"發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖\"],\n[\"dca1\",\"碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦\"],\n[\"dda1\",\"孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥\"],\n[\"dea1\",\"脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索\"],\n[\"dfa1\",\"傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署\"],\n[\"e0a1\",\"胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬\"],\n[\"e1a1\",\"聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁\"],\n[\"e2a1\",\"戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧\"],\n[\"e3a1\",\"嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁\"],\n[\"e4a1\",\"沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額\"],\n[\"e5a1\",\"櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬\"],\n[\"e6a1\",\"旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒\"],\n[\"e7a1\",\"簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳\"],\n[\"e8a1\",\"烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療\"],\n[\"e9a1\",\"窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓\"],\n[\"eaa1\",\"運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜\"],\n[\"eba1\",\"濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼\"],\n[\"eca1\",\"議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄\"],\n[\"eda1\",\"立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長\"],\n[\"eea1\",\"障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱\"],\n[\"efa1\",\"煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖\"],\n[\"f0a1\",\"靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫\"],\n[\"f1a1\",\"踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只\"],\n[\"f2a1\",\"咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯\"],\n[\"f3a1\",\"鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策\"],\n[\"f4a1\",\"責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢\"],\n[\"f5a1\",\"椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃\"],\n[\"f6a1\",\"贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託\"],\n[\"f7a1\",\"鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑\"],\n[\"f8a1\",\"阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃\"],\n[\"f9a1\",\"品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航\"],\n[\"faa1\",\"行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型\"],\n[\"fba1\",\"形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵\"],\n[\"fca1\",\"禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆\"],\n[\"fda1\",\"爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰\"]\n]\n", "[\n[\"0\",\"\\u0000\",127],\n[\"a140\",\"　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚\"],\n[\"a1a1\",\"﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢\",4,\"～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／\"],\n[\"a240\",\"＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁\",7,\"▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭\"],\n[\"a2a1\",\"╮╰╯═╞╪╡◢◣◥◤╱╲╳０\",9,\"Ⅰ\",9,\"〡\",8,\"十卄卅Ａ\",25,\"ａ\",21],\n[\"a340\",\"ｗｘｙｚΑ\",16,\"Σ\",6,\"α\",16,\"σ\",6,\"ㄅ\",10],\n[\"a3a1\",\"ㄐ\",25,\"˙ˉˊˇˋ\"],\n[\"a3e1\",\"€\"],\n[\"a440\",\"一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才\"],\n[\"a4a1\",\"丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙\"],\n[\"a540\",\"世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外\"],\n[\"a5a1\",\"央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全\"],\n[\"a640\",\"共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年\"],\n[\"a6a1\",\"式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣\"],\n[\"a740\",\"作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍\"],\n[\"a7a1\",\"均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠\"],\n[\"a840\",\"杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒\"],\n[\"a8a1\",\"芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵\"],\n[\"a940\",\"咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居\"],\n[\"a9a1\",\"屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊\"],\n[\"aa40\",\"昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠\"],\n[\"aaa1\",\"炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附\"],\n[\"ab40\",\"陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品\"],\n[\"aba1\",\"哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷\"],\n[\"ac40\",\"拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗\"],\n[\"aca1\",\"活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄\"],\n[\"ad40\",\"耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥\"],\n[\"ada1\",\"迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪\"],\n[\"ae40\",\"哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙\"],\n[\"aea1\",\"恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓\"],\n[\"af40\",\"浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷\"],\n[\"afa1\",\"砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃\"],\n[\"b040\",\"虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡\"],\n[\"b0a1\",\"陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀\"],\n[\"b140\",\"娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽\"],\n[\"b1a1\",\"情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺\"],\n[\"b240\",\"毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶\"],\n[\"b2a1\",\"瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼\"],\n[\"b340\",\"莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途\"],\n[\"b3a1\",\"部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠\"],\n[\"b440\",\"婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍\"],\n[\"b4a1\",\"插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋\"],\n[\"b540\",\"溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘\"],\n[\"b5a1\",\"窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁\"],\n[\"b640\",\"詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑\"],\n[\"b6a1\",\"間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼\"],\n[\"b740\",\"媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業\"],\n[\"b7a1\",\"楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督\"],\n[\"b840\",\"睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫\"],\n[\"b8a1\",\"腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊\"],\n[\"b940\",\"辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴\"],\n[\"b9a1\",\"飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇\"],\n[\"ba40\",\"愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢\"],\n[\"baa1\",\"滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬\"],\n[\"bb40\",\"罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤\"],\n[\"bba1\",\"說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜\"],\n[\"bc40\",\"劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂\"],\n[\"bca1\",\"慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃\"],\n[\"bd40\",\"瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯\"],\n[\"bda1\",\"翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞\"],\n[\"be40\",\"輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉\"],\n[\"bea1\",\"鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡\"],\n[\"bf40\",\"濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊\"],\n[\"bfa1\",\"縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚\"],\n[\"c040\",\"錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇\"],\n[\"c0a1\",\"嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬\"],\n[\"c140\",\"瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪\"],\n[\"c1a1\",\"薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁\"],\n[\"c240\",\"駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘\"],\n[\"c2a1\",\"癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦\"],\n[\"c340\",\"鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸\"],\n[\"c3a1\",\"獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類\"],\n[\"c440\",\"願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼\"],\n[\"c4a1\",\"纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴\"],\n[\"c540\",\"護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬\"],\n[\"c5a1\",\"禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒\"],\n[\"c640\",\"讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲\"],\n[\"c940\",\"乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕\"],\n[\"c9a1\",\"氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋\"],\n[\"ca40\",\"汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘\"],\n[\"caa1\",\"吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇\"],\n[\"cb40\",\"杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓\"],\n[\"cba1\",\"芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢\"],\n[\"cc40\",\"坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋\"],\n[\"cca1\",\"怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲\"],\n[\"cd40\",\"泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺\"],\n[\"cda1\",\"矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏\"],\n[\"ce40\",\"哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛\"],\n[\"cea1\",\"峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺\"],\n[\"cf40\",\"柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂\"],\n[\"cfa1\",\"洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀\"],\n[\"d040\",\"穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪\"],\n[\"d0a1\",\"苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱\"],\n[\"d140\",\"唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧\"],\n[\"d1a1\",\"恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤\"],\n[\"d240\",\"毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸\"],\n[\"d2a1\",\"牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐\"],\n[\"d340\",\"笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢\"],\n[\"d3a1\",\"荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐\"],\n[\"d440\",\"酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅\"],\n[\"d4a1\",\"唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏\"],\n[\"d540\",\"崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟\"],\n[\"d5a1\",\"捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉\"],\n[\"d640\",\"淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏\"],\n[\"d6a1\",\"痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟\"],\n[\"d740\",\"耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷\"],\n[\"d7a1\",\"蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪\"],\n[\"d840\",\"釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷\"],\n[\"d8a1\",\"堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔\"],\n[\"d940\",\"惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒\"],\n[\"d9a1\",\"晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞\"],\n[\"da40\",\"湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖\"],\n[\"daa1\",\"琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥\"],\n[\"db40\",\"罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳\"],\n[\"dba1\",\"菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺\"],\n[\"dc40\",\"軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈\"],\n[\"dca1\",\"隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆\"],\n[\"dd40\",\"媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤\"],\n[\"dda1\",\"搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼\"],\n[\"de40\",\"毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓\"],\n[\"dea1\",\"煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓\"],\n[\"df40\",\"稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯\"],\n[\"dfa1\",\"腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤\"],\n[\"e040\",\"觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿\"],\n[\"e0a1\",\"遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠\"],\n[\"e140\",\"凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠\"],\n[\"e1a1\",\"寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉\"],\n[\"e240\",\"榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊\"],\n[\"e2a1\",\"漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓\"],\n[\"e340\",\"禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞\"],\n[\"e3a1\",\"耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻\"],\n[\"e440\",\"裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍\"],\n[\"e4a1\",\"銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘\"],\n[\"e540\",\"噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉\"],\n[\"e5a1\",\"憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒\"],\n[\"e640\",\"澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙\"],\n[\"e6a1\",\"獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟\"],\n[\"e740\",\"膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢\"],\n[\"e7a1\",\"蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧\"],\n[\"e840\",\"踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓\"],\n[\"e8a1\",\"銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮\"],\n[\"e940\",\"噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺\"],\n[\"e9a1\",\"憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸\"],\n[\"ea40\",\"澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙\"],\n[\"eaa1\",\"瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘\"],\n[\"eb40\",\"蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠\"],\n[\"eba1\",\"諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌\"],\n[\"ec40\",\"錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕\"],\n[\"eca1\",\"魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎\"],\n[\"ed40\",\"檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶\"],\n[\"eda1\",\"瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞\"],\n[\"ee40\",\"蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞\"],\n[\"eea1\",\"謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜\"],\n[\"ef40\",\"鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰\"],\n[\"efa1\",\"鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶\"],\n[\"f040\",\"璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒\"],\n[\"f0a1\",\"臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧\"],\n[\"f140\",\"蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪\"],\n[\"f1a1\",\"鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰\"],\n[\"f240\",\"徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛\"],\n[\"f2a1\",\"礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕\"],\n[\"f340\",\"譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦\"],\n[\"f3a1\",\"鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲\"],\n[\"f440\",\"嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩\"],\n[\"f4a1\",\"禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿\"],\n[\"f540\",\"鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛\"],\n[\"f5a1\",\"鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥\"],\n[\"f640\",\"蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺\"],\n[\"f6a1\",\"騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚\"],\n[\"f740\",\"糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊\"],\n[\"f7a1\",\"驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾\"],\n[\"f840\",\"讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏\"],\n[\"f8a1\",\"齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚\"],\n[\"f940\",\"纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊\"],\n[\"f9a1\",\"龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓\"]\n]\n", "[\n[\"8740\",\"䏰䰲䘃䖦䕸𧉧䵷䖳𧲱䳢𧳅㮕䜶䝄䱇䱀𤊿𣘗𧍒𦺋𧃒䱗𪍑䝏䗚䲅𧱬䴇䪤䚡𦬣爥𥩔𡩣𣸆𣽡晍囻\"],\n[\"8767\",\"綕夝𨮹㷴霴𧯯寛𡵞媤㘥𩺰嫑宷峼杮薓𩥅瑡璝㡵𡵓𣚞𦀡㻬\"],\n[\"87a1\",\"𥣞㫵竼龗𤅡𨤍𣇪𠪊𣉞䌊蒄龖鐯䤰蘓墖靊鈘秐稲晠権袝瑌篅枂稬剏遆㓦珄𥶹瓆鿇垳䤯呌䄱𣚎堘穲𧭥讏䚮𦺈䆁𥶙箮𢒼鿈𢓁𢓉𢓌鿉蔄𣖻䂴鿊䓡𪷿拁灮鿋\"],\n[\"8840\",\"㇀\",4,\"𠄌㇅𠃑𠃍㇆㇇𠃋𡿨㇈𠃊㇉㇊㇋㇌𠄎㇍㇎ĀÁǍÀĒÉĚÈŌÓǑÒ࿿Ê̄Ế࿿Ê̌ỀÊāáǎàɑēéěèīíǐìōóǒòūúǔùǖǘǚ\"],\n[\"88a1\",\"ǜü࿿ê̄ế࿿ê̌ềêɡ⏚⏛\"],\n[\"8940\",\"𪎩𡅅\"],\n[\"8943\",\"攊\"],\n[\"8946\",\"丽滝鵎釟\"],\n[\"894c\",\"𧜵撑会伨侨兖兴农凤务动医华发变团声处备夲头学实実岚庆总斉柾栄桥济炼电纤纬纺织经统缆缷艺苏药视设询车轧轮\"],\n[\"89a1\",\"琑糼緍楆竉刧\"],\n[\"89ab\",\"醌碸酞肼\"],\n[\"89b0\",\"贋胶𠧧\"],\n[\"89b5\",\"肟黇䳍鷉鸌䰾𩷶𧀎鸊𪄳㗁\"],\n[\"89c1\",\"溚舾甙\"],\n[\"89c5\",\"䤑马骏龙禇𨑬𡷊𠗐𢫦两亁亀亇亿仫伷㑌侽㹈倃傈㑽㒓㒥円夅凛凼刅争剹劐匧㗇厩㕑厰㕓参吣㕭㕲㚁咓咣咴咹哐哯唘唣唨㖘唿㖥㖿嗗㗅\"],\n[\"8a40\",\"𧶄唥\"],\n[\"8a43\",\"𠱂𠴕𥄫喐𢳆㧬𠍁蹆𤶸𩓥䁓𨂾睺𢰸㨴䟕𨅝𦧲𤷪擝𠵼𠾴𠳕𡃴撍蹾𠺖𠰋𠽤𢲩𨉖𤓓\"],\n[\"8a64\",\"𠵆𩩍𨃩䟴𤺧𢳂骲㩧𩗴㿭㔆𥋇𩟔𧣈𢵄鵮頕\"],\n[\"8a76\",\"䏙𦂥撴哣𢵌𢯊𡁷㧻𡁯\"],\n[\"8aa1\",\"𦛚𦜖𧦠擪𥁒𠱃蹨𢆡𨭌𠜱\"],\n[\"8aac\",\"䠋𠆩㿺塳𢶍\"],\n[\"8ab2\",\"𤗈𠓼𦂗𠽌𠶖啹䂻䎺\"],\n[\"8abb\",\"䪴𢩦𡂝膪飵𠶜捹㧾𢝵跀嚡摼㹃\"],\n[\"8ac9\",\"𪘁𠸉𢫏𢳉\"],\n[\"8ace\",\"𡃈𣧂㦒㨆𨊛㕸𥹉𢃇噒𠼱𢲲𩜠㒼氽𤸻\"],\n[\"8adf\",\"𧕴𢺋𢈈𪙛𨳍𠹺𠰴𦠜羓𡃏𢠃𢤹㗻𥇣𠺌𠾍𠺪㾓𠼰𠵇𡅏𠹌\"],\n[\"8af6\",\"𠺫𠮩𠵈𡃀𡄽㿹𢚖搲𠾭\"],\n[\"8b40\",\"𣏴𧘹𢯎𠵾𠵿𢱑𢱕㨘𠺘𡃇𠼮𪘲𦭐𨳒𨶙𨳊閪哌苄喹\"],\n[\"8b55\",\"𩻃鰦骶𧝞𢷮煀腭胬尜𦕲脴㞗卟𨂽醶𠻺𠸏𠹷𠻻㗝𤷫㘉𠳖嚯𢞵𡃉𠸐𠹸𡁸𡅈𨈇𡑕𠹹𤹐𢶤婔𡀝𡀞𡃵𡃶垜𠸑\"],\n[\"8ba1\",\"𧚔𨋍𠾵𠹻𥅾㜃𠾶𡆀𥋘𪊽𤧚𡠺𤅷𨉼墙剨㘚𥜽箲孨䠀䬬鼧䧧鰟鮍𥭴𣄽嗻㗲嚉丨夂𡯁屮靑𠂆乛亻㔾尣彑忄㣺扌攵歺氵氺灬爫丬犭𤣩罒礻糹罓𦉪㓁\"],\n[\"8bde\",\"𦍋耂肀𦘒𦥑卝衤见𧢲讠贝钅镸长门𨸏韦页风飞饣𩠐鱼鸟黄歯龜丷𠂇阝户钢\"],\n[\"8c40\",\"倻淾𩱳龦㷉袏𤅎灷峵䬠𥇍㕙𥴰愢𨨲辧釶熑朙玺𣊁𪄇㲋𡦀䬐磤琂冮𨜏䀉橣𪊺䈣蘏𠩯稪𩥇𨫪靕灍匤𢁾鏴盙𨧣龧矝亣俰傼丯众龨吴綋墒壐𡶶庒庙忂𢜒斋\"],\n[\"8ca1\",\"𣏹椙橃𣱣泿\"],\n[\"8ca7\",\"爀𤔅玌㻛𤨓嬕璹讃𥲤𥚕窓篬糃繬苸薗龩袐龪躹龫迏蕟駠鈡龬𨶹𡐿䁱䊢娚\"],\n[\"8cc9\",\"顨杫䉶圽\"],\n[\"8cce\",\"藖𤥻芿𧄍䲁𦵴嵻𦬕𦾾龭龮宖龯曧繛湗秊㶈䓃𣉖𢞖䎚䔶\"],\n[\"8ce6\",\"峕𣬚諹屸㴒𣕑嵸龲煗䕘𤃬𡸣䱷㥸㑊𠆤𦱁諌侴𠈹妿腬顖𩣺弻\"],\n[\"8d40\",\"𠮟\"],\n[\"8d42\",\"𢇁𨥭䄂䚻𩁹㼇龳𪆵䃸㟖䛷𦱆䅼𨚲𧏿䕭㣔𥒚䕡䔛䶉䱻䵶䗪㿈𤬏㙡䓞䒽䇭崾嵈嵖㷼㠏嶤嶹㠠㠸幂庽弥徃㤈㤔㤿㥍惗愽峥㦉憷憹懏㦸戬抐拥挘㧸嚱\"],\n[\"8da1\",\"㨃揢揻搇摚㩋擀崕嘡龟㪗斆㪽旿晓㫲暒㬢朖㭂枤栀㭘桊梄㭲㭱㭻椉楃牜楤榟榅㮼槖㯝橥橴橱檂㯬檙㯲檫檵櫔櫶殁毁毪汵沪㳋洂洆洦涁㳯涤涱渕渘温溆𨧀溻滢滚齿滨滩漤漴㵆𣽁澁澾㵪㵵熷岙㶊瀬㶑灐灔灯灿炉𠌥䏁㗱𠻘\"],\n[\"8e40\",\"𣻗垾𦻓焾𥟠㙎榢𨯩孴穉𥣡𩓙穥穽𥦬窻窰竂竃燑𦒍䇊竚竝竪䇯咲𥰁笋筕笩𥌎𥳾箢筯莜𥮴𦱿篐萡箒箸𥴠㶭𥱥蒒篺簆簵𥳁籄粃𤢂粦晽𤕸糉糇糦籴糳糵糎\"],\n[\"8ea1\",\"繧䔝𦹄絝𦻖璍綉綫焵綳緒𤁗𦀩緤㴓緵𡟹緥𨍭縝𦄡𦅚繮纒䌫鑬縧罀罁罇礶𦋐駡羗𦍑羣𡙡𠁨䕜𣝦䔃𨌺翺𦒉者耈耝耨耯𪂇𦳃耻耼聡𢜔䦉𦘦𣷣𦛨朥肧𨩈脇脚墰𢛶汿𦒘𤾸擧𡒊舘𡡞橓𤩥𤪕䑺舩𠬍𦩒𣵾俹𡓽蓢荢𦬊𤦧𣔰𡝳𣷸芪椛芳䇛\"],\n[\"8f40\",\"蕋苐茚𠸖𡞴㛁𣅽𣕚艻苢茘𣺋𦶣𦬅𦮗𣗎㶿茝嗬莅䔋𦶥莬菁菓㑾𦻔橗蕚㒖𦹂𢻯葘𥯤葱㷓䓤檧葊𣲵祘蒨𦮖𦹷𦹃蓞萏莑䒠蒓蓤𥲑䉀𥳀䕃蔴嫲𦺙䔧蕳䔖枿蘖\"],\n[\"8fa1\",\"𨘥𨘻藁𧂈蘂𡖂𧃍䕫䕪蘨㙈𡢢号𧎚虾蝱𪃸蟮𢰧螱蟚蠏噡虬桖䘏衅衆𧗠𣶹𧗤衞袜䙛袴袵揁装睷𧜏覇覊覦覩覧覼𨨥觧𧤤𧪽誜瞓釾誐𧩙竩𧬺𣾏䜓𧬸煼謌謟𥐰𥕥謿譌譍誩𤩺讐讛誯𡛟䘕衏貛𧵔𧶏貫㜥𧵓賖𧶘𧶽贒贃𡤐賛灜贑𤳉㻐起\"],\n[\"9040\",\"趩𨀂𡀔𤦊㭼𨆼𧄌竧躭躶軃鋔輙輭𨍥𨐒辥錃𪊟𠩐辳䤪𨧞𨔽𣶻廸𣉢迹𪀔𨚼𨔁𢌥㦀𦻗逷𨔼𧪾遡𨕬𨘋邨𨜓郄𨛦邮都酧㫰醩釄粬𨤳𡺉鈎沟鉁鉢𥖹銹𨫆𣲛𨬌𥗛\"],\n[\"90a1\",\"𠴱錬鍫𨫡𨯫炏嫃𨫢𨫥䥥鉄𨯬𨰹𨯿鍳鑛躼閅閦鐦閠濶䊹𢙺𨛘𡉼𣸮䧟氜陻隖䅬隣𦻕懚隶磵𨫠隽双䦡𦲸𠉴𦐐𩂯𩃥𤫑𡤕𣌊霱虂霶䨏䔽䖅𤫩灵孁霛靜𩇕靗孊𩇫靟鐥僐𣂷𣂼鞉鞟鞱鞾韀韒韠𥑬韮琜𩐳響韵𩐝𧥺䫑頴頳顋顦㬎𧅵㵑𠘰𤅜\"],\n[\"9140\",\"𥜆飊颷飈飇䫿𦴧𡛓喰飡飦飬鍸餹𤨩䭲𩡗𩤅駵騌騻騐驘𥜥㛄𩂱𩯕髠髢𩬅髴䰎鬔鬭𨘀倴鬴𦦨㣃𣁽魐魀𩴾婅𡡣鮎𤉋鰂鯿鰌𩹨鷔𩾷𪆒𪆫𪃡𪄣𪇟鵾鶃𪄴鸎梈\"],\n[\"91a1\",\"鷄𢅛𪆓𪈠𡤻𪈳鴹𪂹𪊴麐麕麞麢䴴麪麯𤍤黁㭠㧥㴝伲㞾𨰫鼂鼈䮖鐤𦶢鼗鼖鼹嚟嚊齅馸𩂋韲葿齢齩竜龎爖䮾𤥵𤦻煷𤧸𤍈𤩑玞𨯚𡣺禟𨥾𨸶鍩鏳𨩄鋬鎁鏋𨥬𤒹爗㻫睲穃烐𤑳𤏸煾𡟯炣𡢾𣖙㻇𡢅𥐯𡟸㜢𡛻𡠹㛡𡝴𡣑𥽋㜣𡛀坛𤨥𡏾𡊨\"],\n[\"9240\",\"𡏆𡒶蔃𣚦蔃葕𤦔𧅥𣸱𥕜𣻻𧁒䓴𣛮𩦝𦼦柹㜳㰕㷧塬𡤢栐䁗𣜿𤃡𤂋𤄏𦰡哋嚞𦚱嚒𠿟𠮨𠸍鏆𨬓鎜仸儫㠙𤐶亼𠑥𠍿佋侊𥙑婨𠆫𠏋㦙𠌊𠐔㐵伩𠋀𨺳𠉵諚𠈌亘\"],\n[\"92a1\",\"働儍侢伃𤨎𣺊佂倮偬傁俌俥偘僼兙兛兝兞湶𣖕𣸹𣺿浲𡢄𣺉冨凃𠗠䓝𠒣𠒒𠒑赺𨪜𠜎剙劤𠡳勡鍮䙺熌𤎌𠰠𤦬𡃤槑𠸝瑹㻞璙琔瑖玘䮎𤪼𤂍叐㖄爏𤃉喴𠍅响𠯆圝鉝雴鍦埝垍坿㘾壋媙𨩆𡛺𡝯𡜐娬妸銏婾嫏娒𥥆𡧳𡡡𤊕㛵洅瑃娡𥺃\"],\n[\"9340\",\"媁𨯗𠐓鏠璌𡌃焅䥲鐈𨧻鎽㞠尞岞幞幈𡦖𡥼𣫮廍孏𡤃𡤄㜁𡢠㛝𡛾㛓脪𨩇𡶺𣑲𨦨弌弎𡤧𡞫婫𡜻孄蘔𧗽衠恾𢡠𢘫忛㺸𢖯𢖾𩂈𦽳懀𠀾𠁆𢘛憙憘恵𢲛𢴇𤛔𩅍\"],\n[\"93a1\",\"摱𤙥𢭪㨩𢬢𣑐𩣪𢹸挷𪑛撶挱揑𤧣𢵧护𢲡搻敫楲㯴𣂎𣊭𤦉𣊫唍𣋠𡣙𩐿曎𣊉𣆳㫠䆐𥖄𨬢𥖏𡛼𥕛𥐥磮𣄃𡠪𣈴㑤𣈏𣆂𤋉暎𦴤晫䮓昰𧡰𡷫晣𣋒𣋡昞𥡲㣑𣠺𣞼㮙𣞢𣏾瓐㮖枏𤘪梶栞㯄檾㡣𣟕𤒇樳橒櫉欅𡤒攑梘橌㯗橺歗𣿀𣲚鎠鋲𨯪𨫋\"],\n[\"9440\",\"銉𨀞𨧜鑧涥漋𤧬浧𣽿㶏渄𤀼娽渊塇洤硂焻𤌚𤉶烱牐犇犔𤞏𤜥兹𤪤𠗫瑺𣻸𣙟𤩊𤤗𥿡㼆㺱𤫟𨰣𣼵悧㻳瓌琼鎇琷䒟𦷪䕑疃㽣𤳙𤴆㽘畕癳𪗆㬙瑨𨫌𤦫𤦎㫻\"],\n[\"94a1\",\"㷍𤩎㻿𤧅𤣳釺圲鍂𨫣𡡤僟𥈡𥇧睸𣈲眎眏睻𤚗𣞁㩞𤣰琸璛㺿𤪺𤫇䃈𤪖𦆮錇𥖁砞碍碈磒珐祙𧝁𥛣䄎禛蒖禥樭𣻺稺秴䅮𡛦䄲鈵秱𠵌𤦌𠊙𣶺𡝮㖗啫㕰㚪𠇔𠰍竢婙𢛵𥪯𥪜娍𠉛磰娪𥯆竾䇹籝籭䈑𥮳𥺼𥺦糍𤧹𡞰粎籼粮檲緜縇緓罎𦉡\"],\n[\"9540\",\"𦅜𧭈綗𥺂䉪𦭵𠤖柖𠁎𣗏埄𦐒𦏸𤥢翝笧𠠬𥫩𥵃笌𥸎駦虅驣樜𣐿㧢𤧷𦖭騟𦖠蒀𧄧𦳑䓪脷䐂胆脉腂𦞴飃𦩂艢艥𦩑葓𦶧蘐𧈛媆䅿𡡀嬫𡢡嫤𡣘蚠蜨𣶏蠭𧐢娂\"],\n[\"95a1\",\"衮佅袇袿裦襥襍𥚃襔𧞅𧞄𨯵𨯙𨮜𨧹㺭蒣䛵䛏㟲訽訜𩑈彍鈫𤊄旔焩烄𡡅鵭貟賩𧷜妚矃姰䍮㛔踪躧𤰉輰轊䋴汘澻𢌡䢛潹溋𡟚鯩㚵𤤯邻邗啱䤆醻鐄𨩋䁢𨫼鐧𨰝𨰻蓥訫閙閧閗閖𨴴瑅㻂𤣿𤩂𤏪㻧𣈥随𨻧𨹦𨹥㻌𤧭𤩸𣿮琒瑫㻼靁𩂰\"],\n[\"9640\",\"桇䨝𩂓𥟟靝鍨𨦉𨰦𨬯𦎾銺嬑譩䤼珹𤈛鞛靱餸𠼦巁𨯅𤪲頟𩓚鋶𩗗釥䓀𨭐𤩧𨭤飜𨩅㼀鈪䤥萔餻饍𧬆㷽馛䭯馪驜𨭥𥣈檏騡嫾騯𩣱䮐𩥈馼䮽䮗鍽塲𡌂堢𤦸\"],\n[\"96a1\",\"𡓨硄𢜟𣶸棅㵽鑘㤧慐𢞁𢥫愇鱏鱓鱻鰵鰐魿鯏𩸭鮟𪇵𪃾鴡䲮𤄄鸘䲰鴌𪆴𪃭𪃳𩤯鶥蒽𦸒𦿟𦮂藼䔳𦶤𦺄𦷰萠藮𦸀𣟗𦁤秢𣖜𣙀䤭𤧞㵢鏛銾鍈𠊿碹鉷鑍俤㑀遤𥕝砽硔碶硋𡝗𣇉𤥁㚚佲濚濙瀞瀞吔𤆵垻壳垊鴖埗焴㒯𤆬燫𦱀𤾗嬨𡞵𨩉\"],\n[\"9740\",\"愌嫎娋䊼𤒈㜬䭻𨧼鎻鎸𡣖𠼝葲𦳀𡐓𤋺𢰦𤏁妔𣶷𦝁綨𦅛𦂤𤦹𤦋𨧺鋥珢㻩璴𨭣𡢟㻡𤪳櫘珳珻㻖𤨾𤪔𡟙𤩦𠎧𡐤𤧥瑈𤤖炥𤥶銄珦鍟𠓾錱𨫎𨨖鎆𨯧𥗕䤵𨪂煫\"],\n[\"97a1\",\"𤥃𠳿嚤𠘚𠯫𠲸唂秄𡟺緾𡛂𤩐𡡒䔮鐁㜊𨫀𤦭妰𡢿𡢃𧒄媡㛢𣵛㚰鉟婹𨪁𡡢鍴㳍𠪴䪖㦊僴㵩㵌𡎜煵䋻𨈘渏𩃤䓫浗𧹏灧沯㳖𣿭𣸭渂漌㵯𠏵畑㚼㓈䚀㻚䡱姄鉮䤾轁𨰜𦯀堒埈㛖𡑒烾𤍢𤩱𢿣𡊰𢎽梹楧𡎘𣓥𧯴𣛟𨪃𣟖𣏺𤲟樚𣚭𦲷萾䓟䓎\"],\n[\"9840\",\"𦴦𦵑𦲂𦿞漗𧄉茽𡜺菭𦲀𧁓𡟛妉媂𡞳婡婱𡤅𤇼㜭姯𡜼㛇熎鎐暚𤊥婮娫𤊓樫𣻹𧜶𤑛𤋊焝𤉙𨧡侰𦴨峂𤓎𧹍𤎽樌𤉖𡌄炦焳𤏩㶥泟勇𤩏繥姫崯㷳彜𤩝𡟟綤萦\"],\n[\"98a1\",\"咅𣫺𣌀𠈔坾𠣕𠘙㿥𡾞𪊶瀃𩅛嵰玏糓𨩙𩐠俈翧狍猐𧫴猸猹𥛶獁獈㺩𧬘遬燵𤣲珡臶㻊県㻑沢国琙琞琟㻢㻰㻴㻺瓓㼎㽓畂畭畲疍㽼痈痜㿀癍㿗癴㿜発𤽜熈嘣覀塩䀝睃䀹条䁅㗛瞘䁪䁯属瞾矋売砘点砜䂨砹硇硑硦葈𥔵礳栃礲䄃\"],\n[\"9940\",\"䄉禑禙辻稆込䅧窑䆲窼艹䇄竏竛䇏両筢筬筻簒簛䉠䉺类粜䊌粸䊔糭输烀𠳏総緔緐緽羮羴犟䎗耠耥笹耮耱联㷌垴炠肷胩䏭脌猪脎脒畠脔䐁㬹腖腙腚\"],\n[\"99a1\",\"䐓堺腼膄䐥膓䐭膥埯臁臤艔䒏芦艶苊苘苿䒰荗险榊萅烵葤惣蒈䔄蒾蓡蓸蔐蔸蕒䔻蕯蕰藠䕷虲蚒蚲蛯际螋䘆䘗袮裿褤襇覑𧥧訩訸誔誴豑賔賲贜䞘塟跃䟭仮踺嗘坔蹱嗵躰䠷軎転軤軭軲辷迁迊迌逳駄䢭飠鈓䤞鈨鉘鉫銱銮銿\"],\n[\"9a40\",\"鋣鋫鋳鋴鋽鍃鎄鎭䥅䥑麿鐗匁鐝鐭鐾䥪鑔鑹锭関䦧间阳䧥枠䨤靀䨵鞲韂噔䫤惨颹䬙飱塄餎餙冴餜餷饂饝饢䭰駅䮝騼鬏窃魩鮁鯝鯱鯴䱭鰠㝯𡯂鵉鰺\"],\n[\"9aa1\",\"黾噐鶓鶽鷀鷼银辶鹻麬麱麽黆铜黢黱黸竈齄𠂔𠊷𠎠椚铃妬𠓗塀铁㞹𠗕𠘕𠙶𡚺块煳𠫂𠫍𠮿呪吆𠯋咞𠯻𠰻𠱓𠱥𠱼惧𠲍噺𠲵𠳝𠳭𠵯𠶲𠷈楕鰯螥𠸄𠸎𠻗𠾐𠼭𠹳尠𠾼帋𡁜𡁏𡁶朞𡁻𡂈𡂖㙇𡂿𡃓𡄯𡄻卤蒭𡋣𡍵𡌶讁𡕷𡘙𡟃𡟇乸炻𡠭𡥪\"],\n[\"9b40\",\"𡨭𡩅𡰪𡱰𡲬𡻈拃𡻕𡼕熘桕𢁅槩㛈𢉼𢏗𢏺𢜪𢡱𢥏苽𢥧𢦓𢫕覥𢫨辠𢬎鞸𢬿顇骽𢱌\"],\n[\"9b62\",\"𢲈𢲷𥯨𢴈𢴒𢶷𢶕𢹂𢽴𢿌𣀳𣁦𣌟𣏞徱晈暿𧩹𣕧𣗳爁𤦺矗𣘚𣜖纇𠍆墵朎\"],\n[\"9ba1\",\"椘𣪧𧙗𥿢𣸑𣺹𧗾𢂚䣐䪸𤄙𨪚𤋮𤌍𤀻𤌴𤎖𤩅𠗊凒𠘑妟𡺨㮾𣳿𤐄𤓖垈𤙴㦛𤜯𨗨𩧉㝢𢇃譞𨭎駖𤠒𤣻𤨕爉𤫀𠱸奥𤺥𤾆𠝹軚𥀬劏圿煱𥊙𥐙𣽊𤪧喼𥑆𥑮𦭒釔㑳𥔿𧘲𥕞䜘𥕢𥕦𥟇𤤿𥡝偦㓻𣏌惞𥤃䝼𨥈𥪮𥮉𥰆𡶐垡煑澶𦄂𧰒遖𦆲𤾚譢𦐂𦑊\"],\n[\"9c40\",\"嵛𦯷輶𦒄𡤜諪𤧶𦒈𣿯𦔒䯀𦖿𦚵𢜛鑥𥟡憕娧晉侻嚹𤔡𦛼乪𤤴陖涏𦲽㘘襷𦞙𦡮𦐑𦡞營𦣇筂𩃀𠨑𦤦鄄𦤹穅鷰𦧺騦𦨭㙟𦑩𠀡禃𦨴𦭛崬𣔙菏𦮝䛐𦲤画补𦶮墶\"],\n[\"9ca1\",\"㜜𢖍𧁋𧇍㱔𧊀𧊅銁𢅺𧊋錰𧋦𤧐氹钟𧑐𠻸蠧裵𢤦𨑳𡞱溸𤨪𡠠㦤㚹尐秣䔿暶𩲭𩢤襃𧟌𧡘囖䃟𡘊㦡𣜯𨃨𡏅熭荦𧧝𩆨婧䲷𧂯𨦫𧧽𧨊𧬋𧵦𤅺筃祾𨀉澵𪋟樃𨌘厢𦸇鎿栶靝𨅯𨀣𦦵𡏭𣈯𨁈嶅𨰰𨂃圕頣𨥉嶫𤦈斾槕叒𤪥𣾁㰑朶𨂐𨃴𨄮𡾡𨅏\"],\n[\"9d40\",\"𨆉𨆯𨈚𨌆𨌯𨎊㗊𨑨𨚪䣺揦𨥖砈鉕𨦸䏲𨧧䏟𨧨𨭆𨯔姸𨰉輋𨿅𩃬筑𩄐𩄼㷷𩅞𤫊运犏嚋𩓧𩗩𩖰𩖸𩜲𩣑𩥉𩥪𩧃𩨨𩬎𩵚𩶛纟𩻸𩼣䲤镇𪊓熢𪋿䶑递𪗋䶜𠲜达嗁\"],\n[\"9da1\",\"辺𢒰边𤪓䔉繿潖檱仪㓤𨬬𧢝㜺躀𡟵𨀤𨭬𨮙𧨾𦚯㷫𧙕𣲷𥘵𥥖亚𥺁𦉘嚿𠹭踎孭𣺈𤲞揞拐𡟶𡡻攰嘭𥱊吚𥌑㷆𩶘䱽嘢嘞罉𥻘奵𣵀蝰东𠿪𠵉𣚺脗鵞贘瘻鱅癎瞹鍅吲腈苷嘥脲萘肽嗪祢噃吖𠺝㗎嘅嗱曱𨋢㘭甴嗰喺咗啲𠱁𠲖廐𥅈𠹶𢱢\"],\n[\"9e40\",\"𠺢麫絚嗞𡁵抝靭咔賍燶酶揼掹揾啩𢭃鱲𢺳冚㓟𠶧冧呍唞唓癦踭𦢊疱肶蠄螆裇膶萜𡃁䓬猄𤜆宐茋𦢓噻𢛴𧴯𤆣𧵳𦻐𧊶酰𡇙鈈𣳼𪚩𠺬𠻹牦𡲢䝎𤿂𧿹𠿫䃺\"],\n[\"9ea1\",\"鱝攟𢶠䣳𤟠𩵼𠿬𠸊恢𧖣𠿭\"],\n[\"9ead\",\"𦁈𡆇熣纎鵐业丄㕷嬍沲卧㚬㧜卽㚥𤘘墚𤭮舭呋垪𥪕𠥹\"],\n[\"9ec5\",\"㩒𢑥獴𩺬䴉鯭𣳾𩼰䱛𤾩𩖞𩿞葜𣶶𧊲𦞳𣜠挮紥𣻷𣸬㨪逈勌㹴㙺䗩𠒎癀嫰𠺶硺𧼮墧䂿噼鮋嵴癔𪐴麅䳡痹㟻愙𣃚𤏲\"],\n[\"9ef5\",\"噝𡊩垧𤥣𩸆刴𧂮㖭汊鵼\"],\n[\"9f40\",\"籖鬹埞𡝬屓擓𩓐𦌵𧅤蚭𠴨𦴢𤫢𠵱\"],\n[\"9f4f\",\"凾𡼏嶎霃𡷑麁遌笟鬂峑箣扨挵髿篏鬪籾鬮籂粆鰕篼鬉鼗鰛𤤾齚啳寃俽麘俲剠㸆勑坧偖妷帒韈鶫轜呩鞴饀鞺匬愰\"],\n[\"9fa1\",\"椬叚鰊鴂䰻陁榀傦畆𡝭駚剳\"],\n[\"9fae\",\"酙隁酜\"],\n[\"9fb2\",\"酑𨺗捿𦴣櫊嘑醎畺抅𠏼獏籰𥰡𣳽\"],\n[\"9fc1\",\"𤤙盖鮝个𠳔莾衂\"],\n[\"9fc9\",\"届槀僭坺刟巵从氱𠇲伹咜哚劚趂㗾弌㗳\"],\n[\"9fdb\",\"歒酼龥鮗頮颴骺麨麄煺笔\"],\n[\"9fe7\",\"毺蠘罸\"],\n[\"9feb\",\"嘠𪙊蹷齓\"],\n[\"9ff0\",\"跔蹏鸜踁抂𨍽踨蹵竓𤩷稾磘泪詧瘇\"],\n[\"a040\",\"𨩚鼦泎蟖痃𪊲硓咢贌狢獱謭猂瓱賫𤪻蘯徺袠䒷\"],\n[\"a055\",\"𡠻𦸅\"],\n[\"a058\",\"詾𢔛\"],\n[\"a05b\",\"惽癧髗鵄鍮鮏蟵\"],\n[\"a063\",\"蠏賷猬霡鮰㗖犲䰇籑饊𦅙慙䰄麖慽\"],\n[\"a073\",\"坟慯抦戹拎㩜懢厪𣏵捤栂㗒\"],\n[\"a0a1\",\"嵗𨯂迚𨸹\"],\n[\"a0a6\",\"僙𡵆礆匲阸𠼻䁥\"],\n[\"a0ae\",\"矾\"],\n[\"a0b0\",\"糂𥼚糚稭聦聣絍甅瓲覔舚朌聢𧒆聛瓰脃眤覉𦟌畓𦻑螩蟎臈螌詉貭譃眫瓸蓚㘵榲趦\"],\n[\"a0d4\",\"覩瑨涹蟁𤀑瓧㷛煶悤憜㳑煢恷\"],\n[\"a0e2\",\"罱𨬭牐惩䭾删㰘𣳇𥻗𧙖𥔱𡥄𡋾𩤃𦷜𧂭峁𦆭𨨏𣙷𠃮𦡆𤼎䕢嬟𦍌齐麦𦉫\"],\n[\"a3c0\",\"␀\",31,\"␡\"],\n[\"c6a1\",\"①\",9,\"⑴\",9,\"ⅰ\",9,\"丶丿亅亠冂冖冫勹匸卩厶夊宀巛⼳广廴彐彡攴无疒癶辵隶¨ˆヽヾゝゞ〃仝々〆〇ー［］✽ぁ\",23],\n[\"c740\",\"す\",58,\"ァアィイ\"],\n[\"c7a1\",\"ゥ\",81,\"А\",5,\"ЁЖ\",4],\n[\"c840\",\"Л\",26,\"ёж\",25,\"⇧↸↹㇏𠃌乚𠂊刂䒑\"],\n[\"c8a1\",\"龰冈龱𧘇\"],\n[\"c8cd\",\"￢￤＇＂㈱№℡゛゜⺀⺄⺆⺇⺈⺊⺌⺍⺕⺜⺝⺥⺧⺪⺬⺮⺶⺼⺾⻆⻊⻌⻍⻏⻖⻗⻞⻣\"],\n[\"c8f5\",\"ʃɐɛɔɵœøŋʊɪ\"],\n[\"f9fe\",\"￭\"],\n[\"fa40\",\"𠕇鋛𠗟𣿅蕌䊵珯况㙉𤥂𨧤鍄𡧛苮𣳈砼杄拟𤤳𨦪𠊠𦮳𡌅侫𢓭倈𦴩𧪄𣘀𤪱𢔓倩𠍾徤𠎀𠍇滛𠐟偽儁㑺儎顬㝃萖𤦤𠒇兠𣎴兪𠯿𢃼𠋥𢔰𠖎𣈳𡦃宂蝽𠖳𣲙冲冸\"],\n[\"faa1\",\"鴴凉减凑㳜凓𤪦决凢卂凭菍椾𣜭彻刋刦刼劵剗劔効勅簕蕂勠蘍𦬓包𨫞啉滙𣾀𠥔𣿬匳卄𠯢泋𡜦栛珕恊㺪㣌𡛨燝䒢卭却𨚫卾卿𡖖𡘓矦厓𨪛厠厫厮玧𥝲㽙玜叁叅汉义埾叙㪫𠮏叠𣿫𢶣叶𠱷吓灹唫晗浛呭𦭓𠵴啝咏咤䞦𡜍𠻝㶴𠵍\"],\n[\"fb40\",\"𨦼𢚘啇䳭启琗喆喩嘅𡣗𤀺䕒𤐵暳𡂴嘷曍𣊊暤暭噍噏磱囱鞇叾圀囯园𨭦㘣𡉏坆𤆥汮炋坂㚱𦱾埦𡐖堃𡑔𤍣堦𤯵塜墪㕡壠壜𡈼壻寿坃𪅐𤉸鏓㖡够梦㛃湙\"],\n[\"fba1\",\"𡘾娤啓𡚒蔅姉𠵎𦲁𦴪𡟜姙𡟻𡞲𦶦浱𡠨𡛕姹𦹅媫婣㛦𤦩婷㜈媖瑥嫓𦾡𢕔㶅𡤑㜲𡚸広勐孶斈孼𧨎䀄䡝𠈄寕慠𡨴𥧌𠖥寳宝䴐尅𡭄尓珎尔𡲥𦬨屉䣝岅峩峯嶋𡷹𡸷崐崘嵆𡺤岺巗苼㠭𤤁𢁉𢅳芇㠶㯂帮檊幵幺𤒼𠳓厦亷廐厨𡝱帉廴𨒂\"],\n[\"fc40\",\"廹廻㢠廼栾鐛弍𠇁弢㫞䢮𡌺强𦢈𢏐彘𢑱彣鞽𦹮彲鍀𨨶徧嶶㵟𥉐𡽪𧃸𢙨釖𠊞𨨩怱暅𡡷㥣㷇㘹垐𢞴祱㹀悞悤悳𤦂𤦏𧩓璤僡媠慤萤慂慈𦻒憁凴𠙖憇宪𣾷\"],\n[\"fca1\",\"𢡟懓𨮝𩥝懐㤲𢦀𢣁怣慜攞掋𠄘担𡝰拕𢸍捬𤧟㨗搸揸𡎎𡟼撐澊𢸶頔𤂌𥜝擡擥鑻㩦携㩗敍漖𤨨𤨣斅敭敟𣁾斵𤥀䬷旑䃘𡠩无旣忟𣐀昘𣇷𣇸晄𣆤𣆥晋𠹵晧𥇦晳晴𡸽𣈱𨗴𣇈𥌓矅𢣷馤朂𤎜𤨡㬫槺𣟂杞杧杢𤇍𩃭柗䓩栢湐鈼栁𣏦𦶠桝\"],\n[\"fd40\",\"𣑯槡樋𨫟楳棃𣗍椁椀㴲㨁𣘼㮀枬楡𨩊䋼椶榘㮡𠏉荣傐槹𣙙𢄪橅𣜃檝㯳枱櫈𩆜㰍欝𠤣惞欵歴𢟍溵𣫛𠎵𡥘㝀吡𣭚毡𣻼毜氷𢒋𤣱𦭑汚舦汹𣶼䓅𣶽𤆤𤤌𤤀\"],\n[\"fda1\",\"𣳉㛥㳫𠴲鮃𣇹𢒑羏样𦴥𦶡𦷫涖浜湼漄𤥿𤂅𦹲蔳𦽴凇沜渝萮𨬡港𣸯瑓𣾂秌湏媑𣁋濸㜍澝𣸰滺𡒗𤀽䕕鏰潄潜㵎潴𩅰㴻澟𤅄濓𤂑𤅕𤀹𣿰𣾴𤄿凟𤅖𤅗𤅀𦇝灋灾炧炁烌烕烖烟䄄㷨熴熖𤉷焫煅媈煊煮岜𤍥煏鍢𤋁焬𤑚𤨧𤨢熺𨯨炽爎\"],\n[\"fe40\",\"鑂爕夑鑃爤鍁𥘅爮牀𤥴梽牕牗㹕𣁄栍漽犂猪猫𤠣𨠫䣭𨠄猨献珏玪𠰺𦨮珉瑉𤇢𡛧𤨤昣㛅𤦷𤦍𤧻珷琕椃𤨦琹𠗃㻗瑜𢢭瑠𨺲瑇珤瑶莹瑬㜰瑴鏱樬璂䥓𤪌\"],\n[\"fea1\",\"𤅟𤩹𨮏孆𨰃𡢞瓈𡦈甎瓩甞𨻙𡩋寗𨺬鎅畍畊畧畮𤾂㼄𤴓疎瑝疞疴瘂瘬癑癏癯癶𦏵皐臯㟸𦤑𦤎皡皥皷盌𦾟葢𥂝𥅽𡸜眞眦着撯𥈠睘𣊬瞯𨥤𨥨𡛁矴砉𡍶𤨒棊碯磇磓隥礮𥗠磗礴碱𧘌辸袄𨬫𦂃𢘜禆褀椂禀𥡗禝𧬹礼禩渪𧄦㺨秆𩄍秔\"]\n]\n", "\"use strict\";\n\n// Description of supported double byte encodings and aliases.\n// Tables are not require()-d until they are needed to speed up library load.\n// require()-s are direct to support Browserify.\n\nmodule.exports = {\n    \n    // == Japanese/ShiftJIS ====================================================\n    // All japanese encodings are based on JIS X set of standards:\n    // JIS X 0201 - Single-byte encoding of ASCII + ¥ + Kana chars at 0xA1-0xDF.\n    // JIS X 0208 - Main set of 6879 characters, placed in 94x94 plane, to be encoded by 2 bytes. \n    //              Has several variations in 1978, 1983, 1990 and 1997.\n    // JIS X 0212 - Supplementary plane of 6067 chars in 94x94 plane. 1990. Effectively dead.\n    // JIS X 0213 - Extension and modern replacement of 0208 and 0212. Total chars: 11233.\n    //              2 planes, first is superset of 0208, second - revised 0212.\n    //              Introduced in 2000, revised 2004. Some characters are in Unicode Plane 2 (0x2xxxx)\n\n    // Byte encodings are:\n    //  * Shift_JIS: Compatible with 0201, uses not defined chars in top half as lead bytes for double-byte\n    //               encoding of 0208. Lead byte ranges: 0x81-0x9F, 0xE0-0xEF; Trail byte ranges: 0x40-0x7E, 0x80-0x9E, 0x9F-0xFC.\n    //               Windows CP932 is a superset of Shift_JIS. Some companies added more chars, notably KDDI.\n    //  * EUC-JP:    Up to 3 bytes per character. Used mostly on *nixes.\n    //               0x00-0x7F       - lower part of 0201\n    //               0x8E, 0xA1-0xDF - upper part of 0201\n    //               (0xA1-0xFE)x2   - 0208 plane (94x94).\n    //               0x8F, (0xA1-0xFE)x2 - 0212 plane (94x94).\n    //  * JIS X 208: 7-bit, direct encoding of 0208. Byte ranges: 0x21-0x7E (94 values). Uncommon.\n    //               Used as-is in ISO2022 family.\n    //  * ISO2022-JP: Stateful encoding, with escape sequences to switch between ASCII, \n    //                0201-1976 Roman, 0208-1978, 0208-1983.\n    //  * ISO2022-JP-1: Adds esc seq for 0212-1990.\n    //  * ISO2022-JP-2: Adds esc seq for GB2313-1980, KSX1001-1992, ISO8859-1, ISO8859-7.\n    //  * ISO2022-JP-3: Adds esc seq for 0201-1976 Kana set, 0213-2000 Planes 1, 2.\n    //  * ISO2022-JP-2004: Adds 0213-2004 Plane 1.\n    //\n    // After JIS X 0213 appeared, Shift_JIS-2004, EUC-JISX0213 and ISO2022-JP-2004 followed, with just changing the planes.\n    //\n    // Overall, it seems that it's a mess :( http://www8.plala.or.jp/tkubota1/unicode-symbols-map2.html\n\n    'shiftjis': {\n        type: '_dbcs',\n        table: function() { return require('./tables/shiftjis.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n        encodeSkipVals: [{from: 0xED40, to: 0xF940}],\n    },\n    'csshiftjis': 'shiftjis',\n    'mskanji': 'shiftjis',\n    'sjis': 'shiftjis',\n    'windows31j': 'shiftjis',\n    'ms31j': 'shiftjis',\n    'xsjis': 'shiftjis',\n    'windows932': 'shiftjis',\n    'ms932': 'shiftjis',\n    '932': 'shiftjis',\n    'cp932': 'shiftjis',\n\n    'eucjp': {\n        type: '_dbcs',\n        table: function() { return require('./tables/eucjp.json') },\n        encodeAdd: {'\\u00a5': 0x5C, '\\u203E': 0x7E},\n    },\n\n    // TODO: KDDI extension to Shift_JIS\n    // TODO: IBM CCSID 942 = CP932, but F0-F9 custom chars and other char changes.\n    // TODO: IBM CCSID 943 = Shift_JIS = CP932 with original Shift_JIS lower 128 chars.\n\n\n    // == Chinese/GBK ==========================================================\n    // http://en.wikipedia.org/wiki/GBK\n    // We mostly implement W3C recommendation: https://www.w3.org/TR/encoding/#gbk-encoder\n\n    // Oldest GB2312 (1981, ~7600 chars) is a subset of CP936\n    'gb2312': 'cp936',\n    'gb231280': 'cp936',\n    'gb23121980': 'cp936',\n    'csgb2312': 'cp936',\n    'csiso58gb231280': 'cp936',\n    'euccn': 'cp936',\n\n    // Microsoft's CP936 is a subset and approximation of GBK.\n    'windows936': 'cp936',\n    'ms936': 'cp936',\n    '936': 'cp936',\n    'cp936': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json') },\n    },\n\n    // GBK (~22000 chars) is an extension of CP936 that added user-mapped chars and some other.\n    'gbk': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n    },\n    'xgbk': 'gbk',\n    'isoir58': 'gbk',\n\n    // GB18030 is an algorithmic extension of GBK.\n    // Main source: https://www.w3.org/TR/encoding/#gbk-encoder\n    // http://icu-project.org/docs/papers/gb18030.html\n    // http://source.icu-project.org/repos/icu/data/trunk/charset/data/xml/gb-18030-2000.xml\n    // http://www.khngai.com/chinese/charmap/tblgbk.php?page=0\n    'gb18030': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp936.json').concat(require('./tables/gbk-added.json')) },\n        gb18030: function() { return require('./tables/gb18030-ranges.json') },\n        encodeSkipVals: [0x80],\n        encodeAdd: {'€': 0xA2E3},\n    },\n\n    'chinese': 'gb18030',\n\n\n    // == Korean ===============================================================\n    // EUC-KR, KS_C_5601 and KS X 1001 are exactly the same.\n    'windows949': 'cp949',\n    'ms949': 'cp949',\n    '949': 'cp949',\n    'cp949': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp949.json') },\n    },\n\n    'cseuckr': 'cp949',\n    'csksc56011987': 'cp949',\n    'euckr': 'cp949',\n    'isoir149': 'cp949',\n    'korean': 'cp949',\n    'ksc56011987': 'cp949',\n    'ksc56011989': 'cp949',\n    'ksc5601': 'cp949',\n\n\n    // == Big5/Taiwan/Hong Kong ================================================\n    // There are lots of tables for Big5 and cp950. Please see the following links for history:\n    // http://moztw.org/docs/big5/  http://www.haible.de/bruno/charsets/conversion-tables/Big5.html\n    // Variations, in roughly number of defined chars:\n    //  * Windows CP 950: Microsoft variant of Big5. Canonical: http://www.unicode.org/Public/MAPPINGS/VENDORS/MICSFT/WINDOWS/CP950.TXT\n    //  * Windows CP 951: Microsoft variant of Big5-HKSCS-2001. Seems to be never public. http://me.abelcheung.org/articles/research/what-is-cp951/\n    //  * Big5-2003 (Taiwan standard) almost superset of cp950.\n    //  * Unicode-at-on (UAO) / Mozilla 1.8. Falling out of use on the Web. Not supported by other browsers.\n    //  * Big5-HKSCS (-2001, -2004, -2008). Hong Kong standard. \n    //    many unicode code points moved from PUA to Supplementary plane (U+2XXXX) over the years.\n    //    Plus, it has 4 combining sequences.\n    //    Seems that Mozilla refused to support it for 10 yrs. https://bugzilla.mozilla.org/show_bug.cgi?id=162431 https://bugzilla.mozilla.org/show_bug.cgi?id=310299\n    //    because big5-hkscs is the only encoding to include astral characters in non-algorithmic way.\n    //    Implementations are not consistent within browsers; sometimes labeled as just big5.\n    //    MS Internet Explorer switches from big5 to big5-hkscs when a patch applied.\n    //    Great discussion & recap of what's going on https://bugzilla.mozilla.org/show_bug.cgi?id=912470#c31\n    //    In the encoder, it might make sense to support encoding old PUA mappings to Big5 bytes seq-s.\n    //    Official spec: http://www.ogcio.gov.hk/en/business/tech_promotion/ccli/terms/doc/2003cmp_2008.txt\n    //                   http://www.ogcio.gov.hk/tc/business/tech_promotion/ccli/terms/doc/hkscs-2008-big5-iso.txt\n    // \n    // Current understanding of how to deal with Big5(-HKSCS) is in the Encoding Standard, http://encoding.spec.whatwg.org/#big5-encoder\n    // Unicode mapping (http://www.unicode.org/Public/MAPPINGS/OBSOLETE/EASTASIA/OTHER/BIG5.TXT) is said to be wrong.\n\n    'windows950': 'cp950',\n    'ms950': 'cp950',\n    '950': 'cp950',\n    'cp950': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json') },\n    },\n\n    // Big5 has many variations and is an extension of cp950. We use Encoding Standard's as a consensus.\n    'big5': 'big5hkscs',\n    'big5hkscs': {\n        type: '_dbcs',\n        table: function() { return require('./tables/cp950.json').concat(require('./tables/big5-added.json')) },\n        encodeSkipVals: [\n            // Although Encoding Standard says we should avoid encoding to HKSCS area (See Step 1 of\n            // https://encoding.spec.whatwg.org/#index-big5-pointer), we still do it to increase compatibility with ICU.\n            // But if a single unicode point can be encoded both as HKSCS and regular Big5, we prefer the latter.\n            0x8e69, 0x8e6f, 0x8e7e, 0x8eab, 0x8eb4, 0x8ecd, 0x8ed0, 0x8f57, 0x8f69, 0x8f6e, 0x8fcb, 0x8ffe,\n            0x906d, 0x907a, 0x90c4, 0x90dc, 0x90f1, 0x91bf, 0x92af, 0x92b0, 0x92b1, 0x92b2, 0x92d1, 0x9447, 0x94ca,\n            0x95d9, 0x96fc, 0x9975, 0x9b76, 0x9b78, 0x9b7b, 0x9bc6, 0x9bde, 0x9bec, 0x9bf6, 0x9c42, 0x9c53, 0x9c62,\n            0x9c68, 0x9c6b, 0x9c77, 0x9cbc, 0x9cbd, 0x9cd0, 0x9d57, 0x9d5a, 0x9dc4, 0x9def, 0x9dfb, 0x9ea9, 0x9eef,\n            0x9efd, 0x9f60, 0x9fcb, 0xa077, 0xa0dc, 0xa0df, 0x8fcc, 0x92c8, 0x9644, 0x96ed,\n\n            // Step 2 of https://encoding.spec.whatwg.org/#index-big5-pointer: Use last pointer for U+2550, U+255E, U+2561, U+256A, U+5341, or U+5345\n            0xa2a4, 0xa2a5, 0xa2a7, 0xa2a6, 0xa2cc, 0xa2ce,\n        ],\n    },\n\n    'cnbig5': 'big5hkscs',\n    'csbig5': 'big5hkscs',\n    'xxbig5': 'big5hkscs',\n};\n", "\"use strict\";\n\n// Update this array if you add/rename/remove files in this directory.\n// We support Browserify by skipping automatic module discovery and requiring modules directly.\nvar modules = [\n    require(\"./internal\"),\n    require(\"./utf32\"),\n    require(\"./utf16\"),\n    require(\"./utf7\"),\n    require(\"./sbcs-codec\"),\n    require(\"./sbcs-data\"),\n    require(\"./sbcs-data-generated\"),\n    require(\"./dbcs-codec\"),\n    require(\"./dbcs-data\"),\n];\n\n// Put all encoding/alias/codec definitions to single object and export it.\nfor (var i = 0; i < modules.length; i++) {\n    var module = modules[i];\n    for (var enc in module)\n        if (Object.prototype.hasOwnProperty.call(module, enc))\n            exports[enc] = module[enc];\n}\n", "\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer;\n\n// NOTE: Due to 'stream' module being pretty large (~100Kb, significant in browser environments), \n// we opt to dependency-inject it instead of creating a hard dependency.\nmodule.exports = function(stream_module) {\n    var Transform = stream_module.Transform;\n\n    // == Encoder stream =======================================================\n\n    function IconvLiteEncoderStream(conv, options) {\n        this.conv = conv;\n        options = options || {};\n        options.decodeStrings = false; // We accept only strings, so we don't need to decode them.\n        Transform.call(this, options);\n    }\n\n    IconvLiteEncoderStream.prototype = Object.create(Transform.prototype, {\n        constructor: { value: IconvLiteEncoderStream }\n    });\n\n    IconvLiteEncoderStream.prototype._transform = function(chunk, encoding, done) {\n        if (typeof chunk != 'string')\n            return done(new Error(\"Iconv encoding stream needs strings as its input.\"));\n        try {\n            var res = this.conv.write(chunk);\n            if (res && res.length) this.push(res);\n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteEncoderStream.prototype._flush = function(done) {\n        try {\n            var res = this.conv.end();\n            if (res && res.length) this.push(res);\n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteEncoderStream.prototype.collect = function(cb) {\n        var chunks = [];\n        this.on('error', cb);\n        this.on('data', function(chunk) { chunks.push(chunk); });\n        this.on('end', function() {\n            cb(null, Buffer.concat(chunks));\n        });\n        return this;\n    }\n\n\n    // == Decoder stream =======================================================\n\n    function IconvLiteDecoderStream(conv, options) {\n        this.conv = conv;\n        options = options || {};\n        options.encoding = this.encoding = 'utf8'; // We output strings.\n        Transform.call(this, options);\n    }\n\n    IconvLiteDecoderStream.prototype = Object.create(Transform.prototype, {\n        constructor: { value: IconvLiteDecoderStream }\n    });\n\n    IconvLiteDecoderStream.prototype._transform = function(chunk, encoding, done) {\n        if (!Buffer.isBuffer(chunk) && !(chunk instanceof Uint8Array))\n            return done(new Error(\"Iconv decoding stream needs buffers as its input.\"));\n        try {\n            var res = this.conv.write(chunk);\n            if (res && res.length) this.push(res, this.encoding);\n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteDecoderStream.prototype._flush = function(done) {\n        try {\n            var res = this.conv.end();\n            if (res && res.length) this.push(res, this.encoding);                \n            done();\n        }\n        catch (e) {\n            done(e);\n        }\n    }\n\n    IconvLiteDecoderStream.prototype.collect = function(cb) {\n        var res = '';\n        this.on('error', cb);\n        this.on('data', function(chunk) { res += chunk; });\n        this.on('end', function() {\n            cb(null, res);\n        });\n        return this;\n    }\n\n    return {\n        IconvLiteEncoderStream: IconvLiteEncoderStream,\n        IconvLiteDecoderStream: IconvLiteDecoderStream,\n    };\n};\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"stream\" has been externalized for browser compatibility. Cannot access \"stream.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "\"use strict\";\n\nvar Buffer = require(\"safer-buffer\").Buffer;\n\nvar bomHandling = require(\"./bom-handling\"),\n    iconv = module.exports;\n\n// All codecs and aliases are kept here, keyed by encoding name/alias.\n// They are lazy loaded in `iconv.getCodec` from `encodings/index.js`.\niconv.encodings = null;\n\n// Characters emitted in case of error.\niconv.defaultCharUnicode = '�';\niconv.defaultCharSingleByte = '?';\n\n// Public API.\niconv.encode = function encode(str, encoding, options) {\n    str = \"\" + (str || \"\"); // Ensure string.\n\n    var encoder = iconv.getEncoder(encoding, options);\n\n    var res = encoder.write(str);\n    var trail = encoder.end();\n    \n    return (trail && trail.length > 0) ? Buffer.concat([res, trail]) : res;\n}\n\niconv.decode = function decode(buf, encoding, options) {\n    if (typeof buf === 'string') {\n        if (!iconv.skipDecodeWarning) {\n            console.error('Iconv-lite warning: decode()-ing strings is deprecated. Refer to https://github.com/ashtuchkin/iconv-lite/wiki/Use-Buffers-when-decoding');\n            iconv.skipDecodeWarning = true;\n        }\n\n        buf = Buffer.from(\"\" + (buf || \"\"), \"binary\"); // Ensure buffer.\n    }\n\n    var decoder = iconv.getDecoder(encoding, options);\n\n    var res = decoder.write(buf);\n    var trail = decoder.end();\n\n    return trail ? (res + trail) : res;\n}\n\niconv.encodingExists = function encodingExists(enc) {\n    try {\n        iconv.getCodec(enc);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n// Legacy aliases to convert functions\niconv.toEncoding = iconv.encode;\niconv.fromEncoding = iconv.decode;\n\n// Search for a codec in iconv.encodings. Cache codec data in iconv._codecDataCache.\niconv._codecDataCache = {};\niconv.getCodec = function getCodec(encoding) {\n    if (!iconv.encodings)\n        iconv.encodings = require(\"../encodings\"); // Lazy load all encoding definitions.\n    \n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    var enc = iconv._canonicalizeEncoding(encoding);\n\n    // Traverse iconv.encodings to find actual codec.\n    var codecOptions = {};\n    while (true) {\n        var codec = iconv._codecDataCache[enc];\n        if (codec)\n            return codec;\n\n        var codecDef = iconv.encodings[enc];\n\n        switch (typeof codecDef) {\n            case \"string\": // Direct alias to other encoding.\n                enc = codecDef;\n                break;\n\n            case \"object\": // Alias with options. Can be layered.\n                for (var key in codecDef)\n                    codecOptions[key] = codecDef[key];\n\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n                \n                enc = codecDef.type;\n                break;\n\n            case \"function\": // Codec itself.\n                if (!codecOptions.encodingName)\n                    codecOptions.encodingName = enc;\n\n                // The codec function must load all tables and return object with .encoder and .decoder methods.\n                // It'll be called only once (for each different options object).\n                codec = new codecDef(codecOptions, iconv);\n\n                iconv._codecDataCache[codecOptions.encodingName] = codec; // Save it to be reused later.\n                return codec;\n\n            default:\n                throw new Error(\"Encoding not recognized: '\" + encoding + \"' (searched as: '\"+enc+\"')\");\n        }\n    }\n}\n\niconv._canonicalizeEncoding = function(encoding) {\n    // Canonicalize encoding name: strip all non-alphanumeric chars and appended year.\n    return (''+encoding).toLowerCase().replace(/:\\d{4}$|[^0-9a-z]/g, \"\");\n}\n\niconv.getEncoder = function getEncoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        encoder = new codec.encoder(options, codec);\n\n    if (codec.bomAware && options && options.addBOM)\n        encoder = new bomHandling.PrependBOM(encoder, options);\n\n    return encoder;\n}\n\niconv.getDecoder = function getDecoder(encoding, options) {\n    var codec = iconv.getCodec(encoding),\n        decoder = new codec.decoder(options, codec);\n\n    if (codec.bomAware && !(options && options.stripBOM === false))\n        decoder = new bomHandling.StripBOM(decoder, options);\n\n    return decoder;\n}\n\n// Streaming API\n// NOTE: Streaming API naturally depends on 'stream' module from Node.js. Unfortunately in browser environments this module can add\n// up to 100Kb to the output bundle. To avoid unnecessary code bloat, we don't enable Streaming API in browser by default.\n// If you would like to enable it explicitly, please add the following code to your app:\n// > iconv.enableStreamingAPI(require('stream'));\niconv.enableStreamingAPI = function enableStreamingAPI(stream_module) {\n    if (iconv.supportsStreams)\n        return;\n\n    // Dependency-inject stream module to create IconvLite stream classes.\n    var streams = require(\"./streams\")(stream_module);\n\n    // Not public API yet, but expose the stream classes.\n    iconv.IconvLiteEncoderStream = streams.IconvLiteEncoderStream;\n    iconv.IconvLiteDecoderStream = streams.IconvLiteDecoderStream;\n\n    // Streaming API.\n    iconv.encodeStream = function encodeStream(encoding, options) {\n        return new iconv.IconvLiteEncoderStream(iconv.getEncoder(encoding, options), options);\n    }\n\n    iconv.decodeStream = function decodeStream(encoding, options) {\n        return new iconv.IconvLiteDecoderStream(iconv.getDecoder(encoding, options), options);\n    }\n\n    iconv.supportsStreams = true;\n}\n\n// Enable Streaming API automatically if 'stream' module is available and non-empty (the majority of environments).\nvar stream_module;\ntry {\n    stream_module = require(\"stream\");\n} catch (e) {}\n\nif (stream_module && stream_module.Transform) {\n    iconv.enableStreamingAPI(stream_module);\n\n} else {\n    // In rare cases where 'stream' module is not available by default, throw a helpful exception.\n    iconv.encodeStream = iconv.decodeStream = function() {\n        throw new Error(\"iconv-lite Streaming API is not enabled. Use iconv.enableStreamingAPI(require('stream')); to enable it.\");\n    };\n}\n\nif (\"Ā\" != \"\\u0100\") {\n    console.error(\"iconv-lite warning: js files use non-utf8 encoding. See https://github.com/ashtuchkin/iconv-lite/wiki/Javascript-source-file-encodings for more info.\");\n}\n", "import iconv from 'iconv-lite';\n\nimport { type DataType } from '../data-type';\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF]);\n\nconst Text: DataType = {\n  id: 0x23,\n  type: 'TEXT',\n  name: 'Text',\n\n  hasTableName: true,\n\n  declaration: function() {\n    return 'text';\n  },\n\n  resolveLength: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return -1;\n    }\n  },\n\n  generateTypeInfo(parameter, _options) {\n    const buffer = Buffer.alloc(10);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeInt32LE(parameter.length!, 1);\n\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 5, 0, 5);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    const value = parameter.value as Buffer | null;\n\n    if (value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32LE(value.length, 0);\n    return buffer;\n  },\n\n  generateParameterData: function*(parameter, options) {\n    const value = parameter.value as Buffer | null;\n\n    if (value == null) {\n      return;\n    }\n\n    yield value;\n  },\n\n  validate: function(value, collation): Buffer | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    if (!collation) {\n      throw new Error('No collation was set by the server for the current connection.');\n    }\n\n    if (!collation.codepage) {\n      throw new Error('The collation set by the server has no associated encoding.');\n    }\n\n    return iconv.encode(value, collation.codepage);\n  }\n};\n\nexport default Text;\nmodule.exports = Text;\n", "const UPPER_CASE_MAP = [\n  '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0A', '0B', '0C', '0D', '0E', '0F',\n  '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1A', '1B', '1C', '1D', '1E', '1F',\n  '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2A', '2B', '2C', '2D', '2E', '2F',\n  '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3A', '3B', '3C', '3D', '3E', '3F',\n  '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4A', '4B', '4C', '4D', '4E', '4F',\n  '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5A', '5B', '5C', '5D', '5E', '5F',\n  '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6A', '6B', '6C', '6D', '6E', '6F',\n  '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7A', '7B', '7C', '7D', '7E', '7F',\n  '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8A', '8B', '8C', '8D', '8E', '8F',\n  '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9A', '9B', '9C', '9D', '9E', '9F',\n  'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'AA', 'AB', 'AC', 'AD', 'AE', 'AF',\n  'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'BA', 'BB', 'BC', 'BD', 'BE', 'BF',\n  'C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'CA', 'CB', 'CC', 'CD', 'CE', 'CF',\n  'D0', 'D1', 'D2', 'D3', 'D4', 'D5', 'D6', 'D7', 'D8', 'D9', 'DA', 'DB', 'DC', 'DD', 'DE', 'DF',\n  'E0', 'E1', 'E2', 'E3', 'E4', 'E5', 'E6', 'E7', 'E8', 'E9', 'EA', 'EB', 'EC', 'ED', 'EE', 'EF',\n  'F0', 'F1', 'F2', 'F3', 'F4', 'F5', 'F6', 'F7', 'F8', 'F9', 'FA', 'FB', 'FC', 'FD', 'FE', 'FF'\n];\n\nconst LOWER_CASE_MAP = [\n  '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f',\n  '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f',\n  '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f',\n  '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f',\n  '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f',\n  '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f',\n  '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f',\n  '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f',\n  '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f',\n  '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f',\n  'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af',\n  'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf',\n  'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf',\n  'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df',\n  'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef',\n  'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff'\n];\n\nexport function bufferToUpperCaseGuid(buffer: Buffer) {\n  return (\n    UPPER_CASE_MAP[buffer[3]] +\n    UPPER_CASE_MAP[buffer[2]] +\n    UPPER_CASE_MAP[buffer[1]] +\n    UPPER_CASE_MAP[buffer[0]] +\n    '-' +\n    UPPER_CASE_MAP[buffer[5]] +\n    UPPER_CASE_MAP[buffer[4]] +\n    '-' +\n    UPPER_CASE_MAP[buffer[7]] +\n    UPPER_CASE_MAP[buffer[6]] +\n    '-' +\n    UPPER_CASE_MAP[buffer[8]] +\n    UPPER_CASE_MAP[buffer[9]] +\n    '-' +\n    UPPER_CASE_MAP[buffer[10]] +\n    UPPER_CASE_MAP[buffer[11]] +\n    UPPER_CASE_MAP[buffer[12]] +\n    UPPER_CASE_MAP[buffer[13]] +\n    UPPER_CASE_MAP[buffer[14]] +\n    UPPER_CASE_MAP[buffer[15]]\n  );\n}\n\nexport function bufferToLowerCaseGuid(buffer: Buffer) {\n  return (\n    LOWER_CASE_MAP[buffer[3]] +\n    LOWER_CASE_MAP[buffer[2]] +\n    LOWER_CASE_MAP[buffer[1]] +\n    LOWER_CASE_MAP[buffer[0]] +\n    '-' +\n    LOWER_CASE_MAP[buffer[5]] +\n    LOWER_CASE_MAP[buffer[4]] +\n    '-' +\n    LOWER_CASE_MAP[buffer[7]] +\n    LOWER_CASE_MAP[buffer[6]] +\n    '-' +\n    LOWER_CASE_MAP[buffer[8]] +\n    LOWER_CASE_MAP[buffer[9]] +\n    '-' +\n    LOWER_CASE_MAP[buffer[10]] +\n    LOWER_CASE_MAP[buffer[11]] +\n    LOWER_CASE_MAP[buffer[12]] +\n    LOWER_CASE_MAP[buffer[13]] +\n    LOWER_CASE_MAP[buffer[14]] +\n    LOWER_CASE_MAP[buffer[15]]\n  );\n}\n\nconst CHARCODEMAP: { [key: number]: { [key: number]: number } } = {};\n\nconst hexDigits = [\n  '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\n  'a', 'b', 'c', 'd', 'e', 'f',\n  'A', 'B', 'C', 'D', 'E', 'F'\n].map((d) => d.charCodeAt(0));\n\nfor (let i = 0; i < hexDigits.length; i++) {\n  const map: { [key: number]: number } = CHARCODEMAP[hexDigits[i]] = {};\n  for (let j = 0; j < hexDigits.length; j++) {\n    const hex = String.fromCharCode(hexDigits[i], hexDigits[j]);\n    const value = parseInt(hex, 16);\n    map[hexDigits[j]] = value;\n  }\n}\n\nexport function guidToArray(guid: string) {\n  return [\n    CHARCODEMAP[guid.charCodeAt(6)][guid.charCodeAt(7)],\n    CHARCODEMAP[guid.charCodeAt(4)][guid.charCodeAt(5)],\n    CHARCODEMAP[guid.charCodeAt(2)][guid.charCodeAt(3)],\n    CHARCODEMAP[guid.charCodeAt(0)][guid.charCodeAt(1)],\n    CHARCODEMAP[guid.charCodeAt(11)][guid.charCodeAt(12)],\n    CHARCODEMAP[guid.charCodeAt(9)][guid.charCodeAt(10)],\n    CHARCODEMAP[guid.charCodeAt(16)][guid.charCodeAt(17)],\n    CHARCODEMAP[guid.charCodeAt(14)][guid.charCodeAt(15)],\n    CHARCODEMAP[guid.charCodeAt(19)][guid.charCodeAt(20)],\n    CHARCODEMAP[guid.charCodeAt(21)][guid.charCodeAt(22)],\n    CHARCODEMAP[guid.charCodeAt(24)][guid.charCodeAt(25)],\n    CHARCODEMAP[guid.charCodeAt(26)][guid.charCodeAt(27)],\n    CHARCODEMAP[guid.charCodeAt(28)][guid.charCodeAt(29)],\n    CHARCODEMAP[guid.charCodeAt(30)][guid.charCodeAt(31)],\n    CHARCODEMAP[guid.charCodeAt(32)][guid.charCodeAt(33)],\n    CHARCODEMAP[guid.charCodeAt(34)][guid.charCodeAt(35)]\n  ];\n}\n", "import { type DataType } from '../data-type';\nimport { guidToArray } from '../guid-parser';\n\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x10]);\n\nconst UniqueIdentifier: DataType = {\n  id: 0x24,\n  type: 'GUIDN',\n  name: 'UniqueIdentifier',\n\n  declaration: function() {\n    return 'uniqueidentifier';\n  },\n\n  resolveLength: function() {\n    return 16;\n  },\n\n  generateTypeInfo() {\n    return Buffer.from([this.id, 0x10]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  generateParameterData: function*(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield Buffer.from(guidToArray(parameter.value));\n  },\n\n  validate: function(value): string | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    if (!/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/i.test(value)) {\n      throw new TypeError('Invalid GUID.');\n    }\n\n    return value;\n  }\n};\n\nexport default UniqueIdentifier;\nmodule.exports = UniqueIdentifier;\n", "import { type DataType } from '../data-type';\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF]);\n\nconst NText: DataType = {\n  id: 0x63,\n  type: 'NTEXT',\n  name: 'NText',\n\n  hasTableName: true,\n\n  declaration: function() {\n    return 'ntext';\n  },\n\n  resolveLength: function(parameter) {\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return -1;\n    }\n  },\n\n  generateTypeInfo(parameter, _options) {\n    const buffer = Buffer.alloc(10);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeInt32LE(parameter.length!, 1);\n\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 5, 0, 5);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(4);\n    buffer.writeInt32LE(Buffer.byteLength(parameter.value, 'ucs2'), 0);\n    return buffer;\n  },\n\n  generateParameterData: function*(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield Buffer.from(parameter.value.toString(), 'ucs2');\n  },\n\n  validate: function(value): string | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    return value;\n  }\n};\n\nexport default NText;\nmodule.exports = NText;\n", "import { type DataType } from '../data-type';\n\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\n\nconst VarBinary: { maximumLength: number } & DataType = {\n  id: 0xA5,\n  type: 'BIGVARBIN',\n  name: 'VarBinary',\n  maximumLength: 8000,\n\n  declaration: function(parameter) {\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'varbinary(' + length + ')';\n    } else {\n      return 'varbinary(max)';\n    }\n  },\n\n  resolveLength: function(parameter) {\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo: function(parameter) {\n    const buffer = Buffer.alloc(3);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length! <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length!, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      if (parameter.length! <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n\n    let value = parameter.value;\n    if (!Buffer.isBuffer(value)) {\n      value = value.toString();\n    }\n\n    const length = Buffer.byteLength(value, 'ucs2');\n\n    if (parameter.length! <= this.maximumLength) {\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      return buffer;\n    } else { // writePLPBody\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    let value = parameter.value;\n\n    if (parameter.length! <= this.maximumLength) {\n      if (Buffer.isBuffer(value)) {\n        yield value;\n      } else {\n        yield Buffer.from(value.toString(), 'ucs2');\n      }\n    } else { // writePLPBody\n      if (!Buffer.isBuffer(value)) {\n        value = value.toString();\n      }\n\n      const length = Buffer.byteLength(value, 'ucs2');\n\n      if (length > 0) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeUInt32LE(length, 0);\n        yield buffer;\n\n        if (Buffer.isBuffer(value)) {\n          yield value;\n        } else {\n          yield Buffer.from(value, 'ucs2');\n        }\n      }\n\n      yield PLP_TERMINATOR;\n    }\n  },\n\n  validate: function(value): Buffer | null {\n    if (value == null) {\n      return null;\n    }\n    if (!Buffer.isBuffer(value)) {\n      throw new TypeError('Invalid buffer.');\n    }\n    return value;\n  }\n};\n\nexport default VarBinary;\nmodule.exports = VarBinary;\n", "import iconv from 'iconv-lite';\n\nimport { type DataType } from '../data-type';\n\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\n\nconst VarChar: { maximumLength: number } & DataType = {\n  id: 0xA7,\n  type: 'BIGVARCHR',\n  name: 'VarChar',\n  maximumLength: 8000,\n\n  declaration: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'varchar(' + length + ')';\n    } else {\n      return 'varchar(max)';\n    }\n  },\n\n  resolveLength: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length || 1;\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length! <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length!, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    const value = parameter.value as Buffer | null;\n\n    if (value == null) {\n      if (parameter.length! <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n\n    if (parameter.length! <= this.maximumLength) {\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(value.length, 0);\n      return buffer;\n    } else {\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n\n  *generateParameterData(parameter, options) {\n    const value = parameter.value as Buffer | null;\n\n    if (value == null) {\n      return;\n    }\n\n    if (parameter.length! <= this.maximumLength) {\n      yield value;\n    } else {\n      if (value.length > 0) {\n        const buffer = Buffer.alloc(4);\n        buffer.writeUInt32LE(value.length, 0);\n        yield buffer;\n\n        yield value;\n      }\n\n      yield PLP_TERMINATOR;\n    }\n  },\n\n  validate: function(value, collation): Buffer | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    if (!collation) {\n      throw new Error('No collation was set by the server for the current connection.');\n    }\n\n    if (!collation.codepage) {\n      throw new Error('The collation set by the server has no associated encoding.');\n    }\n\n    return iconv.encode(value, collation.codepage);\n  }\n};\n\nexport default VarChar;\nmodule.exports = VarChar;\n", "import { type DataType } from '../data-type';\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\n\nconst Binary: { maximumLength: number } & DataType = {\n  id: 0xAD,\n  type: 'BIGBinary',\n  name: 'Binary',\n  maximumLength: 8000,\n\n  declaration: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    return 'binary(' + length + ')';\n  },\n\n  resolveLength: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    if (value != null) {\n      return value.length;\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(3);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeUInt16LE(parameter.length!, 1);\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(parameter.length!, 0);\n    return buffer;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield parameter.value.slice(0, parameter.length !== undefined ? Math.min(parameter.length, this.maximumLength) : this.maximumLength);\n  },\n\n  validate: function(value): Buffer | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (!Buffer.isBuffer(value)) {\n      throw new TypeError('Invalid buffer.');\n    }\n\n    return value;\n  }\n};\n\nexport default Binary;\nmodule.exports = Binary;\n", "import iconv from 'iconv-lite';\nimport { type DataType } from '../data-type';\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\n\nconst Char: { maximumLength: number } & DataType = {\n  id: 0xAF,\n  type: 'BIGCHAR',\n  name: 'Char',\n  maximumLength: 8000,\n\n  declaration: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length < this.maximumLength) {\n      return 'char(' + length + ')';\n    } else {\n      return 'char(' + this.maximumLength + ')';\n    }\n  },\n\n  // ParameterData<any> is temporary solution. TODO: need to understand what type ParameterData<...> can be.\n  resolveLength: function(parameter) {\n    const value = parameter.value as Buffer | null;\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      return value.length || 1;\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeUInt16LE(parameter.length!, 1);\n\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    const value = parameter.value as Buffer | null;\n\n    if (value == null) {\n      return NULL_LENGTH;\n    }\n\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(value.length, 0);\n    return buffer;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    yield Buffer.from(parameter.value, 'ascii');\n  },\n\n  validate: function(value, collation): Buffer | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    if (!collation) {\n      throw new Error('No collation was set by the server for the current connection.');\n    }\n\n    if (!collation.codepage) {\n      throw new Error('The collation set by the server has no associated encoding.');\n    }\n\n    return iconv.encode(value, collation.codepage);\n  }\n};\n\nexport default Char;\nmodule.exports = Char;\n", "import { type DataType } from '../data-type';\n\nconst MAX = (1 << 16) - 1;\nconst UNKNOWN_PLP_LEN = Buffer.from([0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff]);\nconst PLP_TERMINATOR = Buffer.from([0x00, 0x00, 0x00, 0x00]);\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\nconst MAX_NULL_LENGTH = Buffer.from([0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF]);\n\nconst NVarChar: { maximumLength: number } & DataType = {\n  id: 0xE7,\n  type: 'NVARCHAR',\n  name: 'NVarChar',\n  maximumLength: 4000,\n\n  declaration: function(parameter) {\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (value != null) {\n      length = value.toString().length || 1;\n    } else if (value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length <= this.maximumLength) {\n      return 'nvarchar(' + length + ')';\n    } else {\n      return 'nvarchar(max)';\n    }\n  },\n\n  resolveLength: function(parameter) {\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (value != null) {\n      if (Buffer.isBuffer(value)) {\n        return (value.length / 2) || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n\n    if (parameter.length! <= this.maximumLength) {\n      buffer.writeUInt16LE(parameter.length! * 2, 1);\n    } else {\n      buffer.writeUInt16LE(MAX, 1);\n    }\n\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      if (parameter.length! <= this.maximumLength) {\n        return NULL_LENGTH;\n      } else {\n        return MAX_NULL_LENGTH;\n      }\n    }\n\n    let value = parameter.value;\n    if (parameter.length! <= this.maximumLength) {\n      let length;\n      if (value instanceof Buffer) {\n        length = value.length;\n      } else {\n        value = value.toString();\n        length = Buffer.byteLength(value, 'ucs2');\n      }\n\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      return buffer;\n    } else {\n      return UNKNOWN_PLP_LEN;\n    }\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    let value = parameter.value;\n\n    if (parameter.length! <= this.maximumLength) {\n      if (value instanceof Buffer) {\n        yield value;\n      } else {\n        value = value.toString();\n        yield Buffer.from(value, 'ucs2');\n      }\n    } else {\n      if (value instanceof Buffer) {\n        const length = value.length;\n\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield value;\n        }\n      } else {\n        value = value.toString();\n        const length = Buffer.byteLength(value, 'ucs2');\n\n        if (length > 0) {\n          const buffer = Buffer.alloc(4);\n          buffer.writeUInt32LE(length, 0);\n          yield buffer;\n          yield Buffer.from(value, 'ucs2');\n        }\n      }\n\n      yield PLP_TERMINATOR;\n    }\n  },\n\n  validate: function(value): null | string {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    return value;\n  }\n};\n\nexport default NVarChar;\nmodule.exports = NVarChar;\n", "import { type DataType } from '../data-type';\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\n\nconst NChar: DataType & { maximumLength: number } = {\n  id: 0xEF,\n  type: 'NCHAR',\n  name: 'NChar',\n  maximumLength: 4000,\n\n  declaration: function(parameter) {\n    // const value = parameter.value as null | string | { toString(): string };\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n\n    let length;\n    if (parameter.length) {\n      length = parameter.length;\n    } else if (parameter.value != null) {\n      length = value.toString().length || 1;\n    } else if (parameter.value === null && !parameter.output) {\n      length = 1;\n    } else {\n      length = this.maximumLength;\n    }\n\n    if (length < this.maximumLength) {\n      return 'nchar(' + length + ')';\n    } else {\n      return 'nchar(' + this.maximumLength + ')';\n    }\n  },\n\n  resolveLength: function(parameter) {\n    // const value = parameter.value as null | string | { toString(): string };\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n\n    if (parameter.length != null) {\n      return parameter.length;\n    } else if (parameter.value != null) {\n      if (Buffer.isBuffer(parameter.value)) {\n        return (parameter.value.length / 2) || 1;\n      } else {\n        return value.toString().length || 1;\n      }\n    } else {\n      return this.maximumLength;\n    }\n  },\n\n  generateTypeInfo: function(parameter) {\n    const buffer = Buffer.alloc(8);\n    buffer.writeUInt8(this.id, 0);\n    buffer.writeUInt16LE(parameter.length! * 2, 1);\n\n    if (parameter.collation) {\n      parameter.collation.toBuffer().copy(buffer, 3, 0, 5);\n    }\n\n    return buffer;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const { value } = parameter;\n    if (value instanceof Buffer) {\n      const length = value.length;\n      const buffer = Buffer.alloc(2);\n\n      buffer.writeUInt16LE(length, 0);\n\n      return buffer;\n    } else {\n      const length = Buffer.byteLength(value.toString(), 'ucs2');\n\n      const buffer = Buffer.alloc(2);\n      buffer.writeUInt16LE(length, 0);\n      return buffer;\n    }\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value;\n    if (value instanceof Buffer) {\n      yield value;\n    } else {\n      yield Buffer.from(value, 'ucs2');\n    }\n  },\n\n  validate: function(value): string | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'string') {\n      throw new TypeError('Invalid string.');\n    }\n\n    return value;\n  }\n};\n\nexport default NChar;\nmodule.exports = NChar;\n", "import { type DataType } from '../data-type';\n\nconst XML: DataType = {\n  id: 0xF1,\n  type: 'XML',\n  name: 'Xml',\n\n  declaration() {\n    throw new Error('not implemented');\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default XML;\nmodule.exports = XML;\n", "import { type DataType } from '../data-type';\nimport WritableTrackingBuffer from '../tracking-buffer/writable-tracking-buffer';\n\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst Time: DataType = {\n  id: 0x29,\n  type: 'TIMEN',\n  name: 'Time',\n\n  declaration: function(parameter) {\n    return 'time(' + (this.resolveScale!(parameter)) + ')';\n  },\n\n  resolveScale: function(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    return Buffer.from([this.id, parameter.scale!]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    switch (parameter.scale) {\n      case 0:\n      case 1:\n      case 2:\n        return Buffer.from([0x03]);\n      case 3:\n      case 4:\n        return Buffer.from([0x04]);\n      case 5:\n      case 6:\n      case 7:\n        return Buffer.from([0x05]);\n      default:\n        throw new Error('invalid scale');\n    }\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const buffer = new WritableTrackingBuffer(16);\n    const time = parameter.value;\n\n    let timestamp;\n    if (options.useUTC) {\n      timestamp = ((time.getUTCHours() * 60 + time.getUTCMinutes()) * 60 + time.getUTCSeconds()) * 1000 + time.getUTCMilliseconds();\n    } else {\n      timestamp = ((time.getHours() * 60 + time.getMinutes()) * 60 + time.getSeconds()) * 1000 + time.getMilliseconds();\n    }\n\n    timestamp = timestamp * Math.pow(10, parameter.scale! - 3);\n    timestamp += (parameter.value.nanosecondDelta != null ? parameter.value.nanosecondDelta : 0) * Math.pow(10, parameter.scale!);\n    timestamp = Math.round(timestamp);\n\n    switch (parameter.scale) {\n      case 0:\n      case 1:\n      case 2:\n        buffer.writeUInt24LE(timestamp);\n        break;\n      case 3:\n      case 4:\n        buffer.writeUInt32LE(timestamp);\n        break;\n      case 5:\n      case 6:\n      case 7:\n        buffer.writeUInt40LE(timestamp);\n    }\n\n    yield buffer.data;\n  },\n\n  validate: function(value): null | number | Date {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid time.');\n    }\n\n    return value;\n  }\n};\n\n\nexport default Time;\nmodule.exports = Time;\n", "import { type DataType } from '../data-type';\nimport { ChronoUnit, LocalDate } from '@js-joda/core';\n\n// globalDate is to be used for JavaScript's global 'Date' object to avoid name clashing with the 'Date' constant below\nconst globalDate = global.Date;\nconst EPOCH_DATE = LocalDate.ofYearDay(1, 1);\nconst NULL_LENGTH = Buffer.from([0x00]);\nconst DATA_LENGTH = Buffer.from([0x03]);\n\nconst Date: DataType = {\n  id: 0x28,\n  type: 'DATEN',\n  name: 'Date',\n\n  declaration: function() {\n    return 'date';\n  },\n\n  generateTypeInfo: function() {\n    return Buffer.from([this.id]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    return DATA_LENGTH;\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n\n    let date: LocalDate;\n    if (options.useUTC) {\n      date = LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    } else {\n      date = LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n    }\n\n    const days = EPOCH_DATE.until(date, ChronoUnit.DAYS);\n    const buffer = Buffer.alloc(3);\n    buffer.writeUIntLE(days, 0, 3);\n    yield buffer;\n  },\n\n  // TODO: value is technically of type 'unknown'.\n  validate: function(value, collation, options): null | Date {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof globalDate)) {\n      value = new globalDate(globalDate.parse(value));\n    }\n\n    value = value as Date;\n\n    let year;\n    if (options && options.useUTC) {\n      year = value.getUTCFullYear();\n    } else {\n      year = value.getFullYear();\n    }\n\n    if (year < 1 || year > 9999) {\n      throw new TypeError('Out of range.');\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\n\nexport default Date;\nmodule.exports = Date;\n", "import { type DataType } from '../data-type';\nimport { ChronoUnit, LocalDate } from '@js-joda/core';\nimport WritableTrackingBuffer from '../tracking-buffer/writable-tracking-buffer';\n\nconst EPOCH_DATE = LocalDate.ofYearDay(1, 1);\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst DateTime2: DataType & { resolveScale: NonNullable<DataType['resolveScale']> } = {\n  id: 0x2A,\n  type: 'DATETIME2N',\n  name: 'DateTime2',\n\n  declaration: function(parameter) {\n    return 'datetime2(' + (this.resolveScale(parameter)) + ')';\n  },\n\n  resolveScale: function(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n\n  generateTypeInfo(parameter, _options) {\n    return Buffer.from([this.id, parameter.scale!]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    switch (parameter.scale!) {\n      case 0:\n      case 1:\n      case 2:\n        return Buffer.from([0x06]);\n\n      case 3:\n      case 4:\n        return Buffer.from([0x07]);\n\n      case 5:\n      case 6:\n      case 7:\n        return Buffer.from([0x08]);\n\n      default:\n        throw new Error('invalid scale');\n    }\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value;\n    let scale = parameter.scale;\n\n    const buffer = new WritableTrackingBuffer(16);\n    scale = scale!;\n\n    let timestamp: number;\n    if (options.useUTC) {\n      timestamp = ((value.getUTCHours() * 60 + value.getUTCMinutes()) * 60 + value.getUTCSeconds()) * 1000 + value.getUTCMilliseconds();\n    } else {\n      timestamp = ((value.getHours() * 60 + value.getMinutes()) * 60 + value.getSeconds()) * 1000 + value.getMilliseconds();\n    }\n    timestamp = timestamp * Math.pow(10, scale - 3);\n    timestamp += (value.nanosecondDelta != null ? value.nanosecondDelta : 0) * Math.pow(10, scale);\n    timestamp = Math.round(timestamp);\n\n    switch (scale) {\n      case 0:\n      case 1:\n      case 2:\n        buffer.writeUInt24LE(timestamp);\n        break;\n      case 3:\n      case 4:\n        buffer.writeUInt32LE(timestamp);\n        break;\n      case 5:\n      case 6:\n      case 7:\n        buffer.writeUInt40LE(timestamp);\n    }\n\n    let date;\n    if (options.useUTC) {\n      date = LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    } else {\n      date = LocalDate.of(value.getFullYear(), value.getMonth() + 1, value.getDate());\n    }\n\n    const days = EPOCH_DATE.until(date, ChronoUnit.DAYS);\n    buffer.writeUInt24LE(days);\n    yield buffer.data;\n  },\n\n  validate: function(value: any, collation, options): null | number {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    value = value as Date;\n\n    let year;\n    if (options && options.useUTC) {\n      year = value.getUTCFullYear();\n    } else {\n      year = value.getFullYear();\n    }\n\n    if (year < 1 || year > 9999) {\n      throw new TypeError('Out of range.');\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\n\nexport default DateTime2;\nmodule.exports = DateTime2;\n", "import { type DataType } from '../data-type';\nimport { ChronoUnit, LocalDate } from '@js-joda/core';\nimport WritableTrackingBuffer from '../tracking-buffer/writable-tracking-buffer';\n\nconst EPOCH_DATE = LocalDate.ofYearDay(1, 1);\nconst NULL_LENGTH = Buffer.from([0x00]);\n\nconst DateTimeOffset: DataType & { resolveScale: NonNullable<DataType['resolveScale']> } = {\n  id: 0x2B,\n  type: 'DATETIMEOFFSETN',\n  name: 'DateTimeOffset',\n  declaration: function(parameter) {\n    return 'datetimeoffset(' + (this.resolveScale(parameter)) + ')';\n  },\n  resolveScale: function(parameter) {\n    if (parameter.scale != null) {\n      return parameter.scale;\n    } else if (parameter.value === null) {\n      return 0;\n    } else {\n      return 7;\n    }\n  },\n\n  generateTypeInfo(parameter) {\n    return Buffer.from([this.id, parameter.scale!]);\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    switch (parameter.scale) {\n      case 0:\n      case 1:\n      case 2:\n        return Buffer.from([0x08]);\n\n      case 3:\n      case 4:\n        return Buffer.from([0x09]);\n\n      case 5:\n      case 6:\n      case 7:\n        return Buffer.from([0x0A]);\n\n      default:\n        throw new Error('invalid scale');\n    }\n  },\n\n  * generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      return;\n    }\n\n    const value = parameter.value;\n    let scale = parameter.scale;\n\n    const buffer = new WritableTrackingBuffer(16);\n    scale = scale!;\n\n    let timestamp: number;\n    timestamp = ((value.getUTCHours() * 60 + value.getUTCMinutes()) * 60 + value.getUTCSeconds()) * 1000 + value.getMilliseconds();\n    timestamp = timestamp * Math.pow(10, scale - 3);\n    timestamp += (value.nanosecondDelta != null ? value.nanosecondDelta : 0) * Math.pow(10, scale);\n    timestamp = Math.round(timestamp);\n\n    switch (scale) {\n      case 0:\n      case 1:\n      case 2:\n        buffer.writeUInt24LE(timestamp);\n        break;\n      case 3:\n      case 4:\n        buffer.writeUInt32LE(timestamp);\n        break;\n      case 5:\n      case 6:\n      case 7:\n        buffer.writeUInt40LE(timestamp);\n    }\n\n    const date = LocalDate.of(value.getUTCFullYear(), value.getUTCMonth() + 1, value.getUTCDate());\n    const days = EPOCH_DATE.until(date, ChronoUnit.DAYS);\n    buffer.writeUInt24LE(days);\n\n    const offset = -value.getTimezoneOffset();\n    buffer.writeInt16LE(offset);\n    yield buffer.data;\n  },\n  validate: function(value: any, collation, options): null | number {\n    if (value == null) {\n      return null;\n    }\n\n    if (!(value instanceof Date)) {\n      value = new Date(Date.parse(value));\n    }\n\n    value = value as Date;\n\n    let year;\n    if (options && options.useUTC) {\n      year = value.getUTCFullYear();\n    } else {\n      year = value.getFullYear();\n    }\n\n    if (year < 1 || year > 9999) {\n      throw new TypeError('Out of range.');\n    }\n\n    if (isNaN(value)) {\n      throw new TypeError('Invalid date.');\n    }\n\n    return value;\n  }\n};\n\nexport default DateTimeOffset;\nmodule.exports = DateTimeOffset;\n", "import { type DataType } from '../data-type';\n\nconst UDT: DataType = {\n  id: 0xF0,\n  type: 'UDTTYPE',\n  name: 'UDT',\n\n  declaration() {\n    throw new Error('not implemented');\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default UDT;\nmodule.exports = UDT;\n", "import { type DataType } from '../data-type';\nimport WritableTrackingBuffer from '../tracking-buffer/writable-tracking-buffer';\n\nconst TVP_ROW_TOKEN = Buffer.from([0x01]);\nconst TVP_END_TOKEN = Buffer.from([0x00]);\n\nconst NULL_LENGTH = Buffer.from([0xFF, 0xFF]);\n\nconst TVP: DataType = {\n  id: 0xF3,\n  type: 'TVPTYPE',\n  name: 'TVP',\n\n  declaration: function(parameter) {\n    const value = parameter.value as any; // Temporary solution. Remove 'any' later.\n    return value.name + ' readonly';\n  },\n\n  generateTypeInfo(parameter) {\n    const databaseName = '';\n    const schema = parameter.value?.schema ?? '';\n    const typeName = parameter.value?.name ?? '';\n\n    const bufferLength = 1 +\n      1 + Buffer.byteLength(databaseName, 'ucs2') +\n      1 + Buffer.byteLength(schema, 'ucs2') +\n      1 + Buffer.byteLength(typeName, 'ucs2');\n\n    const buffer = new WritableTrackingBuffer(bufferLength, 'ucs2');\n    buffer.writeUInt8(this.id);\n    buffer.writeBVarchar(databaseName);\n    buffer.writeBVarchar(schema);\n    buffer.writeBVarchar(typeName);\n\n    return buffer.data;\n  },\n\n  generateParameterLength(parameter, options) {\n    if (parameter.value == null) {\n      return NULL_LENGTH;\n    }\n\n    const { columns } = parameter.value;\n    const buffer = Buffer.alloc(2);\n    buffer.writeUInt16LE(columns.length, 0);\n    return buffer;\n  },\n\n  *generateParameterData(parameter, options) {\n    if (parameter.value == null) {\n      yield TVP_END_TOKEN;\n      yield TVP_END_TOKEN;\n      return;\n    }\n\n    const { columns, rows } = parameter.value;\n\n    for (let i = 0, len = columns.length; i < len; i++) {\n      const column = columns[i];\n\n      const buff = Buffer.alloc(6);\n      // UserType\n      buff.writeUInt32LE(0x00000000, 0);\n\n      // Flags\n      buff.writeUInt16LE(0x0000, 4);\n      yield buff;\n\n      // TYPE_INFO\n      yield column.type.generateTypeInfo(column);\n\n      // ColName\n      yield Buffer.from([0x00]);\n    }\n\n    yield TVP_END_TOKEN;\n\n    for (let i = 0, length = rows.length; i < length; i++) {\n      yield TVP_ROW_TOKEN;\n\n      const row = rows[i];\n      for (let k = 0, len2 = row.length; k < len2; k++) {\n        const column = columns[k];\n        const value = row[k];\n\n        const param = {\n          value: column.type.validate(value, parameter.collation),\n          length: column.length,\n          scale: column.scale,\n          precision: column.precision\n        };\n\n        // TvpColumnData\n        yield column.type.generateParameterLength(param, options);\n        yield * column.type.generateParameterData(param, options);\n      }\n    }\n\n    yield TVP_END_TOKEN;\n  },\n\n  validate: function(value): Buffer | null {\n    if (value == null) {\n      return null;\n    }\n\n    if (typeof value !== 'object') {\n      throw new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.columns)) {\n      throw new TypeError('Invalid table.');\n    }\n\n    if (!Array.isArray(value.rows)) {\n      throw new TypeError('Invalid table.');\n    }\n\n    return value;\n  }\n};\n\nexport default TVP;\nmodule.exports = TVP;\n", "import { type DataType } from '../data-type';\n\nconst Variant: DataType = {\n  id: 0x62,\n  type: 'SSVARIANTTYPE',\n  name: 'Variant',\n\n  declaration: function() {\n    return 'sql_variant';\n  },\n\n  generateTypeInfo() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterLength() {\n    throw new Error('not implemented');\n  },\n\n  generateParameterData() {\n    throw new Error('not implemented');\n  },\n\n  validate() {\n    throw new Error('not implemented');\n  }\n};\n\nexport default Variant;\nmodule.exports = Variant;\n", "import Null from './data-types/null';\nimport TinyInt from './data-types/tinyint';\nimport Bit from './data-types/bit';\nimport SmallInt from './data-types/smallint';\nimport Int from './data-types/int';\nimport SmallDateTime from './data-types/smalldatetime';\nimport Real from './data-types/real';\nimport Money from './data-types/money';\nimport DateTime from './data-types/datetime';\nimport Float from './data-types/float';\nimport Decimal from './data-types/decimal';\nimport Numeric from './data-types/numeric';\nimport SmallMoney from './data-types/smallmoney';\nimport BigInt from './data-types/bigint';\nimport Image from './data-types/image';\nimport Text from './data-types/text';\nimport UniqueIdentifier from './data-types/uniqueidentifier';\nimport IntN from './data-types/intn';\nimport NText from './data-types/ntext';\nimport BitN from './data-types/bitn';\nimport DecimalN from './data-types/decimaln';\nimport NumericN from './data-types/numericn';\nimport FloatN from './data-types/floatn';\nimport MoneyN from './data-types/moneyn';\nimport DateTimeN from './data-types/datetimen';\nimport VarBinary from './data-types/varbinary';\nimport VarChar from './data-types/varchar';\nimport Binary from './data-types/binary';\nimport Char from './data-types/char';\nimport NVarChar from './data-types/nvarchar';\nimport NChar from './data-types/nchar';\nimport Xml from './data-types/xml';\nimport Time from './data-types/time';\nimport Date from './data-types/date';\nimport DateTime2 from './data-types/datetime2';\nimport DateTimeOffset from './data-types/datetimeoffset';\nimport UDT from './data-types/udt';\nimport TVP from './data-types/tvp';\nimport Variant from './data-types/sql-variant';\nimport { type CryptoMetadata } from './always-encrypted/types';\n\nimport { type InternalConnectionOptions } from './connection';\nimport { Collation } from './collation';\n\nexport interface Parameter {\n  type: DataType;\n  name: string;\n\n  value: unknown;\n\n  output: boolean;\n  length?: number | undefined;\n  precision?: number | undefined;\n  scale?: number | undefined;\n\n  nullable?: boolean | undefined;\n\n  forceEncrypt?: boolean | undefined;\n  cryptoMetadata?: CryptoMetadata | undefined;\n  encryptedVal?: Buffer | undefined;\n}\n\n\nexport interface ParameterData<T = any> {\n  length?: number | undefined;\n  scale?: number | undefined;\n  precision?: number | undefined;\n\n  collation?: Collation | undefined;\n\n  value: T;\n}\n\nexport interface DataType {\n  id: number;\n  type: string;\n  name: string;\n\n  declaration(parameter: Parameter): string;\n  generateTypeInfo(parameter: ParameterData, options: InternalConnectionOptions): Buffer;\n  generateParameterLength(parameter: ParameterData, options: InternalConnectionOptions): Buffer;\n  generateParameterData(parameter: ParameterData, options: InternalConnectionOptions): Generator<Buffer, void>;\n  validate(value: any, collation: Collation | undefined, options?: InternalConnectionOptions): any; // TODO: Refactor 'any' and replace with more specific type.\n\n  hasTableName?: boolean;\n\n  resolveLength?: (parameter: Parameter) => number;\n  resolvePrecision?: (parameter: Parameter) => number;\n  resolveScale?: (parameter: Parameter) => number;\n}\n\nexport const TYPE = {\n  [Null.id]: Null,\n  [TinyInt.id]: TinyInt,\n  [Bit.id]: Bit,\n  [SmallInt.id]: SmallInt,\n  [Int.id]: Int,\n  [SmallDateTime.id]: SmallDateTime,\n  [Real.id]: Real,\n  [Money.id]: Money,\n  [DateTime.id]: DateTime,\n  [Float.id]: Float,\n  [Decimal.id]: Decimal,\n  [Numeric.id]: Numeric,\n  [SmallMoney.id]: SmallMoney,\n  [BigInt.id]: BigInt,\n  [Image.id]: Image,\n  [Text.id]: Text,\n  [UniqueIdentifier.id]: UniqueIdentifier,\n  [IntN.id]: IntN,\n  [NText.id]: NText,\n  [BitN.id]: BitN,\n  [DecimalN.id]: DecimalN,\n  [NumericN.id]: NumericN,\n  [FloatN.id]: FloatN,\n  [MoneyN.id]: MoneyN,\n  [DateTimeN.id]: DateTimeN,\n  [VarBinary.id]: VarBinary,\n  [VarChar.id]: VarChar,\n  [Binary.id]: Binary,\n  [Char.id]: Char,\n  [NVarChar.id]: NVarChar,\n  [NChar.id]: NChar,\n  [Xml.id]: Xml,\n  [Time.id]: Time,\n  [Date.id]: Date,\n  [DateTime2.id]: DateTime2,\n  [DateTimeOffset.id]: DateTimeOffset,\n  [UDT.id]: UDT,\n  [TVP.id]: TVP,\n  [Variant.id]: Variant,\n};\n\n/**\n * <table>\n * <thead>\n *   <tr>\n *     <th>Type</th>\n *     <th>Constant</th>\n *     <th>JavaScript</th>\n *     <th>Result set</th>\n *     <th>Parameter</th>\n *   </tr>\n * </thead>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Exact numerics</th>\n *   </tr>\n *   <tr>\n *     <td><code>bit</code></td>\n *     <td><code>[[TYPES.Bit]]</code></td>\n *     <td><code>boolean</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>tinyint</code></td>\n *     <td><code>[[TYPES.TinyInt]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>smallint</code></td>\n *     <td><code>[[TYPES.SmallInt]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>int</code></td>\n *     <td><code>[[TYPES.Int]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>bigint</code><sup>1</sup></td>\n *     <td><code>[[TYPES.BigInt]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>numeric</code><sup>2</sup></td>\n *     <td><code>[[TYPES.Numeric]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>decimal</code><sup>2</sup></td>\n *     <td><code>[[TYPES.Decimal]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>smallmoney</code></td>\n *     <td><code>[[TYPES.SmallMoney]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>money</code></td>\n *     <td><code>[[TYPES.Money]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Approximate numerics</th>\n *   </tr>\n *   <tr>\n *     <td><code>float</code></td>\n *     <td><code>[[TYPES.Float]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>real</code></td>\n *     <td><code>[[TYPES.Real]]</code></td>\n *     <td><code>number</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"4\">Date and Time</th>\n *   </tr>\n *   <tr>\n *     <td><code>smalldatetime</code></td>\n *     <td><code>[[TYPES.SmallDateTime]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>datetime</code></td>\n *     <td><code>[[TYPES.DateTime]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>datetime2</code></td>\n *     <td><code>[[TYPES.DateTime2]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>datetimeoffset</code></td>\n *     <td><code>[[TYPES.DateTimeOffset]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>time</code></td>\n *     <td><code>[[TYPES.Time]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>date</code></td>\n *     <td><code>[[TYPES.Date]]</code></td>\n *     <td><code>Date</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"4\">Character Strings</th>\n *   </tr>\n *   <tr>\n *     <td><code>char</code></td>\n *     <td><code>[[TYPES.Char]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>varchar</code><sup>3</sup></td>\n *     <td><code>[[TYPES.VarChar]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>text</code></td>\n *     <td><code>[[TYPES.Text]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"4\">Unicode Strings</th>\n *   </tr>\n *   <tr>\n *     <td><code>nchar</code></td>\n *     <td><code>[[TYPES.NChar]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>nvarchar</code><sup>3</sup></td>\n *     <td><code>[[TYPES.NVarChar]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>ntext</code></td>\n *     <td><code>[[TYPES.NText]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Binary Strings<sup>4</sup></th>\n *   </tr>\n *   <tr>\n *     <td><code>binary</code></td>\n *     <td><code>[[TYPES.Binary]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>varbinary</code></td>\n *     <td><code>[[TYPES.VarBinary]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>image</code></td>\n *     <td><code>[[TYPES.Image]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n * </tbody>\n *\n * <tbody>\n *   <tr class=\"group-heading\">\n *     <th colspan=\"5\">Other Data Types</th>\n *   </tr>\n *   <tr>\n *     <td><code>TVP</code></td>\n *     <td><code>[[TYPES.TVP]]</code></td>\n *     <td><code>Object</code></td>\n *     <td>-</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>UDT</code></td>\n *     <td><code>[[TYPES.UDT]]</code></td>\n *     <td><code>Buffer</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n *   <tr>\n *     <td><code>uniqueidentifier</code><sup>4</sup></td>\n *     <td><code>[[TYPES.UniqueIdentifier]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>✓</td>\n *   </tr>\n *   <tr>\n *     <td><code>variant</code></td>\n *     <td><code>[[TYPES.Variant]]</code></td>\n *     <td><code>any</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n *   <tr>\n *     <td><code>xml</code></td>\n *     <td><code>[[TYPES.Xml]]</code></td>\n *     <td><code>string</code></td>\n *     <td>✓</td>\n *     <td>-</td>\n *   </tr>\n * </tbody>\n * </table>\n *\n * <ol>\n *   <li>\n *     <h4>BigInt</h4>\n *     <p>\n *       Values are returned as a string. This is because values can exceed 53 bits of significant data, which is greater than a\n *       Javascript <code>number</code> type can represent as an integer.\n *     </p>\n *   </li>\n *   <li>\n *     <h4>Numerical, Decimal</h4>\n *     <p>\n *       For input parameters, default precision is 18 and default scale is 0. Maximum supported precision is 19.\n *     </p>\n *   </li>\n *   <li>\n *     <h4>VarChar, NVarChar</h4>\n *     <p>\n *       <code>varchar(max)</code> and <code>nvarchar(max)</code> are also supported.\n *     </p>\n *   </li>\n *   <li>\n *     <h4>UniqueIdentifier</h4>\n *     <p>\n *       Values are returned as a 16 byte hexadecimal string.\n *     </p>\n *     <p>\n *       Note that the order of bytes is not the same as the character representation. See\n *       <a href=\"http://msdn.microsoft.com/en-us/library/ms190215.aspx\">Using uniqueidentifier Data</a>\n *       for an example of the different ordering of bytes.\n *     </p>\n *   </li>\n * </ol>\n */\nexport const TYPES = {\n  TinyInt,\n  Bit,\n  SmallInt,\n  Int,\n  SmallDateTime,\n  Real,\n  Money,\n  DateTime,\n  Float,\n  Decimal,\n  Numeric,\n  SmallMoney,\n  BigInt,\n  Image,\n  Text,\n  UniqueIdentifier,\n  NText,\n  VarBinary,\n  VarChar,\n  Binary,\n  Char,\n  NVarChar,\n  NChar,\n  Xml,\n  Time,\n  Date,\n  DateTime2,\n  DateTimeOffset,\n  UDT,\n  TVP,\n  Variant\n};\n\nexport const typeByName = TYPES;\n", "export class Result<T> {\n  declare value: T;\n  declare offset: number;\n\n  constructor(value: T, offset: number) {\n    this.value = value;\n    this.offset = offset;\n  }\n}\n\nexport class NotEnoughDataError extends Error {\n  byteCount: number;\n\n  constructor(byteCount: number) {\n    super();\n\n    this.byteCount = byteCount;\n  }\n}\n\nexport function readUInt8(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 1) {\n    throw new NotEnoughDataError(offset + 1);\n  }\n\n  return new Result(buf.readUInt8(offset), offset + 1);\n}\n\nexport function readUInt16LE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 2) {\n    throw new NotEnoughDataError(offset + 2);\n  }\n\n  return new Result(buf.readUInt16LE(offset), offset + 2);\n}\n\nexport function readInt16LE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 2) {\n    throw new NotEnoughDataError(offset + 2);\n  }\n\n  return new Result(buf.readInt16LE(offset), offset + 2);\n}\n\nexport function readUInt24LE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 3) {\n    throw new NotEnoughDataError(offset + 3);\n  }\n\n  return new Result(buf.readUIntLE(offset, 3), offset + 3);\n}\n\nexport function readUInt32LE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 4) {\n    throw new NotEnoughDataError(offset + 4);\n  }\n\n  return new Result(buf.readUInt32LE(offset), offset + 4);\n}\n\nexport function readUInt32BE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 4) {\n    throw new NotEnoughDataError(offset + 4);\n  }\n\n  return new Result(buf.readUInt32BE(offset), offset + 4);\n}\n\nexport function readUInt40LE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 5) {\n    throw new NotEnoughDataError(offset + 5);\n  }\n\n  return new Result(buf.readUIntLE(offset, 5), offset + 5);\n}\nexport function readInt32LE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 4) {\n    throw new NotEnoughDataError(offset + 4);\n  }\n\n  return new Result(buf.readInt32LE(offset), offset + 4);\n}\n\nexport function readBigUInt64LE(buf: Buffer, offset: number): Result<bigint> {\n  offset = +offset;\n\n  if (buf.length < offset + 8) {\n    throw new NotEnoughDataError(offset + 8);\n  }\n\n  return new Result(buf.readBigUInt64LE(offset), offset + 8);\n}\n\nexport function readBigInt64LE(buf: Buffer, offset: number): Result<bigint> {\n  offset = +offset;\n\n  if (buf.length < offset + 8) {\n    throw new NotEnoughDataError(offset + 8);\n  }\n\n  return new Result(buf.readBigInt64LE(offset), offset + 8);\n}\n\nexport function readFloatLE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 4) {\n    throw new NotEnoughDataError(offset + 4);\n  }\n\n  return new Result(buf.readFloatLE(offset), offset + 4);\n}\n\nexport function readDoubleLE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 8) {\n    throw new NotEnoughDataError(offset + 8);\n  }\n\n  return new Result(buf.readDoubleLE(offset), offset + 8);\n}\n\nexport function readBVarChar(buf: Buffer, offset: number): Result<string> {\n  offset = +offset;\n\n  let charCount;\n  ({ offset, value: charCount } = readUInt8(buf, offset));\n\n  const byteLength = charCount * 2;\n\n  if (buf.length < offset + byteLength) {\n    throw new NotEnoughDataError(offset + byteLength);\n  }\n\n  return new Result(buf.toString('ucs2', offset, offset + byteLength), offset + byteLength);\n}\n\nexport function readBVarByte(buf: Buffer, offset: number): Result<Buffer> {\n  offset = +offset;\n\n  let byteLength;\n  ({ offset, value: byteLength } = readUInt8(buf, offset));\n\n  if (buf.length < offset + byteLength) {\n    throw new NotEnoughDataError(offset + byteLength);\n  }\n\n  return new Result(buf.slice(offset, offset + byteLength), offset + byteLength);\n}\n\nexport function readUsVarChar(buf: Buffer, offset: number): Result<string> {\n  offset = +offset;\n\n  let charCount;\n  ({ offset, value: charCount } = readUInt16LE(buf, offset));\n\n  const byteLength = charCount * 2;\n\n  if (buf.length < offset + byteLength) {\n    throw new NotEnoughDataError(offset + byteLength);\n  }\n\n  return new Result(buf.toString('ucs2', offset, offset + byteLength), offset + byteLength);\n}\n\nexport function readUsVarByte(buf: Buffer, offset: number): Result<Buffer> {\n  offset = +offset;\n\n  let byteLength;\n  ({ offset, value: byteLength } = readUInt16LE(buf, offset));\n\n  if (buf.length < offset + byteLength) {\n    throw new NotEnoughDataError(offset + byteLength);\n  }\n\n  return new Result(buf.slice(offset, offset + byteLength), offset + byteLength);\n}\n\nexport function readUNumeric64LE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 8) {\n    throw new NotEnoughDataError(offset + 8);\n  }\n\n  const low = buf.readUInt32LE(offset);\n  const high = buf.readUInt32LE(offset + 4);\n\n  return new Result((0x100000000 * high) + low, offset + 8);\n}\n\nexport function readUNumeric96LE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 12) {\n    throw new NotEnoughDataError(offset + 12);\n  }\n\n  const dword1 = buf.readUInt32LE(offset);\n  const dword2 = buf.readUInt32LE(offset + 4);\n  const dword3 = buf.readUInt32LE(offset + 8);\n\n  return new Result(dword1 + (0x100000000 * dword2) + (0x100000000 * 0x100000000 * dword3), offset + 12);\n}\n\nexport function readUNumeric128LE(buf: Buffer, offset: number): Result<number> {\n  offset = +offset;\n\n  if (buf.length < offset + 16) {\n    throw new NotEnoughDataError(offset + 16);\n  }\n\n  const dword1 = buf.readUInt32LE(offset);\n  const dword2 = buf.readUInt32LE(offset + 4);\n  const dword3 = buf.readUInt32LE(offset + 8);\n  const dword4 = buf.readUInt32LE(offset + 12);\n\n  return new Result(dword1 + (0x100000000 * dword2) + (0x100000000 * 0x100000000 * dword3) + (0x100000000 * 0x100000000 * 0x100000000 * dword4), offset + 16);\n}\n", "import { Collation } from './collation';\nimport Parser, { type ParserOptions } from './token/stream-parser';\nimport { TYPE, type DataType } from './data-type';\nimport { type CryptoMetadata } from './always-encrypted/types';\n\nimport { sprintf } from 'sprintf-js';\n\nimport { Result, NotEnoughDataError, readUInt8, readBVarChar, readUsVarChar, readUInt16LE, readUInt32LE } from './token/helpers';\n\ninterface XmlSchema {\n  dbname: string;\n  owningSchema: string;\n  xmlSchemaCollection: string;\n}\n\ninterface UdtInfo {\n  maxByteSize: number;\n  dbname: string;\n  owningSchema: string;\n  typeName: string;\n  assemblyName: string;\n}\n\nexport type BaseMetadata = {\n  userType: number;\n\n  flags: number;\n  /**\n   * The column's type, such as VarChar, Int or Binary.\n   */\n  type: DataType;\n\n  collation: Collation | undefined;\n  /**\n   * The precision. Only applicable to numeric and decimal.\n   */\n  precision: number | undefined;\n\n  /**\n   * The scale. Only applicable to numeric, decimal, time, datetime2 and datetimeoffset.\n   */\n  scale: number | undefined;\n\n  /**\n   * The length, for char, varchar, nvarchar and varbinary.\n   */\n  dataLength: number | undefined;\n\n  schema: XmlSchema | undefined;\n\n  udtInfo: UdtInfo | undefined;\n}\n\nexport type Metadata = {\n  cryptoMetadata?: CryptoMetadata;\n} & BaseMetadata;\n\nfunction readCollation(buf: Buffer, offset: number): Result<Collation> {\n  offset = +offset;\n\n  if (buf.length < offset + 5) {\n    throw new NotEnoughDataError(offset + 5);\n  }\n\n  const collation = Collation.fromBuffer(buf.slice(offset, offset + 5));\n  return new Result(collation, offset + 5);\n}\n\nfunction readSchema(buf: Buffer, offset: number): Result<XmlSchema | undefined> {\n  offset = +offset;\n\n  let schemaPresent;\n  ({ offset, value: schemaPresent } = readUInt8(buf, offset));\n\n  if (schemaPresent !== 0x01) {\n    return new Result(undefined, offset);\n  }\n\n  let dbname;\n  ({ offset, value: dbname } = readBVarChar(buf, offset));\n\n  let owningSchema;\n  ({ offset, value: owningSchema } = readBVarChar(buf, offset));\n\n  let xmlSchemaCollection;\n  ({ offset, value: xmlSchemaCollection } = readUsVarChar(buf, offset));\n\n  return new Result({ dbname, owningSchema, xmlSchemaCollection }, offset);\n}\n\nfunction readUDTInfo(buf: Buffer, offset: number): Result<UdtInfo> {\n  let maxByteSize;\n  ({ offset, value: maxByteSize } = readUInt16LE(buf, offset));\n\n  let dbname;\n  ({ offset, value: dbname } = readBVarChar(buf, offset));\n\n  let owningSchema;\n  ({ offset, value: owningSchema } = readBVarChar(buf, offset));\n\n  let typeName;\n  ({ offset, value: typeName } = readBVarChar(buf, offset));\n\n  let assemblyName;\n  ({ offset, value: assemblyName } = readUsVarChar(buf, offset));\n\n  return new Result({\n    maxByteSize: maxByteSize,\n    dbname: dbname,\n    owningSchema: owningSchema,\n    typeName: typeName,\n    assemblyName: assemblyName\n  }, offset);\n}\n\nfunction readMetadata(buf: Buffer, offset: number, options: ParserOptions): Result<Metadata> {\n  let userType;\n  ({ offset, value: userType } = (options.tdsVersion < '7_2' ? readUInt16LE : readUInt32LE)(buf, offset));\n\n  let flags;\n  ({ offset, value: flags } = readUInt16LE(buf, offset));\n\n  let typeNumber;\n  ({ offset, value: typeNumber } = readUInt8(buf, offset));\n\n  const type: DataType = TYPE[typeNumber];\n  if (!type) {\n    throw new Error(sprintf('Unrecognised data type 0x%02X', typeNumber));\n  }\n\n  switch (type.name) {\n    case 'Null':\n    case 'TinyInt':\n    case 'SmallInt':\n    case 'Int':\n    case 'BigInt':\n    case 'Real':\n    case 'Float':\n    case 'SmallMoney':\n    case 'Money':\n    case 'Bit':\n    case 'SmallDateTime':\n    case 'DateTime':\n    case 'Date':\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: undefined,\n        precision: undefined,\n        scale: undefined,\n        dataLength: undefined,\n        schema: undefined,\n        udtInfo: undefined\n      }, offset);\n\n    case 'IntN':\n    case 'FloatN':\n    case 'MoneyN':\n    case 'BitN':\n    case 'UniqueIdentifier':\n    case 'DateTimeN': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: undefined,\n        precision: undefined,\n        scale: undefined,\n        dataLength: dataLength,\n        schema: undefined,\n        udtInfo: undefined\n      }, offset);\n    }\n\n    case 'Variant': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt32LE(buf, offset));\n\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: undefined,\n        precision: undefined,\n        scale: undefined,\n        dataLength: dataLength,\n        schema: undefined,\n        udtInfo: undefined\n      }, offset);\n    }\n\n    case 'VarChar':\n    case 'Char':\n    case 'NVarChar':\n    case 'NChar': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt16LE(buf, offset));\n\n      let collation;\n      ({ offset, value: collation } = readCollation(buf, offset));\n\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: collation,\n        precision: undefined,\n        scale: undefined,\n        dataLength: dataLength,\n        schema: undefined,\n        udtInfo: undefined\n      }, offset);\n    }\n\n    case 'Text':\n    case 'NText': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt32LE(buf, offset));\n\n      let collation;\n      ({ offset, value: collation } = readCollation(buf, offset));\n\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: collation,\n        precision: undefined,\n        scale: undefined,\n        dataLength: dataLength,\n        schema: undefined,\n        udtInfo: undefined\n      }, offset);\n    }\n\n    case 'VarBinary':\n    case 'Binary': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt16LE(buf, offset));\n\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: undefined,\n        precision: undefined,\n        scale: undefined,\n        dataLength: dataLength,\n        schema: undefined,\n        udtInfo: undefined\n      }, offset);\n    }\n\n    case 'Image': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt32LE(buf, offset));\n\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: undefined,\n        precision: undefined,\n        scale: undefined,\n        dataLength: dataLength,\n        schema: undefined,\n        udtInfo: undefined\n      }, offset);\n    }\n\n    case 'Xml': {\n      let schema;\n      ({ offset, value: schema } = readSchema(buf, offset));\n\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: undefined,\n        precision: undefined,\n        scale: undefined,\n        dataLength: undefined,\n        schema: schema,\n        udtInfo: undefined\n      }, offset);\n    }\n\n    case 'Time':\n    case 'DateTime2':\n    case 'DateTimeOffset': {\n      let scale;\n      ({ offset, value: scale } = readUInt8(buf, offset));\n\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: undefined,\n        precision: undefined,\n        scale: scale,\n        dataLength: undefined,\n        schema: undefined,\n        udtInfo: undefined\n      }, offset);\n    }\n\n    case 'NumericN':\n    case 'DecimalN': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      let precision;\n      ({ offset, value: precision } = readUInt8(buf, offset));\n\n      let scale;\n      ({ offset, value: scale } = readUInt8(buf, offset));\n\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: undefined,\n        precision: precision,\n        scale: scale,\n        dataLength: dataLength,\n        schema: undefined,\n        udtInfo: undefined\n      }, offset);\n    }\n\n    case 'UDT': {\n      let udtInfo;\n      ({ offset, value: udtInfo } = readUDTInfo(buf, offset));\n\n      return new Result({\n        userType: userType,\n        flags: flags,\n        type: type,\n        collation: undefined,\n        precision: undefined,\n        scale: undefined,\n        dataLength: undefined,\n        schema: undefined,\n        udtInfo: udtInfo\n      }, offset);\n    }\n\n    default:\n      throw new Error(sprintf('Unrecognised type %s', type.name));\n  }\n}\n\nfunction metadataParse(parser: Parser, options: ParserOptions, callback: (metadata: Metadata) => void) {\n  (async () => {\n    while (true) {\n      let result;\n      try {\n        result = readMetadata(parser.buffer, parser.position, options);\n      } catch (err: any) {\n        if (err instanceof NotEnoughDataError) {\n          await parser.waitForChunk();\n          continue;\n        }\n\n        throw err;\n      }\n\n      parser.position = result.offset;\n      return callback(result.value);\n    }\n  })();\n}\n\nexport default metadataParse;\nexport { readCollation, readMetadata };\n\nmodule.exports = metadataParse;\nmodule.exports.readCollation = readCollation;\nmodule.exports.readMetadata = readMetadata;\n", "import { readMetadata, type Metadata } from '../metadata-parser';\n\nimport Parser, { type ParserOptions } from './stream-parser';\nimport { ColMetadataToken } from './token';\nimport { NotEnoughDataError, Result, readBVarChar, readUInt16LE, readUInt8, readUsVarChar } from './helpers';\n\nexport interface ColumnMetadata extends Metadata {\n  /**\n   * The column's name。\n   */\n  colName: string;\n\n  tableName?: string | string[] | undefined;\n}\n\nfunction readTableName(buf: Buffer, offset: number, metadata: Metadata, options: ParserOptions): Result<string | string[] | undefined> {\n  if (!metadata.type.hasTableName) {\n    return new Result(undefined, offset);\n  }\n\n  if (options.tdsVersion < '7_2') {\n    return readUsVarChar(buf, offset);\n  }\n\n  let numberOfTableNameParts;\n  ({ offset, value: numberOfTableNameParts } = readUInt8(buf, offset));\n\n  const tableName: string[] = [];\n  for (let i = 0; i < numberOfTableNameParts; i++) {\n    let tableNamePart;\n    ({ offset, value: tableNamePart } = readUsVarChar(buf, offset));\n\n    tableName.push(tableNamePart);\n  }\n\n  return new Result(tableName, offset);\n}\n\nfunction readColumnName(buf: Buffer, offset: number, index: number, metadata: Metadata, options: ParserOptions): Result<string> {\n  let colName;\n  ({ offset, value: colName } = readBVarChar(buf, offset));\n\n  if (options.columnNameReplacer) {\n    return new Result(options.columnNameReplacer(colName, index, metadata), offset);\n  } else if (options.camelCaseColumns) {\n    return new Result(colName.replace(/^[A-Z]/, function(s) {\n      return s.toLowerCase();\n    }), offset);\n  } else {\n    return new Result(colName, offset);\n  }\n}\n\nfunction readColumn(buf: Buffer, offset: number, options: ParserOptions, index: number) {\n  let metadata;\n  ({ offset, value: metadata } = readMetadata(buf, offset, options));\n\n  let tableName;\n  ({ offset, value: tableName } = readTableName(buf, offset, metadata, options));\n\n  let colName;\n  ({ offset, value: colName } = readColumnName(buf, offset, index, metadata, options));\n\n  return new Result({\n    userType: metadata.userType,\n    flags: metadata.flags,\n    type: metadata.type,\n    collation: metadata.collation,\n    precision: metadata.precision,\n    scale: metadata.scale,\n    udtInfo: metadata.udtInfo,\n    dataLength: metadata.dataLength,\n    schema: metadata.schema,\n    colName: colName,\n    tableName: tableName\n  }, offset);\n}\n\nasync function colMetadataParser(parser: Parser): Promise<ColMetadataToken> {\n  let columnCount;\n\n  while (true) {\n    let offset;\n\n    try {\n      ({ offset, value: columnCount } = readUInt16LE(parser.buffer, parser.position));\n    } catch (err) {\n      if (err instanceof NotEnoughDataError) {\n        await parser.waitForChunk();\n        continue;\n      }\n\n      throw err;\n    }\n\n    parser.position = offset;\n    break;\n  }\n\n  const columns: ColumnMetadata[] = [];\n  for (let i = 0; i < columnCount; i++) {\n    while (true) {\n      let column: ColumnMetadata;\n      let offset;\n\n      try {\n        ({ offset, value: column } = readColumn(parser.buffer, parser.position, parser.options, i));\n      } catch (err: any) {\n        if (err instanceof NotEnoughDataError) {\n          await parser.waitForChunk();\n          continue;\n        }\n\n        throw err;\n      }\n\n      parser.position = offset;\n      columns.push(column);\n\n      break;\n    }\n  }\n\n  return new ColMetadataToken(columns);\n}\n\nexport default colMetadataParser;\nmodule.exports = colMetadataParser;\n", "import { type ParserOptions } from './stream-parser';\nimport { DoneToken, DoneInProcToken, DoneProcToken } from './token';\nimport { Result, readBigUInt64LE, readUInt16LE, readUInt32LE } from './helpers';\n\n// s2.2.7.5/6/7\n\nconst STATUS = {\n  MORE: 0x0001,\n  ERROR: 0x0002,\n  // This bit is not yet in use by SQL Server, so is not exposed in the returned token\n  INXACT: 0x0004,\n  COUNT: 0x0010,\n  ATTN: 0x0020,\n  SRVERROR: 0x0100\n};\n\ninterface TokenData {\n  more: boolean;\n  sqlError: boolean;\n  attention: boolean;\n  serverError: boolean;\n  rowCount: number | undefined;\n  curCmd: number;\n}\n\nfunction readToken(buf: Buffer, offset: number, options: ParserOptions): Result<TokenData> {\n  let status;\n  ({ offset, value: status } = readUInt16LE(buf, offset));\n\n  const more = !!(status & STATUS.MORE);\n  const sqlError = !!(status & STATUS.ERROR);\n  const rowCountValid = !!(status & STATUS.COUNT);\n  const attention = !!(status & STATUS.ATTN);\n  const serverError = !!(status & STATUS.SRVERROR);\n\n  let curCmd;\n  ({ offset, value: curCmd } = readUInt16LE(buf, offset));\n\n  let rowCount;\n  ({ offset, value: rowCount } = (options.tdsVersion < '7_2' ? readUInt32LE : readBigUInt64LE)(buf, offset));\n\n  return new Result({\n    more: more,\n    sqlError: sqlError,\n    attention: attention,\n    serverError: serverError,\n    rowCount: rowCountValid ? Number(rowCount) : undefined,\n    curCmd: curCmd\n  }, offset);\n}\n\nexport function doneParser(buf: Buffer, offset: number, options: ParserOptions): Result<DoneToken> {\n  let value;\n  ({ offset, value } = readToken(buf, offset, options));\n  return new Result(new DoneToken(value), offset);\n}\n\nexport function doneInProcParser(buf: Buffer, offset: number, options: ParserOptions): Result<DoneInProcToken> {\n  let value;\n  ({ offset, value } = readToken(buf, offset, options));\n  return new Result(new DoneInProcToken(value), offset);\n}\n\nexport function doneProcParser(buf: Buffer, offset: number, options: ParserOptions): Result<DoneProcToken> {\n  let value;\n  ({ offset, value } = readToken(buf, offset, options));\n  return new Result(new DoneProcToken(value), offset);\n}\n", "import { type ParserOptions } from './stream-parser';\nimport { Collation } from '../collation';\n\nimport {\n  DatabaseEnvChangeToken,\n  LanguageEnvChangeToken,\n  CharsetEnvChangeToken,\n  PacketSizeEnvChangeToken,\n  BeginTransactionEnvChangeToken,\n  CommitTransactionEnvChangeToken,\n  RollbackTransactionEnvChangeToken,\n  DatabaseMirroringPartnerEnvChangeToken,\n  ResetConnectionEnvChangeToken,\n  RoutingEnvChangeToken,\n  CollationChangeToken,\n  type EnvChangeToken\n} from './token';\n\nimport { NotEnoughDataError, readBVarByte, readBVarChar, readUInt16LE, readUInt8, readUsVarByte, Result } from './helpers';\n\nconst types: { [key: number]: { name: string, event?: string }} = {\n  1: {\n    name: 'DATABASE',\n    event: 'databaseChange'\n  },\n  2: {\n    name: 'LANGUAGE',\n    event: 'languageChange'\n  },\n  3: {\n    name: 'CHARSET',\n    event: 'charsetChange'\n  },\n  4: {\n    name: 'PACKET_SIZE',\n    event: 'packetSizeChange'\n  },\n  7: {\n    name: 'SQL_COLLATION',\n    event: 'sqlCollationChange'\n  },\n  8: {\n    name: 'BEGIN_TXN',\n    event: 'beginTransaction'\n  },\n  9: {\n    name: 'COMMIT_TXN',\n    event: 'commitTransaction'\n  },\n  10: {\n    name: 'ROLLBACK_TXN',\n    event: 'rollbackTransaction'\n  },\n  13: {\n    name: 'DATABASE_MIRRORING_PARTNER',\n    event: 'partnerNode'\n  },\n  17: {\n    name: 'TXN_ENDED'\n  },\n  18: {\n    name: 'RESET_CONNECTION',\n    event: 'resetConnection'\n  },\n  20: {\n    name: 'ROUTING_CHANGE',\n    event: 'routingChange'\n  }\n};\n\nfunction _readNewAndOldValue(buf: Buffer, offset: number, length: number, type: { name: string, event?: string }): Result<EnvChangeToken | undefined> {\n  switch (type.name) {\n    case 'DATABASE':\n    case 'LANGUAGE':\n    case 'CHARSET':\n    case 'PACKET_SIZE':\n    case 'DATABASE_MIRRORING_PARTNER': {\n      let newValue;\n      ({ offset, value: newValue } = readBVarChar(buf, offset));\n\n      let oldValue;\n      ({ offset, value: oldValue } = readBVarChar(buf, offset));\n\n      switch (type.name) {\n        case 'PACKET_SIZE':\n          return new Result(new PacketSizeEnvChangeToken(parseInt(newValue), parseInt(oldValue)), offset);\n\n        case 'DATABASE':\n          return new Result(new DatabaseEnvChangeToken(newValue, oldValue), offset);\n\n        case 'LANGUAGE':\n          return new Result(new LanguageEnvChangeToken(newValue, oldValue), offset);\n\n        case 'CHARSET':\n          return new Result(new CharsetEnvChangeToken(newValue, oldValue), offset);\n\n        case 'DATABASE_MIRRORING_PARTNER':\n          return new Result(new DatabaseMirroringPartnerEnvChangeToken(newValue, oldValue), offset);\n      }\n\n      throw new Error('unreachable');\n    }\n\n    case 'SQL_COLLATION':\n    case 'BEGIN_TXN':\n    case 'COMMIT_TXN':\n    case 'ROLLBACK_TXN':\n    case 'RESET_CONNECTION': {\n      let newValue;\n      ({ offset, value: newValue } = readBVarByte(buf, offset));\n\n      let oldValue;\n      ({ offset, value: oldValue } = readBVarByte(buf, offset));\n\n      switch (type.name) {\n        case 'SQL_COLLATION': {\n          const newCollation = newValue.length ? Collation.fromBuffer(newValue) : undefined;\n          const oldCollation = oldValue.length ? Collation.fromBuffer(oldValue) : undefined;\n\n          return new Result(new CollationChangeToken(newCollation, oldCollation), offset);\n        }\n\n        case 'BEGIN_TXN':\n          return new Result(new BeginTransactionEnvChangeToken(newValue, oldValue), offset);\n\n        case 'COMMIT_TXN':\n          return new Result(new CommitTransactionEnvChangeToken(newValue, oldValue), offset);\n\n        case 'ROLLBACK_TXN':\n          return new Result(new RollbackTransactionEnvChangeToken(newValue, oldValue), offset);\n\n        case 'RESET_CONNECTION':\n          return new Result(new ResetConnectionEnvChangeToken(newValue, oldValue), offset);\n      }\n\n      throw new Error('unreachable');\n    }\n\n    case 'ROUTING_CHANGE': {\n      let routePacket;\n      ({ offset, value: routePacket } = readUsVarByte(buf, offset));\n\n      let oldValue;\n      ({ offset, value: oldValue } = readUsVarByte(buf, offset));\n\n      // Routing Change:\n      // Byte 1: Protocol (must be 0)\n      // Bytes 2-3 (USHORT): Port number\n      // Bytes 4-5 (USHORT): Length of server data in unicode (2byte chars)\n      // Bytes 6-*: Server name in unicode characters\n      const protocol = routePacket.readUInt8(0);\n      if (protocol !== 0) {\n        throw new Error('Unknown protocol byte in routing change event');\n      }\n\n      const port = routePacket.readUInt16LE(1);\n      const serverLen = routePacket.readUInt16LE(3);\n      // 2 bytes per char, starting at offset 5\n      const server = routePacket.toString('ucs2', 5, 5 + (serverLen * 2));\n\n      const newValue = {\n        protocol: protocol,\n        port: port,\n        server: server\n      };\n\n      return new Result(new RoutingEnvChangeToken(newValue, oldValue), offset);\n    }\n\n    default: {\n      console.error('Tedious > Unsupported ENVCHANGE type ' + type.name);\n\n      // skip unknown bytes\n      return new Result(undefined, offset + length - 1);\n    }\n  }\n}\n\nfunction envChangeParser(buf: Buffer, offset: number, _options: ParserOptions): Result<EnvChangeToken | undefined> {\n  let tokenLength;\n  ({ offset, value: tokenLength } = readUInt16LE(buf, offset));\n\n  if (buf.length < offset + tokenLength) {\n    throw new NotEnoughDataError(offset + tokenLength);\n  }\n\n  let typeNumber;\n  ({ offset, value: typeNumber } = readUInt8(buf, offset));\n\n  const type = types[typeNumber];\n\n  if (!type) {\n    console.error('Tedious > Unsupported ENVCHANGE type ' + typeNumber);\n    return new Result(undefined, offset + tokenLength - 1);\n  }\n\n  return _readNewAndOldValue(buf, offset, tokenLength, type);\n}\n\nexport default envChangeParser;\nmodule.exports = envChangeParser;\n", "import { NotEnoughDataError, readBVarChar, readUInt16LE, readUInt32LE, readUInt8, readUsVarChar, Result } from './helpers';\nimport { type ParserOptions } from './stream-parser';\n\nimport { InfoMessageToken, ErrorMessageToken } from './token';\n\ninterface TokenData {\n  number: number;\n  state: number;\n  class: number;\n  message: string;\n  serverName: string;\n  procName: string;\n  lineNumber: number;\n}\n\nfunction readToken(buf: Buffer, offset: number, options: ParserOptions): Result<TokenData> {\n  let tokenLength;\n  ({ offset, value: tokenLength } = readUInt16LE(buf, offset));\n\n  if (buf.length < tokenLength + offset) {\n    throw new NotEnoughDataError(tokenLength + offset);\n  }\n\n  let number;\n  ({ offset, value: number } = readUInt32LE(buf, offset));\n\n  let state;\n  ({ offset, value: state } = readUInt8(buf, offset));\n\n  let clazz;\n  ({ offset, value: clazz } = readUInt8(buf, offset));\n\n  let message;\n  ({ offset, value: message } = readUsVarChar(buf, offset));\n\n  let serverName;\n  ({ offset, value: serverName } = readBVarChar(buf, offset));\n\n  let procName;\n  ({ offset, value: procName } = readBVarChar(buf, offset));\n\n  let lineNumber;\n  ({ offset, value: lineNumber } = options.tdsVersion < '7_2' ? readUInt16LE(buf, offset) : readUInt32LE(buf, offset));\n\n  return new Result({\n    'number': number,\n    'state': state,\n    'class': clazz,\n    'message': message,\n    'serverName': serverName,\n    'procName': procName,\n    'lineNumber': lineNumber\n  }, offset);\n}\n\nexport function infoParser(buf: Buffer, offset: number, options: ParserOptions): Result<InfoMessageToken> {\n  let data;\n  ({ offset, value: data } = readToken(buf, offset, options));\n\n  return new Result(new InfoMessageToken(data), offset);\n}\n\nexport function errorParser(buf: Buffer, offset: number, options: ParserOptions): Result<ErrorMessageToken> {\n  let data;\n  ({ offset, value: data } = readToken(buf, offset, options));\n\n  return new Result(new ErrorMessageToken(data), offset);\n}\n", "import { NotEnoughDataError, readUInt32LE, Result } from './helpers';\nimport { type ParserOptions } from './stream-parser';\nimport { FedAuthInfoToken } from './token';\n\nconst FEDAUTHINFOID = {\n  STSURL: 0x01,\n  SPN: 0x02\n};\n\nfunction readFedAuthInfo(data: Buffer): { spn: string | undefined, stsurl: string | undefined } {\n  let offset = 0;\n  let spn, stsurl;\n\n  const countOfInfoIDs = data.readUInt32LE(offset);\n  offset += 4;\n\n  for (let i = 0; i < countOfInfoIDs; i++) {\n    const fedauthInfoID = data.readUInt8(offset);\n    offset += 1;\n\n    const fedAuthInfoDataLen = data.readUInt32LE(offset);\n    offset += 4;\n\n    const fedAuthInfoDataOffset = data.readUInt32LE(offset);\n    offset += 4;\n\n    switch (fedauthInfoID) {\n      case FEDAUTHINFOID.SPN:\n        spn = data.toString('ucs2', fedAuthInfoDataOffset, fedAuthInfoDataOffset + fedAuthInfoDataLen);\n        break;\n\n      case FEDAUTHINFOID.STSURL:\n        stsurl = data.toString('ucs2', fedAuthInfoDataOffset, fedAuthInfoDataOffset + fedAuthInfoDataLen);\n        break;\n\n      // ignoring unknown fedauthinfo options\n      default:\n        break;\n    }\n  }\n\n  return { spn, stsurl };\n}\n\nfunction fedAuthInfoParser(buf: Buffer, offset: number, _options: ParserOptions): Result<FedAuthInfoToken> {\n  let tokenLength;\n  ({ offset, value: tokenLength } = readUInt32LE(buf, offset));\n\n  if (buf.length < offset + tokenLength) {\n    throw new NotEnoughDataError(offset + tokenLength);\n  }\n\n  const data = buf.slice(offset, offset + tokenLength);\n  offset += tokenLength;\n\n  const { spn, stsurl } = readFedAuthInfo(data);\n  return new Result(new FedAuthInfoToken(spn, stsurl), offset);\n}\n\nexport default fedAuthInfoParser;\nmodule.exports = fedAuthInfoParser;\n", "import { NotEnoughDataError, readUInt32LE, readUInt8, Result } from './helpers';\nimport { type ParserOptions } from './stream-parser';\n\nimport { FeatureExtAckToken } from './token';\n\nconst FEATURE_ID = {\n  SESSIONRECOVERY: 0x01,\n  FEDAUTH: 0x02,\n  COLUMNENCRYPTION: 0x04,\n  GLOBALTRANSACTIONS: 0x05,\n  AZURESQLSUPPORT: 0x08,\n  UTF8_SUPPORT: 0x0A,\n  TERMINATOR: 0xFF\n};\n\nfunction featureExtAckParser(buf: Buffer, offset: number, _options: ParserOptions): Result<FeatureExtAckToken> {\n  let fedAuth: Buffer | undefined;\n  let utf8Support: boolean | undefined;\n\n  while (true) {\n    let featureId;\n    ({ value: featureId, offset } = readUInt8(buf, offset));\n\n    if (featureId === FEATURE_ID.TERMINATOR) {\n      return new Result(new FeatureExtAckToken(fedAuth, utf8Support), offset);\n    }\n\n    let featureAckDataLen;\n    ({ value: featureAckDataLen, offset } = readUInt32LE(buf, offset));\n\n    if (buf.length < offset + featureAckDataLen) {\n      throw new NotEnoughDataError(offset + featureAckDataLen);\n    }\n\n    const featureData = buf.slice(offset, offset + featureAckDataLen);\n    offset += featureAckDataLen;\n\n    switch (featureId) {\n      case FEATURE_ID.FEDAUTH:\n        fedAuth = featureData;\n        break;\n      case FEATURE_ID.UTF8_SUPPORT:\n        utf8Support = !!featureData[0];\n        break;\n    }\n  }\n}\n\nexport default featureExtAckParser;\nmodule.exports = featureExtAckParser;\n", "import { type ParserOptions } from './stream-parser';\n\nimport { LoginAckToken } from './token';\n\nimport { versionsByValue as versions } from '../tds-versions';\nimport { NotEnoughDataError, readBVarChar, readUInt16LE, readUInt32BE, readUInt8, Result } from './helpers';\n\nconst interfaceTypes: { [key: number]: string } = {\n  0: 'SQL_DFLT',\n  1: 'SQL_TSQL'\n};\n\nfunction loginAckParser(buf: Buffer, offset: number, _options: ParserOptions): Result<LoginAckToken> {\n  // length\n  let tokenLength;\n  ({ offset, value: tokenLength } = readUInt16LE(buf, offset));\n\n  if (buf.length < tokenLength + offset) {\n    throw new NotEnoughDataError(tokenLength + offset);\n  }\n\n  let interfaceNumber;\n  ({ offset, value: interfaceNumber } = readUInt8(buf, offset));\n\n  const interfaceType = interfaceTypes[interfaceNumber];\n\n  let tdsVersionNumber;\n  ({ offset, value: tdsVersionNumber } = readUInt32BE(buf, offset));\n\n  const tdsVersion = versions[tdsVersionNumber];\n\n  let progName;\n  ({ offset, value: progName } = readBVarChar(buf, offset));\n\n  let major;\n  ({ offset, value: major } = readUInt8(buf, offset));\n\n  let minor;\n  ({ offset, value: minor } = readUInt8(buf, offset));\n\n  let buildNumHi;\n  ({ offset, value: buildNumHi } = readUInt8(buf, offset));\n\n  let buildNumLow;\n  ({ offset, value: buildNumLow } = readUInt8(buf, offset));\n\n  return new Result(new LoginAckToken({\n    interface: interfaceType,\n    tdsVersion: tdsVersion,\n    progName: progName,\n    progVersion: {\n      major: major,\n      minor: minor,\n      buildNumHi: buildNumHi,\n      buildNumLow: buildNumLow\n    }\n  }), offset);\n}\n\nexport default loginAckParser;\nmodule.exports = loginAckParser;\n", "// s2.2.7.14\nimport { type ParserOptions } from './stream-parser';\n\nimport { OrderToken } from './token';\nimport { NotEnoughDataError, readUInt16LE, Result } from './helpers';\n\nfunction orderParser(buf: Buffer, offset: number, _options: ParserOptions): Result<OrderToken> {\n  // length\n  let tokenLength;\n  ({ offset, value: tokenLength } = readUInt16LE(buf, offset));\n\n  if (buf.length < offset + tokenLength) {\n    throw new NotEnoughDataError(offset + tokenLength);\n  }\n\n  const orderColumns: number[] = [];\n\n  for (let i = 0; i < tokenLength; i += 2) {\n    let column;\n    ({ offset, value: column } = readUInt16LE(buf, offset));\n\n    orderColumns.push(column);\n  }\n\n  return new Result(new OrderToken(orderColumns), offset);\n}\n\nexport default orderParser;\nmodule.exports = orderParser;\n", "// s2.2.7.16\nimport { readInt32LE, Result } from './helpers';\nimport { type ParserOptions } from './stream-parser';\n\nimport { ReturnStatusToken } from './token';\n\nfunction returnStatusParser(buf: Buffer, offset: number, _options: ParserOptions): Result<ReturnStatusToken> {\n  let value;\n  ({ value, offset } = readInt32LE(buf, offset));\n  return new Result(new ReturnStatusToken(value), offset);\n}\n\nexport default returnStatusParser;\nmodule.exports = returnStatusParser;\n", "import Parser, { type ParserOptions } from './token/stream-parser';\nimport { type Metadata, readCollation } from './metadata-parser';\nimport { TYPE } from './data-type';\n\nimport iconv from 'iconv-lite';\nimport { sprintf } from 'sprintf-js';\nimport { bufferToLowerCaseGuid, bufferToUpperCaseGuid } from './guid-parser';\nimport { NotEnoughDataError, Result, readBigInt64LE, readDoubleLE, readFloatLE, readInt16LE, readInt32LE, readUInt16LE, readUInt32LE, readUInt8, readUInt24LE, readUInt40LE, readUNumeric64LE, readUNumeric96LE, readUNumeric128LE } from './token/helpers';\n\nconst NULL = (1 << 16) - 1;\nconst MAX = (1 << 16) - 1;\nconst THREE_AND_A_THIRD = 3 + (1 / 3);\nconst MONEY_DIVISOR = 10000;\nconst PLP_NULL = 0xFFFFFFFFFFFFFFFFn;\nconst UNKNOWN_PLP_LEN = 0xFFFFFFFFFFFFFFFEn;\nconst DEFAULT_ENCODING = 'utf8';\n\nfunction readTinyInt(buf: Buffer, offset: number): Result<number> {\n  return readUInt8(buf, offset);\n}\n\nfunction readSmallInt(buf: Buffer, offset: number): Result<number> {\n  return readInt16LE(buf, offset);\n}\n\nfunction readInt(buf: Buffer, offset: number): Result<number> {\n  return readInt32LE(buf, offset);\n}\n\nfunction readBigInt(buf: Buffer, offset: number): Result<string> {\n  let value;\n  ({ offset, value } = readBigInt64LE(buf, offset));\n\n  return new Result(value.toString(), offset);\n}\n\nfunction readReal(buf: Buffer, offset: number): Result<number> {\n  return readFloatLE(buf, offset);\n}\n\nfunction readFloat(buf: Buffer, offset: number): Result<number> {\n  return readDoubleLE(buf, offset);\n}\n\nfunction readSmallMoney(buf: Buffer, offset: number): Result<number> {\n  let value;\n  ({ offset, value } = readInt32LE(buf, offset));\n\n  return new Result(value / MONEY_DIVISOR, offset);\n}\n\nfunction readMoney(buf: Buffer, offset: number): Result<number> {\n  let high;\n  ({ offset, value: high } = readInt32LE(buf, offset));\n\n  let low;\n  ({ offset, value: low } = readUInt32LE(buf, offset));\n\n  return new Result((low + (0x100000000 * high)) / MONEY_DIVISOR, offset);\n}\n\nfunction readBit(buf: Buffer, offset: number): Result<boolean> {\n  let value;\n  ({ offset, value } = readUInt8(buf, offset));\n\n  return new Result(!!value, offset);\n}\n\nfunction readValue(buf: Buffer, offset: number, metadata: Metadata, options: ParserOptions): Result<unknown> {\n  const type = metadata.type;\n\n  switch (type.name) {\n    case 'Null':\n      return new Result(null, offset);\n\n    case 'TinyInt': {\n      return readTinyInt(buf, offset);\n    }\n\n    case 'SmallInt': {\n      return readSmallInt(buf, offset);\n    }\n\n    case 'Int': {\n      return readInt(buf, offset);\n    }\n\n    case 'BigInt': {\n      return readBigInt(buf, offset);\n    }\n\n    case 'IntN': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      switch (dataLength) {\n        case 0:\n          return new Result(null, offset);\n\n        case 1:\n          return readTinyInt(buf, offset);\n        case 2:\n          return readSmallInt(buf, offset);\n        case 4:\n          return readInt(buf, offset);\n        case 8:\n          return readBigInt(buf, offset);\n\n        default:\n          throw new Error('Unsupported dataLength ' + dataLength + ' for IntN');\n      }\n    }\n\n    case 'Real': {\n      return readReal(buf, offset);\n    }\n\n    case 'Float': {\n      return readFloat(buf, offset);\n    }\n\n    case 'FloatN': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      switch (dataLength) {\n        case 0:\n          return new Result(null, offset);\n\n        case 4:\n          return readReal(buf, offset);\n        case 8:\n          return readFloat(buf, offset);\n\n        default:\n          throw new Error('Unsupported dataLength ' + dataLength + ' for FloatN');\n      }\n    }\n\n    case 'SmallMoney': {\n      return readSmallMoney(buf, offset);\n    }\n\n    case 'Money':\n      return readMoney(buf, offset);\n\n    case 'MoneyN': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      switch (dataLength) {\n        case 0:\n          return new Result(null, offset);\n\n        case 4:\n          return readSmallMoney(buf, offset);\n        case 8:\n          return readMoney(buf, offset);\n\n        default:\n          throw new Error('Unsupported dataLength ' + dataLength + ' for MoneyN');\n      }\n    }\n\n    case 'Bit': {\n      return readBit(buf, offset);\n    }\n\n    case 'BitN': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      switch (dataLength) {\n        case 0:\n          return new Result(null, offset);\n\n        case 1:\n          return readBit(buf, offset);\n\n        default:\n          throw new Error('Unsupported dataLength ' + dataLength + ' for BitN');\n      }\n    }\n\n    case 'VarChar':\n    case 'Char': {\n      const codepage = metadata.collation!.codepage!;\n\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt16LE(buf, offset));\n\n      if (dataLength === NULL) {\n        return new Result(null, offset);\n      }\n\n      return readChars(buf, offset, dataLength, codepage);\n    }\n\n    case 'NVarChar':\n    case 'NChar': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt16LE(buf, offset));\n\n      if (dataLength === NULL) {\n        return new Result(null, offset);\n      }\n\n      return readNChars(buf, offset, dataLength);\n    }\n\n    case 'VarBinary':\n    case 'Binary': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt16LE(buf, offset));\n\n      if (dataLength === NULL) {\n        return new Result(null, offset);\n      }\n\n      return readBinary(buf, offset, dataLength);\n    }\n\n    case 'Text': {\n      let textPointerLength;\n      ({ offset, value: textPointerLength } = readUInt8(buf, offset));\n\n      if (textPointerLength === 0) {\n        return new Result(null, offset);\n      }\n\n      // Textpointer\n      ({ offset } = readBinary(buf, offset, textPointerLength));\n\n      // Timestamp\n      ({ offset } = readBinary(buf, offset, 8));\n\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt32LE(buf, offset));\n\n      return readChars(buf, offset, dataLength, metadata.collation!.codepage!);\n    }\n\n    case 'NText': {\n      let textPointerLength;\n      ({ offset, value: textPointerLength } = readUInt8(buf, offset));\n\n      if (textPointerLength === 0) {\n        return new Result(null, offset);\n      }\n\n      // Textpointer\n      ({ offset } = readBinary(buf, offset, textPointerLength));\n\n      // Timestamp\n      ({ offset } = readBinary(buf, offset, 8));\n\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt32LE(buf, offset));\n\n      return readNChars(buf, offset, dataLength);\n    }\n\n    case 'Image': {\n      let textPointerLength;\n      ({ offset, value: textPointerLength } = readUInt8(buf, offset));\n\n      if (textPointerLength === 0) {\n        return new Result(null, offset);\n      }\n\n      // Textpointer\n      ({ offset } = readBinary(buf, offset, textPointerLength));\n\n      // Timestamp\n      ({ offset } = readBinary(buf, offset, 8));\n\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt32LE(buf, offset));\n\n      return readBinary(buf, offset, dataLength);\n    }\n\n    case 'SmallDateTime': {\n      return readSmallDateTime(buf, offset, options.useUTC);\n    }\n\n    case 'DateTime': {\n      return readDateTime(buf, offset, options.useUTC);\n    }\n\n    case 'DateTimeN': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      switch (dataLength) {\n        case 0:\n          return new Result(null, offset);\n\n        case 4:\n          return readSmallDateTime(buf, offset, options.useUTC);\n        case 8:\n          return readDateTime(buf, offset, options.useUTC);\n\n        default:\n          throw new Error('Unsupported dataLength ' + dataLength + ' for DateTimeN');\n      }\n    }\n\n    case 'Time': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      if (dataLength === 0) {\n        return new Result(null, offset);\n      }\n\n      return readTime(buf, offset, dataLength, metadata.scale!, options.useUTC);\n    }\n\n    case 'Date': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      if (dataLength === 0) {\n        return new Result(null, offset);\n      }\n\n      return readDate(buf, offset, options.useUTC);\n    }\n\n    case 'DateTime2': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      if (dataLength === 0) {\n        return new Result(null, offset);\n      }\n\n      return readDateTime2(buf, offset, dataLength, metadata.scale!, options.useUTC);\n    }\n\n    case 'DateTimeOffset': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      if (dataLength === 0) {\n        return new Result(null, offset);\n      }\n\n      return readDateTimeOffset(buf, offset, dataLength, metadata.scale!);\n    }\n\n    case 'NumericN':\n    case 'DecimalN': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      if (dataLength === 0) {\n        return new Result(null, offset);\n      }\n\n      return readNumeric(buf, offset, dataLength, metadata.precision!, metadata.scale!);\n    }\n\n    case 'UniqueIdentifier': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt8(buf, offset));\n\n      switch (dataLength) {\n        case 0:\n          return new Result(null, offset);\n\n        case 0x10:\n          return readUniqueIdentifier(buf, offset, options);\n\n        default:\n          throw new Error(sprintf('Unsupported guid size %d', dataLength! - 1));\n      }\n    }\n\n    case 'Variant': {\n      let dataLength;\n      ({ offset, value: dataLength } = readUInt32LE(buf, offset));\n\n      if (dataLength === 0) {\n        return new Result(null, offset);\n      }\n\n      return readVariant(buf, offset, options, dataLength);\n    }\n\n    default: {\n      throw new Error('Invalid type!');\n    }\n  }\n}\n\nfunction isPLPStream(metadata: Metadata) {\n  switch (metadata.type.name) {\n    case 'VarChar':\n    case 'NVarChar':\n    case 'VarBinary': {\n      return metadata.dataLength === MAX;\n    }\n\n    case 'Xml': {\n      return true;\n    }\n\n    case 'UDT': {\n      return true;\n    }\n  }\n}\n\nfunction readUniqueIdentifier(buf: Buffer, offset: number, options: ParserOptions): Result<string> {\n  let data;\n  ({ value: data, offset } = readBinary(buf, offset, 0x10));\n\n  return new Result(options.lowerCaseGuids ? bufferToLowerCaseGuid(data) : bufferToUpperCaseGuid(data), offset);\n}\n\nfunction readNumeric(buf: Buffer, offset: number, dataLength: number, _precision: number, scale: number): Result<number> {\n  let sign;\n  ({ offset, value: sign } = readUInt8(buf, offset));\n\n  sign = sign === 1 ? 1 : -1;\n\n  let value;\n  if (dataLength === 5) {\n    ({ offset, value } = readUInt32LE(buf, offset));\n  } else if (dataLength === 9) {\n    ({ offset, value } = readUNumeric64LE(buf, offset));\n  } else if (dataLength === 13) {\n    ({ offset, value } = readUNumeric96LE(buf, offset));\n  } else if (dataLength === 17) {\n    ({ offset, value } = readUNumeric128LE(buf, offset));\n  } else {\n    throw new Error(sprintf('Unsupported numeric dataLength %d', dataLength));\n  }\n\n  return new Result((value * sign) / Math.pow(10, scale), offset);\n}\n\nfunction readVariant(buf: Buffer, offset: number, options: ParserOptions, dataLength: number): Result<unknown> {\n  let baseType;\n  ({ value: baseType, offset } = readUInt8(buf, offset));\n\n  const type = TYPE[baseType];\n\n  let propBytes;\n  ({ value: propBytes, offset } = readUInt8(buf, offset));\n\n  dataLength = dataLength - propBytes - 2;\n\n  switch (type.name) {\n    case 'UniqueIdentifier':\n      return readUniqueIdentifier(buf, offset, options);\n\n    case 'Bit':\n      return readBit(buf, offset);\n\n    case 'TinyInt':\n      return readTinyInt(buf, offset);\n\n    case 'SmallInt':\n      return readSmallInt(buf, offset);\n\n    case 'Int':\n      return readInt(buf, offset);\n\n    case 'BigInt':\n      return readBigInt(buf, offset);\n\n    case 'SmallDateTime':\n      return readSmallDateTime(buf, offset, options.useUTC);\n\n    case 'DateTime':\n      return readDateTime(buf, offset, options.useUTC);\n\n    case 'Real':\n      return readReal(buf, offset);\n\n    case 'Float':\n      return readFloat(buf, offset);\n\n    case 'SmallMoney':\n      return readSmallMoney(buf, offset);\n\n    case 'Money':\n      return readMoney(buf, offset);\n\n    case 'Date':\n      return readDate(buf, offset, options.useUTC);\n\n    case 'Time': {\n      let scale;\n      ({ value: scale, offset } = readUInt8(buf, offset));\n\n      return readTime(buf, offset, dataLength, scale, options.useUTC);\n    }\n\n    case 'DateTime2': {\n      let scale;\n      ({ value: scale, offset } = readUInt8(buf, offset));\n\n      return readDateTime2(buf, offset, dataLength, scale, options.useUTC);\n    }\n\n    case 'DateTimeOffset': {\n      let scale;\n      ({ value: scale, offset } = readUInt8(buf, offset));\n\n      return readDateTimeOffset(buf, offset, dataLength, scale);\n    }\n\n    case 'VarBinary':\n    case 'Binary': {\n      // maxLength (unused?)\n      ({ offset } = readUInt16LE(buf, offset));\n\n      return readBinary(buf, offset, dataLength);\n    }\n\n    case 'NumericN':\n    case 'DecimalN': {\n      let precision;\n      ({ value: precision, offset } = readUInt8(buf, offset));\n\n      let scale;\n      ({ value: scale, offset } = readUInt8(buf, offset));\n\n      return readNumeric(buf, offset, dataLength, precision, scale);\n    }\n\n    case 'VarChar':\n    case 'Char': {\n      // maxLength (unused?)\n      ({ offset } = readUInt16LE(buf, offset));\n\n      let collation;\n      ({ value: collation, offset } = readCollation(buf, offset));\n\n      return readChars(buf, offset, dataLength, collation.codepage!);\n    }\n\n    case 'NVarChar':\n    case 'NChar': {\n      // maxLength (unused?)\n      ({ offset } = readUInt16LE(buf, offset));\n\n      // collation (unused?)\n      ({ offset } = readCollation(buf, offset));\n\n      return readNChars(buf, offset, dataLength);\n    }\n\n    default:\n      throw new Error('Invalid type!');\n  }\n}\n\nfunction readBinary(buf: Buffer, offset: number, dataLength: number): Result<Buffer> {\n  if (buf.length < offset + dataLength) {\n    throw new NotEnoughDataError(offset + dataLength);\n  }\n\n  return new Result(buf.slice(offset, offset + dataLength), offset + dataLength);\n}\n\nfunction readChars(buf: Buffer, offset: number, dataLength: number, codepage: string): Result<string> {\n  if (buf.length < offset + dataLength) {\n    throw new NotEnoughDataError(offset + dataLength);\n  }\n\n  return new Result(iconv.decode(buf.slice(offset, offset + dataLength), codepage ?? DEFAULT_ENCODING), offset + dataLength);\n}\n\nfunction readNChars(buf: Buffer, offset: number, dataLength: number): Result<string> {\n  if (buf.length < offset + dataLength) {\n    throw new NotEnoughDataError(offset + dataLength);\n  }\n\n  return new Result(buf.toString('ucs2', offset, offset + dataLength), offset + dataLength);\n}\n\nasync function readPLPStream(parser: Parser): Promise<null | Buffer[]> {\n  while (parser.buffer.length < parser.position + 8) {\n    await parser.waitForChunk();\n  }\n\n  const expectedLength = parser.buffer.readBigUInt64LE(parser.position);\n  parser.position += 8;\n\n  if (expectedLength === PLP_NULL) {\n    return null;\n  }\n\n  const chunks: Buffer[] = [];\n  let currentLength = 0;\n\n  while (true) {\n    while (parser.buffer.length < parser.position + 4) {\n      await parser.waitForChunk();\n    }\n\n    const chunkLength = parser.buffer.readUInt32LE(parser.position);\n    parser.position += 4;\n\n    if (!chunkLength) {\n      break;\n    }\n\n    while (parser.buffer.length < parser.position + chunkLength) {\n      await parser.waitForChunk();\n    }\n\n    chunks.push(parser.buffer.slice(parser.position, parser.position + chunkLength));\n    parser.position += chunkLength;\n    currentLength += chunkLength;\n  }\n\n  if (expectedLength !== UNKNOWN_PLP_LEN) {\n    if (currentLength !== Number(expectedLength)) {\n      throw new Error('Partially Length-prefixed Bytes unmatched lengths : expected ' + expectedLength + ', but got ' + currentLength + ' bytes');\n    }\n  }\n\n  return chunks;\n}\n\nfunction readSmallDateTime(buf: Buffer, offset: number, useUTC: boolean): Result<Date> {\n  let days;\n  ({ offset, value: days } = readUInt16LE(buf, offset));\n\n  let minutes;\n  ({ offset, value: minutes } = readUInt16LE(buf, offset));\n\n  let value;\n  if (useUTC) {\n    value = new Date(Date.UTC(1900, 0, 1 + days, 0, minutes));\n  } else {\n    value = new Date(1900, 0, 1 + days, 0, minutes);\n  }\n\n  return new Result(value, offset);\n}\n\nfunction readDateTime(buf: Buffer, offset: number, useUTC: boolean): Result<Date> {\n  let days;\n  ({ offset, value: days } = readInt32LE(buf, offset));\n\n  let threeHundredthsOfSecond;\n  ({ offset, value: threeHundredthsOfSecond } = readInt32LE(buf, offset));\n\n  const milliseconds = Math.round(threeHundredthsOfSecond * THREE_AND_A_THIRD);\n\n  let value;\n  if (useUTC) {\n    value = new Date(Date.UTC(1900, 0, 1 + days, 0, 0, 0, milliseconds));\n  } else {\n    value = new Date(1900, 0, 1 + days, 0, 0, 0, milliseconds);\n  }\n\n  return new Result(value, offset);\n}\n\ninterface DateWithNanosecondsDelta extends Date {\n  nanosecondsDelta: number;\n}\n\nfunction readTime(buf: Buffer, offset: number, dataLength: number, scale: number, useUTC: boolean): Result<DateWithNanosecondsDelta> {\n  let value;\n\n  switch (dataLength) {\n    case 3: {\n      ({ value, offset } = readUInt24LE(buf, offset));\n      break;\n    }\n\n    case 4: {\n      ({ value, offset } = readUInt32LE(buf, offset));\n      break;\n    }\n\n    case 5: {\n      ({ value, offset } = readUInt40LE(buf, offset));\n      break;\n    }\n\n    default: {\n      throw new Error('unreachable');\n    }\n  }\n\n  if (scale < 7) {\n    for (let i = scale; i < 7; i++) {\n      value *= 10;\n    }\n  }\n\n  let date;\n  if (useUTC) {\n    date = new Date(Date.UTC(1970, 0, 1, 0, 0, 0, value / 10000)) as DateWithNanosecondsDelta;\n  } else {\n    date = new Date(1970, 0, 1, 0, 0, 0, value / 10000) as DateWithNanosecondsDelta;\n  }\n  Object.defineProperty(date, 'nanosecondsDelta', {\n    enumerable: false,\n    value: (value % 10000) / Math.pow(10, 7)\n  });\n\n  return new Result(date, offset);\n}\n\nfunction readDate(buf: Buffer, offset: number, useUTC: boolean): Result<Date> {\n  let days;\n  ({ offset, value: days } = readUInt24LE(buf, offset));\n\n  if (useUTC) {\n    return new Result(new Date(Date.UTC(2000, 0, days - 730118)), offset);\n  } else {\n    return new Result(new Date(2000, 0, days - 730118), offset);\n  }\n}\n\nfunction readDateTime2(buf: Buffer, offset: number, dataLength: number, scale: number, useUTC: boolean): Result<DateWithNanosecondsDelta> {\n  let time;\n  ({ offset, value: time } = readTime(buf, offset, dataLength - 3, scale, useUTC));\n\n  let days;\n  ({ offset, value: days } = readUInt24LE(buf, offset));\n\n  let date;\n  if (useUTC) {\n    date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time)) as DateWithNanosecondsDelta;\n  } else {\n    date = new Date(2000, 0, days - 730118, time.getHours(), time.getMinutes(), time.getSeconds(), time.getMilliseconds()) as DateWithNanosecondsDelta;\n  }\n  Object.defineProperty(date, 'nanosecondsDelta', {\n    enumerable: false,\n    value: time.nanosecondsDelta\n  });\n\n  return new Result(date, offset);\n}\n\nfunction readDateTimeOffset(buf: Buffer, offset: number, dataLength: number, scale: number): Result<DateWithNanosecondsDelta> {\n  let time;\n  ({ offset, value: time } = readTime(buf, offset, dataLength - 5, scale, true));\n\n  let days;\n  ({ offset, value: days } = readUInt24LE(buf, offset));\n\n  // time offset?\n  ({ offset } = readUInt16LE(buf, offset));\n\n  const date = new Date(Date.UTC(2000, 0, days - 730118, 0, 0, 0, +time)) as DateWithNanosecondsDelta;\n  Object.defineProperty(date, 'nanosecondsDelta', {\n    enumerable: false,\n    value: time.nanosecondsDelta\n  });\n  return new Result(date, offset);\n}\n\nmodule.exports.readValue = readValue;\nmodule.exports.isPLPStream = isPLPStream;\nmodule.exports.readPLPStream = readPLPStream;\n\nexport { readValue, isPLPStream, readPLPStream };\n", "// s2.2.7.16\n\nimport Parser from './stream-parser';\n\nimport { ReturnValueToken } from './token';\n\nimport { readMetadata } from '../metadata-parser';\nimport { isPLPStream, readPLPStream, readValue } from '../value-parser';\nimport { NotEnoughDataError, readBVarChar, readUInt16LE, readUInt8 } from './helpers';\nimport * as iconv from 'iconv-lite';\n\nasync function returnParser(parser: Parser): Promise<ReturnValueToken> {\n  let paramName;\n  let paramOrdinal;\n  let metadata;\n\n  while (true) {\n    const buf = parser.buffer;\n    let offset = parser.position;\n\n    try {\n      ({ offset, value: paramOrdinal } = readUInt16LE(buf, offset));\n      ({ offset, value: paramName } = readBVarChar(buf, offset));\n      // status\n      ({ offset } = readUInt8(buf, offset));\n      ({ offset, value: metadata } = readMetadata(buf, offset, parser.options));\n\n      if (paramName.charAt(0) === '@') {\n        paramName = paramName.slice(1);\n      }\n    } catch (err) {\n      if (err instanceof NotEnoughDataError) {\n        await parser.waitForChunk();\n        continue;\n      }\n\n      throw err;\n    }\n\n    parser.position = offset;\n    break;\n  }\n\n  let value;\n  while (true) {\n    const buf = parser.buffer;\n    let offset = parser.position;\n\n    if (isPLPStream(metadata)) {\n      const chunks = await readPLPStream(parser);\n\n      if (chunks === null) {\n        value = chunks;\n      } else if (metadata.type.name === 'NVarChar' || metadata.type.name === 'Xml') {\n        value = Buffer.concat(chunks).toString('ucs2');\n      } else if (metadata.type.name === 'VarChar') {\n        value = iconv.decode(Buffer.concat(chunks), metadata.collation?.codepage ?? 'utf8');\n      } else if (metadata.type.name === 'VarBinary' || metadata.type.name === 'UDT') {\n        value = Buffer.concat(chunks);\n      }\n    } else {\n      try {\n        ({ value, offset } = readValue(buf, offset, metadata, parser.options));\n      } catch (err) {\n        if (err instanceof NotEnoughDataError) {\n          await parser.waitForChunk();\n          continue;\n        }\n\n        throw err;\n      }\n\n      parser.position = offset;\n    }\n\n    break;\n  }\n\n  return new ReturnValueToken({\n    paramOrdinal: paramOrdinal,\n    paramName: paramName,\n    metadata: metadata,\n    value: value\n  });\n}\n\nexport default returnParser;\nmodule.exports = returnParser;\n", "// s2.2.7.17\n\nimport Parser from './stream-parser';\nimport { type ColumnMetadata } from './colmetadata-token-parser';\n\nimport { RowToken } from './token';\nimport * as iconv from 'iconv-lite';\n\nimport { isPLPStream, readPLPStream, readValue } from '../value-parser';\nimport { NotEnoughDataError } from './helpers';\n\ninterface Column {\n  value: unknown;\n  metadata: ColumnMetadata;\n}\n\nasync function rowParser(parser: Parser): Promise<RowToken> {\n  const columns: Column[] = [];\n\n  for (const metadata of parser.colMetadata) {\n    while (true) {\n      if (isPLPStream(metadata)) {\n        const chunks = await readPLPStream(parser);\n\n        if (chunks === null) {\n          columns.push({ value: chunks, metadata });\n        } else if (metadata.type.name === 'NVarChar' || metadata.type.name === 'Xml') {\n          columns.push({ value: Buffer.concat(chunks).toString('ucs2'), metadata });\n        } else if (metadata.type.name === 'VarChar') {\n          columns.push({ value: iconv.decode(Buffer.concat(chunks), metadata.collation?.codepage ?? 'utf8'), metadata });\n        } else if (metadata.type.name === 'VarBinary' || metadata.type.name === 'UDT') {\n          columns.push({ value: Buffer.concat(chunks), metadata });\n        }\n      } else {\n        let result;\n        try {\n          result = readValue(parser.buffer, parser.position, metadata, parser.options);\n        } catch (err) {\n          if (err instanceof NotEnoughDataError) {\n            await parser.waitForChunk();\n            continue;\n          }\n\n          throw err;\n        }\n\n        parser.position = result.offset;\n        columns.push({ value: result.value, metadata });\n      }\n\n      break;\n    }\n  }\n\n  if (parser.options.useColumnNames) {\n    const columnsMap: { [key: string]: Column } = Object.create(null);\n\n    columns.forEach((column) => {\n      const colName = column.metadata.colName;\n      if (columnsMap[colName] == null) {\n        columnsMap[colName] = column;\n      }\n    });\n\n    return new RowToken(columnsMap);\n  } else {\n    return new RowToken(columns);\n  }\n}\n\nexport default rowParser;\nmodule.exports = rowParser;\n", "// s2.2.7.13 (introduced in TDS 7.3.B)\n\nimport Parser from './stream-parser';\nimport { type ColumnMetadata } from './colmetadata-token-parser';\n\nimport { NBCRowToken } from './token';\nimport * as iconv from 'iconv-lite';\n\nimport { isPLPStream, readPLPStream, readValue } from '../value-parser';\nimport { NotEnoughDataError } from './helpers';\n\ninterface Column {\n  value: unknown;\n  metadata: ColumnMetadata;\n}\n\nasync function nbcRowParser(parser: Parser): Promise<NBCRowToken> {\n  const colMetadata = parser.colMetadata;\n  const columns: Column[] = [];\n  const bitmap: boolean[] = [];\n  const bitmapByteLength = Math.ceil(colMetadata.length / 8);\n\n  while (parser.buffer.length - parser.position < bitmapByteLength) {\n    await parser.waitForChunk();\n  }\n\n  const bytes = parser.buffer.slice(parser.position, parser.position + bitmapByteLength);\n  parser.position += bitmapByteLength;\n\n  for (let i = 0, len = bytes.length; i < len; i++) {\n    const byte = bytes[i];\n\n    bitmap.push(byte & 0b1 ? true : false);\n    bitmap.push(byte & 0b10 ? true : false);\n    bitmap.push(byte & 0b100 ? true : false);\n    bitmap.push(byte & 0b1000 ? true : false);\n    bitmap.push(byte & 0b10000 ? true : false);\n    bitmap.push(byte & 0b100000 ? true : false);\n    bitmap.push(byte & 0b1000000 ? true : false);\n    bitmap.push(byte & 0b10000000 ? true : false);\n  }\n\n  for (let i = 0; i < colMetadata.length; i++) {\n    const metadata = colMetadata[i];\n    if (bitmap[i]) {\n      columns.push({ value: null, metadata });\n      continue;\n    }\n\n    while (true) {\n      if (isPLPStream(metadata)) {\n        const chunks = await readPLPStream(parser);\n\n        if (chunks === null) {\n          columns.push({ value: chunks, metadata });\n        } else if (metadata.type.name === 'NVarChar' || metadata.type.name === 'Xml') {\n          columns.push({ value: Buffer.concat(chunks).toString('ucs2'), metadata });\n        } else if (metadata.type.name === 'VarChar') {\n          columns.push({ value: iconv.decode(Buffer.concat(chunks), metadata.collation?.codepage ?? 'utf8'), metadata });\n        } else if (metadata.type.name === 'VarBinary' || metadata.type.name === 'UDT') {\n          columns.push({ value: Buffer.concat(chunks), metadata });\n        }\n      } else {\n        let result;\n        try {\n          result = readValue(parser.buffer, parser.position, metadata, parser.options);\n        } catch (err) {\n          if (err instanceof NotEnoughDataError) {\n            await parser.waitForChunk();\n            continue;\n          }\n\n          throw err;\n        }\n\n        parser.position = result.offset;\n        columns.push({ value: result.value, metadata });\n      }\n\n      break;\n    }\n  }\n\n  if (parser.options.useColumnNames) {\n    const columnsMap: { [key: string]: Column } = Object.create(null);\n\n    columns.forEach((column) => {\n      const colName = column.metadata.colName;\n      if (columnsMap[colName] == null) {\n        columnsMap[colName] = column;\n      }\n    });\n\n    return new NBCRowToken(columnsMap);\n  } else {\n    return new NBCRowToken(columns);\n  }\n}\n\n\nexport default nbcRowParser;\nmodule.exports = nbcRowParser;\n", "import { NotEnoughDataError, readUInt16LE, Result } from './helpers';\nimport { type ParserOptions } from './stream-parser';\n\nimport { SSPIToken } from './token';\n\ninterface Data {\n  magic: string;\n  type: number;\n  domainLen: number;\n  domainMax: number;\n  domainOffset: number;\n  flags: number;\n  nonce: Buffer;\n  zeroes: Buffer;\n  targetLen: number;\n  targetMax: number;\n  targetOffset: number;\n  oddData: Buffer;\n  domain: string;\n  target: Buffer;\n}\n\nfunction parseChallenge(buffer: Buffer) {\n  const challenge: Partial<Data> = {};\n\n  challenge.magic = buffer.slice(0, 8).toString('utf8');\n  challenge.type = buffer.readInt32LE(8);\n  challenge.domainLen = buffer.readInt16LE(12);\n  challenge.domainMax = buffer.readInt16LE(14);\n  challenge.domainOffset = buffer.readInt32LE(16);\n  challenge.flags = buffer.readInt32LE(20);\n  challenge.nonce = buffer.slice(24, 32);\n  challenge.zeroes = buffer.slice(32, 40);\n  challenge.targetLen = buffer.readInt16LE(40);\n  challenge.targetMax = buffer.readInt16LE(42);\n  challenge.targetOffset = buffer.readInt32LE(44);\n  challenge.oddData = buffer.slice(48, 56);\n  challenge.domain = buffer.slice(56, 56 + challenge.domainLen).toString('ucs2');\n  challenge.target = buffer.slice(56 + challenge.domainLen, 56 + challenge.domainLen + challenge.targetLen);\n\n  return challenge as Data;\n}\n\nfunction sspiParser(buf: Buffer, offset: number, _options: ParserOptions): Result<SSPIToken> {\n  let tokenLength;\n  ({ offset, value: tokenLength } = readUInt16LE(buf, offset));\n\n  if (buf.length < offset + tokenLength) {\n    throw new NotEnoughDataError(offset + tokenLength);\n  }\n\n  const data = buf.slice(offset, offset + tokenLength);\n  offset += tokenLength;\n\n  return new Result(new SSPIToken(parseChallenge(data), data), offset);\n}\n\nexport default sspiParser;\nmodule.exports = sspiParser;\n", "import Debug from '../debug';\nimport { type InternalConnectionOptions } from '../connection';\n\nimport { TYPE, ColMetadataToken, DoneProcToken, DoneToken, DoneInProcToken, ErrorMessageToken, InfoMessageToken, RowToken, type EnvChangeToken, LoginAckToken, ReturnStatusToken, OrderToken, FedAuthInfoToken, SSPIToken, ReturnValueToken, NBCRowToken, FeatureExtAckToken, Token } from './token';\n\nimport colMetadataParser, { type ColumnMetadata } from './colmetadata-token-parser';\nimport { doneParser, doneInProcParser, doneProcParser } from './done-token-parser';\nimport envChangeParser from './env-change-token-parser';\nimport { errorParser, infoParser } from './infoerror-token-parser';\nimport fedAuthInfoParser from './fedauth-info-parser';\nimport featureExtAckParser from './feature-ext-ack-parser';\nimport loginAckParser from './loginack-token-parser';\nimport orderParser from './order-token-parser';\nimport returnStatusParser from './returnstatus-token-parser';\nimport returnValueParser from './returnvalue-token-parser';\nimport rowParser from './row-token-parser';\nimport nbcRowParser from './nbcrow-token-parser';\nimport sspiParser from './sspi-token-parser';\nimport { NotEnoughDataError } from './helpers';\n\nexport type ParserOptions = Pick<InternalConnectionOptions, 'useUTC' | 'lowerCaseGuids' | 'tdsVersion' | 'useColumnNames' | 'columnNameReplacer' | 'camelCaseColumns'>;\n\nclass Parser {\n  debug: Debug;\n  colMetadata: ColumnMetadata[];\n  options: ParserOptions;\n\n  iterator: AsyncIterator<Buffer, any, undefined> | Iterator<Buffer, any, undefined>;\n  buffer: Buffer;\n  position: number;\n\n  static async *parseTokens(iterable: AsyncIterable<Buffer> | Iterable<Buffer>, debug: Debug, options: ParserOptions, colMetadata: ColumnMetadata[] = []) {\n    const parser = new Parser(iterable, debug, options);\n    parser.colMetadata = colMetadata;\n\n    while (true) {\n      try {\n        await parser.waitForChunk();\n      } catch (err: unknown) {\n        if (parser.position === parser.buffer.length) {\n          return;\n        }\n\n        throw err;\n      }\n\n      while (parser.buffer.length >= parser.position + 1) {\n        const type = parser.buffer.readUInt8(parser.position);\n        parser.position += 1;\n\n        const token = parser.readToken(type);\n        if (token !== undefined) {\n          yield token;\n        }\n      }\n    }\n  }\n\n  readToken(type: number): Token | undefined | Promise<Token | undefined> {\n    switch (type) {\n      case TYPE.DONE: {\n        return this.readDoneToken();\n      }\n\n      case TYPE.DONEPROC: {\n        return this.readDoneProcToken();\n      }\n\n      case TYPE.DONEINPROC: {\n        return this.readDoneInProcToken();\n      }\n\n      case TYPE.ERROR: {\n        return this.readErrorToken();\n      }\n\n      case TYPE.INFO: {\n        return this.readInfoToken();\n      }\n\n      case TYPE.ENVCHANGE: {\n        return this.readEnvChangeToken();\n      }\n\n      case TYPE.LOGINACK: {\n        return this.readLoginAckToken();\n      }\n\n      case TYPE.RETURNSTATUS: {\n        return this.readReturnStatusToken();\n      }\n\n      case TYPE.ORDER: {\n        return this.readOrderToken();\n      }\n\n      case TYPE.FEDAUTHINFO: {\n        return this.readFedAuthInfoToken();\n      }\n\n      case TYPE.SSPI: {\n        return this.readSSPIToken();\n      }\n\n      case TYPE.COLMETADATA: {\n        return this.readColMetadataToken();\n      }\n\n      case TYPE.RETURNVALUE: {\n        return this.readReturnValueToken();\n      }\n\n      case TYPE.ROW: {\n        return this.readRowToken();\n      }\n\n      case TYPE.NBCROW: {\n        return this.readNbcRowToken();\n      }\n\n      case TYPE.FEATUREEXTACK: {\n        return this.readFeatureExtAckToken();\n      }\n\n      default: {\n        throw new Error('Unknown type: ' + type);\n      }\n    }\n  }\n\n  readFeatureExtAckToken(): FeatureExtAckToken | Promise<FeatureExtAckToken> {\n    let result;\n\n    try {\n      result = featureExtAckParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readFeatureExtAckToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  async readNbcRowToken(): Promise<NBCRowToken> {\n    return await nbcRowParser(this);\n  }\n\n  async readReturnValueToken(): Promise<ReturnValueToken> {\n    return await returnValueParser(this);\n  }\n\n  async readColMetadataToken(): Promise<ColMetadataToken> {\n    const token = await colMetadataParser(this);\n    this.colMetadata = token.columns;\n    return token;\n  }\n\n  readSSPIToken(): SSPIToken | Promise<SSPIToken> {\n    let result;\n\n    try {\n      result = sspiParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readSSPIToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  readFedAuthInfoToken(): FedAuthInfoToken | Promise<FedAuthInfoToken> {\n    let result;\n\n    try {\n      result = fedAuthInfoParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readFedAuthInfoToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  readOrderToken(): OrderToken | Promise<OrderToken> {\n    let result;\n\n    try {\n      result = orderParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readOrderToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  readReturnStatusToken(): ReturnStatusToken | Promise<ReturnStatusToken> {\n    let result;\n\n    try {\n      result = returnStatusParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readReturnStatusToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  readLoginAckToken(): LoginAckToken | Promise<LoginAckToken> {\n    let result;\n\n    try {\n      result = loginAckParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readLoginAckToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  readEnvChangeToken(): EnvChangeToken | undefined | Promise<EnvChangeToken | undefined> {\n    let result;\n\n    try {\n      result = envChangeParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readEnvChangeToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  readRowToken(): RowToken | Promise<RowToken> {\n    return rowParser(this);\n  }\n\n  readInfoToken(): InfoMessageToken | Promise<InfoMessageToken> {\n    let result;\n\n    try {\n      result = infoParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readInfoToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  readErrorToken(): ErrorMessageToken | Promise<ErrorMessageToken> {\n    let result;\n\n    try {\n      result = errorParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readErrorToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  readDoneInProcToken(): DoneInProcToken | Promise<DoneInProcToken> {\n    let result;\n\n    try {\n      result = doneInProcParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readDoneInProcToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  readDoneProcToken(): DoneProcToken | Promise<DoneProcToken> {\n    let result;\n\n    try {\n      result = doneProcParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readDoneProcToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  readDoneToken(): DoneToken | Promise<DoneToken> {\n    let result;\n\n    try {\n      result = doneParser(this.buffer, this.position, this.options);\n    } catch (err: any) {\n      if (err instanceof NotEnoughDataError) {\n        return this.waitForChunk().then(() => {\n          return this.readDoneToken();\n        });\n      }\n\n      throw err;\n    }\n\n    this.position = result.offset;\n    return result.value;\n  }\n\n  constructor(iterable: AsyncIterable<Buffer> | Iterable<Buffer>, debug: Debug, options: ParserOptions) {\n    this.debug = debug;\n    this.colMetadata = [];\n    this.options = options;\n\n    this.iterator = ((iterable as AsyncIterable<Buffer>)[Symbol.asyncIterator] || (iterable as Iterable<Buffer>)[Symbol.iterator]).call(iterable);\n\n    this.buffer = Buffer.alloc(0);\n    this.position = 0;\n  }\n\n  async waitForChunk() {\n    const result = await this.iterator.next();\n    if (result.done) {\n      throw new Error('unexpected end of data');\n    }\n\n    if (this.position === this.buffer.length) {\n      this.buffer = result.value;\n    } else {\n      this.buffer = Buffer.concat([this.buffer.slice(this.position), result.value]);\n    }\n\n    this.position = 0;\n  }\n}\n\nexport default Parser;\nmodule.exports = Parser;\n", "import { EventEmitter } from 'events';\nimport StreamParser, { type ParserOptions } from './stream-parser';\nimport Debug from '../debug';\nimport { Token } from './token';\nimport { Readable } from 'stream';\nimport Message from '../message';\nimport { TokenHandler } from './handler';\n\nexport class Parser extends EventEmitter {\n  declare debug: Debug;\n  declare options: ParserOptions;\n  declare parser: Readable;\n\n  constructor(message: Message, debug: Debug, handler: TokenHandler, options: ParserOptions) {\n    super();\n\n    this.debug = debug;\n    this.options = options;\n\n    this.parser = Readable.from(StreamParser.parseTokens(message, this.debug, this.options));\n    this.parser.on('data', (token: Token) => {\n      handler[token.handlerName as keyof TokenHandler](token as any);\n    });\n\n    this.parser.on('drain', () => {\n      this.emit('drain');\n    });\n\n    this.parser.on('end', () => {\n      this.emit('end');\n    });\n  }\n\n  declare on: (\n    ((event: 'end', listener: () => void) => this) &\n    ((event: string | symbol, listener: (...args: any[]) => void) => this)\n  );\n\n  pause() {\n    return this.parser.pause();\n  }\n\n  resume() {\n    return this.parser.resume();\n  }\n}\n", "import WritableTrackingBuffer from './tracking-buffer/writable-tracking-buffer';\nimport { writeToTrackingBuffer } from './all-headers';\n\n/*\n  s2.2.6.8\n */\n\nexport const OPERATION_TYPE = {\n  TM_GET_DTC_ADDRESS: 0x00,\n  TM_PROPAGATE_XACT: 0x01,\n  TM_BEGIN_XACT: 0x05,\n  TM_PROMOTE_XACT: 0x06,\n  TM_COMMIT_XACT: 0x07,\n  TM_ROLLBACK_XACT: 0x08,\n  TM_SAVE_XACT: 0x09\n};\n\nexport const ISOLATION_LEVEL: { [key: string]: number } = {\n  NO_CHANGE: 0x00,\n  READ_UNCOMMITTED: 0x01,\n  READ_COMMITTED: 0x02,\n  REPEATABLE_READ: 0x03,\n  SERIALIZABLE: 0x04,\n  SNAPSHOT: 0x05\n};\n\nexport const isolationLevelByValue: { [key: number]: string } = {};\nfor (const name in ISOLATION_LEVEL) {\n  const value = ISOLATION_LEVEL[name];\n  isolationLevelByValue[value] = name;\n}\n\nexport function assertValidIsolationLevel(isolationLevel: any, name: string): asserts isolationLevel is 0 | 1 | 2 | 3 | 4 | 5 {\n  if (typeof isolationLevel !== 'number') {\n    throw new TypeError(`The \"${name}\" ${name.includes('.') ? 'property' : 'argument'} must be of type number. Received type ${typeof isolationLevel} (${isolationLevel})`);\n  }\n\n  if (!Number.isInteger(isolationLevel)) {\n    throw new RangeError(`The value of \"${name}\" is out of range. It must be an integer. Received: ${isolationLevel}`);\n  }\n\n  if (!(isolationLevel >= 0 && isolationLevel <= 5)) {\n    throw new RangeError(`The value of \"${name}\" is out of range. It must be >= 0 && <= 5. Received: ${isolationLevel}`);\n  }\n}\n\nexport class Transaction {\n  declare name: string;\n  declare isolationLevel: number;\n  declare outstandingRequestCount: number;\n\n  constructor(name: string, isolationLevel = ISOLATION_LEVEL.NO_CHANGE) {\n    this.name = name;\n    this.isolationLevel = isolationLevel;\n    this.outstandingRequestCount = 1;\n  }\n\n  beginPayload(txnDescriptor: Buffer) {\n    const buffer = new WritableTrackingBuffer(100, 'ucs2');\n    writeToTrackingBuffer(buffer, txnDescriptor, this.outstandingRequestCount);\n    buffer.writeUShort(OPERATION_TYPE.TM_BEGIN_XACT);\n    buffer.writeUInt8(this.isolationLevel);\n    buffer.writeUInt8(this.name.length * 2);\n    buffer.writeString(this.name, 'ucs2');\n\n    return {\n      *[Symbol.iterator]() {\n        yield buffer.data;\n      },\n      toString: () => {\n        return 'Begin Transaction: name=' + this.name + ', isolationLevel=' + isolationLevelByValue[this.isolationLevel];\n      }\n    };\n  }\n\n  commitPayload(txnDescriptor: Buffer) {\n    const buffer = new WritableTrackingBuffer(100, 'ascii');\n    writeToTrackingBuffer(buffer, txnDescriptor, this.outstandingRequestCount);\n    buffer.writeUShort(OPERATION_TYPE.TM_COMMIT_XACT);\n    buffer.writeUInt8(this.name.length * 2);\n    buffer.writeString(this.name, 'ucs2');\n    // No fBeginXact flag, so no new transaction is started.\n    buffer.writeUInt8(0);\n\n    return {\n      *[Symbol.iterator]() {\n        yield buffer.data;\n      },\n      toString: () => {\n        return 'Commit Transaction: name=' + this.name;\n      }\n    };\n  }\n\n  rollbackPayload(txnDescriptor: Buffer) {\n    const buffer = new WritableTrackingBuffer(100, 'ascii');\n    writeToTrackingBuffer(buffer, txnDescriptor, this.outstandingRequestCount);\n    buffer.writeUShort(OPERATION_TYPE.TM_ROLLBACK_XACT);\n    buffer.writeUInt8(this.name.length * 2);\n    buffer.writeString(this.name, 'ucs2');\n    // No fBeginXact flag, so no new transaction is started.\n    buffer.writeUInt8(0);\n\n    return {\n      *[Symbol.iterator]() {\n        yield buffer.data;\n      },\n      toString: () => {\n        return 'Rollback Transaction: name=' + this.name;\n      }\n    };\n  }\n\n  savePayload(txnDescriptor: Buffer) {\n    const buffer = new WritableTrackingBuffer(100, 'ascii');\n    writeToTrackingBuffer(buffer, txnDescriptor, this.outstandingRequestCount);\n    buffer.writeUShort(OPERATION_TYPE.TM_SAVE_XACT);\n    buffer.writeUInt8(this.name.length * 2);\n    buffer.writeString(this.name, 'ucs2');\n\n    return {\n      *[Symbol.iterator]() {\n        yield buffer.data;\n      },\n      toString: () => {\n        return 'Save Transaction: name=' + this.name;\n      }\n    };\n  }\n\n  isolationLevelToTSQL() {\n    switch (this.isolationLevel) {\n      case ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'READ UNCOMMITTED';\n      case ISOLATION_LEVEL.READ_COMMITTED:\n        return 'READ COMMITTED';\n      case ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'REPEATABLE READ';\n      case ISOLATION_LEVEL.SERIALIZABLE:\n        return 'SERIALIZABLE';\n      case ISOLATION_LEVEL.SNAPSHOT:\n        return 'SNAPSHOT';\n    }\n    return '';\n  }\n}\n", "import net from 'net';\nimport dns, { type LookupAddress } from 'dns';\n\nimport url from 'node:url';\nimport AbortError from './errors/abort-error';\n\ntype LookupFunction = (hostname: string, options: dns.LookupAllOptions, callback: (err: NodeJS.ErrnoException | null, addresses: dns.LookupAddress[]) => void) => void;\n\nexport async function connectInParallel(options: { host: string, port: number, localAddress?: string | undefined }, lookup: LookupFunction, signal: AbortSignal) {\n  if (signal.aborted) {\n    throw new AbortError();\n  }\n\n  const addresses = await lookupAllAddresses(options.host, lookup, signal);\n\n  return await new Promise<net.Socket>((resolve, reject) => {\n    const sockets = new Array(addresses.length);\n\n    const errors: Error[] = [];\n\n    function onError(this: net.Socket, err: Error) {\n      errors.push(err);\n\n      this.removeListener('error', onError);\n      this.removeListener('connect', onConnect);\n\n      this.destroy();\n\n      if (errors.length === addresses.length) {\n        signal.removeEventListener('abort', onAbort);\n\n        reject(new AggregateError(errors, 'Could not connect (parallel)'));\n      }\n    }\n\n    function onConnect(this: net.Socket) {\n      signal.removeEventListener('abort', onAbort);\n\n      for (let j = 0; j < sockets.length; j++) {\n        const socket = sockets[j];\n\n        if (this === socket) {\n          continue;\n        }\n\n        socket.removeListener('error', onError);\n        socket.removeListener('connect', onConnect);\n        socket.destroy();\n      }\n\n      resolve(this);\n    }\n\n    const onAbort = () => {\n      for (let j = 0; j < sockets.length; j++) {\n        const socket = sockets[j];\n\n        socket.removeListener('error', onError);\n        socket.removeListener('connect', onConnect);\n\n        socket.destroy();\n      }\n\n      reject(new AbortError());\n    };\n\n    for (let i = 0, len = addresses.length; i < len; i++) {\n      const socket = sockets[i] = net.connect({\n        ...options,\n        host: addresses[i].address,\n        family: addresses[i].family\n      });\n\n      socket.on('error', onError);\n      socket.on('connect', onConnect);\n    }\n\n    signal.addEventListener('abort', onAbort, { once: true });\n  });\n}\n\nexport async function connectInSequence(options: { host: string, port: number, localAddress?: string | undefined }, lookup: LookupFunction, signal: AbortSignal) {\n  if (signal.aborted) {\n    throw new AbortError();\n  }\n\n  const errors: any[] = [];\n  const addresses = await lookupAllAddresses(options.host, lookup, signal);\n\n  for (const address of addresses) {\n    try {\n      return await new Promise<net.Socket>((resolve, reject) => {\n        const socket = net.connect({\n          ...options,\n          host: address.address,\n          family: address.family\n        });\n\n        const onAbort = () => {\n          socket.removeListener('error', onError);\n          socket.removeListener('connect', onConnect);\n\n          socket.destroy();\n\n          reject(new AbortError());\n        };\n\n        const onError = (err: Error) => {\n          signal.removeEventListener('abort', onAbort);\n\n          socket.removeListener('error', onError);\n          socket.removeListener('connect', onConnect);\n\n          socket.destroy();\n\n          reject(err);\n        };\n\n        const onConnect = () => {\n          signal.removeEventListener('abort', onAbort);\n\n          socket.removeListener('error', onError);\n          socket.removeListener('connect', onConnect);\n\n          resolve(socket);\n        };\n\n        signal.addEventListener('abort', onAbort, { once: true });\n\n        socket.on('error', onError);\n        socket.on('connect', onConnect);\n      });\n    } catch (err) {\n      if (err instanceof Error && err.name === 'AbortError') {\n        throw err;\n      }\n\n      errors.push(err);\n\n      continue;\n    }\n  }\n\n  throw new AggregateError(errors, 'Could not connect (sequence)');\n}\n\n/**\n * Look up all addresses for the given hostname.\n */\nexport async function lookupAllAddresses(host: string, lookup: LookupFunction, signal: AbortSignal): Promise<dns.LookupAddress[]> {\n  if (signal.aborted) {\n    throw new AbortError();\n  }\n\n  if (net.isIPv6(host)) {\n    return [{ address: host, family: 6 }];\n  } else if (net.isIPv4(host)) {\n    return [{ address: host, family: 4 }];\n  } else {\n    return await new Promise<LookupAddress[]>((resolve, reject) => {\n      const onAbort = () => {\n        reject(new AbortError());\n      };\n\n      signal.addEventListener('abort', onAbort);\n\n      lookup(url.domainToASCII(host), { all: true }, (err, addresses) => {\n        signal.removeEventListener('abort', onAbort);\n\n        err ? reject(err) : resolve(addresses);\n      });\n    });\n  }\n}\n", "export const name = 'Tedious';\n", "const NTLMFlags = {\n  NTLM_NegotiateUnicode: 0x00000001,\n  NTLM_NegotiateOEM: 0x00000002,\n  NTLM_RequestTarget: 0x00000004,\n  NTLM_Unknown9: 0x00000008,\n  NTLM_NegotiateSign: 0x00000010,\n  NTLM_NegotiateSeal: 0x00000020,\n  NTLM_NegotiateDatagram: 0x00000040,\n  NTLM_NegotiateLanManagerKey: 0x00000080,\n  NTLM_Unknown8: 0x00000100,\n  NTLM_NegotiateNTLM: 0x00000200,\n  NTLM_NegotiateNTOnly: 0x00000400,\n  NTLM_Anonymous: 0x00000800,\n  NTLM_NegotiateOemDomainSupplied: 0x00001000,\n  NTLM_NegotiateOemWorkstationSupplied: 0x00002000,\n  NTLM_Unknown6: 0x00004000,\n  NTLM_NegotiateAlwaysSign: 0x00008000,\n  NTLM_TargetTypeDomain: 0x00010000,\n  NTLM_TargetTypeServer: 0x00020000,\n  NTLM_TargetTypeShare: 0x00040000,\n  NTLM_NegotiateExtendedSecurity: 0x00080000,\n  NTLM_NegotiateIdentify: 0x00100000,\n  NTLM_Unknown5: 0x00200000,\n  NTLM_RequestNonNTSessionKey: 0x00400000,\n  NTLM_NegotiateTargetInfo: 0x00800000,\n  NTLM_Unknown4: 0x01000000,\n  NTLM_NegotiateVersion: 0x02000000,\n  NTLM_Unknown3: 0x04000000,\n  NTLM_Unknown2: 0x08000000,\n  NTLM_Unknown1: 0x10000000,\n  NTLM_Negotiate128: 0x20000000,\n  NTLM_NegotiateKeyExchange: 0x40000000,\n  NTLM_Negotiate56: 0x80000000\n};\n\nexport function createNTLMRequest(options: { domain: string, workstation?: string }) {\n  const domain = escape(options.domain.toUpperCase());\n  const workstation = options.workstation ? escape(options.workstation.toUpperCase()) : '';\n\n  let type1flags = NTLMFlags.NTLM_NegotiateUnicode + NTLMFlags.NTLM_NegotiateOEM + NTLMFlags.NTLM_RequestTarget + NTLMFlags.NTLM_NegotiateNTLM + NTLMFlags.NTLM_NegotiateOemDomainSupplied + NTLMFlags.NTLM_NegotiateOemWorkstationSupplied + NTLMFlags.NTLM_NegotiateAlwaysSign + NTLMFlags.NTLM_NegotiateVersion + NTLMFlags.NTLM_NegotiateExtendedSecurity + NTLMFlags.NTLM_Negotiate128 + NTLMFlags.NTLM_Negotiate56;\n  if (workstation === '') {\n    type1flags -= NTLMFlags.NTLM_NegotiateOemWorkstationSupplied;\n  }\n\n  const fixedData = Buffer.alloc(40);\n  const buffers = [fixedData];\n  let offset = 0;\n\n  offset += fixedData.write('NTLMSSP', offset, 7, 'ascii');\n  offset = fixedData.writeUInt8(0, offset);\n  offset = fixedData.writeUInt32LE(1, offset);\n  offset = fixedData.writeUInt32LE(type1flags, offset);\n  offset = fixedData.writeUInt16LE(domain.length, offset);\n  offset = fixedData.writeUInt16LE(domain.length, offset);\n  offset = fixedData.writeUInt32LE(fixedData.length + workstation.length, offset);\n  offset = fixedData.writeUInt16LE(workstation.length, offset);\n  offset = fixedData.writeUInt16LE(workstation.length, offset);\n  offset = fixedData.writeUInt32LE(fixedData.length, offset);\n  offset = fixedData.writeUInt8(5, offset);\n  offset = fixedData.writeUInt8(0, offset);\n  offset = fixedData.writeUInt16LE(2195, offset);\n  offset = fixedData.writeUInt8(0, offset);\n  offset = fixedData.writeUInt8(0, offset);\n  offset = fixedData.writeUInt8(0, offset);\n  fixedData.writeUInt8(15, offset);\n\n  buffers.push(Buffer.from(workstation, 'ascii'));\n  buffers.push(Buffer.from(domain, 'ascii'));\n\n  return Buffer.concat(buffers);\n}\n", "import BulkLoad from './bulk-load';\n\nexport class BulkLoadPayload implements AsyncIterable<Buffer> {\n  declare bulkLoad: BulkLoad;\n  declare iterator: AsyncIterableIterator<Buffer>;\n\n  constructor(bulkLoad: BulkLoad) {\n    this.bulkLoad = bulkLoad;\n\n    // We need to grab the iterator here so that `error` event handlers are set up\n    // as early as possible (and are not potentially lost).\n    this.iterator = this.bulkLoad.rowToPacketTransform[Symbol.asyncIterator]();\n  }\n\n  [Symbol.asyncIterator]() {\n    return this.iterator;\n  }\n\n  toString(indent = '') {\n    return indent + ('BulkLoad');\n  }\n}\n", "const procedures = {\n  Sp_Cursor: 1,\n  Sp_CursorOpen: 2,\n  Sp_CursorPrepare: 3,\n  Sp_CursorExecute: 4,\n  Sp_CursorPrepExec: 5,\n  Sp_CursorUnprepare: 6,\n  Sp_CursorFetch: 7,\n  Sp_CursorOption: 8,\n  Sp_CursorClose: 9,\n  Sp_ExecuteSql: 10,\n  Sp_Prepare: 11,\n  Sp_Execute: 12,\n  Sp_PrepExec: 13,\n  Sp_PrepExecRpc: 14,\n  Sp_Unprepare: 15\n};\n\nexport default procedures;\nmodule.exports = procedures;\n", "{\n  \"author\": \"Mike D Pilsbury <mike.pilsbury@gmail.com>\",\n  \"contributors\": [\n    \"Alex Robson\",\n    \"Arthur Schreiber\",\n    \"Bret Copeland <bret@atlantisflight.org> (https://github.com/bretcope)\",\n    \"Bryan Ross <bryan@rossipedia.com> (https://github.com/rossipedia)\",\n    \"Ciaran Jessup <ciaranj@gmail.com>\",\n    \"Cort Fritz <cfritz@caa.com>\",\n    \"lastonesky\",\n    \"Patrik Simek <patrik@patriksimek.cz>\",\n    \"Phil Dodderidge <pdodde@poyntz.com>\",\n    \"Zach Aller\"\n  ],\n  \"name\": \"tedious\",\n  \"description\": \"A TDS driver, for connecting to MS SQLServer databases.\",\n  \"keywords\": [\n    \"sql\",\n    \"database\",\n    \"mssql\",\n    \"sqlserver\",\n    \"sql-server\",\n    \"tds\",\n    \"msnodesql\",\n    \"azure\"\n  ],\n  \"homepage\": \"https://github.com/tediousjs/tedious\",\n  \"bugs\": \"https://github.com/tediousjs/tedious/issues\",\n  \"license\": \"MIT\",\n  \"version\": \"18.2.0\",\n  \"main\": \"./lib/tedious.js\",\n  \"types\": \"./lib/tedious.d.ts\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/tediousjs/tedious.git\"\n  },\n  \"engines\": {\n    \"node\": \">=18\"\n  },\n  \"publishConfig\": {\n    \"tag\": \"next\"\n  },\n  \"dependencies\": {\n    \"@azure/identity\": \"^3.4.1\",\n    \"@azure/keyvault-keys\": \"^4.4.0\",\n    \"@js-joda/core\": \"^5.6.1\",\n    \"@types/node\": \">=18\",\n    \"bl\": \"^6.0.11\",\n    \"iconv-lite\": \"^0.6.3\",\n    \"js-md4\": \"^0.3.2\",\n    \"native-duplexpair\": \"^1.0.0\",\n    \"sprintf-js\": \"^1.1.3\"\n  },\n  \"devDependencies\": {\n    \"@babel/cli\": \"^7.23.9\",\n    \"@babel/core\": \"^7.23.9\",\n    \"@babel/node\": \"^7.23.9\",\n    \"@babel/preset-env\": \"^7.23.9\",\n    \"@babel/preset-typescript\": \"^7.23.3\",\n    \"@babel/register\": \"^7.23.7\",\n    \"@types/async\": \"^3.2.24\",\n    \"@types/bl\": \"^5.1.0\",\n    \"@types/chai\": \"^4.3.12\",\n    \"@types/depd\": \"^1.1.36\",\n    \"@types/lru-cache\": \"^5.1.1\",\n    \"@types/mocha\": \"^10.0.6\",\n    \"@types/sprintf-js\": \"^1.1.4\",\n    \"@typescript-eslint/eslint-plugin\": \"^7.0.2\",\n    \"@typescript-eslint/parser\": \"^7.0.2\",\n    \"async\": \"^3.2.5\",\n    \"babel-plugin-istanbul\": \"^6.1.1\",\n    \"chai\": \"^4.4.1\",\n    \"codecov\": \"^3.8.3\",\n    \"eslint\": \"^8.57.0\",\n    \"mitm\": \"^1.7.2\",\n    \"mocha\": \"^10.3.0\",\n    \"nyc\": \"^15.1.0\",\n    \"rimraf\": \"^5.0.5\",\n    \"semantic-release\": \"^19.0.3\",\n    \"sinon\": \"^15.2.0\",\n    \"typedoc\": \"^0.25.8\",\n    \"typescript\": \"^5.3.3\"\n  },\n  \"scripts\": {\n    \"docs\": \"typedoc\",\n    \"lint\": \"eslint src test --ext .js,.ts && tsc\",\n    \"test\": \"mocha --forbid-only test/unit test/unit/token test/unit/tracking-buffer\",\n    \"test-integration\": \"mocha --forbid-only test/integration/\",\n    \"test-all\": \"mocha --forbid-only test/unit/ test/unit/token/ test/unit/tracking-buffer test/integration/\",\n    \"build:types\": \"tsc --project tsconfig.build-types.json\",\n    \"build\": \"rimraf lib && babel src --out-dir lib --extensions .js,.ts && npm run build:types\",\n    \"prepublish\": \"npm run build\",\n    \"semantic-release\": \"semantic-release\"\n  },\n  \"babel\": {\n    \"sourceMaps\": \"both\",\n    \"ignore\": [\n      \"./src/**/*.d.ts\"\n    ],\n    \"presets\": [\n      [\n        \"@babel/preset-env\",\n        {\n          \"targets\": {\n            \"node\": 18\n          }\n        }\n      ],\n      [\n        \"@babel/preset-typescript\",\n        {\n          \"allowDeclareFields\": true\n        }\n      ]\n    ],\n    \"plugins\": [\n      [\n        \"@babel/transform-typescript\",\n        {\n          \"allowDeclareFields\": true\n        }\n      ]\n    ]\n  },\n  \"mocha\": {\n    \"require\": \"test/setup.js\",\n    \"timeout\": 5000,\n    \"extension\": [\n      \"js\",\n      \"ts\"\n    ]\n  },\n  \"nyc\": {\n    \"sourceMap\": false,\n    \"instrument\": false,\n    \"extension\": [\n      \".ts\"\n    ]\n  }\n}\n", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"url\" has been externalized for browser compatibility. Cannot access \"url.${key}\" in client code. See https://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "import Connection from '../connection';\nimport Request from '../request';\nimport { ConnectionError, RequestError } from '../errors';\nimport { type ColumnMetadata } from './colmetadata-token-parser';\nimport {\n  BeginTransactionEnvChangeToken,\n  CharsetEnvChangeToken,\n  CollationChangeToken,\n  ColMetadataToken,\n  CommitTransactionEnvChangeToken,\n  DatabaseEnvChangeToken,\n  DatabaseMirroringPartnerEnvChangeToken,\n  DoneInProcToken,\n  DoneProcToken,\n  DoneToken,\n  ErrorMessageToken,\n  FeatureExtAckToken,\n  FedAuthInfoToken,\n  InfoMessageToken,\n  LanguageEnvChangeToken,\n  LoginAckToken,\n  NBCRowToken,\n  OrderToken,\n  PacketSizeEnvChangeToken,\n  ResetConnectionEnvChangeToken,\n  ReturnStatusToken,\n  ReturnValueToken,\n  RollbackTransactionEnvChangeToken,\n  RoutingEnvChangeToken,\n  RowToken,\n  SSPIToken,\n  Token\n} from './token';\nimport BulkLoad from '../bulk-load';\n\nexport class UnexpectedTokenError extends Error {\n  constructor(handler: TokenHandler, token: Token) {\n    super('Unexpected token `' + token.name + '` in `' + handler.constructor.name + '`');\n  }\n}\n\nexport class TokenHandler {\n  onInfoMessage(token: InfoMessageToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onSSPI(token: SSPIToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRoutingChange(token: RoutingEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onResetConnection(token: ResetConnectionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onBeginTransaction(token: BeginTransactionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onCommitTransaction(token: CommitTransactionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRollbackTransaction(token: RollbackTransactionEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onFedAuthInfo(token: FedAuthInfoToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onFeatureExtAck(token: FeatureExtAckToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onLoginAck(token: LoginAckToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onColMetadata(token: ColMetadataToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onOrder(token: OrderToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onRow(token: RowToken | NBCRowToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onReturnStatus(token: ReturnStatusToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onReturnValue(token: ReturnValueToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDoneProc(token: DoneProcToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDone(token: DoneToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n\n  onDatabaseMirroringPartner(token: DatabaseMirroringPartnerEnvChangeToken) {\n    throw new UnexpectedTokenError(this, token);\n  }\n}\n\n/**\n * A handler for tokens received in the response message to the initial SQL Batch request\n * that sets up different connection settings.\n */\nexport class InitialSqlTokenHandler extends TokenHandler {\n  declare connection: Connection;\n\n  constructor(connection: Connection) {\n    super();\n\n    this.connection = connection;\n  }\n\n  onInfoMessage(token: InfoMessageToken) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    this.connection.emit('errorMessage', token);\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onBeginTransaction(token: BeginTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n\n  onCommitTransaction(token: CommitTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n\n  onRollbackTransaction(token: RollbackTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    // An outermost transaction was rolled back. Reset the transaction counter\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n\n  onColMetadata(token: ColMetadataToken) {\n    this.connection.emit('error', new Error(\"Received 'columnMetadata' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onOrder(token: OrderToken) {\n    this.connection.emit('error', new Error(\"Received 'order' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onRow(token: RowToken | NBCRowToken) {\n    this.connection.emit('error', new Error(\"Received 'row' when no sqlRequest is in progress\"));\n    this.connection.close();\n  }\n\n  onReturnStatus(token: ReturnStatusToken) {\n    // Do nothing\n  }\n\n  onReturnValue(token: ReturnValueToken) {\n    // Do nothing\n  }\n\n  onDoneProc(token: DoneProcToken) {\n    // Do nothing\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    // Do nothing\n  }\n\n  onDone(token: DoneToken) {\n    // Do nothing\n  }\n\n  onResetConnection(token: ResetConnectionEnvChangeToken) {\n    this.connection.emit('resetConnection');\n  }\n}\n\n/**\n * A handler for tokens received in the response message to a Login7 message.\n */\nexport class Login7TokenHandler extends TokenHandler {\n  declare connection: Connection;\n\n  declare fedAuthInfoToken: FedAuthInfoToken | undefined;\n  declare routingData: { server: string, port: number } | undefined;\n\n  declare loginAckReceived: boolean;\n\n  constructor(connection: Connection) {\n    super();\n    this.loginAckReceived = false;\n    this.connection = connection;\n  }\n\n  onInfoMessage(token: InfoMessageToken) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    this.connection.emit('errorMessage', token);\n\n    const error = new ConnectionError(token.message, 'ELOGIN');\n\n    const isLoginErrorTransient = this.connection.transientErrorLookup.isTransientError(token.number);\n    if (isLoginErrorTransient && this.connection.curTransientRetryCount !== this.connection.config.options.maxRetriesOnTransientErrors) {\n      error.isTransient = true;\n    }\n\n    this.connection.loginError = error;\n  }\n\n  onSSPI(token: SSPIToken) {\n    if (token.ntlmpacket) {\n      this.connection.ntlmpacket = token.ntlmpacket;\n      this.connection.ntlmpacketBuffer = token.ntlmpacketBuffer;\n    }\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onFedAuthInfo(token: FedAuthInfoToken) {\n    this.fedAuthInfoToken = token;\n  }\n\n  onFeatureExtAck(token: FeatureExtAckToken) {\n    const { authentication } = this.connection.config;\n\n    if (authentication.type === 'azure-active-directory-password' || authentication.type === 'azure-active-directory-access-token' || authentication.type === 'azure-active-directory-msi-vm' || authentication.type === 'azure-active-directory-msi-app-service' || authentication.type === 'azure-active-directory-service-principal-secret' || authentication.type === 'azure-active-directory-default') {\n      if (token.fedAuth === undefined) {\n        this.connection.loginError = new ConnectionError('Did not receive Active Directory authentication acknowledgement');\n      } else if (token.fedAuth.length !== 0) {\n        this.connection.loginError = new ConnectionError(`Active Directory authentication acknowledgment for ${authentication.type} authentication method includes extra data`);\n      }\n    } else if (token.fedAuth === undefined && token.utf8Support === undefined) {\n      this.connection.loginError = new ConnectionError('Received acknowledgement for unknown feature');\n    } else if (token.fedAuth) {\n      this.connection.loginError = new ConnectionError('Did not request Active Directory authentication, but received the acknowledgment');\n    }\n  }\n\n  onLoginAck(token: LoginAckToken) {\n    if (!token.tdsVersion) {\n      // unsupported TDS version\n      this.connection.loginError = new ConnectionError('Server responded with unknown TDS version.', 'ETDS');\n      return;\n    }\n\n    if (!token.interface) {\n      // unsupported interface\n      this.connection.loginError = new ConnectionError('Server responded with unsupported interface.', 'EINTERFACENOTSUPP');\n      return;\n    }\n\n    // use negotiated version\n    this.connection.config.options.tdsVersion = token.tdsVersion;\n\n    this.loginAckReceived = true;\n  }\n\n  onRoutingChange(token: RoutingEnvChangeToken) {\n    // Removes instance name attached to the redirect url. E.g., redirect.db.net\\instance1 --> redirect.db.net\n    const [ server ] = token.newValue.server.split('\\\\');\n\n    this.routingData = {\n      server, port: token.newValue.port\n    };\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    // Do nothing\n  }\n\n  onDone(token: DoneToken) {\n    // Do nothing\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onDatabaseMirroringPartner(token: DatabaseMirroringPartnerEnvChangeToken) {\n    // Do nothing\n  }\n}\n\n/**\n * A handler for tokens received in the response message to a RPC Request,\n * a SQL Batch Request, a Bulk Load BCP Request or a Transaction Manager Request.\n */\nexport class RequestTokenHandler extends TokenHandler {\n  declare connection: Connection;\n  declare request: Request | BulkLoad;\n  declare errors: RequestError[];\n\n  constructor(connection: Connection, request: Request | BulkLoad) {\n    super();\n\n    this.connection = connection;\n    this.request = request;\n    this.errors = [];\n  }\n\n  onInfoMessage(token: InfoMessageToken) {\n    this.connection.emit('infoMessage', token);\n  }\n\n  onErrorMessage(token: ErrorMessageToken) {\n    this.connection.emit('errorMessage', token);\n\n    if (!this.request.canceled) {\n      const error = new RequestError(token.message, 'EREQUEST');\n\n      error.number = token.number;\n      error.state = token.state;\n      error.class = token.class;\n      error.serverName = token.serverName;\n      error.procName = token.procName;\n      error.lineNumber = token.lineNumber;\n      this.errors.push(error);\n      this.request.error = error;\n      if (this.request instanceof Request && this.errors.length > 1) {\n        this.request.error = new AggregateError(this.errors);\n      }\n    }\n  }\n\n  onDatabaseChange(token: DatabaseEnvChangeToken) {\n    this.connection.emit('databaseChange', token.newValue);\n  }\n\n  onLanguageChange(token: LanguageEnvChangeToken) {\n    this.connection.emit('languageChange', token.newValue);\n  }\n\n  onCharsetChange(token: CharsetEnvChangeToken) {\n    this.connection.emit('charsetChange', token.newValue);\n  }\n\n  onSqlCollationChange(token: CollationChangeToken) {\n    this.connection.databaseCollation = token.newValue;\n  }\n\n  onPacketSizeChange(token: PacketSizeEnvChangeToken) {\n    this.connection.messageIo.packetSize(token.newValue);\n  }\n\n  onBeginTransaction(token: BeginTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.push(token.newValue);\n    this.connection.inTransaction = true;\n  }\n\n  onCommitTransaction(token: CommitTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    this.connection.inTransaction = false;\n  }\n\n  onRollbackTransaction(token: RollbackTransactionEnvChangeToken) {\n    this.connection.transactionDescriptors.length = 1;\n    // An outermost transaction was rolled back. Reset the transaction counter\n    this.connection.inTransaction = false;\n    this.connection.emit('rollbackTransaction');\n  }\n\n  onColMetadata(token: ColMetadataToken) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.useColumnNames) {\n        const columns: { [key: string]: ColumnMetadata } = Object.create(null);\n\n        for (let j = 0, len = token.columns.length; j < len; j++) {\n          const col = token.columns[j];\n          if (columns[col.colName] == null) {\n            columns[col.colName] = col;\n          }\n        }\n\n        this.request.emit('columnMetadata', columns);\n      } else {\n        this.request.emit('columnMetadata', token.columns);\n      }\n    }\n  }\n\n  onOrder(token: OrderToken) {\n    if (!this.request.canceled) {\n      this.request.emit('order', token.orderColumns);\n    }\n  }\n\n  onRow(token: RowToken | NBCRowToken) {\n    if (!this.request.canceled) {\n      if (this.connection.config.options.rowCollectionOnRequestCompletion) {\n        this.request.rows!.push(token.columns);\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst!.push(token.columns);\n      }\n\n      this.request.emit('row', token.columns);\n    }\n  }\n\n  onReturnStatus(token: ReturnStatusToken) {\n    if (!this.request.canceled) {\n      // Keep value for passing in 'doneProc' event.\n      this.connection.procReturnStatusValue = token.value;\n    }\n  }\n\n  onReturnValue(token: ReturnValueToken) {\n    if (!this.request.canceled) {\n      this.request.emit('returnValue', token.paramName, token.value, token.metadata);\n    }\n  }\n\n  onDoneProc(token: DoneProcToken) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n\n      this.request.emit('doneProc', token.rowCount, token.more, this.connection.procReturnStatusValue, this.request.rst);\n\n      this.connection.procReturnStatusValue = undefined;\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount! += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onDoneInProc(token: DoneInProcToken) {\n    if (!this.request.canceled) {\n      this.request.emit('doneInProc', token.rowCount, token.more, this.request.rst);\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount! += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onDone(token: DoneToken) {\n    if (!this.request.canceled) {\n      if (token.sqlError && !this.request.error) {\n        // check if the DONE_ERROR flags was set, but an ERROR token was not sent.\n        this.request.error = new RequestError('An unknown error has occurred.', 'UNKNOWN');\n      }\n\n      this.request.emit('done', token.rowCount, token.more, this.request.rst);\n\n      if (token.rowCount !== undefined) {\n        this.request.rowCount! += token.rowCount;\n      }\n\n      if (this.connection.config.options.rowCollectionOnDone) {\n        this.request.rst = [];\n      }\n    }\n  }\n\n  onResetConnection(token: ResetConnectionEnvChangeToken) {\n    this.connection.emit('resetConnection');\n  }\n}\n\n/**\n * A handler for the attention acknowledgement message.\n *\n * This message only contains a `DONE` token that acknowledges\n * that the attention message was received by the server.\n */\nexport class AttentionTokenHandler extends TokenHandler {\n  declare connection: Connection;\n  declare request: Request | BulkLoad;\n\n  /**\n   * Returns whether an attention acknowledgement was received.\n   */\n  declare attentionReceived: boolean;\n\n  constructor(connection: Connection, request: Request | BulkLoad) {\n    super();\n\n    this.connection = connection;\n    this.request = request;\n\n    this.attentionReceived = false;\n  }\n\n  onDone(token: DoneToken) {\n    if (token.attention) {\n      this.attentionReceived = true;\n    }\n  }\n}\n", "import crypto from 'crypto';\nimport os from 'os';\nimport * as tls from 'tls';\nimport * as net from 'net';\nimport dns from 'dns';\n\nimport constants from 'constants';\nimport { type SecureContextOptions } from 'tls';\n\nimport { Readable } from 'stream';\n\nimport {\n  DefaultAzureCredential,\n  ClientSecretCredential,\n  ManagedIdentityCredential,\n  UsernamePasswordCredential,\n} from '@azure/identity';\n\nimport BulkLoad, { type Options as BulkLoadOptions, type Callback as BulkLoadCallback } from './bulk-load';\nimport Debug from './debug';\nimport { EventEmitter, once } from 'events';\nimport { instanceLookup } from './instance-lookup';\nimport { TransientErrorLookup } from './transient-error-lookup';\nimport { TYPE } from './packet';\nimport PreloginPayload from './prelogin-payload';\nimport Login7Payload from './login7-payload';\nimport NTLMResponsePayload from './ntlm-payload';\nimport Request from './request';\nimport RpcRequestPayload from './rpcrequest-payload';\nimport SqlBatchPayload from './sqlbatch-payload';\nimport MessageIO from './message-io';\nimport { Parser as TokenStreamParser } from './token/token-stream-parser';\nimport { Transaction, ISOLATION_LEVEL, assertValidIsolationLevel } from './transaction';\nimport { ConnectionError, RequestError } from './errors';\nimport { connectInParallel, connectInSequence } from './connector';\nimport { name as libraryName } from './library';\nimport { versions } from './tds-versions';\nimport Message from './message';\nimport { type Metadata } from './metadata-parser';\nimport { createNTLMRequest } from './ntlm';\nimport { ColumnEncryptionAzureKeyVaultProvider } from './always-encrypted/keystore-provider-azure-key-vault';\n\nimport { type Parameter, TYPES } from './data-type';\nimport { BulkLoadPayload } from './bulk-load-payload';\nimport { Collation } from './collation';\nimport Procedures from './special-stored-procedure';\n\nimport { version } from '../package.json';\nimport { URL } from 'url';\nimport { AttentionTokenHandler, InitialSqlTokenHandler, Login7TokenHandler, RequestTokenHandler, TokenHandler } from './token/handler';\n\ntype BeginTransactionCallback =\n  /**\n   * The callback is called when the request to start the transaction has completed,\n   * either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   * @param transactionDescriptor A Buffer that describe the transaction\n   */\n  (err: Error | null | undefined, transactionDescriptor?: Buffer) => void\n\ntype SaveTransactionCallback =\n  /**\n   * The callback is called when the request to set a savepoint within the\n   * transaction has completed, either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype CommitTransactionCallback =\n  /**\n   * The callback is called when the request to commit the transaction has completed,\n   * either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype RollbackTransactionCallback =\n  /**\n   * The callback is called when the request to rollback the transaction has\n   * completed, either successfully or with an error.\n   * If an error occurred then err will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype ResetCallback =\n  /**\n   * The callback is called when the connection reset has completed,\n   * either successfully or with an error.\n   *\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another\n   * request should not be initiated until this callback is called\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype TransactionCallback<T extends (err: Error | null | undefined, ...args: any[]) => void> =\n  /**\n   * The callback is called when the request to start a transaction (or create a savepoint, in\n   * the case of a nested transaction) has completed, either successfully or with an error.\n   * If an error occurred, then `err` will describe the error.\n   * If no error occurred, the callback should perform its work and eventually call\n   * `done` with an error or null (to trigger a transaction rollback or a\n   * transaction commit) and an additional completion callback that will be called when the request\n   * to rollback or commit the current transaction has completed, either successfully or with an error.\n   * Additional arguments given to `done` will be passed through to this callback.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until the completion callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   * @param txDone If no error occurred, a function to be called to commit or rollback the transaction.\n   */\n  (err: Error | null | undefined, txDone?: TransactionDone<T>) => void;\n\ntype TransactionDoneCallback = (err: Error | null | undefined, ...args: any[]) => void;\ntype CallbackParameters<T extends (err: Error | null | undefined, ...args: any[]) => any> = T extends (err: Error | null | undefined, ...args: infer P) => any ? P : never;\n\ntype TransactionDone<T extends (err: Error | null | undefined, ...args: any[]) => void> =\n  /**\n   * If no error occurred, a function to be called to commit or rollback the transaction.\n   *\n   * @param err If an err occurred, a string with details of the error.\n   */\n  (err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void;\n\n/**\n * @private\n */\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\n * @private\n */\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\n * @private\n */\nconst DEFAULT_TEXTSIZE = 2147483647;\n/**\n * @private\n */\nconst DEFAULT_DATEFIRST = 7;\n/**\n * @private\n */\nconst DEFAULT_PORT = 1433;\n/**\n * @private\n */\nconst DEFAULT_TDS_VERSION = '7_4';\n/**\n * @private\n */\nconst DEFAULT_LANGUAGE = 'us_english';\n/**\n * @private\n */\nconst DEFAULT_DATEFORMAT = 'mdy';\n\ninterface AzureActiveDirectoryMsiAppServiceAuthentication {\n  type: 'azure-active-directory-msi-app-service';\n  options: {\n    /**\n     * If you user want to connect to an Azure app service using a specific client account\n     * they need to provide `clientId` associate to their created identity.\n     *\n     * This is optional for retrieve token from azure web app service\n     */\n    clientId?: string;\n  };\n}\n\ninterface AzureActiveDirectoryMsiVmAuthentication {\n  type: 'azure-active-directory-msi-vm';\n  options: {\n    /**\n     * If you want to connect using a specific client account\n     * they need to provide `clientId` associated to their created identity.\n     *\n     * This is optional for retrieve a token\n     */\n    clientId?: string;\n  };\n}\n\ninterface AzureActiveDirectoryDefaultAuthentication {\n  type: 'azure-active-directory-default';\n  options: {\n    /**\n     * If you want to connect using a specific client account\n     * they need to provide `clientId` associated to their created identity.\n     *\n     * This is optional for retrieving a token\n     */\n    clientId?: string;\n  };\n}\n\n\ninterface AzureActiveDirectoryAccessTokenAuthentication {\n  type: 'azure-active-directory-access-token';\n  options: {\n    /**\n     * A user need to provide `token` which they retrieved else where\n     * to forming the connection.\n     */\n    token: string;\n  };\n}\n\ninterface AzureActiveDirectoryPasswordAuthentication {\n  type: 'azure-active-directory-password';\n  options: {\n    /**\n     * A user need to provide `userName` associate to their account.\n     */\n    userName: string;\n\n    /**\n     * A user need to provide `password` associate to their account.\n     */\n    password: string;\n\n    /**\n     * A client id to use.\n     */\n    clientId: string;\n\n    /**\n     * Optional parameter for specific Azure tenant ID\n     */\n    tenantId: string;\n  };\n}\n\ninterface AzureActiveDirectoryServicePrincipalSecret {\n  type: 'azure-active-directory-service-principal-secret';\n  options: {\n    /**\n     * Application (`client`) ID from your registered Azure application\n     */\n    clientId: string;\n    /**\n     * The created `client secret` for this registered Azure application\n     */\n    clientSecret: string;\n    /**\n     * Directory (`tenant`) ID from your registered Azure application\n     */\n    tenantId: string;\n  };\n}\n\ninterface NtlmAuthentication {\n  type: 'ntlm';\n  options: {\n    /**\n     * User name from your windows account.\n     */\n    userName: string;\n    /**\n     * Password from your windows account.\n     */\n    password: string;\n    /**\n     * Once you set domain for ntlm authentication type, driver will connect to SQL Server using domain login.\n     *\n     * This is necessary for forming a connection using ntlm type\n     */\n    domain: string;\n  };\n}\n\ninterface DefaultAuthentication {\n  type: 'default';\n  options: {\n    /**\n     * User name to use for sql server login.\n     */\n    userName?: string | undefined;\n    /**\n     * Password to use for sql server login.\n     */\n    password?: string | undefined;\n  };\n}\n\ninterface ErrorWithCode extends Error {\n  code?: string;\n}\n\nexport type ConnectionAuthentication = DefaultAuthentication | NtlmAuthentication | AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryAccessTokenAuthentication | AzureActiveDirectoryServicePrincipalSecret | AzureActiveDirectoryDefaultAuthentication;\n\ninterface InternalConnectionConfig {\n  server: string;\n  authentication: ConnectionAuthentication;\n  options: InternalConnectionOptions;\n}\n\nexport interface InternalConnectionOptions {\n  abortTransactionOnError: boolean;\n  appName: undefined | string;\n  camelCaseColumns: boolean;\n  cancelTimeout: number;\n  columnEncryptionKeyCacheTTL: number;\n  columnEncryptionSetting: boolean;\n  columnNameReplacer: undefined | ((colName: string, index: number, metadata: Metadata) => string);\n  connectionRetryInterval: number;\n  connector: undefined | (() => Promise<net.Socket>);\n  connectTimeout: number;\n  connectionIsolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL];\n  cryptoCredentialsDetails: SecureContextOptions;\n  database: undefined | string;\n  datefirst: number;\n  dateFormat: string;\n  debug: {\n    data: boolean;\n    packet: boolean;\n    payload: boolean;\n    token: boolean;\n  };\n  enableAnsiNull: null | boolean;\n  enableAnsiNullDefault: null | boolean;\n  enableAnsiPadding: null | boolean;\n  enableAnsiWarnings: null | boolean;\n  enableArithAbort: null | boolean;\n  enableConcatNullYieldsNull: null | boolean;\n  enableCursorCloseOnCommit: null | boolean;\n  enableImplicitTransactions: null | boolean;\n  enableNumericRoundabort: null | boolean;\n  enableQuotedIdentifier: null | boolean;\n  encrypt: string | boolean;\n  encryptionKeyStoreProviders: KeyStoreProviderMap | undefined;\n  fallbackToDefaultDb: boolean;\n  instanceName: undefined | string;\n  isolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL];\n  language: string;\n  localAddress: undefined | string;\n  maxRetriesOnTransientErrors: number;\n  multiSubnetFailover: boolean;\n  packetSize: number;\n  port: undefined | number;\n  readOnlyIntent: boolean;\n  requestTimeout: number;\n  rowCollectionOnDone: boolean;\n  rowCollectionOnRequestCompletion: boolean;\n  serverName: undefined | string;\n  serverSupportsColumnEncryption: boolean;\n  tdsVersion: string;\n  textsize: number;\n  trustedServerNameAE: string | undefined;\n  trustServerCertificate: boolean;\n  useColumnNames: boolean;\n  useUTC: boolean;\n  workstationId: undefined | string;\n  lowerCaseGuids: boolean;\n}\n\ninterface KeyStoreProviderMap {\n  [key: string]: ColumnEncryptionAzureKeyVaultProvider;\n}\n\n/**\n * @private\n */\ninterface State {\n  name: string;\n  enter?(this: Connection): void;\n  exit?(this: Connection, newState: State): void;\n  events: {\n    socketError?(this: Connection, err: Error): void;\n    connectTimeout?(this: Connection): void;\n    message?(this: Connection, message: Message): void;\n    retry?(this: Connection): void;\n    reconnect?(this: Connection): void;\n  };\n}\n\ntype Authentication = DefaultAuthentication |\n  NtlmAuthentication |\n  AzureActiveDirectoryPasswordAuthentication |\n  AzureActiveDirectoryMsiAppServiceAuthentication |\n  AzureActiveDirectoryMsiVmAuthentication |\n  AzureActiveDirectoryAccessTokenAuthentication |\n  AzureActiveDirectoryServicePrincipalSecret |\n  AzureActiveDirectoryDefaultAuthentication;\n\ntype AuthenticationType = Authentication['type'];\n\nexport interface ConnectionConfiguration {\n  /**\n   * Hostname to connect to.\n   */\n  server: string;\n  /**\n   * Configuration options for forming the connection.\n   */\n  options?: ConnectionOptions;\n  /**\n   * Authentication related options for connection.\n   */\n  authentication?: AuthenticationOptions;\n}\n\ninterface DebugOptions {\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet data details\n   *\n   * (default: `false`)\n   */\n  data: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet details\n   *\n   * (default: `false`)\n   */\n  packet: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet payload details\n   *\n   * (default: `false`)\n   */\n  payload: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing token stream tokens\n   *\n   * (default: `false`)\n   */\n  token: boolean;\n}\n\ninterface AuthenticationOptions {\n  /**\n   * Type of the authentication method, valid types are `default`, `ntlm`,\n   * `azure-active-directory-password`, `azure-active-directory-access-token`,\n   * `azure-active-directory-msi-vm`, `azure-active-directory-msi-app-service`,\n   * `azure-active-directory-default`\n   * or `azure-active-directory-service-principal-secret`\n   */\n  type?: AuthenticationType;\n  /**\n   * Different options for authentication types:\n   *\n   * * `default`: [[DefaultAuthentication.options]]\n   * * `ntlm` :[[NtlmAuthentication]]\n   * * `azure-active-directory-password` : [[AzureActiveDirectoryPasswordAuthentication.options]]\n   * * `azure-active-directory-access-token` : [[AzureActiveDirectoryAccessTokenAuthentication.options]]\n   * * `azure-active-directory-msi-vm` : [[AzureActiveDirectoryMsiVmAuthentication.options]]\n   * * `azure-active-directory-msi-app-service` : [[AzureActiveDirectoryMsiAppServiceAuthentication.options]]\n   * * `azure-active-directory-service-principal-secret` : [[AzureActiveDirectoryServicePrincipalSecret.options]]\n   * * `azure-active-directory-default` : [[AzureActiveDirectoryDefaultAuthentication.options]]\n   */\n  options?: any;\n}\n\nexport interface ConnectionOptions {\n  /**\n   * A boolean determining whether to rollback a transaction automatically if any error is encountered\n   * during the given transaction's execution. This sets the value for `SET XACT_ABORT` during the\n   * initial SQL phase of a connection [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-xact-abort-transact-sql).\n   */\n  abortTransactionOnError?: boolean;\n\n  /**\n   * Application name used for identifying a specific application in profiling, logging or tracing tools of SQLServer.\n   *\n   * (default: `Tedious`)\n   */\n  appName?: string | undefined;\n\n  /**\n   * A boolean, controlling whether the column names returned will have the first letter converted to lower case\n   * (`true`) or not. This value is ignored if you provide a [[columnNameReplacer]].\n   *\n   * (default: `false`).\n   */\n  camelCaseColumns?: boolean;\n\n  /**\n   * The number of milliseconds before the [[Request.cancel]] (abort) of a request is considered failed\n   *\n   * (default: `5000`).\n   */\n  cancelTimeout?: number;\n\n  /**\n   * A function with parameters `(columnName, index, columnMetaData)` and returning a string. If provided,\n   * this will be called once per column per result-set. The returned value will be used instead of the SQL-provided\n   * column name on row and meta data objects. This allows you to dynamically convert between naming conventions.\n   *\n   * (default: `null`)\n   */\n  columnNameReplacer?: (colName: string, index: number, metadata: Metadata) => string;\n\n  /**\n   * Number of milliseconds before retrying to establish connection, in case of transient failure.\n   *\n   * (default:`500`)\n   */\n  connectionRetryInterval?: number;\n\n  /**\n   * Custom connector factory method.\n   *\n   * (default: `undefined`)\n   */\n  connector?: () => Promise<net.Socket>;\n\n  /**\n   * The number of milliseconds before the attempt to connect is considered failed\n   *\n   * (default: `15000`).\n   */\n  connectTimeout?: number;\n\n  /**\n   * The default isolation level for new connections. All out-of-transaction queries are executed with this setting.\n   *\n   * The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   * * `READ_UNCOMMITTED`\n   * * `READ_COMMITTED`\n   * * `REPEATABLE_READ`\n   * * `SERIALIZABLE`\n   * * `SNAPSHOT`\n   *\n   * (default: `READ_COMMITED`).\n   */\n  connectionIsolationLevel?: number;\n\n  /**\n   * When encryption is used, an object may be supplied that will be used\n   * for the first argument when calling [`tls.createSecurePair`](http://nodejs.org/docs/latest/api/tls.html#tls_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized)\n   *\n   * (default: `{}`)\n   */\n  cryptoCredentialsDetails?: SecureContextOptions;\n\n  /**\n   * Database to connect to (default: dependent on server configuration).\n   */\n  database?: string | undefined;\n\n  /**\n   * Sets the first day of the week to a number from 1 through 7.\n   */\n  datefirst?: number;\n\n  /**\n   * A string representing position of month, day and year in temporal datatypes.\n   *\n   * (default: `mdy`)\n   */\n  dateFormat?: string;\n\n  debug?: DebugOptions;\n\n  /**\n   * A boolean, controls the way null values should be used during comparison operation.\n   *\n   * (default: `true`)\n   */\n  enableAnsiNull?: boolean;\n\n  /**\n   * If true, `SET ANSI_NULL_DFLT_ON ON` will be set in the initial sql. This means new columns will be\n   * nullable by default. See the [T-SQL documentation](https://msdn.microsoft.com/en-us/library/ms187375.aspx)\n   *\n   * (default: `true`).\n   */\n  enableAnsiNullDefault?: boolean;\n\n  /**\n   * A boolean, controls if padding should be applied for values shorter than the size of defined column.\n   *\n   * (default: `true`)\n   */\n  enableAnsiPadding?: boolean;\n\n  /**\n   * If true, SQL Server will follow ISO standard behavior during various error conditions. For details,\n   * see [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-ansi-warnings-transact-sql)\n   *\n   * (default: `true`)\n   */\n  enableAnsiWarnings?: boolean;\n\n  /**\n   * Ends a query when an overflow or divide-by-zero error occurs during query execution.\n   * See [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-arithabort-transact-sql?view=sql-server-2017)\n   * for more details.\n   *\n   * (default: `true`)\n   */\n  enableArithAbort?: boolean;\n\n  /**\n   * A boolean, determines if concatenation with NULL should result in NULL or empty string value, more details in\n   * [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-concat-null-yields-null-transact-sql)\n   *\n   * (default: `true`)\n   */\n  enableConcatNullYieldsNull?: boolean;\n\n  /**\n   * A boolean, controls whether cursor should be closed, if the transaction opening it gets committed or rolled\n   * back.\n   *\n   * (default: `null`)\n   */\n  enableCursorCloseOnCommit?: boolean | null;\n\n  /**\n   * A boolean, sets the connection to either implicit or autocommit transaction mode.\n   *\n   * (default: `false`)\n   */\n  enableImplicitTransactions?: boolean;\n\n  /**\n   * If false, error is not generated during loss of precession.\n   *\n   * (default: `false`)\n   */\n  enableNumericRoundabort?: boolean;\n\n  /**\n   * If true, characters enclosed in single quotes are treated as literals and those enclosed double quotes are treated as identifiers.\n   *\n   * (default: `true`)\n   */\n  enableQuotedIdentifier?: boolean;\n\n  /**\n   * A string value that can be only set to 'strict', which indicates the usage TDS 8.0 protocol. Otherwise,\n   * a boolean determining whether or not the connection will be encrypted.\n   *\n   * (default: `true`)\n   */\n  encrypt?: string | boolean;\n\n  /**\n   * By default, if the database requested by [[database]] cannot be accessed,\n   * the connection will fail with an error. However, if [[fallbackToDefaultDb]] is\n   * set to `true`, then the user's default database will be used instead\n   *\n   * (default: `false`)\n   */\n  fallbackToDefaultDb?: boolean;\n\n  /**\n   * The instance name to connect to.\n   * The SQL Server Browser service must be running on the database server,\n   * and UDP port 1434 on the database server must be reachable.\n   *\n   * (no default)\n   *\n   * Mutually exclusive with [[port]].\n   */\n  instanceName?: string | undefined;\n\n  /**\n   * The default isolation level that transactions will be run with.\n   *\n   * The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   * * `READ_UNCOMMITTED`\n   * * `READ_COMMITTED`\n   * * `REPEATABLE_READ`\n   * * `SERIALIZABLE`\n   * * `SNAPSHOT`\n   *\n   * (default: `READ_COMMITED`).\n   */\n  isolationLevel?: number;\n\n  /**\n   * Specifies the language environment for the session. The session language determines the datetime formats and system messages.\n   *\n   * (default: `us_english`).\n   */\n  language?: string;\n\n  /**\n   * A string indicating which network interface (ip address) to use when connecting to SQL Server.\n   */\n  localAddress?: string | undefined;\n\n  /**\n   * A boolean determining whether to parse unique identifier type with lowercase case characters.\n   *\n   * (default: `false`).\n   */\n  lowerCaseGuids?: boolean;\n\n  /**\n   * The maximum number of connection retries for transient errors.、\n   *\n   * (default: `3`).\n   */\n  maxRetriesOnTransientErrors?: number;\n\n  /**\n   * Sets the MultiSubnetFailover = True parameter, which can help minimize the client recovery latency when failovers occur.\n   *\n   * (default: `false`).\n   */\n  multiSubnetFailover?: boolean;\n\n  /**\n   * The size of TDS packets (subject to negotiation with the server).\n   * Should be a power of 2.\n   *\n   * (default: `4096`).\n   */\n  packetSize?: number;\n\n  /**\n   * Port to connect to (default: `1433`).\n   *\n   * Mutually exclusive with [[instanceName]]\n   */\n  port?: number;\n\n  /**\n   * A boolean, determining whether the connection will request read only access from a SQL Server Availability\n   * Group. For more information, see [here](http://msdn.microsoft.com/en-us/library/hh710054.aspx \"Microsoft: Configure Read-Only Routing for an Availability Group (SQL Server)\")\n   *\n   * (default: `false`).\n   */\n  readOnlyIntent?: boolean;\n\n  /**\n   * The number of milliseconds before a request is considered failed, or `0` for no timeout.\n   *\n   * As soon as a response is received, the timeout is cleared. This means that queries that immediately return a response have ability to run longer than this timeout.\n   *\n   * (default: `15000`).\n   */\n  requestTimeout?: number;\n\n  /**\n   * A boolean, that when true will expose received rows in Requests done related events:\n   * * [[Request.Event_doneInProc]]\n   * * [[Request.Event_doneProc]]\n   * * [[Request.Event_done]]\n   *\n   * (default: `false`)\n   *\n   * Caution: If many row are received, enabling this option could result in\n   * excessive memory usage.\n   */\n  rowCollectionOnDone?: boolean;\n\n  /**\n   * A boolean, that when true will expose received rows in Requests' completion callback.See [[Request.constructor]].\n   *\n   * (default: `false`)\n   *\n   * Caution: If many row are received, enabling this option could result in\n   * excessive memory usage.\n   */\n  rowCollectionOnRequestCompletion?: boolean;\n\n  /**\n   * The version of TDS to use. If server doesn't support specified version, negotiated version is used instead.\n   *\n   * The versions are available from `require('tedious').TDS_VERSION`.\n   * * `7_1`\n   * * `7_2`\n   * * `7_3_A`\n   * * `7_3_B`\n   * * `7_4`\n   *\n   * (default: `7_4`)\n   */\n  tdsVersion?: string;\n\n  /**\n   * Specifies the size of varchar(max), nvarchar(max), varbinary(max), text, ntext, and image data returned by a SELECT statement.\n   *\n   * (default: `2147483647`)\n   */\n  textsize?: string;\n\n  /**\n   * If \"true\", the SQL Server SSL certificate is automatically trusted when the communication layer is encrypted using SSL.\n   *\n   * If \"false\", the SQL Server validates the server SSL certificate. If the server certificate validation fails,\n   * the driver raises an error and terminates the connection. Make sure the value passed to serverName exactly\n   * matches the Common Name (CN) or DNS name in the Subject Alternate Name in the server certificate for an SSL connection to succeed.\n   *\n   * (default: `true`)\n   */\n  trustServerCertificate?: boolean;\n\n  /**\n   *\n   */\n  serverName?: string;\n  /**\n   * A boolean determining whether to return rows as arrays or key-value collections.\n   *\n   * (default: `false`).\n   */\n  useColumnNames?: boolean;\n\n  /**\n   * A boolean determining whether to pass time values in UTC or local time.\n   *\n   * (default: `true`).\n   */\n  useUTC?: boolean;\n\n  /**\n   * The workstation ID (WSID) of the client, default os.hostname().\n   * Used for identifying a specific client in profiling, logging or\n   * tracing client activity in SQLServer.\n   *\n   * The value is reported by the TSQL function HOST_NAME().\n   */\n  workstationId?: string | undefined;\n}\n\n/**\n * @private\n */\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n\ninterface RoutingData {\n  server: string;\n  port: number;\n}\n\n/**\n * A [[Connection]] instance represents a single connection to a database server.\n *\n * ```js\n * var Connection = require('tedious').Connection;\n * var config = {\n *  \"authentication\": {\n *    ...,\n *    \"options\": {...}\n *  },\n *  \"options\": {...}\n * };\n * var connection = new Connection(config);\n * ```\n *\n * Only one request at a time may be executed on a connection. Once a [[Request]]\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\n * [[Request]]'s completion callback is called.\n */\nclass Connection extends EventEmitter {\n  /**\n   * @private\n   */\n  declare fedAuthRequired: boolean;\n  /**\n   * @private\n   */\n  declare config: InternalConnectionConfig;\n  /**\n   * @private\n   */\n  declare secureContextOptions: SecureContextOptions;\n  /**\n   * @private\n   */\n  declare inTransaction: boolean;\n  /**\n   * @private\n   */\n  declare transactionDescriptors: Buffer[];\n  /**\n   * @private\n   */\n  declare transactionDepth: number;\n  /**\n   * @private\n   */\n  declare isSqlBatch: boolean;\n  /**\n   * @private\n   */\n  declare curTransientRetryCount: number;\n  /**\n   * @private\n   */\n  declare transientErrorLookup: TransientErrorLookup;\n  /**\n   * @private\n   */\n  declare closed: boolean;\n  /**\n   * @private\n   */\n  declare loginError: undefined | AggregateError | ConnectionError;\n  /**\n   * @private\n   */\n  declare debug: Debug;\n  /**\n   * @private\n   */\n  declare ntlmpacket: undefined | any;\n  /**\n   * @private\n   */\n  declare ntlmpacketBuffer: undefined | Buffer;\n\n  /**\n   * @private\n   */\n  declare STATE: {\n    INITIALIZED: State;\n    CONNECTING: State;\n    SENT_PRELOGIN: State;\n    REROUTING: State;\n    TRANSIENT_FAILURE_RETRY: State;\n    SENT_TLSSSLNEGOTIATION: State;\n    SENT_LOGIN7_WITH_STANDARD_LOGIN: State;\n    SENT_LOGIN7_WITH_NTLM: State;\n    SENT_LOGIN7_WITH_FEDAUTH: State;\n    LOGGED_IN_SENDING_INITIAL_SQL: State;\n    LOGGED_IN: State;\n    SENT_CLIENT_REQUEST: State;\n    SENT_ATTENTION: State;\n    FINAL: State;\n  };\n\n  /**\n   * @private\n   */\n  declare routingData: undefined | RoutingData;\n\n  /**\n   * @private\n   */\n  declare messageIo: MessageIO;\n  /**\n   * @private\n   */\n  declare state: State;\n  /**\n   * @private\n   */\n  declare resetConnectionOnNextRequest: undefined | boolean;\n\n  /**\n   * @private\n   */\n  declare request: undefined | Request | BulkLoad;\n  /**\n   * @private\n   */\n  declare procReturnStatusValue: undefined | any;\n  /**\n   * @private\n   */\n  declare socket: undefined | net.Socket;\n  /**\n   * @private\n   */\n  declare messageBuffer: Buffer;\n\n  /**\n   * @private\n   */\n  declare connectTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  declare cancelTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  declare requestTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  declare retryTimer: undefined | NodeJS.Timeout;\n\n  /**\n   * @private\n   */\n  _cancelAfterRequestSent: () => void;\n\n  /**\n   * @private\n   */\n  declare databaseCollation: Collation | undefined;\n\n  /**\n   * Note: be aware of the different options field:\n   * 1. config.authentication.options\n   * 2. config.options\n   *\n   * ```js\n   * const { Connection } = require('tedious');\n   *\n   * const config = {\n   *  \"authentication\": {\n   *    ...,\n   *    \"options\": {...}\n   *  },\n   *  \"options\": {...}\n   * };\n   *\n   * const connection = new Connection(config);\n   * ```\n   *\n   * @param config\n   */\n  constructor(config: ConnectionConfiguration) {\n    super();\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    this.fedAuthRequired = false;\n\n    let authentication: ConnectionAuthentication;\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret' && type !== 'azure-active-directory-default') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-default\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        if (options.tenantId !== undefined && typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            tenantId: options.tenantId,\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-default') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-default',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,  // Units: milliseconds\n        columnEncryptionSetting: false,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connector: undefined,\n        connectionIsolationLevel: ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        encryptionKeyStoreProviders: undefined,\n        instanceName: undefined,\n        isolationLevel: ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        serverName: undefined,\n        serverSupportsColumnEncryption: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustedServerNameAE: undefined,\n        trustServerCertificate: false,\n        useColumnNames: false,\n        useUTC: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        assertValidIsolationLevel(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.connector !== undefined) {\n        if (typeof config.options.connector !== 'function') {\n          throw new TypeError('The \"config.options.connector\" property must be a function.');\n        }\n\n        this.config.options.connector = config.options.connector;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          if (config.options.encrypt !== 'strict') {\n            throw new TypeError('The \"encrypt\" property must be set to \"strict\", or of type boolean.');\n          }\n        }\n\n        this.config.options.encrypt = config.options.encrypt;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        assertValidIsolationLevel(config.options.isolationLevel, 'config.options.isolationLevel');\n\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        if (config.options.textsize > 2147483647) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\n        } else if (config.options.textsize < -1) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\n        }\n\n        this.config.options.textsize = config.options.textsize | 0;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.serverName !== undefined) {\n        if (typeof config.options.serverName !== 'string') {\n          throw new TypeError('The \"config.options.serverName\" property must be of type string.');\n        }\n        this.config.options.serverName = config.options.serverName;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n\n        this.config.options.workstationId = config.options.workstationId;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    this.secureContextOptions = this.config.options.cryptoCredentialsDetails;\n    if (this.secureContextOptions.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      this.secureContextOptions = Object.create(this.secureContextOptions, {\n        secureOptions: {\n          value: constants.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    this.debug = this.createDebug();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])];\n\n    // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.messageBuffer = Buffer.alloc(0);\n\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new TransientErrorLookup();\n\n    this.state = this.STATE.INITIALIZED;\n\n    this._cancelAfterRequestSent = () => {\n      this.messageIo.sendMessage(TYPE.ATTENTION);\n      this.createCancelTimer();\n    };\n  }\n\n  connect(connectListener?: (err?: Error) => void) {\n    if (this.state !== this.STATE.INITIALIZED) {\n      throw new ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n    }\n\n    if (connectListener) {\n      const onConnect = (err?: Error) => {\n        this.removeListener('error', onError);\n        connectListener(err);\n      };\n\n      const onError = (err: Error) => {\n        this.removeListener('connect', onConnect);\n        connectListener(err);\n      };\n\n      this.once('connect', onConnect);\n      this.once('error', onError);\n    }\n\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n\n  /**\n   * The server has reported that the charset has changed.\n   */\n  on(event: 'charsetChange', listener: (charset: string) => void): this\n\n  /**\n   * The attempt to connect and validate has completed.\n   */\n  on(\n    event: 'connect',\n    /**\n     * @param err If successfully connected, will be falsey. If there was a\n     *   problem (with either connecting or validation), will be an [[Error]] object.\n     */\n    listener: (err: Error | undefined) => void\n  ): this\n\n  /**\n   * The server has reported that the active database has changed.\n   * This may be as a result of a successful login, or a `use` statement.\n   */\n  on(event: 'databaseChange', listener: (databaseName: string) => void): this\n\n  /**\n   * A debug message is available. It may be logged or ignored.\n   */\n  on(event: 'debug', listener: (messageText: string) => void): this\n\n  /**\n   * Internal error occurs.\n   */\n  on(event: 'error', listener: (err: Error) => void): this\n\n  /**\n   * The server has issued an error message.\n   */\n  on(event: 'errorMessage', listener: (message: import('./token/token').ErrorMessageToken) => void): this\n\n  /**\n   * The connection has ended.\n   *\n   * This may be as a result of the client calling [[close]], the server\n   * closing the connection, or a network error.\n   */\n  on(event: 'end', listener: () => void): this\n\n  /**\n   * The server has issued an information message.\n   */\n  on(event: 'infoMessage', listener: (message: import('./token/token').InfoMessageToken) => void): this\n\n  /**\n   * The server has reported that the language has changed.\n   */\n  on(event: 'languageChange', listener: (languageName: string) => void): this\n\n  /**\n   * The connection was reset.\n   */\n  on(event: 'resetConnection', listener: () => void): this\n\n  /**\n   * A secure connection has been established.\n   */\n  on(event: 'secure', listener: (cleartext: import('tls').TLSSocket) => void): this\n\n  on(event: string | symbol, listener: (...args: any[]) => void) {\n    return super.on(event, listener);\n  }\n\n  /**\n   * @private\n   */\n  emit(event: 'charsetChange', charset: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'connect', error?: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'databaseChange', databaseName: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'debug', messageText: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'error', error: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'errorMessage', message: import('./token/token').ErrorMessageToken): boolean\n  /**\n   * @private\n   */\n  emit(event: 'end'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'infoMessage', message: import('./token/token').InfoMessageToken): boolean\n  /**\n   * @private\n   */\n  emit(event: 'languageChange', languageName: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'secure', cleartext: import('tls').TLSSocket): boolean\n  /**\n   * @private\n   */\n  emit(event: 'rerouting'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'resetConnection'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'retry'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'rollbackTransaction'): boolean\n\n  emit(event: string | symbol, ...args: any[]) {\n    return super.emit(event, ...args);\n  }\n\n  /**\n   * Closes the connection to the database.\n   *\n   * The [[Event_end]] will be emitted once the connection has been closed.\n   */\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n\n  /**\n   * @private\n   */\n  initialiseConnection() {\n    const signal = this.createConnectTimer();\n\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal, this.config.options.connector);\n    } else {\n      return instanceLookup({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName!,\n        timeout: this.config.options.connectTimeout,\n        signal: signal\n      }).then((port) => {\n        process.nextTick(() => {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal, this.config.options.connector);\n        });\n      }, (err) => {\n        this.clearConnectTimer();\n\n        if (signal.aborted) {\n          // Ignore the AbortError for now, this is still handled by the connectTimer firing\n          return;\n        }\n\n        process.nextTick(() => {\n          this.emit('connect', new ConnectionError(err.message, 'EINSTLOOKUP'));\n        });\n      });\n    }\n  }\n\n  /**\n   * @private\n   */\n  cleanupConnection(cleanupType: typeof CLEANUP_TYPE[keyof typeof CLEANUP_TYPE]) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n\n      const request = this.request;\n      if (request) {\n        const err = new RequestError('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n\n      this.closed = true;\n      this.loginError = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  createDebug() {\n    const debug = new Debug(this.config.options.debug);\n    debug.on('debug', (message) => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n\n  /**\n   * @private\n   */\n  createTokenStreamParser(message: Message, handler: TokenHandler) {\n    return new TokenStreamParser(message, this.debug, handler, this.config.options);\n  }\n\n  socketHandlingForSendPreLogin(socket: net.Socket) {\n    socket.on('error', (error) => { this.socketError(error); });\n    socket.on('close', () => { this.socketClose(); });\n    socket.on('end', () => { this.socketEnd(); });\n    socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n\n    this.messageIo = new MessageIO(socket, this.config.options.packetSize, this.debug);\n    this.messageIo.on('secure', (cleartext) => { this.emit('secure', cleartext); });\n\n    this.socket = socket;\n\n    this.closed = false;\n    this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n\n    this.sendPreLogin();\n    this.transitionTo(this.STATE.SENT_PRELOGIN);\n  }\n\n  wrapWithTls(socket: net.Socket, signal: AbortSignal): Promise<tls.TLSSocket> {\n    signal.throwIfAborted();\n\n    return new Promise((resolve, reject) => {\n      const secureContext = tls.createSecureContext(this.secureContextOptions);\n      // If connect to an ip address directly,\n      // need to set the servername to an empty string\n      // if the user has not given a servername explicitly\n      const serverName = !net.isIP(this.config.server) ? this.config.server : '';\n      const encryptOptions = {\n        host: this.config.server,\n        socket: socket,\n        ALPNProtocols: ['tds/8.0'],\n        secureContext: secureContext,\n        servername: this.config.options.serverName ? this.config.options.serverName : serverName,\n      };\n\n      const encryptsocket = tls.connect(encryptOptions);\n\n      const onAbort = () => {\n        encryptsocket.removeListener('error', onError);\n        encryptsocket.removeListener('connect', onConnect);\n\n        encryptsocket.destroy();\n\n        reject(signal.reason);\n      };\n\n      const onError = (err: Error) => {\n        signal.removeEventListener('abort', onAbort);\n\n        encryptsocket.removeListener('error', onError);\n        encryptsocket.removeListener('connect', onConnect);\n\n        encryptsocket.destroy();\n\n        reject(err);\n      };\n\n      const onConnect = () => {\n        signal.removeEventListener('abort', onAbort);\n\n        encryptsocket.removeListener('error', onError);\n        encryptsocket.removeListener('connect', onConnect);\n\n        resolve(encryptsocket);\n      };\n\n      signal.addEventListener('abort', onAbort, { once: true });\n\n      encryptsocket.on('error', onError);\n      encryptsocket.on('secureConnect', onConnect);\n    });\n  }\n\n  connectOnPort(port: number, multiSubnetFailover: boolean, signal: AbortSignal, customConnector?: () => Promise<net.Socket>) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n\n    const connect = customConnector || (multiSubnetFailover ? connectInParallel : connectInSequence);\n\n    (async () => {\n      let socket = await connect(connectOpts, dns.lookup, signal);\n\n      if (this.config.options.encrypt === 'strict') {\n        try {\n          // Wrap the socket with TLS for TDS 8.0\n          socket = await this.wrapWithTls(socket, signal);\n        } catch (err) {\n          socket.end();\n\n          throw err;\n        }\n      }\n\n      this.socketHandlingForSendPreLogin(socket);\n    })().catch((err) => {\n      this.clearConnectTimer();\n\n      if (signal.aborted) {\n        return;\n      }\n\n      process.nextTick(() => { this.socketError(err); });\n    });\n  }\n\n  /**\n   * @private\n   */\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n\n  /**\n   * @private\n   */\n  createConnectTimer() {\n    const controller = new AbortController();\n    this.connectTimer = setTimeout(() => {\n      controller.abort();\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n    return controller.signal;\n  }\n\n  /**\n   * @private\n   */\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n\n  /**\n   * @private\n   */\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n    const request = this.request as Request;\n    const timeout = (request.timeout !== undefined) ? request.timeout : this.config.options.requestTimeout;\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n\n  /**\n   * @private\n   */\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n\n  /**\n   * @private\n   */\n  connectTimeout() {\n    const hostPostfix = this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`;\n    // If we have routing data stored, this connection has been redirected\n    const server = this.routingData ? this.routingData.server : this.config.server;\n    const port = this.routingData ? `:${this.routingData.port}` : hostPostfix;\n    // Grab the target host from the connection configuration, and from a redirect message\n    // otherwise, leave the message empty.\n    const routingMessage = this.routingData ? ` (redirected from ${this.config.server}${hostPostfix})` : '';\n    const message = `Failed to connect to ${server}${port}${routingMessage} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', new ConnectionError(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n\n  /**\n   * @private\n   */\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', new ConnectionError(message, 'ETIMEOUT'));\n  }\n\n  /**\n   * @private\n   */\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request!;\n    request.cancel();\n    const timeout = (request.timeout !== undefined) ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = new RequestError(message, 'ETIMEOUT');\n  }\n\n  /**\n   * @private\n   */\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n      this.connectTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n      this.cancelTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  transitionTo(newState: State) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n\n  /**\n   * @private\n   */\n  getEventHandler<T extends keyof State['events']>(eventName: T): NonNullable<State['events'][T]> {\n    const handler = this.state.events[eventName];\n\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n\n    return handler!;\n  }\n\n  /**\n   * @private\n   */\n  dispatchEvent<T extends keyof State['events']>(eventName: T, ...args: Parameters<NonNullable<State['events'][T]>>) {\n    const handler = this.state.events[eventName] as ((this: Connection, ...args: any[]) => void) | undefined;\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n\n  /**\n   * @private\n   */\n  socketError(error: Error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const hostPostfix = this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`;\n      // If we have routing data stored, this connection has been redirected\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? `:${this.routingData.port}` : hostPostfix;\n      // Grab the target host from the connection configuration, and from a redirect message\n      // otherwise, leave the message empty.\n      const routingMessage = this.routingData ? ` (redirected from ${this.config.server}${hostPostfix})` : '';\n      const message = `Failed to connect to ${server}${port}${routingMessage} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', new ConnectionError(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', new ConnectionError(message, 'ESOCKET'));\n    }\n    this.dispatchEvent('socketError', error);\n  }\n\n  /**\n   * @private\n   */\n  socketEnd() {\n    this.debug.log('socket ended');\n    if (this.state !== this.STATE.FINAL) {\n      const error: ErrorWithCode = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n\n  /**\n   * @private\n   */\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData!.server + ':' + this.routingData!.port);\n\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n\n  /**\n   * @private\n   */\n  sendPreLogin() {\n    const [, major, minor, build] = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(version) ?? ['0.0.0', '0', '0', '0'];\n    const payload = new PreloginPayload({\n      // If encrypt setting is set to 'strict', then we should have already done the encryption before calling\n      // this function. Therefore, the encrypt will be set to false here.\n      // Otherwise, we will set encrypt here based on the encrypt Boolean value from the configuration.\n      encrypt: typeof this.config.options.encrypt === 'boolean' && this.config.options.encrypt,\n      version: { major: Number(major), minor: Number(minor), build: Number(build), subbuild: 0 }\n    });\n\n    this.messageIo.sendMessage(TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function() {\n      return payload.toString('  ');\n    });\n  }\n\n  /**\n   * @private\n   */\n  sendLogin7Packet() {\n    const payload = new Login7Payload({\n      tdsVersion: versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n\n    const { authentication } = this.config;\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-default':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n\n      case 'ntlm':\n        payload.sspi = createNTLMRequest({ domain: authentication.options.domain });\n        break;\n\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n\n    payload.hostname = this.config.options.workstationId || os.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = libraryName;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n\n    this.routingData = undefined;\n    this.messageIo.sendMessage(TYPE.LOGIN7, payload.toBuffer());\n\n    this.debug.payload(function() {\n      return payload.toString('  ');\n    });\n  }\n\n  /**\n   * @private\n   */\n  sendFedAuthTokenMessage(token: string) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(TYPE.FEDAUTH_TOKEN, data);\n    // sent the fedAuth token message, the rest is similar to standard login 7\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  }\n\n  /**\n   * @private\n   */\n  sendInitialSql() {\n    const payload = new SqlBatchPayload(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n\n    const message = new Message({ type: TYPE.SQL_BATCH });\n    this.messageIo.outgoingMessageStream.write(message);\n    Readable.from(payload).pipe(message);\n  }\n\n  /**\n   * @private\n   */\n  getInitialSql() {\n    const options = [];\n\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\n      options.push('set concat_null_yields_null off');\n    }\n\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n\n    return options.join('\\n');\n  }\n\n  /**\n   * @private\n   */\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n\n  /**\n   * Execute the SQL batch represented by [[Request]].\n   * There is no param support, and unlike [[Request.execSql]],\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n   *\n   * In almost all cases, [[Request.execSql]] will be a better choice.\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  execSqlBatch(request: Request) {\n    this.makeRequest(request, TYPE.SQL_BATCH, new SqlBatchPayload(request.sqlTextOrProcedure!, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  /**\n   *  Execute the SQL represented by [[Request]].\n   *\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\n   *\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  execSql(request: Request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'statement',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    if (request.parameters.length) {\n      parameters.push({\n        type: TYPES.NVarChar,\n        name: 'params',\n        value: request.makeParamsParameter(request.parameters),\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n\n      parameters.push(...request.parameters);\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(Procedures.Sp_ExecuteSql, parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Creates a new BulkLoad instance.\n   *\n   * @param table The name of the table to bulk-insert into.\n   * @param options A set of bulk load options.\n   */\n  newBulkLoad(table: string, callback: BulkLoadCallback): BulkLoad\n  newBulkLoad(table: string, options: BulkLoadOptions, callback: BulkLoadCallback): BulkLoad\n  newBulkLoad(table: string, callbackOrOptions: BulkLoadOptions | BulkLoadCallback, callback?: BulkLoadCallback) {\n    let options: BulkLoadOptions;\n\n    if (callback === undefined) {\n      callback = callbackOrOptions as BulkLoadCallback;\n      options = {};\n    } else {\n      options = callbackOrOptions as BulkLoadOptions;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n    return new BulkLoad(table, this.databaseCollation, this.config.options, options, callback);\n  }\n\n  /**\n   * Execute a [[BulkLoad]].\n   *\n   * ```js\n   * // We want to perform a bulk load into a table with the following format:\n   * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\n   *\n   * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\n   *   // ...\n   * });\n   *\n   * // First, we need to specify the columns that we want to write to,\n   * // and their definitions. These definitions must match the actual table,\n   * // otherwise the bulk load will fail.\n   * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\n   *\n   * // Execute a bulk load with a predefined list of rows.\n   * //\n   * // Note that these rows are held in memory until the\n   * // bulk load was performed, so if you need to write a large\n   * // number of rows (e.g. by reading from a CSV file),\n   * // passing an `AsyncIterable` is advisable to keep memory usage low.\n   * connection.execBulkLoad(bulkLoad, [\n   *   { 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') },\n   *   { 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') }\n   * ]);\n   * ```\n   *\n   * @param bulkLoad A previously created [[BulkLoad]].\n   * @param rows A [[Iterable]] or [[AsyncIterable]] that contains the rows that should be bulk loaded.\n   */\n  execBulkLoad(bulkLoad: BulkLoad, rows: AsyncIterable<unknown[] | { [columnName: string]: unknown }> | Iterable<unknown[] | { [columnName: string]: unknown }>): void\n\n  execBulkLoad(bulkLoad: BulkLoad, rows?: AsyncIterable<unknown[] | { [columnName: string]: unknown }> | Iterable<unknown[] | { [columnName: string]: unknown }>) {\n    bulkLoad.executionStarted = true;\n\n    if (rows) {\n      if (bulkLoad.streamingMode) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\n      }\n\n      if (bulkLoad.firstRowWritten) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\n      }\n\n      const rowStream = Readable.from(rows);\n\n      // Destroy the packet transform if an error happens in the row stream,\n      // e.g. if an error is thrown from within a generator or stream.\n      rowStream.on('error', (err) => {\n        bulkLoad.rowToPacketTransform.destroy(err);\n      });\n\n      // Destroy the row stream if an error happens in the packet transform,\n      // e.g. if the bulk load is cancelled.\n      bulkLoad.rowToPacketTransform.on('error', (err) => {\n        rowStream.destroy(err);\n      });\n\n      rowStream.pipe(bulkLoad.rowToPacketTransform);\n    } else if (!bulkLoad.streamingMode) {\n      // If the bulkload was not put into streaming mode by the user,\n      // we end the rowToPacketTransform here for them.\n      //\n      // If it was put into streaming mode, it's the user's responsibility\n      // to end the stream.\n      bulkLoad.rowToPacketTransform.end();\n    }\n\n    const onCancel = () => {\n      request.cancel();\n    };\n\n    const payload = new BulkLoadPayload(bulkLoad);\n\n    const request = new Request(bulkLoad.getBulkInsertSql(), (error: (Error & { code?: string }) | null | undefined) => {\n      bulkLoad.removeListener('cancel', onCancel);\n\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n\n      this.makeRequest(bulkLoad, TYPE.BULK_LOAD, payload);\n    });\n\n    bulkLoad.once('cancel', onCancel);\n\n    this.execSqlBatch(request);\n  }\n\n  /**\n   * Prepare the SQL represented by the request.\n   *\n   * The request can then be used in subsequent calls to\n   * [[execute]] and [[unprepare]]\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type. Parameter values are ignored.\n   */\n  prepare(request: Request) {\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.Int,\n      name: 'handle',\n      value: undefined,\n      output: true,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'params',\n      value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'stmt',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    request.preparing = true;\n\n    // TODO: We need to clean up this event handler, otherwise this leaks memory\n    request.on('returnValue', (name: string, value: any) => {\n      if (name === 'handle') {\n        request.handle = value;\n      } else {\n        request.error = new RequestError(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(Procedures.Sp_Prepare, parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Release the SQL Server resources associated with a previously prepared request.\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type.\n   *   Parameter values are ignored.\n   */\n  unprepare(request: Request) {\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(Procedures.Sp_Unprepare, parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Execute previously prepared SQL, using the supplied parameters.\n   *\n   * @param request A previously prepared [[Request]].\n   * @param parameters  An object whose names correspond to the names of\n   *   parameters that were added to the [[Request]] before it was prepared.\n   *   The object's values are passed as the parameters' values when the\n   *   request is executed.\n   */\n  execute(request: Request, parameters?: { [key: string]: unknown }) {\n    const executeParameters: Parameter[] = [];\n\n    executeParameters.push({\n      type: TYPES.Int,\n      name: '',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    try {\n      for (let i = 0, len = request.parameters.length; i < len; i++) {\n        const parameter = request.parameters[i];\n\n        executeParameters.push({\n          ...parameter,\n          value: parameter.type.validate(parameters ? parameters[parameter.name] : null, this.databaseCollation)\n        });\n      }\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(Procedures.Sp_Execute, executeParameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Call a stored procedure represented by [[Request]].\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  callProcedure(request: Request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(request.sqlTextOrProcedure!, request.parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Start a transaction.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\n   *   is present.\n   * @param isolationLevel The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n  beginTransaction(callback: BeginTransactionCallback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    assertValidIsolationLevel(isolationLevel, 'isolationLevel');\n\n    const transaction = new Transaction(name, isolationLevel);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('SET TRANSACTION ISOLATION LEVEL ' + (transaction.isolationLevelToTSQL()) + ';BEGIN TRAN ' + transaction.name, (err) => {\n        this.transactionDepth++;\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n        callback(err);\n      }));\n    }\n\n    const request = new Request(undefined, (err) => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\n   */\n  commitTransaction(callback: CommitTransactionCallback, name = '') {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('COMMIT TRAN ' + transaction.name, (err) => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Rollback a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n  rollbackTransaction(callback: RollbackTransactionCallback, name = '') {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('ROLLBACK TRAN ' + transaction.name, (err) => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Set a savepoint within a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\\\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n  saveTransaction(callback: SaveTransactionCallback, name: string) {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('SAVE TRAN ' + transaction.name, (err) => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Run the given callback after starting a transaction, and commit or\n   * rollback the transaction afterwards.\n   *\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\n   * use of database transactions and automatically handle transaction nesting.\n   *\n   * @param cb\n   * @param isolationLevel\n   *   The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n  transaction(cb: (err: Error | null | undefined, txDone?: <T extends TransactionDoneCallback>(err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void) => void, isolationLevel?: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL]) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n\n    const useSavepoint = this.inTransaction;\n    const name = '_tedious_' + (crypto.randomBytes(10).toString('hex'));\n    const txDone: <T extends TransactionDoneCallback>(err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction((txErr) => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n        done(null, ...args);\n      } else {\n        this.commitTransaction((txErr) => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n\n    if (useSavepoint) {\n      return this.saveTransaction((err) => {\n        if (err) {\n          return cb(err);\n        }\n\n        if (isolationLevel) {\n          return this.execSqlBatch(new Request('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), (err) => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction((err) => {\n        if (err) {\n          return cb(err);\n        }\n\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n\n  /**\n   * @private\n   */\n  makeRequest(request: Request | BulkLoad, packetType: number, payload: (Iterable<Buffer> | AsyncIterable<Buffer>) & { toString: (indent?: string) => string }) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback(new RequestError(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback(new RequestError('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n\n      this.request = request;\n      request.connection! = this;\n      request.rowCount! = 0;\n      request.rows! = [];\n      request.rst! = [];\n\n      const onCancel = () => {\n        payloadStream.unpipe(message);\n        payloadStream.destroy(new RequestError('Canceled.', 'ECANCEL'));\n\n        // set the ignore bit and end the message.\n        message.ignore = true;\n        message.end();\n\n        if (request instanceof Request && request.paused) {\n          // resume the request if it was paused so we can read the remaining tokens\n          request.resume();\n        }\n      };\n\n      request.once('cancel', onCancel);\n\n      this.createRequestTimer();\n\n      const message = new Message({ type: packetType, resetConnection: this.resetConnectionOnNextRequest });\n      this.messageIo.outgoingMessageStream.write(message);\n      this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n\n      message.once('finish', () => {\n        request.removeListener('cancel', onCancel);\n        request.once('cancel', this._cancelAfterRequestSent);\n\n        this.resetConnectionOnNextRequest = false;\n        this.debug.payload(function() {\n          return payload!.toString('  ');\n        });\n      });\n\n      const payloadStream = Readable.from(payload);\n      payloadStream.once('error', (error) => {\n        payloadStream.unpipe(message);\n\n        // Only set a request error if no error was set yet.\n        request.error ??= error;\n\n        message.ignore = true;\n        message.end();\n      });\n      payloadStream.pipe(message);\n    }\n  }\n\n  /**\n   * Cancel currently executed request.\n   */\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n\n    if (this.request.canceled) {\n      return false;\n    }\n\n    this.request.cancel();\n    return true;\n  }\n\n  /**\n   * Reset the connection to its initial state.\n   * Can be useful for connection pool implementations.\n   *\n   * @param callback\n   */\n  reset(callback: ResetCallback) {\n    const request = new Request(this.getInitialSql(), (err) => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n\n  /**\n   * @private\n   */\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n\n  /**\n   * @private\n   */\n  getIsolationLevelText(isolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL]) {\n    switch (isolationLevel) {\n      case ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n      case ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n      case ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n      case ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n      default:\n        return 'read committed';\n    }\n  }\n}\n\nfunction isTransientError(error: AggregateError | ConnectionError): boolean {\n  if (error instanceof AggregateError) {\n    error = error.errors[0];\n  }\n  return (error instanceof ConnectionError) && !!error.isTransient;\n}\n\nexport default Connection;\nmodule.exports = Connection;\n\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function() {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function() {\n      (async () => {\n        let messageBuffer = Buffer.alloc(0);\n\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        for await (const data of message) {\n          messageBuffer = Buffer.concat([messageBuffer, data]);\n        }\n\n        const preloginPayload = new PreloginPayload(messageBuffer);\n        this.debug.payload(function() {\n          return preloginPayload.toString('  ');\n        });\n\n        if (preloginPayload.fedAuthRequired === 1) {\n          this.fedAuthRequired = true;\n        }\n        if ('strict' !== this.config.options.encrypt && (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ')) {\n          if (!this.config.options.encrypt) {\n            this.emit('connect', new ConnectionError(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return this.close();\n          }\n\n          try {\n            this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n            await this.messageIo.startTls(this.secureContextOptions, this.config.options.serverName ? this.config.options.serverName : this.routingData?.server ?? this.config.server, this.config.options.trustServerCertificate);\n          } catch (err: any) {\n            return this.socketError(err);\n          }\n        }\n\n        this.sendLogin7Packet();\n\n        const { authentication } = this.config;\n\n        switch (authentication.type) {\n          case 'azure-active-directory-password':\n          case 'azure-active-directory-msi-vm':\n          case 'azure-active-directory-msi-app-service':\n          case 'azure-active-directory-service-principal-secret':\n          case 'azure-active-directory-default':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n            break;\n          case 'ntlm':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n            break;\n          default:\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            break;\n        }\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function() {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function() {\n      },\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function() {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function() {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function() {\n      },\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function() {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n        await once(tokenStreamParser, 'end');\n\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    enter: function() {\n      (async () => {\n        while (true) {\n          let message;\n          try {\n            message = await this.messageIo.readMessage();\n          } catch (err: any) {\n            return this.socketError(err);\n          }\n\n          const handler = new Login7TokenHandler(this);\n          const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n          await once(tokenStreamParser, 'end');\n\n          if (handler.loginAckReceived) {\n            if (handler.routingData) {\n              this.routingData = handler.routingData;\n              return this.transitionTo(this.STATE.REROUTING);\n            } else {\n              return this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (this.ntlmpacket) {\n            const authentication = this.config.authentication as NtlmAuthentication;\n\n            const payload = new NTLMResponsePayload({\n              domain: authentication.options.domain,\n              userName: authentication.options.userName,\n              password: authentication.options.password,\n              ntlmpacket: this.ntlmpacket\n            });\n\n            this.messageIo.sendMessage(TYPE.NTLMAUTH_PKT, payload.data);\n            this.debug.payload(function() {\n              return payload.toString('  ');\n            });\n\n            this.ntlmpacket = undefined;\n          } else if (this.loginError) {\n            if (isTransientError(this.loginError)) {\n              this.debug.log('Initiating retry on transient error');\n              return this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              this.emit('connect', this.loginError);\n              return this.transitionTo(this.STATE.FINAL);\n            }\n          } else {\n            this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n            return this.transitionTo(this.STATE.FINAL);\n          }\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n        await once(tokenStreamParser, 'end');\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n\n          return;\n        }\n\n        const fedAuthInfoToken = handler.fedAuthInfoToken;\n\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          const authentication = this.config.authentication as AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryServicePrincipalSecret | AzureActiveDirectoryDefaultAuthentication;\n          const tokenScope = new URL('/.default', fedAuthInfoToken.spn).toString();\n\n          let credentials;\n\n          switch (authentication.type) {\n            case 'azure-active-directory-password':\n              credentials = new UsernamePasswordCredential(\n                authentication.options.tenantId ?? 'common',\n                authentication.options.clientId,\n                authentication.options.userName,\n                authentication.options.password\n              );\n              break;\n            case 'azure-active-directory-msi-vm':\n            case 'azure-active-directory-msi-app-service':\n              const msiArgs = authentication.options.clientId ? [authentication.options.clientId, {}] : [{}];\n              credentials = new ManagedIdentityCredential(...msiArgs);\n              break;\n            case 'azure-active-directory-default':\n              const args = authentication.options.clientId ? { managedIdentityClientId: authentication.options.clientId } : {};\n              credentials = new DefaultAzureCredential(args);\n              break;\n            case 'azure-active-directory-service-principal-secret':\n              credentials = new ClientSecretCredential(\n                authentication.options.tenantId,\n                authentication.options.clientId,\n                authentication.options.clientSecret\n              );\n              break;\n          }\n\n          let tokenResponse;\n          try {\n            tokenResponse = await credentials.getToken(tokenScope);\n          } catch (err) {\n            this.loginError = new AggregateError(\n              [new ConnectionError('Security token could not be authenticated or authorized.', 'EFEDAUTH'), err]);\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n            return;\n          }\n\n\n          const token = tokenResponse.token;\n          this.sendFedAuthTokenMessage(token);\n\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function() {\n      (async () => {\n        this.sendInitialSql();\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n        const tokenStreamParser = this.createTokenStreamParser(message, new InitialSqlTokenHandler(this));\n        await once(tokenStreamParser, 'end');\n\n        this.transitionTo(this.STATE.LOGGED_IN);\n        this.processedInitialSql();\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n        // request timer is stopped on first data package\n        this.clearRequestTimer();\n\n        const tokenStreamParser = this.createTokenStreamParser(message, new RequestTokenHandler(this, this.request!));\n\n        // If the request was canceled and we have a `cancelTimer`\n        // defined, we send a attention message after the\n        // request message was fully sent off.\n        //\n        // We already started consuming the current message\n        // (but all the token handlers should be no-ops), and\n        // need to ensure the next message is handled by the\n        // `SENT_ATTENTION` state.\n        if (this.request?.canceled && this.cancelTimer) {\n          return this.transitionTo(this.STATE.SENT_ATTENTION);\n        }\n\n        const onResume = () => {\n          tokenStreamParser.resume();\n        };\n        const onPause = () => {\n          tokenStreamParser.pause();\n\n          this.request?.once('resume', onResume);\n        };\n\n        this.request?.on('pause', onPause);\n\n        if (this.request instanceof Request && this.request.paused) {\n          onPause();\n        }\n\n        const onCancel = () => {\n          tokenStreamParser.removeListener('end', onEndOfMessage);\n\n          if (this.request instanceof Request && this.request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            this.request.resume();\n          }\n\n          this.request?.removeListener('pause', onPause);\n          this.request?.removeListener('resume', onResume);\n\n          // The `_cancelAfterRequestSent` callback will have sent a\n          // attention message, so now we need to also switch to\n          // the `SENT_ATTENTION` state to make sure the attention ack\n          // message is processed correctly.\n          this.transitionTo(this.STATE.SENT_ATTENTION);\n        };\n\n        const onEndOfMessage = () => {\n          this.request?.removeListener('cancel', this._cancelAfterRequestSent);\n          this.request?.removeListener('cancel', onCancel);\n          this.request?.removeListener('pause', onPause);\n          this.request?.removeListener('resume', onResume);\n\n          this.transitionTo(this.STATE.LOGGED_IN);\n          const sqlRequest = this.request as Request;\n          this.request = undefined;\n          if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n            this.inTransaction = false;\n          }\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n        };\n\n        tokenStreamParser.once('end', onEndOfMessage);\n        this.request?.once('cancel', onCancel);\n      })();\n\n    },\n    exit: function(nextState) {\n      this.clearRequestTimer();\n    },\n    events: {\n      socketError: function(err) {\n        const sqlRequest = this.request!;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new AttentionTokenHandler(this, this.request!);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n        await once(tokenStreamParser, 'end');\n        // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n        if (handler.attentionReceived) {\n          this.clearCancelTimer();\n\n          const sqlRequest = this.request!;\n          this.request = undefined;\n          this.transitionTo(this.STATE.LOGGED_IN);\n\n          if (sqlRequest.error && sqlRequest.error instanceof RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback(new RequestError('Canceled.', 'ECANCEL'));\n          }\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function(err) {\n        const sqlRequest = this.request!;\n        this.request = undefined;\n\n        this.transitionTo(this.STATE.FINAL);\n\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function() {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      connectTimeout: function() {\n        // Do nothing, as the timer should be cleaned up.\n      },\n      message: function() {\n        // Do nothing\n      },\n      socketError: function() {\n        // Do nothing\n      }\n    }\n  }\n};\n", "import BulkLoad from './bulk-load';\nimport Connection, { type ConnectionAuthentication, type ConnectionConfiguration, type ConnectionOptions } from './connection';\nimport Request from './request';\nimport { name } from './library';\n\nimport { ConnectionError, RequestError } from './errors';\n\nimport { TYPES } from './data-type';\nimport { ISOLATION_LEVEL } from './transaction';\nimport { versions as TDS_VERSION } from './tds-versions';\n\nconst library = { name: name };\n\nexport function connect(config: ConnectionConfiguration, connectListener?: (err?: Error) => void) {\n  const connection = new Connection(config);\n  connection.connect(connectListener);\n  return connection;\n}\n\nexport {\n  BulkLoad,\n  Connection,\n  Request,\n  library,\n  ConnectionError,\n  RequestError,\n  TYPES,\n  ISOLATION_LEVEL,\n  TDS_VERSION\n};\n\nexport type {\n  ConnectionAuthentication,\n  ConnectionConfiguration,\n  ConnectionOptions\n};\n"],
  "mappings": "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AAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,qDAAqD;AAAA,MAC7D,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,gGAAgG;AAAA,MAC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gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACzE,CAAC,QAAO,gGAAgG;AAAA,MACxG,CAAC,QAAO,iEAAiE;AAAA,MACz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",
  "names": ["ReflectApply", "ReflectOwnKeys", "NumberIsNaN", "state", "once", "name", "SHIFT_LEFT_32", "SHIFT_RIGHT_32", "UNKNOWN_PLP_LEN", "Buffer", "from", "ZERO_LENGTH_BUFFER", "alloc", "WritableTrackingBuffer", "constructor", "initialSize", "encoding", "doubleSizeGrowth", "buffer", "compositeBuffer", "position", "data", "newBuffer", "copyFrom", "length", "makeRoomFor", "copy", "requiredLength", "size", "Math", "max", "slice", "concat", "writeUInt8", "value", "writeUInt16LE", "writeUShort", "writeUInt16BE", "writeUInt24LE", "writeUInt32LE", "writeBigInt64LE", "writeInt64LE", "BigInt", "writeUInt64LE", "writeBigUInt64LE", "writeUInt32BE", "writeUInt40LE", "writeInt32LE", "floor", "writeInt8", "writeInt16LE", "writeInt16BE", "writeInt32BE", "writeFloatLE", "writeDoubleLE", "writeString", "byteLength", "write", "writeBVarchar", "writeUsVarchar", "writeUsVarbyte", "toString", "writeBuffer", "writePLPBody", "writeMoney", "_default", "exports", "default", "module", "self", "TYPE", "exports", "ALTMETADATA", "ALTROW", "COLMETADATA", "COLINFO", "DONE", "DONEPROC", "DONEINPROC", "ENVCHANGE", "ERROR", "FEATUREEXTACK", "FEDAUTHINFO", "INFO", "LOGINACK", "NBCROW", "OFFSET", "ORDER", "RETURNSTATUS", "RETURNVALUE", "ROW", "SSPI", "TABNAME", "Token", "constructor", "name", "handlerName", "ColMetadataToken", "columns", "DoneToken", "more", "sqlError", "attention", "serverError", "rowCount", "curCmd", "DoneInProcToken", "DoneProcToken", "DatabaseEnvChangeToken", "newValue", "oldValue", "type", "LanguageEnvChangeToken", "CharsetEnvChangeToken", "PacketSizeEnvChangeToken", "BeginTransactionEnvChangeToken", "CommitTransactionEnvChangeToken", "RollbackTransactionEnvChangeToken", "DatabaseMirroringPartnerEnvChangeToken", "ResetConnectionEnvChangeToken", "CollationChangeToken", "RoutingEnvChangeToken", "FeatureExtAckToken", "fedAuth", "utf8Support", "FedAuthInfoToken", "spn", "stsurl", "InfoMessageToken", "number", "state", "class", "clazz", "message", "serverName", "procName", "lineNumber", "ErrorMessageToken", "LoginAckToken", "interface", "interfaze", "tdsVersion", "progName", "progVersion", "NBCRowToken", "OrderToken", "orderColumns", "ReturnStatusToken", "value", "ReturnValueToken", "paramOrdinal", "paramName", "metadata", "RowToken", "SSPIToken", "ntlmpacket", "ntlmpacketBuffer", "_events", "require", "_writableTrackingBuffer", "_interopRequireDefault", "_stream", "_token", "obj", "__esModule", "default", "FLAGS", "nullable", "caseSen", "updateableReadWrite", "updateableUnknown", "identity", "computed", "fixedLenCLRType", "sparseColumnSet", "hidden", "key", "nullableUnknown", "DONE_STATUS", "FINAL", "MORE", "ERROR", "INXACT", "COUNT", "ATTN", "SRVERROR", "rowTokenBuffer", "Buffer", "from", "TOKEN_TYPE", "ROW", "textPointerAndTimestampBuffer", "textPointerNullBuffer", "RowTransform", "Transform", "constructor", "bulkLoad", "writableObjectMode", "mainOptions", "options", "columns", "columnMetadataWritten", "_transform", "row", "_encoding", "callback", "push", "getColMetaData", "i", "length", "c", "value", "Array", "isArray", "objName", "firstRowWritten", "type", "validate", "collation", "error", "parameter", "scale", "precision", "name", "generateParameterLength", "chunk", "generateParameterData", "process", "nextTick", "_flush", "createDoneToken", "BulkLoad", "EventEmitter", "table", "connectionOptions", "checkConstraints", "fireTriggers", "keepNulls", "lockTable", "order", "TypeError", "column", "direction", "Object", "entries", "undefined", "canceled", "executionStarted", "columnsByName", "streamingMode", "rowToPacketTransform", "bulkOptions", "addColumn", "output", "Error", "id", "resolveLength", "resolvePrecision", "resolveScale", "getOptionsSql", "addOptions", "orderColumns", "join", "getBulkInsertSql", "sql", "len", "declaration", "getTableCreationSql", "tBuf", "WritableTrackingBuffer", "writeUInt8", "COLMETADATA", "writeUInt16LE", "j", "tdsVersion", "writeUInt32LE", "flags", "writeBuffer", "generateTypeInfo", "hasTableName", "writeUsVarchar", "writeBVarchar", "data", "setTimeout", "timeout", "DONE", "status", "cancel", "emit", "_default", "exports", "module", "_", "_", "_", "_", "_", "_", "enabledNamespaces", "logger", "log", "errorMessage", "AzureAuthorityHosts", "name", "_a", "init_browser", "init_browser", "logger", "logger", "_a", "BrowserCrypto.createNewGuid", "_a", "ControllerFactory.createV3Controller", "logger", "version", "init_dist", "AbortController", "init_browser", "init_browser", "_a", "init_browser", "logger", "init_dist", "init_browser", "_a", "name", "logger", "init_log", "init_browser", "logger", "_a", "init_log", "_c", "_b", "_a", "SDK_VERSION", "init_constants", "SDK_VERSION", "init_constants", "init_typeGuards", "init_browser", "init_typeGuards", "rawContent", "init_typeGuards", "_a", "init_browser", "init_typeGuards", "AbortError", "init_AbortError", "init_browser", "init_AbortError", "delay", "AbortError", "init_browser", "_a", "_b", "init_browser", "logger", "_a", "AbortError", "_b", "delay", "init_browser", "init_constants", "_a", "init_constants", "name", "_a", "_a", "init_browser", "init_browser", "tracingClient", "_a", "_b", "SDK_VERSION", "logger", "init_browser", "init_constants", "init_log", "_a", "init_browser", "isBlob", "buildRequestBody", "_a", "_b", "AbortError", "name", "init_browser", "init_typeGuards", "init_browser", "_a", "_b", "_c", "_d", "init_constants", "init_constants", "init_constants", "_a", "delay", "logger", "_a", "init_log", "init_log", "init_browser", "_a", "logger", "_a", "_b", "state", "init_state", "state", "init_state", "_b", "_a", "_d", "_c", "init_browser", "_b", "_a", "_c", "_d", "init_pipeline", "init_browser", "init_browser", "_a", "name", "logger", "init_log", "init_browser", "init_pipeline", "init_log", "_a", "logger", "_b", "init_log", "init_browser", "init_pipeline", "init_constants", "init_utils", "init_constants", "init_browser", "init_utils", "_a", "_b", "AbortController", "logger", "init_browser", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "_a", "init_dist", "_a", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "logger", "init_browser", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "BrowserNotSupportedError", "logger", "init_src", "_", "_events", "require", "util", "_interopRequireWildcard", "_getRequireWildcardCache", "e", "WeakMap", "r", "t", "__esModule", "default", "has", "get", "n", "__proto__", "a", "Object", "defineProperty", "getOwnPropertyDescriptor", "u", "prototype", "hasOwnProperty", "call", "i", "set", "Debug", "EventEmitter", "constructor", "data", "payload", "packet", "token", "options", "indent", "direction", "haveListeners", "log", "headerToString", "dataToString", "generatePayloadText", "inspect", "showHidden", "depth", "colors", "listeners", "length", "text", "emit", "_default", "exports", "module", "AbortError", "Error", "constructor", "code", "name", "exports", "default", "_", "_", "_dgram", "_interopRequireDefault", "require", "_net", "_nodeUrl", "_abortError", "obj", "__esModule", "default", "sendInParallel", "addresses", "port", "request", "signal", "aborted", "AbortError", "Promise", "resolve", "reject", "sockets", "errorCount", "onError", "err", "length", "removeEventListener", "onAbort", "clearSockets", "onMessage", "message", "socket", "removeListener", "close", "addEventListener", "once", "j", "udpType", "family", "dgram", "createSocket", "push", "on", "send", "address", "sendMessage", "host", "lookup", "net", "isIP", "isIPv6", "url", "domainToASCII", "all", "TimeoutError", "Error", "constructor", "code", "name", "exports", "default", "_timeoutError", "_interopRequireDefault", "require", "obj", "__esModule", "default", "withTimeout", "timeout", "func", "signal", "timeoutController", "AbortController", "abortCurrentAttempt", "abort", "timer", "setTimeout", "addEventListener", "once", "err", "Error", "name", "aborted", "TimeoutError", "removeEventListener", "clearTimeout", "_dns", "_interopRequireDefault", "require", "_abortError", "_sender", "_withTimeout", "obj", "__esModule", "default", "SQL_SERVER_BROWSER_PORT", "TIMEOUT", "RETRIES", "MYSTERY_HEADER_LENGTH", "instanceLookup", "options", "server", "TypeError", "instanceName", "timeout", "undefined", "retries", "lookup", "dns", "port", "signal", "aborted", "AbortError", "response", "i", "withTimeout", "request", "Buffer", "from", "sendMessage", "err", "Error", "name", "message", "toString", "foundPort", "parseBrowserResponse", "getPort", "instances", "split", "len", "length", "instance", "parts", "p", "partsLen", "value", "parseInt", "toUpperCase", "TransientErrorLookup", "isTransientError", "error", "transientErrors", "indexOf", "exports", "_sprintfJs", "require", "HEADER_LENGTH", "exports", "TYPE", "SQL_BATCH", "RPC_REQUEST", "TABULAR_RESULT", "ATTENTION", "BULK_LOAD", "TRANSACTION_MANAGER", "LOGIN7", "NTLMAUTH_PKT", "PRELOGIN", "FEDAUTH_TOKEN", "typeByValue", "name", "STATUS", "NORMAL", "EOM", "IGNORE", "RESETCONNECTION", "RESETCONNECTIONSKIPTRAN", "OFFSET", "Type", "Status", "Length", "SPID", "PacketID", "Window", "DEFAULT_SPID", "DEFAULT_PACKETID", "DEFAULT_WINDOW", "NL", "Packet", "constructor", "typeOrBuffer", "Buffer", "buffer", "type", "alloc", "writeUInt8", "writeUInt16BE", "setLength", "length", "readUInt16BE", "resetConnection", "reset", "status", "readUInt8", "last", "arguments", "isLast", "ignore", "packetId", "addData", "data", "concat", "slice", "statusAsString", "statuses", "value", "push", "undefined", "join", "trim", "headerToString", "indent", "text", "sprintf", "dataToString", "BYTES_PER_GROUP", "CHARS_PER_GROUP", "BYTES_PER_LINE", "dataDump", "chars", "offset", "String", "fromCharCode", "toString", "payloadString", "isPacketComplete", "potentialPacketBuffer", "packetLength", "_sprintfJs", "require", "_writableTrackingBuffer", "_interopRequireDefault", "obj", "__esModule", "default", "optionBufferSize", "TOKEN", "VERSION", "ENCRYPTION", "INSTOPT", "THREADID", "MARS", "FEDAUTHREQUIRED", "TERMINATOR", "ENCRYPT", "OFF", "ON", "NOT_SUP", "REQ", "encryptByValue", "name", "value", "marsByValue", "PreloginPayload", "constructor", "bufferOrOptions", "encrypt", "version", "major", "minor", "build", "subbuild", "Buffer", "data", "options", "createOptions", "extractOptions", "createVersionOption", "createEncryptionOption", "createInstanceOption", "createThreadIdOption", "createMarsOption", "createFedAuthOption", "length", "i", "len", "option", "alloc", "optionOffset", "optionDataOffset", "j", "writeUInt8", "token", "writeUInt16BE", "copy", "buffer", "WritableTrackingBuffer", "writeUInt32BE", "offset", "dataOffset", "readUInt16BE", "dataLength", "extractVersion", "extractEncryption", "extractInstance", "extractThreadId", "extractMars", "extractFedAuth", "readUInt8", "encryption", "encryptionString", "instance", "threadId", "readUInt32BE", "mars", "marsString", "fedAuthRequired", "toString", "indent", "sprintf", "_default", "exports", "module", "versions", "exports", "versionsByValue", "name", "_sprintfJs", "require", "_tdsVersions", "FLAGS_1", "ENDIAN_LITTLE", "ENDIAN_BIG", "CHARSET_ASCII", "CHARSET_EBCDIC", "FLOAT_IEEE_754", "FLOAT_VAX", "FLOAT_ND5000", "BCP_DUMPLOAD_ON", "BCP_DUMPLOAD_OFF", "USE_DB_ON", "USE_DB_OFF", "INIT_DB_WARN", "INIT_DB_FATAL", "SET_LANG_WARN_OFF", "SET_LANG_WARN_ON", "FLAGS_2", "INIT_LANG_WARN", "INIT_LANG_FATAL", "ODBC_OFF", "ODBC_ON", "F_TRAN_BOUNDARY", "F_CACHE_CONNECT", "USER_NORMAL", "USER_SERVER", "USER_REMUSER", "USER_SQLREPL", "INTEGRATED_SECURITY_OFF", "INTEGRATED_SECURITY_ON", "TYPE_FLAGS", "SQL_DFLT", "SQL_TSQL", "OLEDB_OFF", "OLEDB_ON", "READ_WRITE_INTENT", "READ_ONLY_INTENT", "FLAGS_3", "CHANGE_PASSWORD_NO", "CHANGE_PASSWORD_YES", "BINARY_XML", "SPAWN_USER_INSTANCE", "UNKNOWN_COLLATION_HANDLING", "EXTENSION_USED", "FEDAUTH_OPTIONS", "FEATURE_ID", "LIBRARY_SECURITYTOKEN", "LIBRARY_ADAL", "FEDAUTH_YES_ECHO", "FEDAUTH_NO_ECHO", "ADAL_WORKFLOW_USER_PASS", "ADAL_WORKFLOW_INTEGRATED", "FEATURE_EXT_TERMINATOR", "Login7Payload", "constructor", "tdsVersion", "packetSize", "clientProgVer", "clientPid", "connectionId", "clientTimeZone", "clientLcid", "readOnlyIntent", "initDbFatal", "fedAuth", "undefined", "userName", "password", "serverName", "appName", "hostname", "libraryName", "language", "database", "clientId", "sspi", "attachDbFile", "changePassword", "toBuffer", "fixedData", "Buffer", "alloc", "buffers", "offset", "dataOffset", "length", "writeUInt32LE", "writeUInt8", "buildOptionFlags1", "buildOptionFlags2", "buildTypeFlags", "buildOptionFlags3", "writeInt32LE", "writeUInt16LE", "buffer", "from", "push", "scramblePassword", "extensions", "buildFeatureExt", "extensionOffset", "copy", "data", "concat", "flags1", "type", "echo", "workflow", "token", "fedAuthToken", "buf", "versions", "UTF8_SUPPORT_FEATURE_ID", "UTF8_SUPPORT_CLIENT_SUPPORTS_UTF8", "flags2", "typeFlags", "b", "len", "byte", "lowNibble", "highNibble", "toString", "indent", "sprintf", "_default", "exports", "default", "module", "Buffer", "buffer", "blocks", "buffer8", "exports", "_writableTrackingBuffer", "_interopRequireDefault", "require", "crypto", "_interopRequireWildcard", "_jsMd", "_getRequireWildcardCache", "e", "WeakMap", "r", "t", "__esModule", "default", "has", "get", "n", "__proto__", "a", "Object", "defineProperty", "getOwnPropertyDescriptor", "u", "prototype", "hasOwnProperty", "call", "i", "set", "obj", "NTLMResponsePayload", "constructor", "loginData", "data", "createResponse", "toString", "indent", "challenge", "client_nonce", "createClientNonce", "lmv2len", "ntlmv2len", "domain", "username", "userName", "password", "ntlmData", "ntlmpacket", "server_data", "target", "server_nonce", "nonce", "bufferLength", "length", "WritableTrackingBuffer", "position", "writeString", "writeUInt32LE", "baseIdx", "dnIdx", "unIdx", "l2Idx", "ntIdx", "writeUInt16LE", "lmv2Data", "lmv2Response", "copyFrom", "genTime", "Date", "getTime", "ntlmDataBuffer", "ntlmv2Response", "timestamp", "createTimestamp", "Buffer", "alloc", "nidx", "writeUInt8", "Math", "ceil", "random", "user", "serverNonce", "targetInfo", "clientNonce", "mytime", "hash", "ntv2Hash", "dataLength", "copy", "hmacMD5", "time", "tenthsOfAMicrosecond", "BigInt", "lo", "Number", "hi", "result", "newhash", "response", "ntHash", "identity", "from", "toUpperCase", "text", "unicodeString", "md4", "arrayBuffer", "key", "createHmac", "update", "digest", "_default", "exports", "module", "ConnectionError", "Error", "constructor", "message", "code", "exports", "RequestError", "SQLServerEncryptionType", "exports", "DescribeParameterEncryptionResultSet1", "DescribeParameterEncryptionResultSet2", "SQLServerStatementColumnEncryptionSetting", "_events", "require", "_errors", "_types", "Request", "EventEmitter", "on", "event", "listener", "emit", "args", "constructor", "sqlTextOrProcedure", "callback", "options", "parameters", "parametersByName", "preparing", "handle", "undefined", "canceled", "paused", "error", "connection", "timeout", "userCallback", "statementColumnEncryptionSetting", "SQLServerStatementColumnEncryptionSetting", "UseConnectionSetting", "cryptoMetadataLoaded", "err", "rowCount", "rows", "addParameter", "name", "type", "value", "output", "length", "precision", "scale", "parameter", "push", "addOutputParameter", "makeParamsParameter", "paramsParameter", "i", "len", "declaration", "validateParameters", "collation", "validate", "RequestError", "message", "pause", "resume", "cancel", "setTimeout", "_default", "exports", "default", "module", "TYPE", "QUERY_NOTIFICATIONS", "TXN_DESCRIPTOR", "TRACE_ACTIVITY", "TXNDESCRIPTOR_HEADER_DATA_LEN", "TXNDESCRIPTOR_HEADER_LEN", "writeToTrackingBuffer", "buffer", "txnDescriptor", "outstandingRequestCount", "writeUInt32LE", "writeUInt16LE", "writeBuffer", "data", "length", "_writableTrackingBuffer", "_interopRequireDefault", "require", "_allHeaders", "obj", "__esModule", "default", "STATUS", "BY_REF_VALUE", "DEFAULT_VALUE", "RpcRequestPayload", "constructor", "procedure", "parameters", "txnDescriptor", "options", "collation", "Symbol", "iterator", "generateData", "buffer", "WritableTrackingBuffer", "tdsVersion", "outstandingRequestCount", "writeToTrackingBuffer", "writeUsVarchar", "writeUShort", "optionFlags", "writeUInt16LE", "data", "parametersLength", "length", "i", "generateParameterData", "toString", "indent", "parameter", "Buffer", "byteLength", "name", "writeBVarchar", "statusFlags", "output", "writeUInt8", "param", "value", "type", "id", "resolveLength", "precision", "resolvePrecision", "scale", "resolveScale", "generateTypeInfo", "generateParameterLength", "_default", "exports", "module", "_writableTrackingBuffer", "_interopRequireDefault", "require", "_allHeaders", "obj", "__esModule", "default", "SqlBatchPayload", "constructor", "sqlText", "txnDescriptor", "options", "Symbol", "iterator", "tdsVersion", "buffer", "WritableTrackingBuffer", "outstandingRequestCount", "writeToTrackingBuffer", "data", "Buffer", "from", "toString", "indent", "_default", "exports", "module", "_stream", "require", "Message", "PassThrough", "constructor", "type", "resetConnection", "ignore", "_default", "exports", "default", "module", "self", "name", "require_browser", "AbortController", "AbortSignal", "require_util", "AbortSignal", "AbortController", "Blob", "isBlob", "name", "AggregateError", "require_errors", "AggregateError", "assert", "AbortError", "name", "String", "ERR_INVALID_ARG_TYPE", "name", "state", "process", "AbortError", "ERR_INVALID_ARG_TYPE", "Promise", "process", "AbortError", "Symbol", "destroy", "self", "err", "AbortError", "ERR_INVALID_ARG_TYPE", "name", "Uint8Array", "Buffer", "_", "state", "name", "Buffer", "Buffer", "self", "process", "Buffer", "ERR_INVALID_ARG_TYPE", "process", "Promise", "Symbol", "Buffer", "ERR_INVALID_ARG_TYPE", "AbortError", "state", "self", "process", "Error", "Symbol", "Buffer", "ERR_INVALID_ARG_TYPE", "state", "stream", "destroy", "process", "AbortError", "ERR_INVALID_ARG_TYPE", "Blob", "isBlob", "AbortController", "name", "destroy", "then", "Symbol", "process", "Promise", "ERR_INVALID_ARG_TYPE", "AbortError", "AbortController", "err", "onError", "destroy", "endFn", "AbortError", "writable", "readable", "AbortController", "ERR_INVALID_ARG_TYPE", "AbortError", "Boolean", "Number", "Promise", "Symbol", "map", "asIndexedPairs", "options", "flatMap", "drop", "take", "Promise", "require_stream", "Buffer", "fn", "require_browser", "Buffer", "_init", "copy", "m", "piper", "_bl", "_interopRequireDefault", "require", "_stream", "_message", "_packet", "_errors", "obj", "__esModule", "default", "IncomingMessageStream", "Transform", "constructor", "debug", "readableObjectMode", "currentMessage", "undefined", "bl", "BufferList", "pause", "resume", "processBufferedData", "callback", "length", "HEADER_LENGTH", "readUInt16BE", "ConnectionError", "data", "slice", "consume", "packet", "Packet", "message", "Message", "type", "resetConnection", "push", "isLast", "once", "end", "write", "_transform", "chunk", "_encoding", "append", "_default", "exports", "module", "_bl", "_interopRequireDefault", "require", "_stream", "_packet", "obj", "__esModule", "default", "OutgoingMessageStream", "Duplex", "constructor", "debug", "packetSize", "writableObjectMode", "bl", "BufferList", "on", "push", "_write", "message", "_encoding", "callback", "length", "HEADER_LENGTH", "packetNumber", "currentMessage", "data", "ignore", "append", "slice", "consume", "packet", "Packet", "type", "packetId", "resetConnection", "addData", "buffer", "pause", "last", "undefined", "_read", "_size", "resume", "_default", "exports", "module", "_nativeDuplexpair", "_interopRequireDefault", "require", "tls", "_interopRequireWildcard", "_events", "_message", "_packet", "_incomingMessageStream", "_outgoingMessageStream", "_getRequireWildcardCache", "e", "WeakMap", "r", "t", "__esModule", "default", "has", "get", "n", "__proto__", "a", "Object", "defineProperty", "getOwnPropertyDescriptor", "u", "prototype", "hasOwnProperty", "call", "i", "set", "obj", "MessageIO", "EventEmitter", "constructor", "socket", "packetSize", "debug", "tlsNegotiationComplete", "incomingMessageStream", "IncomingMessageStream", "incomingMessageIterator", "Symbol", "asyncIterator", "outgoingMessageStream", "OutgoingMessageStream", "pipe", "args", "length", "log", "securePair", "cleartext", "setMaxSendFragment", "startTls", "credentialsDetails", "hostname", "trustServerCertificate", "maxVersion", "includes", "secureContext", "createSecureContext", "Promise", "resolve", "reject", "duplexpair", "DuplexPair", "connect", "socket1", "servername", "rejectUnauthorized", "encrypted", "socket2", "onSecureConnect", "removeListener", "onReadable", "onError", "once", "err", "destroy", "cipher", "getCipher", "name", "version", "emit", "unpipe", "message", "Message", "type", "TYPE", "PRELOGIN", "resetConnection", "chunk", "read", "write", "end", "readMessage", "then", "response", "data", "catch", "sendMessage", "packetType", "result", "next", "done", "Error", "value", "_default", "exports", "module", "codepageByLanguageId", "exports", "codepageBySortId", "Flags", "IGNORE_CASE", "IGNORE_ACCENT", "IGNORE_KANA", "IGNORE_WIDTH", "BINARY", "BINARY2", "UTF8", "Collation", "fromBuffer", "buffer", "offset", "lcid", "flags", "version", "sortId", "constructor", "undefined", "codepage", "languageId", "toBuffer", "Buffer", "alloc", "Null", "id", "type", "name", "declaration", "Error", "generateTypeInfo", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "IntN", "id", "type", "name", "declaration", "Error", "generateTypeInfo", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "_intn", "_interopRequireDefault", "require", "obj", "__esModule", "default", "DATA_LENGTH", "Buffer", "from", "NULL_LENGTH", "TinyInt", "id", "type", "name", "declaration", "generateTypeInfo", "IntN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "buffer", "alloc", "writeUInt8", "Number", "validate", "isNaN", "TypeError", "_default", "exports", "module", "BitN", "id", "type", "name", "declaration", "Error", "generateTypeInfo", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "_bitn", "_interopRequireDefault", "require", "obj", "__esModule", "default", "DATA_LENGTH", "Buffer", "from", "NULL_LENGTH", "Bit", "id", "type", "name", "declaration", "generateTypeInfo", "BitN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "validate", "_default", "exports", "module", "_intn", "_interopRequireDefault", "require", "obj", "__esModule", "default", "DATA_LENGTH", "Buffer", "from", "NULL_LENGTH", "SmallInt", "id", "type", "name", "declaration", "generateTypeInfo", "IntN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "buffer", "alloc", "writeInt16LE", "Number", "validate", "isNaN", "TypeError", "_default", "exports", "module", "_intn", "_interopRequireDefault", "require", "obj", "__esModule", "default", "NULL_LENGTH", "Buffer", "from", "DATA_LENGTH", "Int", "id", "type", "name", "declaration", "generateTypeInfo", "IntN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "buffer", "alloc", "writeInt32LE", "Number", "validate", "isNaN", "TypeError", "_default", "exports", "module", "DateTimeN", "id", "type", "name", "declaration", "Error", "generateTypeInfo", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "_datetimen", "_interopRequireDefault", "require", "obj", "__esModule", "default", "EPOCH_DATE", "Date", "UTC_EPOCH_DATE", "UTC", "DATA_LENGTH", "Buffer", "from", "NULL_LENGTH", "SmallDateTime", "id", "type", "name", "declaration", "generateTypeInfo", "DateTimeN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "buffer", "alloc", "days", "dstDiff", "minutes", "useUTC", "Math", "floor", "getTime", "getUTCHours", "getUTCMinutes", "getTimezoneOffset", "getHours", "getMinutes", "writeUInt16LE", "validate", "collation", "parse", "year", "month", "date", "getUTCFullYear", "getUTCMonth", "getUTCDate", "getFullYear", "getMonth", "getDate", "TypeError", "isNaN", "_default", "exports", "module", "FloatN", "id", "type", "name", "declaration", "Error", "generateTypeInfo", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "_floatn", "_interopRequireDefault", "require", "obj", "__esModule", "default", "NULL_LENGTH", "Buffer", "from", "DATA_LENGTH", "Real", "id", "type", "name", "declaration", "generateTypeInfo", "FloatN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "buffer", "alloc", "writeFloatLE", "parseFloat", "validate", "isNaN", "TypeError", "_default", "exports", "module", "MoneyN", "id", "type", "name", "declaration", "Error", "generateTypeInfo", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "_moneyn", "_interopRequireDefault", "require", "obj", "__esModule", "default", "SHIFT_LEFT_32", "SHIFT_RIGHT_32", "NULL_LENGTH", "Buffer", "from", "DATA_LENGTH", "Money", "id", "type", "name", "declaration", "generateTypeInfo", "MoneyN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "buffer", "alloc", "writeInt32LE", "Math", "floor", "validate", "parseFloat", "isNaN", "TypeError", "_default", "exports", "module", "createErrorType", "name", "init", "superErrorClass", "Error", "JsJodaException", "message", "captureStackTrace", "stack", "constructor", "apply", "arguments", "toString", "prototype", "Object", "create", "messageWithCause", "cause", "msg", "messageForDateTimeParseException", "text", "index", "parsedString", "errorIndex", "assert", "assertion", "error", "requireNonNull", "value", "parameterName", "NullPointerException", "requireInstance", "_class", "IllegalArgumentException", "abstractMethodFail", "methodName", "TypeError", "_init", "Duration", "ZERO", "YearConstants", "MIN_VALUE", "MAX_VALUE", "ChronoUnit", "NANOS", "ofNanos", "MICROS", "MILLIS", "SECONDS", "ofSeconds", "MINUTES", "HOURS", "HALF_DAYS", "DAYS", "WEEKS", "MONTHS", "YEARS", "DECADES", "CENTURIES", "MILLENNIA", "ERAS", "FOREVER", "MathUtil", "MAX_SAFE_INTEGER", "ChronoField", "NANO_OF_SECOND", "ValueRange", "of", "NANO_OF_DAY", "MICRO_OF_SECOND", "MICRO_OF_DAY", "MILLI_OF_SECOND", "MILLI_OF_DAY", "SECOND_OF_MINUTE", "SECOND_OF_DAY", "MINUTE_OF_HOUR", "MINUTE_OF_DAY", "HOUR_OF_AMPM", "CLOCK_HOUR_OF_AMPM", "HOUR_OF_DAY", "CLOCK_HOUR_OF_DAY", "AMPM_OF_DAY", "DAY_OF_WEEK", "ALIGNED_DAY_OF_WEEK_IN_MONTH", "ALIGNED_DAY_OF_WEEK_IN_YEAR", "DAY_OF_MONTH", "DAY_OF_YEAR", "EPOCH_DAY", "ALIGNED_WEEK_OF_MONTH", "ALIGNED_WEEK_OF_YEAR", "MONTH_OF_YEAR", "PROLEPTIC_MONTH", "YEAR_OF_ERA", "YEAR", "ERA", "INSTANT_SECONDS", "MIN_SAFE_INTEGER", "OFFSET_SECONDS", "createTemporalQuery", "queryFromFunction", "ExtendedTemporalQuery", "_TemporalQuery", "_inheritsLoose", "TemporalQuery", "queryFrom", "DayOfWeek", "MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY", "FROM", "temporal", "from", "ENUMS", "Month", "JANUARY", "FEBRUARY", "MARCH", "APRIL", "MAY", "JUNE", "JULY", "AUGUST", "SEPTEMBER", "OCTOBER", "NOVEMBER", "DECEMBER", "Period", "ofDays", "ZoneOffset", "MAX_SECONDS", "LocalTime", "SECONDS_PER_HOUR", "UTC", "ofTotalSeconds", "MIN", "MAX", "DAY_OF_QUARTER", "DAY_OF_QUARTER_FIELD", "QUARTER_OF_YEAR", "QUARTER_OF_YEAR_FIELD", "WEEK_OF_WEEK_BASED_YEAR", "WEEK_OF_WEEK_BASED_YEAR_FIELD", "WEEK_BASED_YEAR", "WEEK_BASED_YEAR_FIELD", "WEEK_BASED_YEARS", "Unit", "QUARTER_YEARS", "IsoFields", "LocalDate", "isoWeekOfWeekyear", "get", "isoWeekyear", "ReducedPrinterParser", "BASE_DATE", "DateTimeFormatterBuilder", "CompositePrinterParser", "PadPrinterParserDecorator", "SettingsParser", "CharLiteralPrinterParser", "StringLiteralPrinterParser", "NumberPrinterParser", "FractionPrinterParser", "OffsetIdPrinterParser", "ZoneIdPrinterParser", "DateTimeFormatter", "ISO_LOCAL_DATE", "appendValue", "SignStyle", "EXCEEDS_PAD", "appendLiteral", "toFormatter", "ResolverStyle", "STRICT", "withChronology", "IsoChronology", "INSTANCE", "ISO_LOCAL_TIME", "optionalStart", "appendFraction", "ISO_LOCAL_DATE_TIME", "parseCaseInsensitive", "append", "ISO_INSTANT", "appendInstant", "ISO_OFFSET_DATE_TIME", "appendOffsetId", "ISO_ZONED_DATE_TIME", "parseCaseSensitive", "appendZoneId", "BASIC_ISO_DATE", "ISO_OFFSET_DATE", "ISO_OFFSET_TIME", "ISO_ORDINAL_DATE", "ISO_WEEK_DATE", "ISO_DATE", "optionalEnd", "ISO_TIME", "ISO_DATE_TIME", "PARSED_EXCESS_DAYS", "DateTimeBuilder", "excessDays", "PARSED_LEAP_SECOND", "leapSecond", "PARSER", "MonthDay", "YearMonth", "Year", "OffsetTime", "ofNumbers", "strcmp", "a", "b", "ZonedDateTime", "OffsetDateTime", "LocalDateTime", "atOffset", "EPOCH_0", "ofEpochDay", "hour", "MIDNIGHT", "NOON", "Instant", "MIN_SECONDS", "EPOCH", "ofEpochSecond", "TemporalQueries", "ZONE_ID", "query", "CHRONO", "PRECISION", "OFFSET", "isSupported", "ZONE", "zone", "LOCAL_DATE", "getLong", "LOCAL_TIME", "ofNanoOfDay", "SYSTEM_DEFAULT_ZONE_ID_INSTANCE", "SystemDefaultZoneId", "ZoneId", "systemDefault", "ZoneIdFactory", "getAvailableZoneIds", "ofOffset", "SYSTEM", "isInit", "YearConstantsInit", "DurationInit", "ChronoUnitInit", "ChronoFieldInit", "LocalTimeInit", "IsoFieldsInit", "TemporalQueriesInit", "DayOfWeekInit", "InstantInit", "LocalDateInit", "LocalDateTimeInit", "YearInit", "MonthInit", "YearMonthInit", "MonthDayInit", "PeriodInit", "ZoneOffsetInit", "ZonedDateTimeInit", "ZoneIdInit", "IsoChronologyInit", "DateTimeFormatterInit", "DateTimeFormatterBuilderInit", "OffsetDateTimeInit", "OffsetTimeInit", "convert", "ToNativeJsConverter", "nativeJs", "date", "Date", "ofEpochMilli", "getTime", "atZone", "toDate", "bindUse", "jsJoda", "used", "use", "fn", "indexOf", "push", "DateTimeException", "DateTimeParseException", "UnsupportedTemporalTypeException", "ArithmeticException", "IllegalStateException", "Enum", "TemporalAmount", "TemporalUnit", "TemporalField", "TemporalAccessor", "PATTERN", "ParsePosition", "EnumMap", "Temporal", "ChronoLocalDate", "StringUtil", "ZoneRules", "Fixed", "SECONDS_CACHE", "ID_CACHE", "DateTimeParseContext", "Parsed", "DateTimePrintContext", "QUARTER_DAYS", "Field", "DecimalStyle", "TextStyle", "MAX_WIDTH", "EXCEED_POINTS", "PATTERNS", "ZoneRulesProvider", "ZoneRegion", "ZoneIdTree", "ZoneIdTreeMap", "zoneIdTree", "SECONDS_PER_10000_YEARS", "SECONDS_0000_TO_1970", "InstantPrinterParser", "DefaultingParser", "StringBuilder", "TemporalAdjuster", "TemporalAdjusters", "Impl", "DayOfWeekInMonth", "RelativeDayOfWeek", "ChronoZonedDateTime", "DAYS_PER_CYCLE", "DAYS_0000_TO_1970", "ChronoLocalDateTime", "NANOS_PER_MILLI", "Clock", "SystemClock", "FixedClock", "OffsetClock", "ZoneOffsetTransition", "SystemDefaultZoneRules", "_", "jsJodaExports", "intDiv", "x", "y", "r", "roundDown", "safeZero", "intMod", "Math", "ceil", "floor", "floorDiv", "floorMod", "safeAdd", "verifyInt", "safeToInt", "safeSubtract", "safeMultiply", "parseInt", "_parseInt", "_x", "isNaN", "compareNumbers", "smi", "int", "hash", "number", "Infinity", "result", "hashCode", "_len", "length", "numbers", "Array", "_key", "_i", "_numbers", "n", "_name", "_proto", "equals", "other", "toJSON", "unit", "units", "addTo", "subtractFrom", "Symbol", "toPrimitive", "hint", "duration", "isDurationEstimated", "isDateBased", "isTimeBased", "isSupportedBy", "dateTime", "periodToAdd", "between", "temporal1", "temporal2", "_TemporalAmount", "seconds", "nanos", "_this", "call", "_seconds", "_nanos", "days", "_create", "SECONDS_PER_DAY", "ofHours", "hours", "ofMinutes", "minutes", "SECONDS_PER_MINUTE", "nanoAdjustment", "secs", "NANOS_PER_SECOND", "nos", "ofMillis", "millis", "mos", "amount", "plus", "forEach", "startInclusive", "endExclusive", "until", "startNos", "adjustedEnd", "with", "e", "parse", "RegExp", "matches", "exec", "negate", "dayMatch", "hourMatch", "minuteMatch", "secondMatch", "fractionMatch", "daysAsSecs", "_parseNumber", "hoursAsSecs", "minsAsSecs", "negativeSecs", "charAt", "_parseFraction", "ex", "parsed", "multiplier", "errorText", "substring", "parseFloat", "_createSecondsNanos", "_createNegateDaysHoursMinutesSecondsNanos", "negated", "isZero", "isNegative", "nano", "withSeconds", "withNanos", "nanoOfSecond", "checkValidIntValue", "plusDuration", "durationOrNumber", "unitOrNumber", "plusAmountUnit", "plusSecondsNanos", "amountToAdd", "plusNanos", "plusMillis", "plusSeconds", "multipliedBy", "plusDays", "daysToAdd", "plusHours", "hoursToAdd", "plusMinutes", "minutesToAdd", "secondsToAdd", "millisToAdd", "nanosToAdd", "epochSec", "minus", "minusDuration", "minusAmountUnit", "secsToSubtract", "nanosToSubtract", "amountToSubtract", "minusDays", "daysToSubtract", "minusHours", "hoursToSubtract", "minusMinutes", "minutesToSubtract", "minusSeconds", "secondsToSubtract", "minusMillis", "millisToSubtract", "minusNanos", "multiplicand", "dividedBy", "divisor", "secsMod", "abs", "toDays", "toHours", "toMinutes", "toMillis", "round", "toNanos", "totalNanos", "compareTo", "otherDuration", "cmp", "rval", "nanoString", "slice", "_TemporalUnit", "estimatedDuration", "_duration", "e2", "baseUnit", "rangeUnit", "range", "rangeRefinedBy", "getFrom", "adjustInto", "newValue", "displayName", "minSmallest", "minLargest", "maxSmallest", "maxLargest", "_minSmallest", "_minLargest", "_maxLargest", "_maxSmallest", "isFixed", "minimum", "largestMinimum", "maximum", "smallestMaximum", "isValidValue", "checkValidValue", "field", "isValidIntValue", "isIntValue", "str", "_TemporalField", "byName", "fieldName", "prop", "_baseUnit", "_rangeUnit", "_range", "dateBased", "timeBased", "zoneId", "chronology", "precision", "offset", "localDate", "localTime", "_Enum", "_TemporalAccessor", "ordinal", "_ordinal", "values", "valueOf", "dayOfWeek", "style", "locale", "_value", "months", "newMonthVal", "leapYear", "minLength", "maxLength", "firstDayOfYear", "leap", "firstMonthOfQuarter", "month", "years", "_years", "_months", "_days", "_assertThisInitialized", "ofYears", "ofMonths", "ofWeeks", "weeks", "i", "unitAmount", "startDate", "endDate", "_parse", "yearMatch", "monthMatch", "weekMatch", "val", "withYears", "withMonths", "withDays", "plusYears", "yearsToAdd", "plusMonths", "monthsToAdd", "minusYears", "yearsToSubtract", "minusMonths", "monthsToSubtract", "scalar", "normalized", "totalMonths", "toTotalMonths", "splitYears", "splitMonths", "obj", "buf", "_index", "_errorIndex", "getIndex", "setIndex", "getErrorIndex", "setErrorIndex", "_map", "putAll", "otherMap", "key", "containsKey", "hasOwnProperty", "undefined", "put", "set", "retainAll", "keyList", "map", "remove", "keyName", "keySet", "clear", "SMART", "LENIENT", "fieldOrUnit", "_minusAmount", "_minusUnit", "_plusUnit", "_plusAmount", "endTemporal", "_with", "adjusterOrField", "_withAdjuster", "_withField", "adjuster", "_Temporal", "toEpochDay", "format", "formatter", "startsWith", "pattern", "len", "chr", "charCodeAt", "prefix", "id", "rules", "isFixedOffset", "instantOrLocalDateTime", "offsetOfInstant", "offsetOfLocalDateTime", "instant", "offsetOfEpochMilli", "epochMilli", "localDateTime", "validOffsets", "transition", "standardOffset", "daylightSavings", "isDaylightSavings", "isValidOffset", "nextTransition", "previousTransition", "transitions", "transitionRules", "_ZoneRules", "_offset", "_proto2", "_ZoneId", "totalSeconds", "_validateTotalSeconds", "_totalSeconds", "_rules", "_id", "_buildId", "absTotalSeconds", "absHours", "absMinutes", "MINUTES_PER_HOUR", "absSeconds", "_validate", "offsetId", "first", "ofHoursMinutesSeconds", "pos", "precededByColon", "ch1", "ch2", "ofHoursMinutes", "ofTotalMinutes", "totalMinutes", "totalSecs", "dtb", "_addFieldValue", "fieldValues", "chrono", "time", "getFieldValue0", "old", "_putFieldValue0", "resolve", "resolverStyle", "resolverFields", "_mergeDate", "_mergeTime", "_resolveTimeInferZeroes", "_resolveInstant", "_checkDate", "resolveDate", "_addObject", "val1", "val2", "ch", "ap", "hap", "nod", "cod", "lod", "sod", "mod", "los", "cos", "hod", "moh", "som", "hodVal", "mohVal", "somVal", "nosVal", "ofSecondOfDay", "dateOrTime", "offsetSecs", "atTime", "build", "type", "_constructorSelf", "_constructorFormatter", "_constructorParam", "_caseSensitive", "_strict", "_parsed", "symbols", "_locale", "_symbols", "_overrideChronology", "decimalStyle", "_overrideZone", "copy", "isStrict", "setStrict", "strict", "setLocale", "startOptional", "currentParsed", "endOptional", "successful", "splice", "isCaseSensitive", "setCaseSensitive", "caseSensitive", "subSequenceEquals", "cs1", "offset1", "cs2", "offset2", "toLowerCase", "charEquals", "charEqualsIgnoreCase", "c1", "c2", "setParsedField", "errorPos", "successPos", "currentParsedFieldValues", "setParsedZone", "getParsed", "toParsed", "setParsedLeapSecond", "getEffectiveChronology", "dateTimeParseContext", "cloned", "toBuilder", "builder", "overrideZone", "localeOrFormatter", "_temporal", "adjust", "_optional", "getValueQuery", "getValue", "setDateTime", "_isIso", "_getWeekRangeByLocalDate", "wby", "_getWeekBasedYear", "_getWeekRangeByYear", "isLeapYear", "_getWeek", "dow0", "doy0", "dayOfYear", "doyThu0", "alignedWeek", "firstThuDoy0", "firstMonDoy0", "withDayOfYear", "week", "year", "doy", "dow", "_Field", "qoy", "moy", "curValue", "partialTemporal", "yearLong", "qoyLong", "doq", "max", "_Field2", "_proto3", "_Field3", "_proto4", "wbyLong", "dowLong", "wowby", "plusWeeks", "temp", "_Field4", "_proto5", "newWby", "resolved", "_proto6", "added", "zeroChar", "positiveSignChar", "negativeSignChar", "decimalPointChar", "_zeroDigit", "_zeroDigitCharCode", "_positiveSign", "_negativeSign", "_decimalSeparator", "positiveSign", "withPositiveSign", "negativeSign", "withNegativeSign", "zeroDigit", "withZeroDigit", "decimalSeparator", "withDecimalSeparator", "convertToDigit", "char", "convertNumberToI18N", "numericText", "diff", "convertedText", "String", "fromCharCode", "availableLocales", "STANDARD", "positive", "fixedWidth", "NORMAL", "ALWAYS", "NEVER", "NOT_NEGATIVE", "isStandalone", "FULL_STANDALONE", "SHORT_STANDALONE", "NARROW_STANDALONE", "asStandalone", "FULL", "SHORT", "NARROW", "asNormal", "literal", "_literal", "print", "context", "position", "printerParsers", "optional", "_printerParsers", "withOptional", "pp", "setLength", "minWidth", "maxWidth", "decimalPoint", "fraction", "convertToFraction", "outputScale", "min", "substr", "effectiveMin", "effectiveMax", "minEndPos", "maxEndPos", "total", "digit", "moveLeft", "scale", "pow", "convertFromFraction", "_min", "_scaled", "decimal", "signStyle", "subsequentWidth", "_field", "_minWidth", "_maxWidth", "_signStyle", "_subsequentWidth", "withFixedWidth", "withSubsequentWidth", "_isFixedWidth", "contextValue", "_getValue", "sign", "negative", "effMinWidth", "effMaxWidth", "pass", "parseLen", "_setValue", "_NumberPrinterParser", "width", "baseValue", "baseDate", "_baseValue", "_baseDate", "absValue", "lastPart", "basePart", "isFixedWidth", "noOffsetText", "_checkPattern", "bufPos", "output", "appendChar", "noOffsetLen", "array", "arrayIndex", "parseText", "required", "converted", "replace", "INSTANCE_ID", "printerParser", "padWidth", "padChar", "_printerParser", "_padWidth", "_padChar", "preLen", "insert", "endPos", "resultPos", "SENSITIVE", "INSENSITIVE", "getRules", "ofId", "description", "nextChar", "newContext", "nextNextChar", "_parsePrefixedOffset", "availableZoneIds", "size", "createTreeMap", "maxParseLength", "treeMap", "parsedZoneId", "parseLength", "parsedSubZoneId", "isLeaf", "prefixPos", "toUpperCase", "sortedZoneIds", "sort", "add", "_treeMap", "idLength", "subZoneId", "subTreeMap", "_active", "_parent", "_padNextWidth", "_padNextChar", "_valueParserIndex", "_of", "parent", "dtFormatterBuilder", "_appendInternalPrinterParser", "parseStrict", "parseLenient", "parseDefaulting", "_appendInternal", "_appendValue1", "_appendValue2", "_appendValue4", "_appendValuePrinterParser", "appendValueReduced", "_appendValueReducedFieldWidthMaxWidthBaseDate", "_appendValueReducedFieldWidthMaxWidthBaseValue", "activeValueParser", "basePP", "fractionalDigits", "appendOffset", "appendPattern", "_parsePattern", "appendZoneText", "appendText", "appendLocalizedOffset", "appendWeekField", "FIELD_MAP", "cur", "start", "count", "pad", "padNext", "_parseField", "zero", "_padNext1", "_padNext2", "cpp", "_toPrinterParser", "inSecs", "inNanos", "inSec", "inNano", "zeroSecs", "hi", "lo", "ldt", "second", "div", "minDigits", "maxDigits", "parser", "yearParsed", "day", "secVal", "nanoVal", "sec", "instantSecs", "toEpochSecond", "_str", "end", "parsedExcessDays", "parsedLeapSecond", "ofPattern", "_decimalStyle", "_resolverStyle", "_resolverFields", "_chrono", "_zone", "withLocale", "withResolverStyle", "_formatTo", "appendable", "parse1", "parse2", "_parseToBuilder", "_createError", "abbr", "_parseUnresolved0", "parseUnresolved", "now", "zoneIdOrClock", "now0", "nowZoneId", "nowClock", "systemDefaultZone", "system", "clock", "dayOfMonth", "monthOrNumber", "ofMonthNumber", "ofNumberNumber", "parseString", "parseStringFormatter", "_month", "_day", "monthValue", "isValidYear", "isLeap", "withMonth", "withDayOfMonth", "atYear", "isAfter", "isBefore", "ofNumberMonth", "_year", "isSupportedField", "isSupportedUnit", "_getProlepticMonth", "isValidDay", "lengthOfMonth", "lengthOfYear", "f", "withYear", "newYear", "monthCount", "calcMonths", "newMonth", "monthsUntil", "atDay", "atEndOfMonth", "isoYear", "parseTextFormatter", "isValidMonthDay", "monthDay", "ofYearDay", "atMonth", "atMonthMonth", "atMonthNumber", "atMonthDay", "yearsUntil", "firstDayOfMonth", "FIRST_DAY_OF_MONTH", "lastDayOfMonth", "LAST_DAY_OF_MONTH", "firstDayOfNextMonth", "FIRST_DAY_OF_NEXT_MONTH", "FIRST_DAY_OF_YEAR", "lastDayOfYear", "LAST_DAY_OF_YEAR", "firstDayOfNextYear", "FIRST_DAY_OF_NEXT_YEAR", "firstInMonth", "lastInMonth", "dayOfWeekInMonth", "next", "nextOrSame", "previous", "previousOrSame", "_TemporalAdjuster", "_TemporalAdjuster2", "_this2", "_dowValue", "curDow", "dowDiff", "daysDiff", "_TemporalAdjuster3", "relative", "_this3", "_relative", "calDow", "prolepticYear", "_updateResolveMap", "current", "prolepticMonth", "yoeLong", "era", "dom", "aw", "ad", "toOffsetTime", "clockOrZone", "_now", "ofInstant", "ofTimeAndOffset", "minute", "secsOfDay", "epochSecond", "_time", "toNanoOfDay", "atDate", "_toEpochNano", "isEqual", "_withLocalTimeOffset", "toLocalTime", "truncatedTo", "nanosUntil", "NANOS_PER_MINUTE", "NANOS_PER_HOUR", "withHour", "withMinute", "withSecond", "withNano", "withOffsetSameInstant", "difference", "adjusted", "withOffsetSameLocal", "offsetNanos", "compare", "toLocalDate", "toInstant", "epochDay", "toSecondOfDay", "toLocalDateTime", "thisEpochSec", "otherEpochSec", "_ChronoZonedDateTime", "of2", "of3", "of8", "ofLocal", "dt", "preferredOffset", "trans", "offsetAfter", "some", "validOffset", "ofInstant2", "ofInstant3", "ofStrict", "isGap", "ofLenient", "zdt", "_from", "__from", "_dateTime", "_resolveLocal", "newDateTime", "_resolveOffset", "withEarlierOffsetAtOverlap", "isOverlap", "earlierOffset", "offsetBefore", "withLaterOffsetAtOverlap", "laterOffset", "withZoneSameLocal", "withZoneSameInstant", "withFixedOffsetZone", "minusWeeks", "toOffsetDateTime", "ofDateTime", "ofDateAndTime", "atZoneSameInstant", "atZoneSimilarLocal", "toZonedDateTime", "_withDateTimeOffset", "_ChronoLocalDate", "monthEnd", "adjustCycles", "doyEst", "yearEst", "zeroDay", "marchDoy0", "marchMonth0", "_resolvePreviousValid", "_get0", "_prolepticMonth", "m", "weeksToAdd", "mjDay", "weeksToSubtract", "p1", "p2", "until1", "until2", "daysUntil", "_monthsUntil", "packed1", "packed2", "calcDate", "atTime1", "atTime4", "_atTimeOffsetTime", "atStartOfDay", "_atStartOfDayWithZone", "dateTimeAfter", "_compareTo0", "otherDate", "yearValue", "dayValue", "dayString", "monthString", "yearString", "absYear", "_ChronoLocalDateTime", "_ofEpochMillis", "localSecond", "localEpochDay", "_date", "_withDateTime", "newDate", "newTime", "MICROS_PER_DAY", "MILLIS_PER_DAY", "_plusWithOverflow", "totDays", "NANOS_PER_DAY", "MINUTES_PER_DAY", "HOURS_PER_DAY", "totNanos", "curNoD", "newNoD", "timeUntil", "endTime", "secondOfDay", "nanoOfDay", "_hour", "_minute", "_second", "_nanoOfSecond", "_nano", "ham", "unitDur", "dur", "newHour", "mofd", "newMofd", "newMinute", "sofd", "newSofd", "newSecond", "nofd", "newNofd", "newNano", "hourValue", "minuteValue", "secondValue", "nanoValue", "systemUTC", "ofEpochMicro", "epochMicro", "nval", "plusMicros", "_plus", "microsToAdd", "minusMicros", "microsToSubtract", "_nanosUntil", "_microsUntil", "toEpochMilli", "_secondsUntil", "secsDiff", "totalMicros", "nanosDiff", "otherInstant", "fixed", "fixedInstant", "baseClock", "withZone", "_Clock", "_Clock2", "_instant", "_zoneId", "_Clock3", "_baseClock", "_transition", "_offsetBefore", "_offsetAfter", "dateTimeBefore", "durationSeconds", "d", "offsetInMinutes", "getTimezoneOffset", "offsetInMinutesBeforePossibleTransition", "epochMilliSystemZone", "offsetInMinutesAfterPossibleTransition", "_throwNotSupported", "zonedDateTime", "_datetimen", "_interopRequireDefault", "require", "_core", "obj", "__esModule", "default", "EPOCH_DATE", "LocalDate", "ofYearDay", "NULL_LENGTH", "Buffer", "from", "DATA_LENGTH", "DateTime", "id", "type", "name", "declaration", "generateTypeInfo", "DateTimeN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "date", "useUTC", "of", "getUTCFullYear", "getUTCMonth", "getUTCDate", "getFullYear", "getMonth", "getDate", "days", "until", "ChronoUnit", "DAYS", "milliseconds", "threeHundredthsOfSecond", "seconds", "getUTCHours", "getUTCMinutes", "getUTCSeconds", "getUTCMilliseconds", "getHours", "getMinutes", "getSeconds", "getMilliseconds", "Math", "round", "buffer", "alloc", "writeInt32LE", "writeUInt32LE", "validate", "collation", "Date", "parse", "year", "TypeError", "isNaN", "_default", "exports", "module", "_floatn", "_interopRequireDefault", "require", "obj", "__esModule", "default", "NULL_LENGTH", "Buffer", "from", "Float", "id", "type", "name", "declaration", "generateTypeInfo", "FloatN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "buffer", "alloc", "writeDoubleLE", "parseFloat", "validate", "isNaN", "TypeError", "_default", "exports", "module", "DecimalN", "id", "type", "name", "declaration", "Error", "generateTypeInfo", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "_decimaln", "_interopRequireDefault", "require", "_writableTrackingBuffer", "obj", "__esModule", "default", "NULL_LENGTH", "Buffer", "from", "Decimal", "id", "type", "name", "declaration", "parameter", "resolvePrecision", "resolveScale", "precision", "value", "scale", "generateTypeInfo", "_options", "DecimalN", "generateParameterLength", "options", "generateParameterData", "sign", "Math", "round", "abs", "pow", "buffer", "alloc", "writeUInt8", "writeUInt32LE", "WritableTrackingBuffer", "writeUInt64LE", "data", "validate", "parseFloat", "isNaN", "TypeError", "_default", "exports", "module", "NumericN", "id", "type", "name", "declaration", "Error", "generateTypeInfo", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "_numericn", "_interopRequireDefault", "require", "_writableTrackingBuffer", "obj", "__esModule", "default", "NULL_LENGTH", "Buffer", "from", "Numeric", "id", "type", "name", "declaration", "parameter", "resolvePrecision", "resolveScale", "precision", "value", "scale", "generateTypeInfo", "NumericN", "generateParameterLength", "options", "generateParameterData", "sign", "Math", "round", "abs", "pow", "buffer", "alloc", "writeUInt8", "writeUInt32LE", "WritableTrackingBuffer", "writeUInt64LE", "data", "validate", "parseFloat", "isNaN", "TypeError", "_default", "exports", "module", "_moneyn", "_interopRequireDefault", "require", "obj", "__esModule", "default", "DATA_LENGTH", "Buffer", "from", "NULL_LENGTH", "SmallMoney", "id", "type", "name", "declaration", "generateTypeInfo", "MoneyN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "buffer", "alloc", "writeInt32LE", "validate", "parseFloat", "isNaN", "TypeError", "_default", "exports", "module", "_intn", "_interopRequireDefault", "require", "_writableTrackingBuffer", "obj", "__esModule", "default", "DATA_LENGTH", "Buffer", "from", "NULL_LENGTH", "MAX_SAFE_BIGINT", "MIN_SAFE_BIGINT", "BigInt", "id", "type", "name", "declaration", "generateTypeInfo", "IntN", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "buffer", "WritableTrackingBuffer", "writeInt64LE", "Number", "data", "validate", "globalThis", "TypeError", "_default", "exports", "module", "NULL_LENGTH", "Buffer", "from", "Image", "id", "type", "name", "hasTableName", "declaration", "resolveLength", "parameter", "value", "length", "generateTypeInfo", "buffer", "alloc", "writeUInt8", "writeInt32LE", "generateParameterLength", "options", "generateParameterData", "validate", "isBuffer", "TypeError", "_default", "exports", "default", "module", "Buffer", "Buffer", "Buffer", "Buffer", "Buffer", "i", "Buffer", "Buffer", "i", "Buffer", "require_stream", "_", "Buffer", "stream_module", "_iconvLite", "_interopRequireDefault", "require", "obj", "__esModule", "default", "NULL_LENGTH", "Buffer", "from", "Text", "id", "type", "name", "hasTableName", "declaration", "resolveLength", "parameter", "value", "length", "generateTypeInfo", "_options", "buffer", "alloc", "writeUInt8", "writeInt32LE", "collation", "toBuffer", "copy", "generateParameterLength", "options", "generateParameterData", "validate", "TypeError", "Error", "codepage", "iconv", "encode", "_default", "exports", "module", "UPPER_CASE_MAP", "LOWER_CASE_MAP", "bufferToUpperCaseGuid", "buffer", "bufferToLowerCaseGuid", "CHARCODEMAP", "hexDigits", "map", "d", "charCodeAt", "i", "length", "j", "hex", "String", "fromCharCode", "value", "parseInt", "guidToArray", "guid", "_guidParser", "require", "NULL_LENGTH", "Buffer", "from", "DATA_LENGTH", "UniqueIdentifier", "id", "type", "name", "declaration", "resolveLength", "generateTypeInfo", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "guidToArray", "validate", "TypeError", "test", "_default", "exports", "default", "module", "NULL_LENGTH", "Buffer", "from", "NText", "id", "type", "name", "hasTableName", "declaration", "resolveLength", "parameter", "value", "length", "generateTypeInfo", "_options", "buffer", "alloc", "writeUInt8", "writeInt32LE", "collation", "toBuffer", "copy", "generateParameterLength", "options", "byteLength", "generateParameterData", "toString", "validate", "TypeError", "_default", "exports", "default", "module", "MAX", "UNKNOWN_PLP_LEN", "Buffer", "from", "PLP_TERMINATOR", "NULL_LENGTH", "MAX_NULL_LENGTH", "VarBinary", "id", "type", "name", "maximumLength", "declaration", "parameter", "value", "length", "output", "resolveLength", "generateTypeInfo", "buffer", "alloc", "writeUInt8", "writeUInt16LE", "generateParameterLength", "options", "isBuffer", "toString", "byteLength", "generateParameterData", "writeUInt32LE", "validate", "TypeError", "_default", "exports", "default", "module", "_iconvLite", "_interopRequireDefault", "require", "obj", "__esModule", "default", "MAX", "UNKNOWN_PLP_LEN", "Buffer", "from", "PLP_TERMINATOR", "NULL_LENGTH", "MAX_NULL_LENGTH", "VarChar", "id", "type", "name", "maximumLength", "declaration", "parameter", "value", "length", "output", "resolveLength", "generateTypeInfo", "buffer", "alloc", "writeUInt8", "writeUInt16LE", "collation", "toBuffer", "copy", "generateParameterLength", "options", "generateParameterData", "writeUInt32LE", "validate", "TypeError", "Error", "codepage", "iconv", "encode", "_default", "exports", "module", "NULL_LENGTH", "Buffer", "from", "Binary", "id", "type", "name", "maximumLength", "declaration", "parameter", "value", "length", "output", "resolveLength", "generateTypeInfo", "buffer", "alloc", "writeUInt8", "writeUInt16LE", "generateParameterLength", "options", "generateParameterData", "slice", "undefined", "Math", "min", "validate", "isBuffer", "TypeError", "_default", "exports", "default", "module", "_iconvLite", "_interopRequireDefault", "require", "obj", "__esModule", "default", "NULL_LENGTH", "Buffer", "from", "Char", "id", "type", "name", "maximumLength", "declaration", "parameter", "value", "length", "output", "resolveLength", "generateTypeInfo", "buffer", "alloc", "writeUInt8", "writeUInt16LE", "collation", "toBuffer", "copy", "generateParameterLength", "options", "generateParameterData", "validate", "TypeError", "Error", "codepage", "iconv", "encode", "_default", "exports", "module", "MAX", "UNKNOWN_PLP_LEN", "Buffer", "from", "PLP_TERMINATOR", "NULL_LENGTH", "MAX_NULL_LENGTH", "NVarChar", "id", "type", "name", "maximumLength", "declaration", "parameter", "value", "length", "toString", "output", "resolveLength", "isBuffer", "generateTypeInfo", "buffer", "alloc", "writeUInt8", "writeUInt16LE", "collation", "toBuffer", "copy", "generateParameterLength", "options", "byteLength", "generateParameterData", "writeUInt32LE", "validate", "TypeError", "_default", "exports", "default", "module", "NULL_LENGTH", "Buffer", "from", "NChar", "id", "type", "name", "maximumLength", "declaration", "parameter", "value", "length", "toString", "output", "resolveLength", "isBuffer", "generateTypeInfo", "buffer", "alloc", "writeUInt8", "writeUInt16LE", "collation", "toBuffer", "copy", "generateParameterLength", "options", "byteLength", "generateParameterData", "validate", "TypeError", "_default", "exports", "default", "module", "XML", "id", "type", "name", "declaration", "Error", "generateTypeInfo", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "_writableTrackingBuffer", "_interopRequireDefault", "require", "obj", "__esModule", "default", "NULL_LENGTH", "Buffer", "from", "Time", "id", "type", "name", "declaration", "parameter", "resolveScale", "scale", "value", "generateTypeInfo", "generateParameterLength", "options", "Error", "generateParameterData", "buffer", "WritableTrackingBuffer", "time", "timestamp", "useUTC", "getUTCHours", "getUTCMinutes", "getUTCSeconds", "getUTCMilliseconds", "getHours", "getMinutes", "getSeconds", "getMilliseconds", "Math", "pow", "nanosecondDelta", "round", "writeUInt24LE", "writeUInt32LE", "writeUInt40LE", "data", "validate", "Date", "parse", "isNaN", "TypeError", "_default", "exports", "module", "_core", "require", "globalDate", "global", "Date", "EPOCH_DATE", "LocalDate", "ofYearDay", "NULL_LENGTH", "Buffer", "from", "DATA_LENGTH", "id", "type", "name", "declaration", "generateTypeInfo", "generateParameterLength", "parameter", "options", "value", "generateParameterData", "date", "useUTC", "of", "getUTCFullYear", "getUTCMonth", "getUTCDate", "getFullYear", "getMonth", "getDate", "days", "until", "ChronoUnit", "DAYS", "buffer", "alloc", "writeUIntLE", "validate", "collation", "parse", "year", "TypeError", "isNaN", "_default", "exports", "default", "module", "_core", "require", "_writableTrackingBuffer", "_interopRequireDefault", "obj", "__esModule", "default", "EPOCH_DATE", "LocalDate", "ofYearDay", "NULL_LENGTH", "Buffer", "from", "DateTime2", "id", "type", "name", "declaration", "parameter", "resolveScale", "scale", "value", "generateTypeInfo", "_options", "generateParameterLength", "options", "Error", "generateParameterData", "buffer", "WritableTrackingBuffer", "timestamp", "useUTC", "getUTCHours", "getUTCMinutes", "getUTCSeconds", "getUTCMilliseconds", "getHours", "getMinutes", "getSeconds", "getMilliseconds", "Math", "pow", "nanosecondDelta", "round", "writeUInt24LE", "writeUInt32LE", "writeUInt40LE", "date", "of", "getUTCFullYear", "getUTCMonth", "getUTCDate", "getFullYear", "getMonth", "getDate", "days", "until", "ChronoUnit", "DAYS", "data", "validate", "collation", "Date", "parse", "year", "TypeError", "isNaN", "_default", "exports", "module", "_core", "require", "_writableTrackingBuffer", "_interopRequireDefault", "obj", "__esModule", "default", "EPOCH_DATE", "LocalDate", "ofYearDay", "NULL_LENGTH", "Buffer", "from", "DateTimeOffset", "id", "type", "name", "declaration", "parameter", "resolveScale", "scale", "value", "generateTypeInfo", "generateParameterLength", "options", "Error", "generateParameterData", "buffer", "WritableTrackingBuffer", "timestamp", "getUTCHours", "getUTCMinutes", "getUTCSeconds", "getMilliseconds", "Math", "pow", "nanosecondDelta", "round", "writeUInt24LE", "writeUInt32LE", "writeUInt40LE", "date", "of", "getUTCFullYear", "getUTCMonth", "getUTCDate", "days", "until", "ChronoUnit", "DAYS", "offset", "getTimezoneOffset", "writeInt16LE", "data", "validate", "collation", "Date", "parse", "year", "useUTC", "getFullYear", "TypeError", "isNaN", "_default", "exports", "module", "UDT", "id", "type", "name", "declaration", "Error", "generateTypeInfo", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "_writableTrackingBuffer", "_interopRequireDefault", "require", "obj", "__esModule", "default", "TVP_ROW_TOKEN", "Buffer", "from", "TVP_END_TOKEN", "NULL_LENGTH", "TVP", "id", "type", "name", "declaration", "parameter", "value", "generateTypeInfo", "databaseName", "schema", "typeName", "bufferLength", "byteLength", "buffer", "WritableTrackingBuffer", "writeUInt8", "writeBVarchar", "data", "generateParameterLength", "options", "columns", "alloc", "writeUInt16LE", "length", "generateParameterData", "rows", "i", "len", "column", "buff", "writeUInt32LE", "row", "k", "len2", "param", "validate", "collation", "scale", "precision", "TypeError", "Array", "isArray", "_default", "exports", "module", "Variant", "id", "type", "name", "declaration", "generateTypeInfo", "Error", "generateParameterLength", "generateParameterData", "validate", "_default", "exports", "default", "module", "_null", "_interopRequireDefault", "require", "_tinyint", "_bit", "_smallint", "_int", "_smalldatetime", "_real", "_money", "_datetime", "_float", "_decimal", "_numeric", "_smallmoney", "_bigint", "_image", "_text", "_uniqueidentifier", "_intn", "_ntext", "_bitn", "_decimaln", "_numericn", "_floatn", "_moneyn", "_datetimen", "_varbinary", "_varchar", "_binary", "_char", "_nvarchar", "_nchar", "_xml", "_time", "_date", "_datetime2", "_datetimeoffset", "_udt", "_tvp", "_sqlVariant", "obj", "__esModule", "default", "TYPE", "exports", "Null", "id", "TinyInt", "Bit", "SmallInt", "Int", "SmallDateTime", "Real", "Money", "DateTime", "Float", "Decimal", "Numeric", "SmallMoney", "BigInt", "Image", "Text", "UniqueIdentifier", "IntN", "NText", "BitN", "DecimalN", "NumericN", "FloatN", "MoneyN", "DateTimeN", "VarBinary", "VarChar", "Binary", "Char", "NVarChar", "NChar", "Xml", "Time", "Date", "DateTime2", "DateTimeOffset", "UDT", "TVP", "Variant", "TYPES", "typeByName", "Result", "constructor", "value", "offset", "exports", "NotEnoughDataError", "Error", "byteCount", "readUInt8", "buf", "length", "readUInt16LE", "readInt16LE", "readUInt24LE", "readUIntLE", "readUInt32LE", "readUInt32BE", "readUInt40LE", "readInt32LE", "readBigUInt64LE", "readBigInt64LE", "readFloatLE", "readDoubleLE", "readBVarChar", "charCount", "byteLength", "toString", "readBVarByte", "slice", "readUsVarChar", "readUsVarByte", "readUNumeric64LE", "low", "high", "readUNumeric96LE", "dword1", "dword2", "dword3", "readUNumeric128LE", "dword4", "_collation", "require", "_dataType", "_sprintfJs", "_helpers", "readCollation", "buf", "offset", "length", "NotEnoughDataError", "collation", "Collation", "fromBuffer", "slice", "Result", "readSchema", "schemaPresent", "value", "readUInt8", "undefined", "dbname", "readBVarChar", "owningSchema", "xmlSchemaCollection", "readUsVarChar", "readUDTInfo", "maxByteSize", "readUInt16LE", "typeName", "assemblyName", "readMetadata", "options", "userType", "tdsVersion", "readUInt32LE", "flags", "typeNumber", "type", "TYPE", "Error", "sprintf", "name", "precision", "scale", "dataLength", "schema", "udtInfo", "metadataParse", "parser", "callback", "result", "buffer", "position", "err", "waitForChunk", "_default", "exports", "default", "module", "_metadataParser", "require", "_token", "_helpers", "readTableName", "buf", "offset", "metadata", "options", "type", "hasTableName", "Result", "undefined", "tdsVersion", "readUsVarChar", "numberOfTableNameParts", "value", "readUInt8", "tableName", "i", "tableNamePart", "push", "readColumnName", "index", "colName", "readBVarChar", "columnNameReplacer", "camelCaseColumns", "replace", "s", "toLowerCase", "readColumn", "readMetadata", "userType", "flags", "collation", "precision", "scale", "udtInfo", "dataLength", "schema", "colMetadataParser", "parser", "columnCount", "readUInt16LE", "buffer", "position", "err", "NotEnoughDataError", "waitForChunk", "columns", "column", "ColMetadataToken", "_default", "exports", "default", "module", "_token", "require", "_helpers", "STATUS", "MORE", "ERROR", "INXACT", "COUNT", "ATTN", "SRVERROR", "readToken", "buf", "offset", "options", "status", "value", "readUInt16LE", "more", "sqlError", "rowCountValid", "attention", "serverError", "curCmd", "rowCount", "tdsVersion", "readUInt32LE", "readBigUInt64LE", "Result", "Number", "undefined", "doneParser", "DoneToken", "doneInProcParser", "DoneInProcToken", "doneProcParser", "DoneProcToken", "_collation", "require", "_token", "_helpers", "types", "name", "event", "_readNewAndOldValue", "buf", "offset", "length", "type", "newValue", "value", "readBVarChar", "oldValue", "Result", "PacketSizeEnvChangeToken", "parseInt", "DatabaseEnvChangeToken", "LanguageEnvChangeToken", "CharsetEnvChangeToken", "DatabaseMirroringPartnerEnvChangeToken", "Error", "readBVarByte", "newCollation", "Collation", "fromBuffer", "undefined", "oldCollation", "CollationChangeToken", "BeginTransactionEnvChangeToken", "CommitTransactionEnvChangeToken", "RollbackTransactionEnvChangeToken", "ResetConnectionEnvChangeToken", "routePacket", "readUsVarByte", "protocol", "readUInt8", "port", "readUInt16LE", "serverLen", "server", "toString", "RoutingEnvChangeToken", "console", "error", "envChangeParser", "_options", "tokenLength", "NotEnoughDataError", "typeNumber", "_default", "exports", "default", "module", "_helpers", "require", "_token", "readToken", "buf", "offset", "options", "tokenLength", "value", "readUInt16LE", "length", "NotEnoughDataError", "number", "readUInt32LE", "state", "readUInt8", "clazz", "message", "readUsVarChar", "serverName", "readBVarChar", "procName", "lineNumber", "tdsVersion", "Result", "infoParser", "data", "InfoMessageToken", "errorParser", "ErrorMessageToken", "_helpers", "require", "_token", "FEDAUTHINFOID", "STSURL", "SPN", "readFedAuthInfo", "data", "offset", "spn", "stsurl", "countOfInfoIDs", "readUInt32LE", "i", "fedauthInfoID", "readUInt8", "fedAuthInfoDataLen", "fedAuthInfoDataOffset", "toString", "fedAuthInfoParser", "buf", "_options", "tokenLength", "value", "length", "NotEnoughDataError", "slice", "Result", "FedAuthInfoToken", "_default", "exports", "default", "module", "_helpers", "require", "_token", "FEATURE_ID", "SESSIONRECOVERY", "FEDAUTH", "COLUMNENCRYPTION", "GLOBALTRANSACTIONS", "AZURESQLSUPPORT", "UTF8_SUPPORT", "TERMINATOR", "featureExtAckParser", "buf", "offset", "_options", "fedAuth", "utf8Support", "featureId", "value", "readUInt8", "Result", "FeatureExtAckToken", "featureAckDataLen", "readUInt32LE", "length", "NotEnoughDataError", "featureData", "slice", "_default", "exports", "default", "module", "_token", "require", "_tdsVersions", "_helpers", "interfaceTypes", "loginAckParser", "buf", "offset", "_options", "tokenLength", "value", "readUInt16LE", "length", "NotEnoughDataError", "interfaceNumber", "readUInt8", "interfaceType", "tdsVersionNumber", "readUInt32BE", "tdsVersion", "versions", "progName", "readBVarChar", "major", "minor", "buildNumHi", "buildNumLow", "Result", "LoginAckToken", "interface", "progVersion", "_default", "exports", "default", "module", "_token", "require", "_helpers", "orderParser", "buf", "offset", "_options", "tokenLength", "value", "readUInt16LE", "length", "NotEnoughDataError", "orderColumns", "i", "column", "push", "Result", "OrderToken", "_default", "exports", "default", "module", "_helpers", "require", "_token", "returnStatusParser", "buf", "offset", "_options", "value", "readInt32LE", "Result", "ReturnStatusToken", "_default", "exports", "default", "module", "_metadataParser", "require", "_dataType", "_iconvLite", "_interopRequireDefault", "_sprintfJs", "_guidParser", "_helpers", "obj", "__esModule", "default", "NULL", "MAX", "THREE_AND_A_THIRD", "MONEY_DIVISOR", "PLP_NULL", "UNKNOWN_PLP_LEN", "DEFAULT_ENCODING", "readTinyInt", "buf", "offset", "readUInt8", "readSmallInt", "readInt16LE", "readInt", "readInt32LE", "readBigInt", "value", "readBigInt64LE", "Result", "toString", "readReal", "readFloatLE", "readFloat", "readDoubleLE", "readSmallMoney", "readMoney", "high", "low", "readUInt32LE", "readBit", "readValue", "metadata", "options", "type", "name", "dataLength", "Error", "codepage", "collation", "readUInt16LE", "readChars", "readNChars", "readBinary", "textPointerLength", "readSmallDateTime", "useUTC", "readDateTime", "readTime", "scale", "readDate", "readDateTime2", "readDateTimeOffset", "readNumeric", "precision", "readUniqueIdentifier", "sprintf", "readVariant", "isPLPStream", "data", "lowerCaseGuids", "bufferToLowerCaseGuid", "bufferToUpperCaseGuid", "_precision", "sign", "readUNumeric64LE", "readUNumeric96LE", "readUNumeric128LE", "Math", "pow", "baseType", "TYPE", "propBytes", "readCollation", "length", "NotEnoughDataError", "slice", "iconv", "decode", "readPLPStream", "parser", "buffer", "position", "waitForChunk", "expectedLength", "readBigUInt64LE", "chunks", "currentLength", "chunkLength", "push", "Number", "days", "minutes", "Date", "UTC", "threeHundredthsOfSecond", "milliseconds", "round", "readUInt24LE", "readUInt40LE", "i", "date", "Object", "defineProperty", "enumerable", "time", "getHours", "getMinutes", "getSeconds", "getMilliseconds", "nanosecondsDelta", "module", "exports", "_token", "require", "_metadataParser", "_valueParser", "_helpers", "iconv", "_interopRequireWildcard", "_getRequireWildcardCache", "e", "WeakMap", "r", "t", "__esModule", "default", "has", "get", "n", "__proto__", "a", "Object", "defineProperty", "getOwnPropertyDescriptor", "u", "prototype", "hasOwnProperty", "call", "i", "set", "returnParser", "parser", "paramName", "paramOrdinal", "metadata", "buf", "buffer", "offset", "position", "value", "readUInt16LE", "readBVarChar", "readUInt8", "readMetadata", "options", "charAt", "slice", "err", "NotEnoughDataError", "waitForChunk", "isPLPStream", "chunks", "readPLPStream", "type", "name", "Buffer", "concat", "toString", "decode", "collation", "codepage", "readValue", "ReturnValueToken", "_default", "exports", "module", "_token", "require", "iconv", "_interopRequireWildcard", "_valueParser", "_helpers", "_getRequireWildcardCache", "e", "WeakMap", "r", "t", "__esModule", "default", "has", "get", "n", "__proto__", "a", "Object", "defineProperty", "getOwnPropertyDescriptor", "u", "prototype", "hasOwnProperty", "call", "i", "set", "rowParser", "parser", "columns", "metadata", "colMetadata", "isPLPStream", "chunks", "readPLPStream", "push", "value", "type", "name", "Buffer", "concat", "toString", "decode", "collation", "codepage", "result", "readValue", "buffer", "position", "options", "err", "NotEnoughDataError", "waitForChunk", "offset", "useColumnNames", "columnsMap", "create", "forEach", "column", "colName", "RowToken", "_default", "exports", "module", "_token", "require", "iconv", "_interopRequireWildcard", "_valueParser", "_helpers", "_getRequireWildcardCache", "e", "WeakMap", "r", "t", "__esModule", "default", "has", "get", "n", "__proto__", "a", "Object", "defineProperty", "getOwnPropertyDescriptor", "u", "prototype", "hasOwnProperty", "call", "i", "set", "nbcRowParser", "parser", "colMetadata", "columns", "bitmap", "bitmapByteLength", "Math", "ceil", "length", "buffer", "position", "waitForChunk", "bytes", "slice", "len", "byte", "push", "metadata", "value", "isPLPStream", "chunks", "readPLPStream", "type", "name", "Buffer", "concat", "toString", "decode", "collation", "codepage", "result", "readValue", "options", "err", "NotEnoughDataError", "offset", "useColumnNames", "columnsMap", "create", "forEach", "column", "colName", "NBCRowToken", "_default", "exports", "module", "_helpers", "require", "_token", "parseChallenge", "buffer", "challenge", "magic", "slice", "toString", "type", "readInt32LE", "domainLen", "readInt16LE", "domainMax", "domainOffset", "flags", "nonce", "zeroes", "targetLen", "targetMax", "targetOffset", "oddData", "domain", "target", "sspiParser", "buf", "offset", "_options", "tokenLength", "value", "readUInt16LE", "length", "NotEnoughDataError", "data", "Result", "SSPIToken", "_default", "exports", "default", "module", "_token", "require", "_colmetadataTokenParser", "_interopRequireDefault", "_doneTokenParser", "_envChangeTokenParser", "_infoerrorTokenParser", "_fedauthInfoParser", "_featureExtAckParser", "_loginackTokenParser", "_orderTokenParser", "_returnstatusTokenParser", "_returnvalueTokenParser", "_rowTokenParser", "_nbcrowTokenParser", "_sspiTokenParser", "_helpers", "obj", "__esModule", "default", "Parser", "constructor", "iterable", "debug", "options", "colMetadata", "iterator", "buffer", "position", "Symbol", "asyncIterator", "call", "Buffer", "alloc", "parseTokens", "parser", "waitForChunk", "err", "length", "type", "readUInt8", "token", "readToken", "undefined", "TYPE", "DONE", "readDoneToken", "DONEPROC", "readDoneProcToken", "DONEINPROC", "readDoneInProcToken", "ERROR", "readErrorToken", "INFO", "readInfoToken", "ENVCHANGE", "readEnvChangeToken", "LOGINACK", "readLoginAckToken", "RETURNSTATUS", "readReturnStatusToken", "ORDER", "readOrderToken", "FEDAUTHINFO", "readFedAuthInfoToken", "SSPI", "readSSPIToken", "COLMETADATA", "readColMetadataToken", "RETURNVALUE", "readReturnValueToken", "ROW", "readRowToken", "NBCROW", "readNbcRowToken", "FEATUREEXTACK", "readFeatureExtAckToken", "Error", "result", "featureExtAckParser", "NotEnoughDataError", "then", "offset", "value", "nbcRowParser", "returnValueParser", "colMetadataParser", "columns", "sspiParser", "fedAuthInfoParser", "orderParser", "returnStatusParser", "loginAckParser", "envChangeParser", "rowParser", "infoParser", "errorParser", "doneInProcParser", "doneProcParser", "doneParser", "next", "done", "concat", "slice", "_default", "exports", "module", "_events", "require", "_streamParser", "_interopRequireDefault", "_stream", "obj", "__esModule", "default", "Parser", "EventEmitter", "constructor", "message", "debug", "handler", "options", "parser", "Readable", "from", "StreamParser", "parseTokens", "on", "token", "handlerName", "emit", "pause", "resume", "exports", "_writableTrackingBuffer", "_interopRequireDefault", "require", "_allHeaders", "obj", "__esModule", "default", "OPERATION_TYPE", "exports", "TM_GET_DTC_ADDRESS", "TM_PROPAGATE_XACT", "TM_BEGIN_XACT", "TM_PROMOTE_XACT", "TM_COMMIT_XACT", "TM_ROLLBACK_XACT", "TM_SAVE_XACT", "ISOLATION_LEVEL", "NO_CHANGE", "READ_UNCOMMITTED", "READ_COMMITTED", "REPEATABLE_READ", "SERIALIZABLE", "SNAPSHOT", "isolationLevelByValue", "name", "value", "assertValidIsolationLevel", "isolationLevel", "TypeError", "includes", "Number", "isInteger", "RangeError", "Transaction", "constructor", "outstandingRequestCount", "beginPayload", "txnDescriptor", "buffer", "WritableTrackingBuffer", "writeToTrackingBuffer", "writeUShort", "writeUInt8", "length", "writeString", "Symbol", "iterator", "data", "toString", "commitPayload", "rollbackPayload", "savePayload", "isolationLevelToTSQL", "_net", "_interopRequireDefault", "require", "_nodeUrl", "_abortError", "obj", "__esModule", "default", "connectInParallel", "options", "lookup", "signal", "aborted", "AbortError", "addresses", "lookupAllAddresses", "host", "Promise", "resolve", "reject", "sockets", "Array", "length", "errors", "onError", "err", "push", "removeListener", "onConnect", "destroy", "removeEventListener", "onAbort", "AggregateError", "j", "socket", "i", "len", "net", "connect", "address", "family", "on", "addEventListener", "once", "connectInSequence", "Error", "name", "isIPv6", "isIPv4", "url", "domainToASCII", "all", "name", "exports", "NTLMFlags", "NTLM_NegotiateUnicode", "NTLM_NegotiateOEM", "NTLM_RequestTarget", "NTLM_Unknown9", "NTLM_NegotiateSign", "NTLM_NegotiateSeal", "NTLM_NegotiateDatagram", "NTLM_NegotiateLanManagerKey", "NTLM_Unknown8", "NTLM_NegotiateNTLM", "NTLM_NegotiateNTOnly", "NTLM_Anonymous", "NTLM_NegotiateOemDomainSupplied", "NTLM_NegotiateOemWorkstationSupplied", "NTLM_Unknown6", "NTLM_NegotiateAlwaysSign", "NTLM_TargetTypeDomain", "NTLM_TargetTypeServer", "NTLM_TargetTypeShare", "NTLM_NegotiateExtendedSecurity", "NTLM_NegotiateIdentify", "NTLM_Unknown5", "NTLM_RequestNonNTSessionKey", "NTLM_NegotiateTargetInfo", "NTLM_Unknown4", "NTLM_NegotiateVersion", "NTLM_Unknown3", "NTLM_Unknown2", "NTLM_Unknown1", "NTLM_Negotiate128", "NTLM_NegotiateKeyExchange", "NTLM_Negotiate56", "createNTLMRequest", "options", "domain", "escape", "toUpperCase", "workstation", "type1flags", "fixedData", "Buffer", "alloc", "buffers", "offset", "write", "writeUInt8", "writeUInt32LE", "writeUInt16LE", "length", "push", "from", "concat", "BulkLoadPayload", "constructor", "bulkLoad", "iterator", "rowToPacketTransform", "Symbol", "asyncIterator", "toString", "indent", "exports", "procedures", "Sp_Cursor", "Sp_CursorOpen", "Sp_CursorPrepare", "Sp_CursorExecute", "Sp_CursorPrepExec", "Sp_CursorUnprepare", "Sp_CursorFetch", "Sp_CursorOption", "Sp_CursorClose", "Sp_ExecuteSql", "Sp_Prepare", "Sp_Execute", "Sp_PrepExec", "Sp_PrepExecRpc", "Sp_Unprepare", "_default", "exports", "default", "module", "_", "_request", "_interopRequireDefault", "require", "_errors", "obj", "__esModule", "default", "UnexpectedTokenError", "Error", "constructor", "handler", "token", "name", "exports", "TokenHandler", "onInfoMessage", "onErrorMessage", "onSSPI", "onDatabaseChange", "onLanguageChange", "onCharsetChange", "onSqlCollationChange", "onRoutingChange", "onPacketSizeChange", "onResetConnection", "onBeginTransaction", "onCommitTransaction", "onRollbackTransaction", "onFedAuthInfo", "onFeatureExtAck", "onLoginAck", "onColMetadata", "onOrder", "onRow", "onReturnStatus", "onReturnValue", "onDoneProc", "onDoneInProc", "onDone", "onDatabaseMirroringPartner", "InitialSqlTokenHandler", "connection", "emit", "newValue", "databaseCollation", "messageIo", "packetSize", "transactionDescriptors", "push", "inTransaction", "length", "close", "Login7TokenHandler", "loginAckReceived", "error", "ConnectionError", "message", "isLoginErrorTransient", "transientErrorLookup", "isTransientError", "number", "curTransientRetryCount", "config", "options", "maxRetriesOnTransientErrors", "isTransient", "loginError", "ntlmpacket", "ntlmpacketBuffer", "fedAuthInfoToken", "authentication", "type", "fedAuth", "undefined", "utf8Support", "tdsVersion", "interface", "server", "split", "routingData", "port", "RequestTokenHandler", "request", "errors", "canceled", "RequestError", "state", "class", "serverName", "procName", "lineNumber", "Request", "AggregateError", "useColumnNames", "columns", "Object", "create", "j", "len", "col", "colName", "orderColumns", "rowCollectionOnRequestCompletion", "rows", "rowCollectionOnDone", "rst", "procReturnStatusValue", "value", "paramName", "metadata", "sqlError", "rowCount", "more", "AttentionTokenHandler", "attentionReceived", "attention", "_crypto", "_interopRequireDefault", "require", "_os", "tls", "_interopRequireWildcard", "net", "_dns", "_constants", "_stream", "_identity", "_bulkLoad", "_debug", "_events", "_instanceLookup", "_transientErrorLookup", "_packet", "_preloginPayload", "_login7Payload", "_ntlmPayload", "_request", "_rpcrequestPayload", "_sqlbatchPayload", "_messageIo", "_tokenStreamParser", "_transaction", "_errors", "_connector", "_library", "_tdsVersions", "_message", "_ntlm", "_dataType", "_bulkLoadPayload", "_specialStoredProcedure", "_package", "_url", "_handler", "_getRequireWildcardCache", "e", "WeakMap", "r", "t", "__esModule", "default", "has", "get", "n", "__proto__", "a", "Object", "defineProperty", "getOwnPropertyDescriptor", "u", "prototype", "hasOwnProperty", "call", "i", "set", "obj", "KEEP_ALIVE_INITIAL_DELAY", "DEFAULT_CONNECT_TIMEOUT", "DEFAULT_CLIENT_REQUEST_TIMEOUT", "DEFAULT_CANCEL_TIMEOUT", "DEFAULT_CONNECT_RETRY_INTERVAL", "DEFAULT_PACKET_SIZE", "DEFAULT_TEXTSIZE", "DEFAULT_DATEFIRST", "DEFAULT_PORT", "DEFAULT_TDS_VERSION", "DEFAULT_LANGUAGE", "DEFAULT_DATEFORMAT", "CLEANUP_TYPE", "NORMAL", "REDIRECT", "RETRY", "Connection", "EventEmitter", "constructor", "config", "_cancelAfterRequestSent", "TypeError", "server", "fedAuthRequired", "authentication", "undefined", "type", "options", "domain", "userName", "password", "toUpperCase", "clientId", "tenantId", "token", "clientSecret", "abortTransactionOnError", "appName", "camelCaseColumns", "cancelTimeout", "columnEncryptionKeyCacheTTL", "columnEncryptionSetting", "columnNameReplacer", "connectionRetryInterval", "connectTimeout", "connector", "connectionIsolationLevel", "ISOLATION_LEVEL", "READ_COMMITTED", "cryptoCredentialsDetails", "database", "datefirst", "dateFormat", "debug", "data", "packet", "payload", "enableAnsiNull", "enableAnsiNullDefault", "enableAnsiPadding", "enableAnsiWarnings", "enableArithAbort", "enableConcatNullYieldsNull", "enableCursorCloseOnCommit", "enableImplicitTransactions", "enableNumericRoundabort", "enableQuotedIdentifier", "encrypt", "fallbackToDefaultDb", "encryptionKeyStoreProviders", "instanceName", "isolationLevel", "language", "localAddress", "maxRetriesOnTransientErrors", "multiSubnetFailover", "packetSize", "port", "readOnlyIntent", "requestTimeout", "rowCollectionOnDone", "rowCollectionOnRequestCompletion", "serverName", "serverSupportsColumnEncryption", "tdsVersion", "textsize", "trustedServerNameAE", "trustServerCertificate", "useColumnNames", "useUTC", "workstationId", "lowerCaseGuids", "Error", "assertValidIsolationLevel", "RangeError", "secureContextOptions", "secureOptions", "create", "value", "constants", "SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS", "createDebug", "inTransaction", "transactionDescriptors", "Buffer", "from", "transactionDepth", "isSqlBatch", "closed", "messageBuffer", "alloc", "curTransientRetryCount", "transientErrorLookup", "TransientErrorLookup", "state", "STATE", "INITIALIZED", "messageIo", "sendMessage", "TYPE", "ATTENTION", "createCancelTimer", "connect", "connectListener", "ConnectionError", "name", "onConnect", "err", "removeListener", "onError", "once", "transitionTo", "CONNECTING", "on", "event", "listener", "emit", "args", "close", "FINAL", "initialiseConnection", "signal", "createConnectTimer", "connectOnPort", "instanceLookup", "timeout", "then", "process", "nextTick", "clearConnectTimer", "aborted", "message", "cleanupConnection", "cleanupType", "clearRequestTimer", "clearRetryTimer", "closeConnection", "request", "RequestError", "callback", "loginError", "Debug", "createTokenStreamParser", "handler", "TokenStreamParser", "socketHandlingForSendPreLogin", "socket", "error", "socketError", "socketClose", "socketEnd", "setKeepAlive", "MessageIO", "cleartext", "log", "sendPreLogin", "SENT_PRELOGIN", "wrapWithTls", "throwIfAborted", "Promise", "resolve", "reject", "secureContext", "createSecureContext", "isIP", "encryptOptions", "host", "ALPNProtocols", "servername", "encryptsocket", "onAbort", "destroy", "reason", "removeEventListener", "addEventListener", "customConnector", "connectOpts", "routingData", "connectInParallel", "connectInSequence", "dns", "lookup", "end", "catch", "controller", "AbortController", "connectTimer", "setTimeout", "abort", "clearCancelTimer", "cancelTimer", "createRequestTimer", "requestTimer", "createRetryTimer", "retryTimer", "retryTimeout", "hostPostfix", "routingMessage", "dispatchEvent", "cancel", "clearTimeout", "newState", "exit", "enter", "apply", "getEventHandler", "eventName", "events", "SENT_TLSSSLNEGOTIATION", "code", "REROUTING", "TRANSIENT_FAILURE_RETRY", "major", "minor", "build", "exec", "version", "PreloginPayload", "Number", "subbuild", "PRELOGIN", "toString", "sendLogin7Packet", "Login7Payload", "versions", "clientProgVer", "clientPid", "pid", "connectionId", "clientTimeZone", "Date", "getTimezoneOffset", "clientLcid", "fedAuth", "echo", "workflow", "fedAuthToken", "sspi", "createNTLMRequest", "hostname", "os", "libraryName", "initDbFatal", "LOGIN7", "toBuffer", "sendFedAuthTokenMessage", "accessTokenLen", "byteLength", "offset", "writeUInt32LE", "write", "FEDAUTH_TOKEN", "SENT_LOGIN7_WITH_STANDARD_LOGIN", "sendInitialSql", "SqlBatchPayload", "getInitialSql", "currentTransactionDescriptor", "Message", "SQL_BATCH", "outgoingMessageStream", "Readable", "pipe", "push", "getIsolationLevelText", "join", "processedInitialSql", "execSqlBatch", "makeRequest", "sqlTextOrProcedure", "execSql", "validateParameters", "databaseCollation", "parameters", "TYPES", "NVarChar", "output", "length", "precision", "scale", "makeParamsParameter", "RPC_REQUEST", "RpcRequestPayload", "Procedures", "Sp_ExecuteSql", "newBulkLoad", "table", "callbackOrOptions", "BulkLoad", "execBulkLoad", "bulkLoad", "rows", "executionStarted", "streamingMode", "firstRowWritten", "rowStream", "rowToPacketTransform", "onCancel", "BulkLoadPayload", "Request", "getBulkInsertSql", "BULK_LOAD", "prepare", "Int", "preparing", "handle", "Sp_Prepare", "unprepare", "Sp_Unprepare", "execute", "executeParameters", "len", "parameter", "validate", "Sp_Execute", "callProcedure", "beginTransaction", "transaction", "Transaction", "isolationLevelToTSQL", "TRANSACTION_MANAGER", "beginPayload", "commitTransaction", "commitPayload", "rollbackTransaction", "rollbackPayload", "saveTransaction", "savePayload", "cb", "useSavepoint", "crypto", "randomBytes", "txDone", "done", "LOGGED_IN", "txErr", "packetType", "canceled", "connection", "rowCount", "rst", "payloadStream", "unpipe", "ignore", "paused", "resume", "resetConnection", "resetConnectionOnNextRequest", "SENT_CLIENT_REQUEST", "reset", "READ_UNCOMMITTED", "REPEATABLE_READ", "SERIALIZABLE", "SNAPSHOT", "isTransientError", "AggregateError", "errors", "isTransient", "_default", "exports", "module", "readMessage", "concat", "preloginPayload", "encryptionString", "startTls", "_a", "SENT_LOGIN7_WITH_FEDAUTH", "SENT_LOGIN7_WITH_NTLM", "reconnect", "retry", "Login7TokenHandler", "tokenStreamParser", "loginAckReceived", "LOGGED_IN_SENDING_INITIAL_SQL", "ntlmpacket", "NTLMResponsePayload", "NTLMAUTH_PKT", "fedAuthInfoToken", "stsurl", "spn", "tokenScope", "URL", "credentials", "UsernamePasswordCredential", "msiArgs", "ManagedIdentityCredential", "managedIdentityClientId", "DefaultAzureCredential", "ClientSecretCredential", "tokenResponse", "getToken", "InitialSqlTokenHandler", "RequestTokenHandler", "SENT_ATTENTION", "onResume", "onPause", "pause", "_b", "onEndOfMessage", "_c", "_d", "sqlRequest", "nextState", "AttentionTokenHandler", "attentionReceived", "_bulkLoad", "_interopRequireDefault", "require", "_connection", "_request", "_library", "_errors", "_dataType", "_transaction", "_tdsVersions", "obj", "__esModule", "default", "library", "exports", "name", "connect", "config", "connectListener", "connection", "Connection"]
}
